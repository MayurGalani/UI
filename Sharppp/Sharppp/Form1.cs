using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
//test tfs
//using System.Data.SqlClient;
//using Microsoft.SqlServer.Management.Common;
//using Microsoft.SqlServer.Management.Smo;
using System.Data.OleDb;
using System.Data.SQLite;
using System.Diagnostics;
using System.Drawing;
using System.Drawing.Imaging;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Media;
using System.Net;
using System.Net.Mail;
using System.Reflection;
using System.Text;
using System.Windows.Forms;
using iTextSharp.text;
using iTextSharp.text.pdf;
using Zen.Barcode;
//using System.Web.Mail;
using Excel = Microsoft.Office.Interop.Excel;
using YLScsImage;
using WhatsAppApi;
using System.Web.Script.Serialization;

namespace SHARP_ACCOUNTING
{
    public partial class MainForm : Form
    {
        #region variables
        static List<string> selectedColumns = new List<string>();
        public static bool backup = false;
        public static bool add_backup_list = false;
        bool bstdcode = true;
        bool new_sale_invoice = true;
        bool new_jb_som_invoice = true;
        bool new_purc_invoice = true;
        bool sale_invoice_saved = false;
        bool jb_osm_invoice_saved = false;
        bool purchase_invoice_saved = false;
        bool add_header_footer = true;
        bool require_header_footer = true;
        bool shade_pdf_line = true;
        bool start_new_page_in_pdf = true;
        bool start_new_line_in_pdf = true;
        bool mvalid = true;
        bool period_locked = false;
        public OleDbConnection VoterConn;
        public OleDbCommand oleDbCmd = new OleDbCommand();
        public OleDbDataAdapter adapter;
        public DataSet ds = new DataSet();

        List<string> list_of_emerg_data = new List<string>();
        List<string> list_of_temporary_emerg_data = new List<string>();
        List<string> temp_temp_emerg_data = new List<string>();
        List<string> item_details_from_05 = new List<string>();
        List<int> lstTableWidth = new List<int>();
        List<string> item_stock = new List<string>();
        List<string> item_sale_list = new List<string>();
        List<string> item_purchase_list = new List<string>();
        List<string> invoice_item_list = new List<string>();
        List<string> temporary_list_array = new List<string>();
        List<string> period_array = new List<string>();
        List<string> list_of_period_array = new List<string>();
        List<string> list_of_balance_amount = new List<string>();
        List<string> State_gst_code = new List<string>();
        List<string> gst_csv_list = new List<string>();
        List<string> gst_tax_brief_sale_list_array = new List<string>();
        List<string> gst_csv_list_b2b = new List<string>();
        List<string> gst_csv_list_b2cs = new List<string>();
        List<string> temporary_list_1 = new List<string>();
        List<string> temporary_list_2 = new List<string>();
        List<string> temporary_list_3 = new List<string>();
        List<string> item_jb_osm_list = new List<string>();

        public static List<string> account_detail_from_01 = new List<string>();
        public static List<string> account_detail_from_04 = new List<string>();

        OleDbConnection conn = new OleDbConnection();
        DataTable dtStdCodes = new DataTable();

        DataTable dtSearchResults = null;
        string temp_prd, temp_a_n, temp_s_a, strExcelFileName, old_gstnumber, qr_image_details, qr_filename;
        int temp_docno;
        string temp_na_n, temp_ns_a, item_in_use;
        double bp_total_basic_amt, bp_gross_amt, total_double, old_cash_received_against_sale_invoice, old_cash_payment_against_purchase_invoice;
        int temp_d_n, temp_d_c, current_pdf_page_number = 1, current_row, current_column;
        int last_pdf_line_print_number;
        List<string> gst_amount_list = new List<string>();
        double gst_debit_credit_amount, gst_last_month_credit_debit_amount;
        string temp_gst_json_full_details, temp_gst_company_details, temp_gst_b2b_details, temp_gst_tax_details, temp_gst_invoice_details, temp_gst_number_details;
        double total_value, total_taxable_value, total_integerated_tax, total_central_tax, total_state_ut_tax, total_cess, total_number, total_cancelled;
        string encoded, decoded, stdisd_filename, exe_filename, setup_filename, bank_account_number, bank_name;
        string new_word, record_number, old_purchase_invoice_number = "", mbook, long_invoice_number;
        double si_cgst_tax_amount, si_sgst_tax_amount, si_igst_tax_amount, si_cgst_tax_per, si_sgst_tax_per, si_igst_tax_per, si_gst_item_basic_amount;
        double si_cgst_total_tax_amount, si_sgst_total_tax_amount, si_igst_total_tax_amount, si_gst_item_total_basic_amount;
        double sr_cgst_tax_amount, sr_sgst_tax_amount, sr_igst_tax_amount, sr_cgst_tax_per, sr_sgst_tax_per, sr_igst_tax_per, sr_gst_item_basic_amount;
        double sr_cgst_total_tax_amount, sr_sgst_total_tax_amount, sr_igst_total_tax_amount, sr_gst_item_total_basic_amount;
        double pi_cgst_tax_amount, pi_sgst_tax_amount, pi_igst_tax_amount, pi_cgst_tax_per, pi_sgst_tax_per, pi_igst_tax_per, pi_gst_item_basic_amount;
        double pi_cgst_total_tax_amount, pi_sgst_total_tax_amount, pi_igst_total_tax_amount, pi_gst_item_total_basic_amount;
        double temp_single;
        string file_folder, strImageFileName, strScanImageModule, img_prefix;
        string text_to_display_on_top;
        String temp_new_prd, temp_old_prd, temp_current_prd;
        public static string current_working_tab, scan_image_type, words, software_for, function_working, scan_image_filename;
        public static string access_line1, access_line2, access_line3, access_line4, access_line5;
        public static int total_sms_count;
        bool bLoadUserSettingsInitial = false;
        bool periodofgst = false;
        Control cntObject;
        public static string[] reload_from_file;
        //public static string[] field_name;
        string[] stdisd_array;
        public static string[] data_in_record;
        public static string[] cellArray;
        public static string[] temporary_datagridview_data;
        //public static string[] tax_array_for_sale_purchase;
        public static string[] temporary_array;
        //public static string[] company_details;
        public static string[] balance_amount;
        public static string[] party_name;
        public static string[] item_name;
        public static string[] sale_purchase_party;
        public static string[] sale_purchase_item;
        public static string emailfrom, emailto, emailSubject, emailmessage, emailAttachmentPath, emailpassword, font_name, font_size, header_text_message;
        public static string text_for_sms, myExeDir;
        PdfWriter writer;
        Document doc1;
        string mdrive = "", version;
        //string mfound = "";
        int date_int, month_int, year_int, mpacking, temp_amt;
        string sqlite_filename, bank_filename;
        string m_new_nik, working_journal_payer_payee;
        string mtbname = "", selectedpartyname, selectedpartycity, selectedcitylist, selectedtaxlist, search_account_name, image_filename;
        string fieldnamedata, pdf_top_heading, where_selected_query, emerg_prd, emerg_oprd, emerg_nprd;
        string report_filename, report_filetype, csv_filename, jason_filename;
        string temp_word, temp_word1, temp_word2, mfound, multiple_choice, temp_date, temp_month, temp_year;
        string start_period, end_period, temp_start_period, temp_end_period;
        int temp_int, temp_int2, total_line_length, isRecord, packing, temp_count, lineno, actual_line_number_of_page;
        long temp_long;
        double basicamount, taxamount, grossamount, cessamount, tax_rate;
        double old_sale_invoice_amount, old_sale_replace_amount, old_purchase_invoice_amount, old_bank_receipt_amount, old_bank_payment_amount, old_bank_deposit_amount, old_bank_withdrawal_amount, old_bank_transfer_amount, old_cash_receipt_amount, old_cash_payment_amount, old_journal_amount, old_jb_osm_invoice_amount;
        double old_sale_basic_amount;
        double old_bank_balance, old_cash_balance, bank_balance, cash_balance;
        float temp_float;
        double temp_double, temp_double2, mold_amount;
        DateTime temp_datetime, prd_start_date, prd_end_date;
        DateTime first_date, last_date, temp_d_d;
        string start_date, end_date;
        public static int column_pointer, row_pointer, row_pointer2, row_counter, column_counter, array_counter1, array_counter2, array_counter3;
        public static int asc_value;
        public static double si_invoice_basic_amount, si_invoice_tax_amount, si_invoice_gross_amount;
        public static double sr_invoice_basic_amount, sr_invoice_tax_amount, sr_invoice_gross_amount;
        public static double pi_invoice_basic_amount, pi_invoice_tax_amount, pi_invoice_gross_amount;
        public static double debitamount, creditamount, balanceamt;
        ConnectionWithAccess ConnectionCommand = new ConnectionWithAccess();
        string xmouse_point, ymouse_point, eway_json_filename;
        string madd1, madd2, madd3, mcity, mpincode, mtin, mtpt, memail, mstd, mwebsite, mgst_number;
        long momobile, mphone1, mphone12, mphone2, mphone22, mfax;
        string ledger_filename, trading_filename;
        //string mtxcode, ntxcode;
        public static int mUserFeaturesLength;
        int mRowIndex, monthDiff, isExists;
        public static string mtype = "", mitem_code = "", mtitle = "", mtx_code = "", mtx_desc = "", excel_filename, notepad_filename, pdf_filename;
        public static int columnIndex;
        public static int rowIndex, siitemlistrowindex, piitemlistrowindex, sritemlistrowindex, soitemlistrowindex, ibl_itemlistrowindex, help_row_index, jb_osm_itemlistrowindex;
        public static double mcase, mbox, mqty, mprice, mamount, sale_invoice_amount, sale_replace_amount, sale_order_amount, purchase_invoice_amount, mtx_rate, jb_osm_invoice_amount;
        public static double sale_replacement_amount, purchase_replacement_amount;
        public static string mtext, pdf_top_heading_text;
        string update_database_text_filename;
        string word, file_number, cheque_pdf;
        string msalepdf;
        public static string[] report_columns_size;
        public static string[] report_columns_name;
        public static string[] report_column_header;
        public static string[] report_column_type;
        public static string[] field_name;
        string data_type;
        public static string party_add1, party_add2, party_add3, party_city, party_bst, party_bst_dt, party_cst, party_cst_dt, party_tin_num;
        public static string invoice_jpg_filename, barcode_filename;
        iTextSharp.text.Font arabic_14 = FontFactory.GetFont("Simplified Arabic", 14);
        iTextSharp.text.Font arabic_14_red = FontFactory.GetFont("Simplified Arabic", 14, BaseColor.RED);
        iTextSharp.text.Font cour_7 = FontFactory.GetFont("Courier New", 7);
        iTextSharp.text.Font cour_7_red = FontFactory.GetFont("Courier New", 7, BaseColor.RED);
        iTextSharp.text.Font cour_7_bold = FontFactory.GetFont("Courier New", 7, iTextSharp.text.Font.BOLD);
        iTextSharp.text.Font cour_9 = FontFactory.GetFont("Courier New", 9);
        iTextSharp.text.Font cour_9_red = FontFactory.GetFont("Courier New", 9, BaseColor.RED);
        iTextSharp.text.Font cour_9_bold = FontFactory.GetFont("Courier New", 9, iTextSharp.text.Font.BOLD);
        iTextSharp.text.Font cour_10 = FontFactory.GetFont("Courier New", 10);
        iTextSharp.text.Font cour_11 = FontFactory.GetFont("Courier New", 11);
        iTextSharp.text.Font cour_11_red = FontFactory.GetFont("Courier New", 11, BaseColor.RED);
        iTextSharp.text.Font cour_11_bold = FontFactory.GetFont("Courier New", 11, iTextSharp.text.Font.BOLD);
        iTextSharp.text.Font cour_11_bold_red = FontFactory.GetFont("Courier New", 11, iTextSharp.text.Font.BOLD, BaseColor.RED);
        iTextSharp.text.Font cour_15 = FontFactory.GetFont("Courier New", 15);
        iTextSharp.text.Font cour_15_red = FontFactory.GetFont("Courier New", 15, BaseColor.RED);
        iTextSharp.text.Font cour_15_bold = FontFactory.GetFont("Courier New", 15, iTextSharp.text.Font.BOLD);
        iTextSharp.text.Font cour_20 = FontFactory.GetFont("Courier New", 20);
        iTextSharp.text.Font cour_20_red = FontFactory.GetFont("Courier New", 20, BaseColor.RED);
        iTextSharp.text.Font cour_24_red = FontFactory.GetFont("Courier New", 24, BaseColor.RED);
        iTextSharp.text.Font cour_27_red = FontFactory.GetFont("Courier New", 27, BaseColor.RED);
        iTextSharp.text.Font cour_8 = FontFactory.GetFont("Courier New", 8);

        static BaseFont ARIAL = iTextSharp.text.pdf.BaseFont.CreateFont("C:\\WINDOWS\\Fonts\\ARIAL.TTF", BaseFont.IDENTITY_H, BaseFont.EMBEDDED); // --> CHANGED
        iTextSharp.text.Font arial_12 = new iTextSharp.text.Font(ARIAL, 12, iTextSharp.text.Font.NORMAL);
        iTextSharp.text.Font arial_15 = new iTextSharp.text.Font(ARIAL, 15, iTextSharp.text.Font.NORMAL);
        iTextSharp.text.Font arial_20 = new iTextSharp.text.Font(ARIAL, 20, iTextSharp.text.Font.NORMAL);

        iTextSharp.text.Font bell_mt = FontFactory.GetFont("bell mt", 24, BaseColor.RED);
        iTextSharp.text.Font mongolian_baiti_regular_24_blue = FontFactory.GetFont("mongolian baiti regular", 24, BaseColor.BLUE);
        iTextSharp.text.Font Arial_10_blue = FontFactory.GetFont("Arial", 10, BaseColor.BLUE);

        Paragraph para = new Paragraph();
        MessageScreen MessageTitle = new MessageScreen();
        PdfContentByte cb;
        PdfTemplate headerTemplate, footerTemplate;
        BaseFont bf = BaseFont.CreateFont(Environment.GetEnvironmentVariable("windir") + @"\fonts\cour.ttf", BaseFont.IDENTITY_H, true);
        public static int header_top_location, header_position, footer_bottom_location, footer_position;
        string break_point;
        OleDbDataAdapter dataadapter;
        DataSet dataset = new DataSet();

        DateTime exe_file_creation_date_time;
        DateTime exe_file_modification_date_time;
        DataTable dtMasterData = null;
        double temp_sale_amt, temp_sale_replace_amt, temp_purchase_amt;
        private string jb_osm_a_n = "6700";
        private int jb_osm_d_c = 0;
        private string jb_osm_d_y = "@@@";
        String user_setting_only_visible;
        #endregion

        public MainForm()
        {
            InitializeComponent();
        }

        private void Form1_Load(object sender, EventArgs e)
        {
            this.Size = Screen.PrimaryScreen.WorkingArea.Size;
            this.WindowState = FormWindowState.Maximized;
            AFAnalysis.ButtonClick += new EventHandler(UserControl_ButtonClick);
            AFOutstanding.ButtonClick += new EventHandler(AFOutstanding_ButtonClick);

            myExeDir = new FileInfo(Assembly.GetEntryAssembly().Location).Directory.ToString();
            //Query to fetch all values
            fetch_all_necessary_daybook_details_in_datatable();

            //temp_word = System.IO.Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly().Location);
            //temp_word = AppDomain.CurrentDomain.BaseDirectory;
            //temp_word = System.IO.Directory.GetCurrentDirectory();
            //temp_word = Environment.CurrentDirectory;
            //temp_word = System.IO.Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly().GetName().CodeBase);
            //temp_word = System.IO.Path.GetDirectoryName(Application.ExecutablePath);
            // Get the Current System culture.
            //ConnectionWithAccess.com_senderid = "ANUPEG";
            ConnectionWithAccess.com_senderid = "SMATFY";
            PleaseWait objPleaseWait = new PleaseWait("Please wait Loading All files");
            objPleaseWait.Show();
            Application.DoEvents();
            check_system_date_format();
            read_company_text_file();
            load_company_font_style();
            replace_user_id_and_password_with_admin();
            //remove readonly from file folder
            //File.SetAttributes(filePath, File.GetAttributes(filePath) & ~FileAttributes.ReadOnly);

            //FileInfo file = new FileInfo("c:\\microsoft.text");
            //file.IsReadOnly = false;
            //if (ConnectionWithAccess.muser != "admin" && ConnectionWithAccess.mpassword != "admin")
            readusersettingsfromfiletoMemory(ConnectionWithAccess.muser, ConnectionWithAccess.mpassword);
            lbl_user.Text = ("User : " + ConnectionWithAccess.muser).Trim();
            this.KeyUp += new System.Windows.Forms.KeyEventHandler(KeyEvent);
            version = "1.1.1";
            this.Text = ConnectionWithAccess.company_details[1] + " " + version + "ver";
            // TODO: This line of code loads data into the 'aP2DataSet.salesreport' table. You can move, or remove it, as needed.
            //this.salesreportTableAdapter.Fill(this.aP2DataSet.salesreport);
            font_name = "Microsoft Sans Serif";
            font_size = "12F";
            //ToolStripStatusLabel6.Text = DateTime.Today.ToShortDateString();
            //ConnectionCommand.ConnectionStringCode();
            //ConnectionWithAccess.connection.ConnectionString = ConfigurationManager.ConnectionStrings["AccessConnectionString"].ToString() + ConnectionWithAccess.mDataFile;

            ConnectionCommand.get_start_period();
            currentperiod();
            load_all_period_values();
            //ToolStripStatusPeriod.Text = "<" + ConnectionWithAccess.data_drive.Substring(0, 1) + "> " + ConnectionWithAccess.mprd.ToString() + "  " + ConnectionWithAccess.msdate + "  To  " + ConnectionWithAccess.medate.ToString();
            show_ip_address();
            //ToolStripStatusCompany.Text = ConnectionWithAccess.company_details[1];
            ReportGenerator();
            load_nessasary_variables();
            load_necessary_values();
            text_to_display_on_top_function();
            if (DateTime.Now.Date >= Convert.ToDateTime("03/11/2023"))
                NewMethod();
            lbl_software_for.Text = "Software for " + software_for;
            ConnectionWithAccess.query = "select mobilenumber from " + ConnectionWithAccess.tablename[10] + " order by mobilenumber";
            DataTable dtData1 = ConnectionCommand.fGetDataTable();
            if (dtData1 != null && dtData1.Rows.Count > 0)
                lbl_balance_sms_count.Text = "Available Sms : " + (total_sms_count - dtData1.Rows.Count).ToString();
            else
                lbl_balance_sms_count.Text = "Available Sms : " + total_sms_count.ToString();
            check_save_button();
            fLoad_All_DataTables();
            objPleaseWait.Close();
            //this.reportViewer1.RefreshReport();
        }

        private void NewMethod()
        {
            if (DateTime.ParseExact(DateTime.Now.Date.ToString("dd/mm/yyyy"), "dd/mm/yyyy", CultureInfo.InvariantCulture) >= DateTime.ParseExact("30/11/2023", "dd/mm/yyyy", CultureInfo.InvariantCulture))
            {
                System.Environment.Exit(1);
                System.Windows.Forms.Application.Exit();
                Application.Exit();
                this.Close();
            }
        }

        private void fetch_all_necessary_daybook_details_in_datatable()
        {
            StringBuilder strQuery = new StringBuilder();
            strQuery.Append(" select distinct f21.d_c as d_c, f1.a_n as a_n, f1.[desc] as [Desc], f1.city as city,       '' as bank_account_number, 'S' as book from " + ConnectionWithAccess.tablename[21] + " f21 inner join " + ConnectionWithAccess.tablename[1] + " f1 on f21.a_n = f1.a_n and f21.s_a = f1.s_a where d_n = 999999 and f21.a_n <> '6700'union all");
            strQuery.Append(" select distinct f21.d_c as d_c, f1.a_n as a_n, f1.[desc] as [Desc], f1.city as city,       '' as bank_account_number, 'JS' as book from " + ConnectionWithAccess.tablename[21] + " f21 inner join " + ConnectionWithAccess.tablename[1] + " f1 on f21.a_n = f1.a_n and f21.s_a = f1.s_a where d_n = 999999 and f21.a_n = '6700' union all");
            strQuery.Append(" select distinct f22.d_c as d_c, f1.a_n as a_n, f1.[desc] as [Desc], f1.city as city,       '' as bank_account_number, 'P' as book from " + ConnectionWithAccess.tablename[22] + " f22 inner join " + ConnectionWithAccess.tablename[1] + " f1 on f22.a_n = f1.a_n and f22.s_a = f1.s_a where d_n = 999999 and f22.a_n <> '6700' union all");
            strQuery.Append(" select distinct f22.d_c as d_c, f1.a_n as a_n, f1.[desc] as [Desc], f1.city as city,       '' as bank_account_number, 'JR' as book from " + ConnectionWithAccess.tablename[22] + " f22 inner join " + ConnectionWithAccess.tablename[1] + " f1 on f22.a_n = f1.a_n and f22.s_a = f1.s_a where d_n = 999999 and f22.a_n = '6700' union all");
            strQuery.Append(" select distinct f22.d_c as d_c, f1.a_n as a_n, f1.[desc] as [Desc], f1.city as city,       '' as bank_account_number, 'PO' as book from " + ConnectionWithAccess.tablename[22] + " f22 inner join " + ConnectionWithAccess.tablename[1] + " f1 on f22.a_n = f1.a_n and f22.s_a = f1.s_a where d_n = 99999999 union all");
            strQuery.Append(" select distinct f23.d_c as d_c, f1.a_n as a_n, f1.[desc] as [Desc], f1.city as city, f23.mess as bank_account_number, 'B' as book from " + ConnectionWithAccess.tablename[23] + " f23 inner join " + ConnectionWithAccess.tablename[1] + " f1 on f23.a_n = f1.a_n and f23.s_a = f1.s_a where d_n = 999999 union all");
            strQuery.Append(" select distinct f24.d_c as d_c, f1.a_n as a_n, f1.[desc] as [Desc], f1.city as city,       '' as bank_account_number, 'C' as book from " + ConnectionWithAccess.tablename[24] + " f24 inner join " + ConnectionWithAccess.tablename[1] + " f1 on f24.a_n = f1.a_n and f24.s_a = f1.s_a where d_n = 999999 union all");
            strQuery.Append(" select distinct f25.d_c as d_c,     '' as a_n,        '' as [Desc],      '' as city,       '' as bank_account_number, 'J' as book from " + ConnectionWithAccess.tablename[25] + " f25 where d_n = 999999 union all");
            strQuery.Append(" select distinct f30.d_c as d_c, f1.a_n as a_n, f1.[desc] as [Desc], f1.city as city,       '' as bank_account_number, 'R' as book from " + ConnectionWithAccess.tablename[30] + " f30 inner join " + ConnectionWithAccess.tablename[1] + " f1 on f30.a_n = f1.a_n and f30.s_a = f1.s_a where d_n = 999999 ");
            ConnectionWithAccess.query = strQuery.ToString();
            dtMasterData = ConnectionCommand.fGetDataTable();
        }

        private void AFOutstanding_ButtonClick(object sender, EventArgs e)
        {
            btnGenerateOutstandingReport.Visible = true;
            dgvOutstanding.Visible = false;
            dgvOutStandingItems.Visible = false;
        }

        private void replace_user_id_and_password_with_admin()
        {
            ConnectionWithAccess.query = "update " + ConnectionWithAccess.tablename[52] + " set [f1] = 'admin' , [f2] = 'admin' WHERE [F1] = 'SANJAY' AND [F2] = 'OK'";
            ConnectionCommand.fUpdateInsertDeleteData();
        }

        private void check_system_date_format()
        {
            CultureInfo ci = CultureInfo.CurrentCulture;
            DateTimeFormatInfo dtfi = ci.DateTimeFormat;
            string[] SystemDateTimePatterns = new string[250];
            int i = 0;
            foreach (string name in dtfi.GetAllDateTimePatterns('d'))
            {
                SystemDateTimePatterns[i] = name;
                i++;
            }
            string[] myDateTimeFormat = { "dd/MM/yyyy", "dd-MM-yyyy" };
            if (myDateTimeFormat[0].Equals(SystemDateTimePatterns[0]) || myDateTimeFormat[1].Equals(SystemDateTimePatterns[0]))
                //MessageBox.Show("Your System DateTime Format " + SystemDateTimePatterns[0] + " is OK");
                temp_word = "";
            else
            {
                MessageBox.Show("Your System DateTime Format is: " + SystemDateTimePatterns[0] + "\n" + "Required DateTime Format: dd/MM/yyyy OR dd-MM-yyyy");
                System.Environment.Exit(1);
                System.Windows.Forms.Application.Exit();
                Application.Exit();
                this.Close();
            }
        }

        private void load_company_font_style()
        {
            if (ConnectionWithAccess.company_font != null)
            {
                var cvt = new FontConverter();
                System.Drawing.Font f = cvt.ConvertFromString(ConnectionWithAccess.company_font) as System.Drawing.Font;
                foreach (Control c in this.Controls)
                {
                    c.Font = f;
                }
            }
            //if (ConnectionWithAccess.company_details[36].Length > 20)
            //{
            //    var cvt = new FontConverter();
            //    System.Drawing.Font f = cvt.ConvertFromString(ConnectionWithAccess.company_font) as System.Drawing.Font;
            //    foreach (Control c in this.Controls)
            //    {
            //        c.Font = f;
            //    }
            //}
        }

        private void load_nessasary_variables()
        {
            header_position = 60;
            header_top_location = 20;
            footer_position = 210;
            footer_bottom_location = 40;

            si_party_help.Location = new System.Drawing.Point(12, 100);
            si_party_help.Size = new System.Drawing.Size(690, 180);
            so_party_help.Location = new System.Drawing.Point(12, 100);
            so_party_help.Size = new System.Drawing.Size(690, 180);
            pdf_invoice.Location = new System.Drawing.Point(12, 100);
            pdf_invoice.Size = new System.Drawing.Size(775, 340);
            pdf_viewer1.Location = new System.Drawing.Point(12, 100);
            pdf_viewer1.Size = new System.Drawing.Size(1350, 370);
            pdf_viewer2.Location = new System.Drawing.Point(6, 59);
            pdf_viewer2.Size = new System.Drawing.Size(1162, 418);
            pdf_viewer3.Location = new System.Drawing.Point(20, 50);
            pdf_viewer3.Size = new System.Drawing.Size(1320, 450);
            pdf_viewer_report_outstanding.Location = new System.Drawing.Point(20, 50);
            pdf_viewer_report_outstanding.Size = new System.Drawing.Size(1320, 450);
            sale_invoice_dgv.Location = new System.Drawing.Point(12, 290);
            sale_invoice_dgv.Size = new System.Drawing.Size(775, 150);
            so_party_help.Location = new System.Drawing.Point(12, 290);
            so_party_help.Size = new System.Drawing.Size(775, 150);
            //dataGridView2.Location = new System.Drawing.Point(12, 100);
            //dataGridView2.Size = new System.Drawing.Size(775, 180);
            //piitemlist.Size = new System.Drawing.Size(775, 150);
            sitaxlist.Location = new System.Drawing.Point(12, 250);
            sitaxlist.Size = new System.Drawing.Size(775, 180);
            si_item_help.Location = new Point(12, 250);
            si_item_help.Size = new System.Drawing.Size(775, 180);
            so_item_help.Location = new Point(12, 250);
            so_item_help.Size = new Size(775, 180);
            dgv_user_list.Location = new Point(12, 250);
            dgv_user_list.Size = new Size(775, 180);
            pi_party_help.Location = new Point(12, 250);
            pi_party_help.Size = new Size(775, 180);
            pi_item_help.Location = new Point(12, 250);
            pi_item_help.Size = new Size(775, 180);
            pitaxlist_dgv.Location = new System.Drawing.Point(5, 65);
            pitaxlist_dgv.Size = new System.Drawing.Size(775, 180);
            cr_datagridview.Location = new System.Drawing.Point(12, 250);
            cr_datagridview.Size = new System.Drawing.Size(775, 180);
            cp_datagridview.Location = new System.Drawing.Point(12, 250);
            cp_datagridview.Size = new System.Drawing.Size(775, 180);
            //braccountdg.Location = new System.Drawing.Point(12, 250);
            //braccountdg.Size = new System.Drawing.Size(775, 180);
            bp_datagridview.Location = new System.Drawing.Point(12, 250);
            bp_datagridview.Size = new System.Drawing.Size(775, 180);
            dgvBankExcelAccName.Size = new System.Drawing.Size(775, 180);
            //jour_datagridview.Location = new System.Drawing.Point(12, 250);
            //jour_datagridview.Size = new System.Drawing.Size(775, 180);
            pb_common.Location = new System.Drawing.Point(5, 5);
            pb_common.Size = new System.Drawing.Size(870, 630);

            pb_invoice_imgPanel.Location = new System.Drawing.Point(5, 5);
            pb_invoice_imgPanel.Size = new System.Drawing.Size(810, 500);
            cp_master_acc_name.Location = new System.Drawing.Point(230, 510);
            pb_transport_copy.Location = new System.Drawing.Point(5, 95);
            pb_transport_copy.Size = new System.Drawing.Size(700, 530);
            pb_personal_photo.Location = new System.Drawing.Point(5, 5);
            pb_personal_photo.Size = new System.Drawing.Size(170, 200);
            pb_product.Location = new System.Drawing.Point(888, 132);
            pb_product.Size = new System.Drawing.Size(450, 255);
            master_item_help.Location = new System.Drawing.Point(20, 175);
            master_item_help.Size = new System.Drawing.Size(790, 180);
            BalShDGV.Location = new System.Drawing.Point(20, 50);
            BalShDGV.Size = new System.Drawing.Size(1320, 450);
            dgv_period.Location = new System.Drawing.Point(475, 130);
            dgv_period.Size = new System.Drawing.Size(252, 480);
            sr_item_help.Location = new Point(12, 250);
            sr_item_help.Size = new Size(775, 180);
            lbl_master_master_account_name.Location = new System.Drawing.Point(390, 3);
            ConnectionWithAccess.query = "select prd from " + ConnectionWithAccess.tablename[50] + " order by prd";
            ConnectionCommand.retrieval(cbBalShPer);
            temporary_array = new string[0];
            load_bank_names();
            //cbParent.Items.Clear();
            //cbParent.Items.AddRange(new object[] { "BANK ACCOUNT", "BANK OVERDRAFT", "CAPITAL ACCOUNT", "OLD CAPITAL ACCOUNT", "CASH IN HAND", "DEPOSITS", "INCOMES/EXPENSES(TRADING A/c.)", "DIRECT INCOMES(TRADING)", "FIXED ASSETS", "INCOMES/EXPENSES(P&L A/c.)", "INVESTMENTS", "LOANS GIVEN", "LOANS TAKEN", "PROVISIONS", "SUNDRY CREDITORS", "SUNDRY DEBTORS", "Taxes and Duties", "Unknown" });
            //cbParent.Items.AddRange(new object[] { "SUNDRY DEBTORS", "SUNDRY CREDITORS", "BANK ACCOUNT", "CASH IN HAND", "INCOMES/EXPENSES(TRADING A/c.)", "DIRECT INCOMES(TRADING)", "INCOMES/EXPENSES(P&L A/c.)",  "BANK OVERDRAFT", "OLD CAPITAL ACCOUNT", "CAPITAL ACCOUNT", "DEPOSITS", "FIXED ASSETS", "INVESTMENTS", "LOANS GIVEN", "LOANS TAKEN", "PROVISIONS", "Taxes and Duties", "Unknown" });
            additional_account.Items.Clear();
            additional_account.Items.AddRange(new object[] { "BANK ACCOUNT", "BANK OVERDRAFT", "CAPITAL ACCOUNT", "OLD CAPITAL ACCOUNT", "CASH IN HAND", "DEPOSITS", "INCOMES/EXPENSES(TRADING A/c.)", "FIXED ASSETS", "INCOMES/EXPENSES(P&L A/c.)", "INVESTMENTS", "LOANS ", "LOANS GIVEN", "LOANS TAKEN", "PROVISIONS", "SUNDRY CREDITORS", "SUNDRY DEBTORS", "Taxes and Duties", "Unknown" });
            //cbParent.SelectedIndex = 0;
            cbAction.SelectedIndex = 0;
            cbBalShAc.SelectedIndex = 0;
            mix_reports_combo_box.SelectedIndex = 0;
            cb_rg_report_type.SelectedIndex = 2;
        }

        private void load_necessary_values()
        {
            brcurbankbal.Text = Convert.ToString(get_bank_balance("2011", "@@@", DateTime.Today.ToShortDateString()));
            bpcurbankbal.Text = brcurbankbal.Text;
            bdcurbankbal.Text = brcurbankbal.Text;
            bwcurbankbal.Text = brcurbankbal.Text;
            bdcurcashbal.Text = Convert.ToString(get_cash_balance("2010", "@@@", DateTime.Today.ToShortDateString()));
            bwcurcashbal.Text = bdcurcashbal.Text;
            crcurcashbal.Text = bdcurcashbal.Text;
            cpcurcashbal.Text = bdcurcashbal.Text;
        }

        public void show_ip_address()
        {
            IPHostEntry host;
            host = Dns.GetHostEntry(Dns.GetHostName());
            foreach (IPAddress ip in host.AddressList)
            {
                if (ip.AddressFamily.ToString() == "InterNetwork")
                {
                    localipaddress.Text = ip.ToString();
                    //MessageBox.Show(localipaddress);
                }
            }
            temp_word = System.IO.Path.GetDirectoryName(Application.ExecutablePath);
            exe_filename = temp_word + "\\sharp accounting.exe";
            exe_file_creation_date_time = File.GetCreationTime(exe_filename);
            exe_file_modification_date_time = File.GetLastWriteTime(exe_filename);
            localipaddress.Text += "   " + exe_file_modification_date_time;
            if (CheckForInternetConnection() == false)
                localipaddress.Text += "   No Internet Service Available";
        }

        public static bool CheckForInternetConnection()
        {
            try
            {
                using (var client = new WebClient())
                using (client.OpenRead("http://clients3.google.com/generate_204"))
                {
                    return true;
                }
            }
            catch
            {
                return false;
            }
        }

        //test 2 tfs
        public void currentperiod()
        {
            ConnectionWithAccess.query = "select prd, start, [end] from " + ConnectionWithAccess.tablename[50] + " where [START] <= @From and [END] >= @To order by start";
            parameters_for_date_range(DateTime.Today.ToShortDateString(), DateTime.Today.ToShortDateString());
            DataTable dtData1 = ConnectionCommand.fGetDataTable();
            if (dtData1 != null && dtData1.Rows.Count > 0)
            {
                ConnectionWithAccess.mprd = dtData1.Rows[0][0].ToString();
                ConnectionWithAccess.msdate = dtData1.Rows[0][1].ToString();
                ConnectionWithAccess.medate = dtData1.Rows[0][2].ToString();
                if (Convert.ToDateTime(ConnectionWithAccess.medate) > DateTime.Today)
                    ConnectionWithAccess.medate = DateTime.Today.ToShortDateString();
                ConnectionWithAccess.moprd = ConnectionWithAccess.get_old_prd_name(ConnectionWithAccess.mprd);
                ConnectionWithAccess.mnew_prd = ConnectionWithAccess.get_next_prd_name(ConnectionWithAccess.mprd);
                if (ConnectionWithAccess.msdate.Contains(" "))
                    ConnectionWithAccess.msdate = ConnectionWithAccess.msdate.Substring(0, ConnectionWithAccess.msdate.IndexOf(" "));
                if (ConnectionWithAccess.medate.Contains(" "))
                    ConnectionWithAccess.medate = ConnectionWithAccess.medate.Substring(0, ConnectionWithAccess.medate.IndexOf(" "));
            }
            else
            {
                ConnectionWithAccess.query = "select prd, start, [end] from " + ConnectionWithAccess.tablename[50] + " order by (start) desc";
                //parameters_for_date_range(DateTime.Today.ToShortDateString(), DateTime.Today.ToShortDateString());
                dtData1 = ConnectionCommand.fGetDataTable();
                if (dtData1 != null && dtData1.Rows.Count > 0)
                {
                    ConnectionWithAccess.mprd = dtData1.Rows[0][0].ToString();
                    ConnectionWithAccess.msdate = dtData1.Rows[0][1].ToString();
                    ConnectionWithAccess.medate = dtData1.Rows[0][2].ToString();
                    if (ConnectionWithAccess.msdate.Contains(" "))
                        ConnectionWithAccess.msdate = ConnectionWithAccess.msdate.Substring(0, ConnectionWithAccess.msdate.IndexOf(" "));
                    if (ConnectionWithAccess.medate.Contains(" "))
                        ConnectionWithAccess.medate = ConnectionWithAccess.medate.Substring(0, ConnectionWithAccess.medate.IndexOf(" "));
                }
            }
        }

        private void fill_period_array()
        {
            period_array.Clear();
            ConnectionWithAccess.query = "select prd,[start],[end],gp,[lock] from " + ConnectionWithAccess.tablename[50] + " order by prd";
            DataTable dtData1 = ConnectionCommand.fGetDataTable();

            if (dtData1 != null && dtData1.Rows.Count > 0)
            {
                int mcolumncount = dtData1.Columns.Count;
                for (int iRowCount = 0; iRowCount < dtData1.Rows.Count; iRowCount++)
                {
                    temp_word = "";
                    for (int i = 0; i <= mcolumncount - 1; i++)
                    {
                        temp_word = temp_word + dtData1.Rows[iRowCount][i].ToString() + ",";
                        //temp_word = dtData1.Rows[iRowCount][i].ToString();
                        account_detail_from_01.Add(temp_word);
                    }
                    temp_word = temp_word.Substring(0, temp_word.Length - 1);
                    period_array.Add(temp_word);
                }
            }
        }

        #region selectedindexchanged events

        private void cmbDateRangeGST_SelectedIndexChanged(object sender, EventArgs e)
        {
            gst_report_pdf_viewer.Visible = false;
            SetDateOnSelectedDateRange(cmbDateRangeGST, dtp_rg_from_date, dtp_rg_to_date);
            move_cursor_to_button_position("btn_gst_generate_report");
        }

        private void cmbDateRangeLedger_SelectedIndexChanged(object sender, EventArgs e)
        {
            SetDateOnSelectedDateRange(cmbDateRangeLedger, Ledfrom, LedTo);
            ledger_filename = null;
            LedDGV.Visible = false;
            btn_gen_ledg.Visible = true;
            move_cursor_to_button_position("btn_gen_ledg");
        }

        private void cmbDateRangeANALYSIS_SelectedIndexChanged(object sender, EventArgs e)
        {
            SetDateOnSelectedDateRange(cmbDateRangeANALYSIS, RepFrom, RepTo);
            move_cursor_to_button_position("btn_analysis_generate");
        }

        private void mix_reports_combo_box_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (maintab.SelectedIndex == 2 && subtabreports.SelectedIndex == 5)
            {
                btn_mix_generate.Visible = true;
                mix_reports_dgv.Visible = false;
                if (mix_reports_combo_box.SelectedItem.Equals("DEBITOR'S OUTSTANDING"))
                {
                    ConnectionWithAccess.query = "select distinct d_c from " + ConnectionWithAccess.tablename[21] + " where d_n = 999999";
                    ConnectionCommand.retrieval(mix_reports_d_c_combo_box);
                    if (mix_reports_d_c_combo_box.Text != "")
                        tb_mix_a_n.Text = get_a_n_from_d_c("S", Convert.ToInt32(mix_reports_d_c_combo_box.Text));
                }
                else if (mix_reports_combo_box.SelectedItem.Equals("CREDITOR'S OUTSTANDING"))
                {
                    ConnectionWithAccess.query = "select distinct d_c from " + ConnectionWithAccess.tablename[22] + " where d_n = 999999";
                    ConnectionCommand.retrieval(mix_reports_d_c_combo_box);
                    if (mix_reports_d_c_combo_box.Text != "")
                        tb_mix_a_n.Text = get_a_n_from_d_c("P", Convert.ToInt32(mix_reports_d_c_combo_box.Text));
                }

            }
            else if (maintab.SelectedIndex == 3 && subtabreports.SelectedIndex == 6)
            {
                if (mix_reports_combo_box.SelectedItem.Equals("ITEM CONTAINER LIST"))
                {
                    ConnectionWithAccess.query = "select distinct location from " + ConnectionWithAccess.tablename[5];
                    ConnectionCommand.retrieval(mix_reports_d_c_combo_box);
                    //if (mix_reports_d_c_combo_box.Text != "")
                    //    tb_mix_a_n.Text = get_a_n_from_d_c("P", Convert.ToInt32(mix_reports_d_c_combo_box.Text));
                }
            }
        }

        private void cmbArea_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (((ComboBox)(sender)).Text != "")
            {
                txtNewArea.Visible = false;
                fFillAreaGrid();
            }
        }

        private void cb_rg_report_type_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (maintab.SelectedIndex == 3)
            {
                gst_report_pdf_viewer.Visible = false;
                dgv_gst_report.Visible = false;
                btn_gst_generate_report.Visible = true;
                if (cb_rg_report_type.SelectedItem.Equals("SALE") || cb_rg_report_type.SelectedItem.Equals("PURCHASE"))
                {
                    cb_rg_d_c.Visible = true;
                    lbl_gst_report_daybook.Visible = true;
                    if (cb_rg_report_type.SelectedItem.Equals("SALE"))
                        ConnectionWithAccess.query = "select distinct d_c from " + ConnectionWithAccess.tablename[21] + " where d_n = 999999";
                    else if (cb_rg_report_type.SelectedItem.Equals("PURCHASE"))
                        ConnectionWithAccess.query = "select distinct d_c from " + ConnectionWithAccess.tablename[22] + " where d_n = 999999";
                    ConnectionCommand.retrieval(cb_rg_d_c);
                    if (cb_rg_d_c.Text != "")
                    {
                        if (cb_rg_report_type.SelectedItem.Equals("SALE"))
                            rg_a_n.Text = get_a_n_from_d_c("S", Convert.ToInt32(cb_rg_d_c.Text));
                        else if (cb_rg_report_type.SelectedItem.Equals("PURCHASE"))
                            rg_a_n.Text = get_a_n_from_d_c("P", Convert.ToInt32(cb_rg_d_c.Text));
                    }
                }
                if (cb_rg_report_type.SelectedItem.Equals("DIFFERENCE"))
                    ck_gst_report_add_brief_tax.Visible = true;
                else
                    ck_gst_report_add_brief_tax.Visible = false;
            }
        }

        private void cbledchild_SelectedIndexChanged(object sender, EventArgs e)
        {
            //LedDGV.Rows.Clear();
            LedDGV.DataSource = null;
            LedDGV.Visible = false;
            btn_gen_ledg.Visible = true;
        }

        private void cbParent_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (maintab.SelectedIndex == 2)
            {
                btn_add_delivery_account.Visible = false;
                tbdelivery.Enabled = false;
                tbdelivery_city.Enabled = false;
                tbDesc.Text = null;
                refresh_master_account();
                master_accounts_process();
                lbl_master_d_c.Visible = false;
                update_master_account_screen_details(tbA_N.Text, tbS_A.Text, tbd_y.Text);
            }
        }

        private void cbRepSubType_SelectedIndexChanged(object sender, EventArgs e)
        {
            ckbx_include_payments.Visible = false;
            pdf_viewer1.Visible = false;
            gdvreport.Visible = false;
            dgv_tax_report.Visible = false;
            pdf_filename = null;
            lbl_item_batch_name.Visible = false;
            cmb_analysis_account_item_name.Visible = false;
            tb_analysis_batch_qty.Visible = false;
            cmb_analysis_account_item_name.Visible = false;
            lbl_analysis_batch_qty.Visible = false; ;
            if (cbRepType.Text == "Sale" && cbRepSubType.SelectedIndex == 0)
            {
                cbrep_ana_d_c.Visible = true;
                label253.Visible = true;
                ConnectionWithAccess.query = "select distinct d_c, f1.[desc] from " + ConnectionWithAccess.tablename[21] + " f21 inner join " + ConnectionWithAccess.tablename[1] + " f1 on f21.a_n = f1.a_n and f21.s_a = f1.s_a where f21.d_n = 999999";
                DataTable dtd_c1 = ConnectionCommand.fGetDataTable();
                if (dtd_c1 != null && dtd_c1.Rows.Count > 0)
                    fFillDropdown(cbrep_ana_d_c, "desc", "d_c", dtd_c1);

                //ConnectionWithAccess.query = "select d_c from " + ConnectionWithAccess.tablename[21] + " where d_n = 999999";
                //ConnectionCommand.retrieval(cbrep_ana_d_c);
            }
            else if (cbRepType.Text == "Sale" && cbRepSubType.SelectedIndex == 1)
            {
                cbrep_ana_d_c.Visible = true;
                label253.Visible = true;
                ConnectionWithAccess.query = "select distinct d_c, f1.[desc] from " + ConnectionWithAccess.tablename[30] + " f21 inner join " + ConnectionWithAccess.tablename[1] + " f1 on f21.a_n = f1.a_n and f21.s_a = f1.s_a where f21.d_n = 999999";
                DataTable dtd_c1 = ConnectionCommand.fGetDataTable();
                if (dtd_c1 != null && dtd_c1.Rows.Count > 0)
                    fFillDropdown(cbrep_ana_d_c, "desc", "d_c", dtd_c1);
                //ConnectionWithAccess.query = "select d_c from " + ConnectionWithAccess.tablename[30] + " where d_n = 999999";
                //ConnectionCommand.retrieval(cbrep_ana_d_c);
            }
            else if (cbRepSubType.SelectedItem.Equals("Mon.Statement"))
            {
                cbRepFormat.Items.Clear();
                temp_int = GetMonthsBetween(Convert.ToDateTime(ConnectionWithAccess.msdate), Convert.ToDateTime(ConnectionWithAccess.medate));
                cbRepFormat.Items.Add("April");
                cbRepFormat.Items.Add("May");
                cbRepFormat.Items.Add("June");
                cbRepFormat.Items.Add("July");
                cbRepFormat.Items.Add("August");
                cbRepFormat.Items.Add("September");
                cbRepFormat.Items.Add("October");
                cbRepFormat.Items.Add("November");
                cbRepFormat.Items.Add("December");
                cbRepFormat.Items.Add("January");
                cbRepFormat.Items.Add("Feburary");
                cbRepFormat.Items.Add("March");
            }
            else if (cbRepType.Text == "Bank" && (cbRepSubType.SelectedIndex == 0 || cbRepSubType.SelectedIndex == 1))
            {
                if (cbRepType.SelectedIndex == 2)
                {
                    cbRepFormat.Visible = true;
                    cbRepFormat.Items.Clear();
                    cbRepFormat.Items.Add("Passed");
                    cbRepFormat.Items.Add("Failed");
                    cbRepFormat.Items.Add("Pending");
                    cbRepFormat.SelectedIndex = 0;
                }
            }
            else if (cbRepType.SelectedIndex == 0 && cbRepSubType.SelectedIndex == 2)
            {
                ckbx_include_payments.Visible = true;
            }
            else if (cbRepType.Text == "Purchase" && cbRepSubType.SelectedIndex == 2)
            {
                ckbx_include_payments.Visible = true;
            }
            else if (cbRepType.Text == "Stock" && cbRepSubType.Text == "Current Stock")
            {
                cbRepFormat.Visible = true;
                cbRepFormat.Items.Clear();
                cbRepFormat.Items.Add("NOT IN USE");
                cbRepFormat.Items.Add("IN USE");
                cbRepFormat.Items.Add("UNUSED-VERIFIED");
                cbRepFormat.SelectedIndex = 1;
            }
            else if (cbRepType.Text == "Job Work" && cbRepSubType.Text == "Batch Dispatch Process")
            {
                lbl_item_batch_name.Visible = true;
                lbl_analysis_batch_qty.Visible = true;
                cmb_analysis_account_item_name.Visible = true;
                tb_analysis_batch_qty.Visible = true;
                cmb_analysis_account_item_name.Visible = true;
                cmb_analysis_account_item_name.Location = new System.Drawing.Point(440, 23);
                lbl_item_batch_name.Location = new System.Drawing.Point(440, 13);
                ConnectionWithAccess.query = " select distinct Type, Item_Code, Title from " + ConnectionWithAccess.tablename[16] + "  order by [title]";
                DataTable dtBatchList = ConnectionCommand.fGetDataTable();
                if (dtBatchList != null && dtBatchList.Rows.Count > 0)
                {
                    cmb_analysis_account_item_name.DataSource = dtBatchList;
                    cmb_analysis_account_item_name.DisplayMember = "Title";
                    cmb_analysis_account_item_name.ValueMember = "Item_Code";
                }
            }
            else if (cbRepType.Text == "Job Work" && cbRepSubType.Text == "Item Ledger")
            {
                cmb_analysis_account_item_name.Visible = true;
                cmb_analysis_account_item_name.Location = new System.Drawing.Point(440, 23);
            }
            else if (cbRepType.Text == "Job Work" && cbRepSubType.Text == "Own Material Sent")
            {
                cmb_analysis_account_item_name.Visible = false;
            }
            else if (cbRepType.Text == "Job Work" && cbRepSubType.Text == "Direct Material Sent")
            {
                cmb_analysis_account_item_name.Visible = false;
                move_cursor_to_button_position("btn_analysis_generate");

            }
            else if (cbRepType.Text == "Job Work" && cbRepSubType.Text == "Material Received")
            {
                cmb_analysis_account_item_name.Visible = false;
            }
            else if (cbRepType.Text == "Job Work" && cbRepSubType.Text == "Closing Stock")
            {
                cmb_analysis_account_item_name.Visible = true;
                cmb_analysis_account_item_name.Location = new System.Drawing.Point(440, 23);
            }
            else
            {
                cmb_analysis_account_item_name.Visible = false;
                //cbRepFormat.Visible = false;
            }
            move_cursor_to_button_position("btn_analysis_generate");
        }

        private void cbRepType_SelectedIndexChanged(object sender, EventArgs e)
        {
            PleaseWait objPleaseWait = new PleaseWait("Please wait Collecting Data");
            objPleaseWait.Show();
            Application.DoEvents();
            chkpartyList.Items.Clear();
            chkcityList.Items.Clear();
            chktaxlist.Items.Clear();
            temp_int = chktaxlist.Items.Count;
            cbrep_ana_d_c.Enabled = true;
            cbRepSubType.Visible = false;
            cbRepFormat.Visible = false;
            pdf_viewer1.Visible = false;
            gdvreport.Visible = false;
            dgv_tax_report.Visible = false;
            cbRepSubType.Items.Clear();
            cbRepFormat.Items.Clear();
            //cbRepFormat.Visible = true;
            report_analysis_check_box_selected_changed();
            //if (cbRepType.SelectedIndex != 7 && cbRepType.SelectedIndex != 8 && cbRepType.SelectedIndex != 9 && cbRepType.SelectedIndex != 10)
            //{
            //    if (cbRepSubType.Items.Count > 0)
            //        cbRepSubType.SelectedIndex = 1;
            //}
            Label2.Visible = false;
            Label3.Visible = false;
            //cbRepFormat.Visible = false;
            label253.Visible = false;
            cbrep_ana_d_c.Visible = false;
            cb_outstanding_bills.Visible = false;
            cb_outstanding_bills_items.Visible = false;
            RepFrom.MinDate = Convert.ToDateTime(ConnectionWithAccess.msdate);
            RepFrom.Value = Convert.ToDateTime(ConnectionWithAccess.msdate);
            RepTo.MinDate = Convert.ToDateTime(ConnectionWithAccess.msdate);
            if (DateTime.Today > Convert.ToDateTime(ConnectionWithAccess.medate))
            {
                RepTo.MaxDate = Convert.ToDateTime(ConnectionWithAccess.medate);
                RepTo.Value = Convert.ToDateTime(ConnectionWithAccess.medate);
            }
            else
            {
                RepTo.MaxDate = DateTime.Today;
                RepTo.Value = DateTime.Today;
            }
            if (cbRepType.SelectedIndex == 0 || cbRepType.SelectedIndex == 16)
            {
                cbRepSubType.Visible = true;
                Label2.Visible = true;
                Label3.Visible = true;
                cbRepFormat.Visible = true;
                label253.Visible = true;
                cbrep_ana_d_c.Visible = true;
                ConnectionWithAccess.query = "select distinct d_c, f1.[desc] from " + ConnectionWithAccess.tablename[21] + " f21 inner join " + ConnectionWithAccess.tablename[1] + " f1 on f21.a_n = f1.a_n and f21.s_a = f1.s_a where f21.d_n = 999999";
                DataTable dtd_c = ConnectionCommand.fGetDataTable();
                if (dtd_c != null && dtd_c.Rows.Count > 0)
                    fFillDropdown(cbrep_ana_d_c, "desc", "d_c", dtd_c);

                if (cbrep_ana_d_c.SelectedValue.ToString() != "")
                    raa_n.Text = get_a_n_from_d_c("S", Convert.ToInt32(cbrep_ana_d_c.SelectedValue.ToString()));
                ConnectionWithAccess.ma_n = raa_n.Text;
            }
            else if (cbRepType.SelectedIndex == 1)
            {
                cbRepSubType.Visible = true;
                Label2.Visible = true;
                Label3.Visible = true;
                cbRepFormat.Visible = true;
                label253.Visible = true;
                cbrep_ana_d_c.Visible = true;
                label253.Visible = true;
                ConnectionWithAccess.query = "select distinct d_c, f1.[desc] from " + ConnectionWithAccess.tablename[22] + " f22 inner join " + ConnectionWithAccess.tablename[1] + " f1 on f22.a_n = f1.a_n and f22.s_a = f1.s_a where f22.d_n = 999999";
                DataTable dtd_c = ConnectionCommand.fGetDataTable();
                if (dtd_c != null && dtd_c.Rows.Count > 0)
                    fFillDropdown(cbrep_ana_d_c, "desc", "d_c", dtd_c);
                if (cbrep_ana_d_c.SelectedValue.ToString() != "")
                    raa_n.Text = get_a_n_from_d_c("P", Convert.ToInt32(cbrep_ana_d_c.SelectedValue.ToString()));
            }
            else if (cbRepType.SelectedIndex == 2)
            {
                cbRepSubType.Visible = true;
                Label2.Visible = true;
                Label3.Visible = true;
                cbRepFormat.Visible = true;
                label253.Visible = true;
                cbrep_ana_d_c.Visible = true;
                label253.Visible = true;
                CbBankEmergingReport.Visible = true;
                //ConnectionWithAccess.query = "select distinct d_c from " + ConnectionWithAccess.tablename[23] + " where d_n = 999999";
                //ConnectionCommand.retrieval(cbrep_ana_d_c);

                ConnectionWithAccess.query = "select distinct d_c, f1.[desc] from " + ConnectionWithAccess.tablename[23] + " f23 inner join " + ConnectionWithAccess.tablename[1] + " f1 on f23.a_n = f1.a_n and f23.s_a = f1.s_a where f23.d_n = 999999";
                DataTable dtd_c = ConnectionCommand.fGetDataTable();
                if (dtd_c != null && dtd_c.Rows.Count > 0)
                    fFillDropdown(cbrep_ana_d_c, "desc", "d_c", dtd_c);

                if (cbrep_ana_d_c.SelectedValue.ToString() != "")
                    raa_n.Text = get_a_n_from_d_c("B", Convert.ToInt32(cbrep_ana_d_c.SelectedValue.ToString()));
            }
            else if (cbRepType.SelectedIndex == 3)
            {
                cbRepSubType.Visible = true;
                Label2.Visible = true;
                Label3.Visible = true;
                cbRepFormat.Visible = true;
                label253.Visible = true;
                cbrep_ana_d_c.Visible = true;
                label253.Visible = true;
                ConnectionWithAccess.query = "select distinct d_c, f1.[desc] from " + ConnectionWithAccess.tablename[24] + " f24 inner join " + ConnectionWithAccess.tablename[1] + " f1 on f24.a_n = f1.a_n and f24.s_a = f1.s_a where f24.d_n = 999999";
                DataTable dtd_c = ConnectionCommand.fGetDataTable();
                if (dtd_c != null && dtd_c.Rows.Count > 0)
                    fFillDropdown(cbrep_ana_d_c, "desc", "d_c", dtd_c);

                if (cbrep_ana_d_c.SelectedValue.ToString() != "")
                    raa_n.Text = get_a_n_from_d_c("C", Convert.ToInt32(cbrep_ana_d_c.SelectedValue.ToString()));
            }
            else if (cbRepType.SelectedIndex == 5 || cbRepType.SelectedIndex == 6)
            {
                cbRepSubType.Visible = true;
            }
            else if (cbRepType.SelectedIndex == 7 || cbRepType.SelectedIndex == 9)
            {
                RepFrom.MinDate = Convert.ToDateTime(ConnectionWithAccess.com_start_date);
                RepFrom.Value = Convert.ToDateTime(ConnectionWithAccess.com_start_date);
                RepTo.MinDate = Convert.ToDateTime(ConnectionWithAccess.com_start_date);
                label253.Visible = true;
                cbrep_ana_d_c.Visible = true;
                //ConnectionWithAccess.query = "select distinct d_c from " + ConnectionWithAccess.tablename[21] + " where d_n = 999999";
                //ConnectionCommand.retrieval(cbrep_ana_d_c);

                ConnectionWithAccess.query = "select distinct d_c, f1.[desc] from " + ConnectionWithAccess.tablename[21] + " f21 inner join " + ConnectionWithAccess.tablename[1] + " f1 on f21.a_n = f1.a_n and f21.s_a = f1.s_a where f21.d_n = 999999";
                DataTable dtd_c = ConnectionCommand.fGetDataTable();
                if (dtd_c != null && dtd_c.Rows.Count > 0)
                    fFillDropdown(cbrep_ana_d_c, "desc", "d_c", dtd_c);

                cb_outstanding_bills.Visible = true;
                cb_outstanding_bills_items.Visible = true;
            }
            else if (cbRepType.SelectedIndex == 8 || cbRepType.SelectedIndex == 10 || cbRepType.SelectedIndex == 15)
            {
                label253.Visible = true;
                cbrep_ana_d_c.Visible = true;
                //ConnectionWithAccess.query = "select distinct d_c from " + ConnectionWithAccess.tablename[22] + " where d_n = 999999";
                //ConnectionCommand.retrieval(cbrep_ana_d_c);
                ConnectionWithAccess.query = "select distinct d_c, f1.[desc] from " + ConnectionWithAccess.tablename[22] + " f22 inner join " + ConnectionWithAccess.tablename[1] + " f1 on f22.a_n = f1.a_n and f22.s_a = f1.s_a where f22.d_n = 999999";
                DataTable dtd_c = ConnectionCommand.fGetDataTable();
                if (dtd_c != null && dtd_c.Rows.Count > 0)
                    fFillDropdown(cbrep_ana_d_c, "desc", "d_c", dtd_c);
                if (cbrep_ana_d_c.SelectedValue.ToString() != "")
                    raa_n.Text = get_a_n_from_d_c("P", Convert.ToInt32(cbrep_ana_d_c.SelectedValue.ToString()));
                ConnectionWithAccess.ma_n = raa_n.Text;
                cb_outstanding_bills.Visible = true;
                cb_outstanding_bills_items.Visible = true;
            }
            else if (cbRepType.Text == "Job Work")
            {
                cbRepSubType.Visible = true;
                Label2.Visible = true;
            }

            else
            {
                cbrep_ana_d_c.Visible = false;
                label253.Visible = false;
            }
            if (cbRepType.Text != "Job Work")
            {
                //AdvanceFilter Queries

                chkpartyList.ResetText();
                chkcityList.Items.Clear();
                AFAnalysis.PartyListQuery = "select [desc],city,a_n,s_a from " + ConnectionWithAccess.tablename[1] + " f1 where f1.a_n = '" + raa_n.Text + "' and f1.s_a <> '@@@' order by [desc],city";
                AFAnalysis.CityListQuery = "select distinct [city] from " + ConnectionWithAccess.tablename[1] + " f1 where f1.a_n = '" + raa_n.Text + "' and f1.s_a <> '@@@' order by city";
                AFAnalysis.TaxListQuery = "select distinct f6.tx_code, f6.[desc] from " + ConnectionWithAccess.tablename[6] + " f6 where f6.d_c = " + cbrep_ana_d_c.SelectedValue.ToString();
                AFAnalysis.AreaListQuery = "select distinct area_code from " + ConnectionWithAccess.tablename[2] + " order by area_code";
            }
            objPleaseWait.Close();
        }

        private void sal_pur_ledger_report()
        {
            StringBuilder strQuery = new StringBuilder();
            strQuery.Append(" select f51.d_d as d_d, 'open' as d_n, 'Opening Stock' as [Desc], '' as City, '' as gst_number, (f51.amt *-1) as purc_amount, '0.00' as sale_amount, '0.00' as diff_amount, '' as d_c,'' as a_n,'' as s_a, 'O' as book  from " + ConnectionWithAccess.tablename[1] + " f1, " + ConnectionWithAccess.tablename[51] + " f51 where f1.a_n = f51.a_n and f1.s_a = f51.s_a and f51.prd = '" + ConnectionWithAccess.moprd + "' and f51.a_n = '5000' and f51.s_a = '@@@' UNION ALL ");
            strQuery.Append(" select f21.D_D, f21.D_N, f1.[desc] as [Desc], f1.city, f1.gst_number,'0.00' as purc_amount, f21.gamt as sale_amount, '0.00' as diff_amount, f21.d_c,f21.a_n,f21.s_a, 'S' as book  from " + ConnectionWithAccess.tablename[1] + " f1, " + ConnectionWithAccess.tablename[21] + " f21 where f1.a_n = f21.a_n and f1.s_a = f21.s_a and f21.prd = '" + ConnectionWithAccess.mprd + "' and f21.d_d >= @From and f21.d_d <= @To UNION ALL ");
            strQuery.Append(" select f22.D_D, f22.D_N, f1.[desc] as [Desc], f1.city, f1.gst_number, f22.gamt as purc_amount, '0.00' as sale_amount , '0.00' as diff_amount, f22.d_c,f22.a_n,f22.s_a, 'P' as book  from " + ConnectionWithAccess.tablename[1] + " f1, " + ConnectionWithAccess.tablename[22] + " f22 where f1.a_n = f22.a_n and f1.s_a = f22.s_a and f22.prd = '" + ConnectionWithAccess.mprd + "' and f22.d_d >= @From and f22.d_d <= @To order by d_d,BOOK,D_N");
            parameters_for_date_range(RepFrom.Text, RepTo.Text);
            ConnectionWithAccess.query = strQuery.ToString();
            DataTable dtNewTable = ConnectionCommand.fGetDataTable();
            if (dtNewTable.Rows.Count > 0)
            {
                temp_double = 0;
                for (row_counter = 0; row_counter < dtNewTable.Rows.Count; row_counter++)
                {
                    if (Convert.ToSingle(dtNewTable.Rows[row_counter]["purc_amount"].ToString()) > 0)
                    {
                        temp_double += Convert.ToSingle(dtNewTable.Rows[row_counter]["purc_amount"].ToString());
                    }
                    else
                        temp_double -= Convert.ToSingle(dtNewTable.Rows[row_counter]["sale_amount"].ToString());
                    dtNewTable.Rows[row_counter]["diff_amount"] = temp_double;
                }
            }
            // kunal
            generate_sal_pur_ledger_report(dtNewTable);
        }

        private void generate_sal_pur_ledger_report(DataTable dtNewTable)
        {
            if (dtNewTable.Rows.Count > 0)
            {
                //get_account_details_from_01(rla_n.Text, rls_a.Text);
                //get_account_details_from_04(rla_n.Text, rls_a.Text);
                report_filetype = lbl_ledger_master_account_name.Text.Trim();
                ledger_filename = ConnectionWithAccess.report_file_location + "Sale_Purchase_Ledger_as on_" + ConnectionWithAccess.mprd;
                if (chb_add_datetime_in_output.Checked)
                    ledger_filename += "_" + DateTime.Now.Day + "_" + DateTime.Now.Month + "_" + DateTime.Now.Year + "_" + DateTime.Now.TimeOfDay.Hours + "_" + DateTime.Now.TimeOfDay.Minutes;
                ledger_filename += ".pdf";
                doc1 = new Document(PageSize.A4, 5, 5, 5, 5);
                // left margin,right margin, top margin, bottom margin
                ConnectionWithAccess.create_file_folder(ledger_filename);
                FileStream FS1 = File.Create(ledger_filename);
                writer = PdfWriter.GetInstance(doc1, FS1);
                doc1.Open();
                current_pdf_page_number = 1;
                pdf_top_heading = null;
                require_header_footer = false;
                Paragraph para = new Paragraph();
                temp_word = ConnectionWithAccess.company_details[1];
                print_pdf_line_at_center(cour_9_bold, temp_word, 0, "cour_9_bold");
                temp_word = ConnectionWithAccess.company_details[2];
                temp_word += ConnectionWithAccess.company_details[3];
                print_pdf_line_at_center(cour_9, temp_word, 0, "cour_9");
                temp_word = ConnectionWithAccess.company_details[4];
                if (ConnectionWithAccess.company_details[6].Length > 2)
                    temp_word += "-" + ConnectionWithAccess.company_details[6];
                if (ConnectionWithAccess.company_details[5].Length > 2)
                    temp_word += " " + ConnectionWithAccess.company_details[5];
                print_pdf_line_at_center(cour_9, temp_word, 0, "cour_9");
                print_pdf_line_at_center(cour_9, "Sale Purchase Ledger Account", 0, "cour_9");
                temp_word = Ledfrom.Value.Date.ToString("dd-MMM-yyyy") + " to " + LedTo.Value.Date.ToString("dd-MMM-yyyy");
                print_pdf_line_at_center(cour_9, temp_word, 0, "cour_9");

                pdf_top_heading = "Date       Particulars        Vch No.                                                                                Debit                 Credit                    Balance";
                add_pdf_top_heading(pdf_top_heading);
                int lineno = 0;
                debitamount = 0;
                creditamount = 0;
                for (row_counter = 0; row_counter < dtNewTable.Rows.Count; row_counter++)
                {
                    if ((Convert.ToSingle(dtNewTable.Rows[row_counter]["purc_amount"].ToString()) != 0) || (Convert.ToSingle(dtNewTable.Rows[row_counter]["sale_amount"].ToString()) != 0) || (Convert.ToSingle(dtNewTable.Rows[row_counter]["diff_amount"].ToString()) != 0))
                    {
                        temp_word = dtNewTable.Rows[row_counter]["d_d"].ToString();
                        if (temp_word.Contains(" ")) // remove time from datetime
                            temp_word = temp_word.Substring(0, temp_word.IndexOf(" "));
                        print_pdf_line(cour_9, temp_word, 30, -9);
                        temp_word = dtNewTable.Rows[row_counter]["d_n"].ToString();
                        print_pdf_line(cour_9_bold, temp_word, para_IndentationLeft_position(45, temp_word, "cour_9_bold"), -15);
                        temp_word = dtNewTable.Rows[row_counter]["desc"].ToString();
                        if (temp_word.Length > 24)
                            temp_word = temp_word.Substring(0, 24);
                        print_pdf_line(cour_9_bold, temp_word, 130, -15);
                        temp_word = dtNewTable.Rows[row_counter]["city"].ToString();
                        if (temp_word.Length > 15)
                            temp_word = temp_word.Substring(0, 15);
                        print_pdf_line(cour_9_bold, temp_word, 280, -15);
                        if (Convert.ToSingle(dtNewTable.Rows[row_counter]["purc_amount"].ToString()) != 0)
                        {
                            temp_word = add_comma_to_number(dtNewTable.Rows[row_counter]["purc_amount"].ToString());
                            print_pdf_line(cour_9_bold, temp_word, para_IndentationLeft_position(340, temp_word, "cour_9_bold"), -15);
                            debitamount += Convert.ToDouble(dtNewTable.Rows[row_counter]["purc_amount"].ToString());
                        }
                        if (Convert.ToSingle(dtNewTable.Rows[row_counter]["sale_amount"].ToString()) != 0)
                        {
                            temp_word = add_comma_to_number(dtNewTable.Rows[row_counter]["sale_amount"].ToString());
                            print_pdf_line(cour_9_bold, temp_word, para_IndentationLeft_position(405, temp_word, "cour_9_bold"), -15);
                            creditamount += Convert.ToDouble(dtNewTable.Rows[row_counter]["sale_amount"].ToString());
                        }
                        if (Convert.ToSingle(dtNewTable.Rows[row_counter]["diff_amount"].ToString()) != 0)
                        {
                            temp_word = add_comma_to_number(dtNewTable.Rows[row_counter]["diff_amount"].ToString());
                            print_pdf_line(cour_9_bold, temp_word, para_IndentationLeft_position(485, temp_word, "cour_9_bold"), -15);
                        }
                        print_pdf_line(cour_9, " ", 500, -15);
                        lineno++;
                        //if (lineno >= 54)
                        //{
                        //    temp_word = "-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------";
                        //    print_pdf_line(cour_9, temp_word, 20, -12);
                        //    print_pdf_line(cour_9, " ", 50, 5);
                        //    temp_word = ConnectionWithAccess.company_details[1];
                        //    print_pdf_line_at_center(cour_9_bold, temp_word, 0, "cour_9_bold");
                        //    temp_word = ConnectionWithAccess.company_details[2];
                        //    if (ConnectionWithAccess.company_details[3].Length > 2)
                        //        temp_word += ConnectionWithAccess.company_details[3];
                        //    print_pdf_line_at_center(cour_9, temp_word, 0, "cour_9");
                        //    temp_word = ConnectionWithAccess.company_details[4];
                        //    if (ConnectionWithAccess.company_details[6].Length > 2)
                        //        temp_word += "-" + ConnectionWithAccess.company_details[6];
                        //    if (ConnectionWithAccess.company_details[5].Length > 2)
                        //        temp_word += " " + ConnectionWithAccess.company_details[5];
                        //    print_pdf_line_at_center(cour_9, temp_word, 0, "cour_9");
                        //    print_pdf_line_at_center(cour_9, "Sale Purchase Ledger Account", 0, "cour_9");
                        //    temp_word = Ledfrom.Value.Date.ToString("dd-MMM-yyyy") + " to " + LedTo.Value.Date.ToString("dd-MMM-yyyy");
                        //    print_pdf_line_at_center(cour_9, temp_word, 0, "cour_9");

                        //    pdf_top_heading = "Date       Particulars        Vch No.                                                                                Debit                 Credit                    Balance";
                        //    add_pdf_top_heading(pdf_top_heading);
                        //    lineno = 0;
                        //    print_footer();
                        //}
                    }

                }
                temp_word = "----------------------------------------------";
                print_pdf_line(cour_9, temp_word, 360, -10);
                temp_word = add_comma_to_number(debitamount.ToString());
                print_pdf_line(cour_9_bold, temp_word, para_IndentationLeft_position(340, temp_word, "cour_9_bold"), -8);
                temp_word = add_comma_to_number(creditamount.ToString());
                print_pdf_line(cour_9_bold, temp_word, para_IndentationLeft_position(405, temp_word, "cour_9_bold"), -16);
                if (debitamount < creditamount)
                {
                    print_pdf_line(cour_9, "By Closing Balance", 150, -6);
                    temp_word = add_comma_to_number(Math.Round((creditamount - debitamount), 2).ToString());
                    print_pdf_line(cour_9_bold, temp_word, para_IndentationLeft_position(340, temp_word, "cour_9_bold"), -16);
                    debitamount = creditamount;
                }
                else
                {
                    print_pdf_line(cour_9, "By Closing Balance", 150, -6);
                    temp_word = add_comma_to_number(Math.Round((debitamount - creditamount), 2).ToString());
                    print_pdf_line(cour_9_bold, temp_word, para_IndentationLeft_position(405, temp_word, "cour_9_bold"), -16);
                    creditamount = debitamount;
                }
                temp_word = "----------------------------------------------";
                print_pdf_line(cour_9, temp_word, 360, -10);
                temp_word = add_comma_to_number(debitamount.ToString());
                print_pdf_line(cour_9_bold, temp_word, para_IndentationLeft_position(340, temp_word, "cour_9_bold"), -8);
                print_pdf_line(cour_9_bold, temp_word, para_IndentationLeft_position(405, temp_word, "cour_9_bold"), -16);
                temp_word = "----------------------------------------------";
                print_pdf_line(cour_9, temp_word, 360, -10);
                print_footer();
                doc1.Close();
                require_header_footer = true;
            }
        }

        private void cbledparent_SelectedIndexChanged(object sender, EventArgs e)
        {

            //fill_cbledchild_combo_box();
            //if (cbledparent.SelectedIndex == 14)
            //    cbledchild.SelectedIndex = 12;
        }

        private void sidbc_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (sidbc.Text != null && sidbc.Text != "")
            {
                if (sidbc.SelectedValue.ToString() != "")
                {
                    ConnectionWithAccess.query = "SELECT max(d_n) +1 from " + ConnectionWithAccess.tablename[21] + " where prd = '" + ConnectionWithAccess.mprd + "' and d_n <> 999999 and d_c = " + Convert.ToInt32(sidbc.SelectedValue.ToString());
                    ConnectionCommand.ExportToText(sidbc, sidocno);
                    ConnectionWithAccess.md_n = sidocno.Text;
                    if (sidbc.Text == "JOB WORK")
                        sia_n.Text = get_a_n_from_d_c("JS", Convert.ToInt32(sidbc.SelectedValue.ToString()));
                    else
                        sia_n.Text = get_a_n_from_d_c("S", Convert.ToInt32(sidbc.SelectedValue.ToString()));
                    //set_invoice_date(21, sidocno.Text, Convert.ToInt32(sidbc.SelectedValue.ToString()));
                    lbl_sale_account_name.Text = get_account_name_from_d_c("S", Convert.ToInt32(sidbc.SelectedValue.ToString()));
                    dtp_sisale_lr_date.Value = sidatetime.Value;
                    fill_si_sale_list();
                }
            }
        }

        private void crdbc_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (crdbc.Items.Count > 0)
            {
                PleaseWait objPleaseWait = new PleaseWait("Please wait Collecting Data");
                objPleaseWait.Show();
                Application.DoEvents();
                cr_datagridview.Visible = false;
                refresh_cash_document_number();
                crpartycode.Text = "";
                crpartycity.Text = "";
                cr_book_a_n.Text = get_a_n_from_d_c("C", Convert.ToInt32(crdbc.SelectedValue.ToString()));
                get_account_name_from_d_c("C", Convert.ToInt32(crdbc.SelectedValue.ToString()));
                ConnectionWithAccess.cash_a_n = cr_book_a_n.Text;
                fill_cr_tran_list();
                crpartycode.Focus();
                objPleaseWait.Close();
            }
        }

        private void srdbc_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (maintab.SelectedIndex == 1 && subtabDataEntry.SelectedIndex == 0 && subtabsale.SelectedIndex == 1)
            {
                ConnectionWithAccess.query = "SELECT max(d_n) +1 from " + ConnectionWithAccess.tablename[30] + " where prd = '" + ConnectionWithAccess.mprd + "' and d_n <> 999999 and d_c = " + Convert.ToInt32(srdbc.SelectedValue.ToString());
                ConnectionCommand.ExportToText(srdbc, srdocno);
                ConnectionWithAccess.md_n = srdocno.Text;
                sra_n.Text = get_a_n_from_d_c("R", Convert.ToInt32(srdbc.SelectedValue.ToString()));
                set_invoice_date(30, srdocno.Text, Convert.ToInt32(srdbc.SelectedValue.ToString()));
                if (srdatetime.Value <= Convert.ToDateTime(ConnectionWithAccess.medate))
                {
                    if (srdatetime.Value <= DateTime.Now)
                    {
                        if (srdatetime.MinDate <= DateTime.Now)
                        {
                            srdatetime.MaxDate = DateTime.Today;
                            srdatetime.Value = DateTime.Today;
                        }
                    }
                }
                refresh_data_entry_sale_for_new_record();
                srsalelistdg.DataSource = null;
                fillsrreplamentlist();
            }
        }

        private void bpdbc_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (bpdbc.SelectedValue.ToString() != "")
            {
                //bptranlist.Rows.Clear();
                bptranlist.DataSource = null;
                //bpaccname.SelectedIndex = bpdbc.SelectedIndex;
                fill_bank_trans_list();
                refresh_bank_document_number();
                bpcurbankbal.Text = Convert.ToString(get_bank_balance(get_a_n_from_d_c("B", Convert.ToInt32(bpdbc.SelectedValue.ToString())), "@@@", DateTime.Today.ToShortDateString()));
                bpamt.Focus();
                move_cursor_to_button_position("atbnew");
            }
        }

        private void bddbc_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (bddbc.SelectedValue.ToString() != "")
            {
                // bdtranlist.Rows.Clear();
                bdtranlist.DataSource = null;
                fill_bank_trans_list();
                refresh_bank_document_number();
                bdcurbankbal.Text = Convert.ToString(get_bank_balance(get_a_n_from_d_c("B", Convert.ToInt32(bddbc.SelectedValue.ToString())), "@@@", DateTime.Today.ToShortDateString()));
                bdcurcashbal.Text = Convert.ToString(get_cash_balance("2010", "@@@", DateTime.Today.ToShortDateString()));
                bdamt.Focus();
                move_cursor_to_button_position("atbnew");
            }
        }

        private void bwdbc_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (bwdbc.SelectedValue.ToString() != "")
            {
                // bwtranlist.Rows.Clear();
                //bwtranlist.Rows.Clear();
                bwtranlist.DataSource = null;
                fill_bank_trans_list();
                refresh_bank_document_number();
                get_account_name_from_d_c("B", Convert.ToInt32(bwdbc.SelectedValue.ToString()));
                bwa_n.Text = get_a_n_from_d_c("B", Convert.ToInt32(bwdbc.SelectedValue.ToString()));
                bwcurbankbal.Text = Convert.ToString(get_bank_balance(bwa_n.Text, "@@@", DateTime.Today.ToShortDateString()));
                bwcurcashbal.Text = Convert.ToString(get_cash_balance("2010", "@@@", DateTime.Today.ToShortDateString()));
                bdamt.Focus();
                move_cursor_to_button_position("atbnew");
            }
        }

        private void additional_account_SelectedIndexChanged(object sender, EventArgs e)
        {
            additional_accounts_process();
        }

        private void cb_additional_a_n_SelectedIndexChanged(object sender, EventArgs e)
        {
            ConnectionWithAccess.query = "select [desc],city,pin from " + ConnectionWithAccess.tablename[1] + " where a_n = '" + cb_additional_a_n.Text + "'";
            DataTable dtData1 = ConnectionCommand.fGetDataTable();
            if (dtData1 != null && dtData1.Rows.Count > 0)
            {
                if (dtData1.Rows[0][0] != null)
                {
                    tb_additional_desc.Text = dtData1.Rows[0][0].ToString();
                    tb_additional_city.Text = dtData1.Rows[0][1].ToString();
                    tb_additional_pincode.Text = dtData1.Rows[0][2].ToString();
                }
            }
            ConnectionWithAccess.query = "select add1,add2,add3 from " + ConnectionWithAccess.tablename[4] + " where a_n = '" + cb_additional_a_n.Text + "' and s_a ='@@@'";
            dtData1 = ConnectionCommand.fGetDataTable();
            if (dtData1 != null && dtData1.Rows.Count > 0)
            {
                if (dtData1.Rows[0][0] != null)
                {
                    tb_additional_add1.Text = dtData1.Rows[0][0].ToString();
                    tb_additional_add2.Text = dtData1.Rows[0][1].ToString();
                    tb_additional_add3.Text = dtData1.Rows[0][2].ToString();
                }
                else
                {
                    tb_additional_add1.Clear();
                    tb_additional_add2.Clear();
                    tb_additional_add3.Clear();
                }
            }
        }

        private void cb_transfer_account_SelectedIndexChanged(object sender, EventArgs e)
        {
            ConnectionWithAccess.query = "select [desc],city,pin from " + ConnectionWithAccess.tablename[1] + " where a_n = '" + cb_transfer_account.Text + "' and s_a ='@@@'";
            DataTable dtData1 = ConnectionCommand.fGetDataTable();

            if (dtData1 != null && dtData1.Rows.Count > 0)
            {
                if (dtData1.Rows[0][0] != null)
                {
                    tb_transfer_desc.Text = dtData1.Rows[0][0].ToString();
                    tb_transfer_city.Text = dtData1.Rows[0][1].ToString();
                }
            }
        }

        private void cb_tax_d_c_SelectedIndexChanged(object sender, EventArgs e)
        {
            TaxListDG.Rows.Clear();
            ConnectionWithAccess.query = "select d_c,tx_code,tax_rate, [desc],a_n from " + ConnectionWithAccess.tablename[6] + " where d_c = " + cb_tax_d_c.Text + " order by tx_code";
            ConnectionCommand.accountHelp(TaxListDG, "TaxListDG");
        }

        private void cpdbc_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (cpdbc.SelectedValue.ToString() != "")
            {
                refresh_cash_document_number();

                cppartycode.Text = "";
                cppartycity.Text = "";
                cp_book_a_n.Text = get_a_n_from_d_c("C", Convert.ToInt32(cpdbc.SelectedValue.ToString()));

                //ConnectionWithAccess.query = "SELECT max(d_n) +1 from " + ConnectionWithAccess.tablename[24] + " where prd = '" + ConnectionWithAccess.mprd + "' and d_n <> 999999 and d_c = " + cpdbc.SelectedValue.ToString();
                //ConnectionCommand.ExportToText(cpdbc, cpdocno);
                //dateCheckForcashInvoice();
                get_a_n_from_d_c("C", Convert.ToInt32(cpdbc.SelectedValue.ToString()));
                fill_cp_tran_list();
                cppartycode.Focus();
            }
        }

        private void cbBalShPer_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (maintab.SelectedIndex == 3 && subtabreports.SelectedIndex == 2)
            {
                if (subtabreports.SelectedIndex == 2)
                    trading_report_generate.Visible = true;
                if (cbBalShAc != null)
                {
                    get_period_details_from_50(cbBalShPer.Text);
                    dtBalShFrom.Text = ConnectionWithAccess.msdate;
                    dtBalShTo.Text = ConnectionWithAccess.medate;
                    //ConnectionWithAccess.query = "select prd, start, [end], lock, gp from " + ConnectionWithAccess.tablename[50] + " where prd = '" + cbBalShPer.Text + "'";
                    //DataTable dtData1 = ConnectionCommand.fGetDataTable();
                    //if (dtData1 != null && dtData1.Rows.Count > 0)
                    //{
                    //    if (dtData1.Rows[0][0] != null)
                    //    {
                    //        dtBalShFrom.Text = dtData1.Rows[0][1].ToString();
                    //        dtBalShTo.Text = dtData1.Rows[0][2].ToString();
                    //    }
                    //}
                    if (cbBalShAc.SelectedItem.Equals("GP/NP Calculation"))
                    {
                        gp_percentage_change = true;
                        gb_tradingacc.Visible = true;
                        gb_profit_loss.Visible = true;
                        trading_report_generate.Visible = false;
                        get_gp_percent_from_file_fifty(cbBalShPer.Text);
                        blstgp_per.Text = Convert.ToString(ConnectionWithAccess.gp_percent);
                        calculate_gross_profit_using_gp_per(cbBalShPer.Text);
                    }
                }
                BalShDGV.Visible = false;
                pdf_viewer3.Visible = false;
                ConnectionWithAccess.temp_prd = cbBalShPer.Text;
                ConnectionWithAccess.temp_old_prd = (ConnectionWithAccess.temp_prd);
                move_cursor_to_button_position("trading_report_generate");
            }
            //else if (maintab.SelectedIndex == 3 && subtabreports.SelectedIndex == 2)
            //{
            //    if (subtabreports.SelectedIndex == 2)
            //        trading_report_generate.Visible = true;
            //    if (cbBalShAc != null)
            //    {
            //    }
            //}
        }

        private void cbBalShAc_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (maintab.SelectedIndex == 3)
            {
                ckbx_all_periods.Visible = false;
                if (cbBalShAc.SelectedItem.Equals("GP/NP Calculation"))
                {
                    pdf_viewer3.Visible = false;
                    gb_tradingacc.Visible = true;
                    gb_profit_loss.Visible = true;
                    trading_report_generate.Visible = false;
                    get_gp_percent_from_file_fifty(cbBalShPer.Text);
                    blstgp_per.Text = Convert.ToString(ConnectionWithAccess.gp_percent);
                    calculate_gross_profit_using_gp_per(cbBalShPer.Text);
                }
                else if (cbBalShAc.SelectedItem.Equals("Tr_Pl_Ca_Blst"))
                {
                    gb_tradingacc.Visible = false;
                    gb_profit_loss.Visible = false;
                    ckbx_all_periods.Visible = true;
                    trading_report_generate.Visible = true;
                    move_cursor_to_button_position("trading_report_generate");
                }
                else
                {
                    gb_tradingacc.Visible = false;
                    gb_profit_loss.Visible = false;
                    BalShDGV.Visible = false;
                    pdf_viewer3.Visible = false;
                    cbBalShAc.Visible = true;
                    trading_report_generate.Visible = true;
                    move_cursor_to_button_position("trading_report_generate");
                }
            }
        }

        private void cb_master_d_c_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (cbParent.SelectedItem.Equals("SUNDRY DEBTORS"))
                tbA_N.Text = get_a_n_from_d_c("S", Convert.ToInt32(cb_master_d_c.Text));
            else if (cbParent.SelectedItem.Equals("SUNDRY CREDITORS"))
                tbA_N.Text = get_a_n_from_d_c("P", Convert.ToInt32(cb_master_d_c.Text));
            else if (cbParent.SelectedItem.Equals("BANK ACCOUNT"))
                tbA_N.Text = get_a_n_from_d_c("B", Convert.ToInt32(cb_master_d_c.Text));
            else if (cbParent.SelectedItem.Equals("CASH IN HAND"))
                tbA_N.Text = get_a_n_from_d_c("C", Convert.ToInt32(cb_master_d_c.Text));
            tbS_A.Text = "@@@";
            tbd_y.Text = "@@@";
            if (tbA_N.Text != "")
            {
                get_account_details_from_01(tbA_N.Text, tbS_A.Text);
                tbDesc.Text = account_detail_from_01[4];
                update_master_account_screen_details(tbA_N.Text, tbS_A.Text, "@@@");
                fill_tax_description();
            }
            //refresh_master_account();
        }

        private void cbrep_ana_d_c_SelectedIndexChanged(object sender, EventArgs e)
        {
            pdf_viewer1.Visible = false;
            gdvreport.Visible = false;
            dgv_tax_report.Visible = false;
            chkpartyList.Items.Clear();
            chkcityList.Items.Clear();
            chktaxlist.Items.Clear();
            if (cbrep_ana_d_c.SelectedValue != null)
            {
                if (cbRepType.SelectedIndex == 0 || cbRepType.SelectedIndex == 16)
                    raa_n.Text = get_a_n_from_d_c("S", Convert.ToInt32(cbrep_ana_d_c.SelectedValue.ToString()));
                else if (cbRepType.SelectedIndex == 1)
                    raa_n.Text = get_a_n_from_d_c("P", Convert.ToInt32(cbrep_ana_d_c.SelectedValue.ToString()));
                else if (cbRepType.SelectedIndex == 2)
                    if (cbrep_ana_d_c.SelectedValue.ToString() == "0")
                        raa_n.Text = "2011";
                    else
                        raa_n.Text = get_a_n_from_d_c("B", Convert.ToInt32(cbrep_ana_d_c.SelectedValue.ToString()));
                else if (cbRepType.SelectedIndex == 3)
                    raa_n.Text = get_a_n_from_d_c("C", Convert.ToInt32(cbrep_ana_d_c.SelectedValue.ToString()));
                else if (cbRepType.SelectedIndex == 4)
                    raa_n.Text = get_a_n_from_d_c("J", Convert.ToInt32(cbrep_ana_d_c.SelectedValue.ToString()));
            }
            ConnectionWithAccess.ma_n = raa_n.Text;
            break_point = "";
            move_cursor_to_button_position("btn_analysis_generate");
        }

        private void cbAction_SelectedIndexChanged(object sender, EventArgs e)
        {
            daybooklistmastertab();
        }

        private void brdbc_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (brdbc.Items.Count > 0)
            {
                ConnectionWithAccess.query = "SELECT max(d_n) +1 from " + ConnectionWithAccess.tablename[23] + " where prd = '" + ConnectionWithAccess.mprd + "' and d_n <> 999999 and r_p = '2' and d_c = " + brdbc.SelectedValue.ToString();
                //braccname.SelectedIndex = brdbc.SelectedIndex;
                ConnectionCommand.ExportToText(brdbc, brdocno);
                ConnectionWithAccess.bank_a_n = get_a_n_from_d_c("B", Convert.ToInt32(brdbc.SelectedValue.ToString()));

                brchkstatus.SelectedIndex = 1;
                //brtranlist.Rows.Clear();
                brtranlist.DataSource = null;
                fill_bank_trans_list();
                //brcurbankbal.Text = Convert.ToString(get_bank_balance(ConnectionWithAccess.mprd, get_a_n_from_d_c("B", Convert.ToInt32(brdbc.SelectedValue.ToString()))));
                brcurbankbal.Text = Convert.ToString(get_bank_balance(get_a_n_from_d_c("B", Convert.ToInt32(brdbc.SelectedValue.ToString())), "@@@", DateTime.Today.ToShortDateString()));
                //brcurbankbal.Text = Convert.ToString(calculate_bank_balance(Convert.ToInt32(brdbc.SelectedValue.ToString()),get_a_n_from_d_c("B", Convert.ToInt32(brdbc.SelectedValue.ToString())),brdatetime.Value.ToString()));
            }
        }

        private void cbRepFormat_SelectedIndexChanged(object sender, EventArgs e)
        {
            pdf_viewer1.Visible = false;
            gdvreport.Visible = false;
            dgv_tax_report.Visible = false;
        }

        private void pidbc_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (pidbc.Text != null && pidbc.Text != "")
            {
                if (pidbc.SelectedValue.ToString() != "")
                {
                    pia_n.Text = get_a_n_from_d_c("P", Convert.ToInt32(pidbc.SelectedValue.ToString()));
                    if (pia_n.Text == "")
                        pia_n.Text = get_a_n_from_d_c("JR", Convert.ToInt32(pidbc.SelectedValue.ToString()));
                    fillpipurclist();
                }
            }
        }

        private void brchkstatus_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (brchkstatus.SelectedIndex == 1)
            {
                brpassdate.Text = null;
                brpassdate.Visible = true;
            }
            else
            {
                brpassdate.Text = null;
                brpassdate.Visible = false;
            }
        }

        private void cb_tr_from_dc_SelectedIndexChanged(object sender, EventArgs e)
        {
            btfroma_n.Text = get_a_n_from_d_c("B", Convert.ToInt32(cb_tr_from_dc.SelectedValue.ToString()));
            tr_from_bank_curr_bal.Text = Convert.ToString(get_bank_balance(get_a_n_from_d_c("B", Convert.ToInt32(cb_tr_from_dc.SelectedValue.ToString())), "@@@", DateTime.Today.ToShortDateString()));
        }

        private void cb_tr_to_dc_SelectedIndexChanged(object sender, EventArgs e)
        {
            bttoa_n.Text = get_a_n_from_d_c("B", Convert.ToInt32(cb_tr_to_dc.SelectedValue.ToString()));
            get_account_name_from_d_c("B", Convert.ToInt32(cb_tr_to_dc.SelectedValue.ToString()));
            tr_to_bank_curr_bal.Text = Convert.ToString(get_bank_balance(get_a_n_from_d_c("B", Convert.ToInt32(cb_tr_to_dc.SelectedValue.ToString())), "@@@", DateTime.Today.ToShortDateString()));
        }

        private void prdbc_SelectedIndexChanged(object sender, EventArgs e)
        {
            ConnectionWithAccess.query = "SELECT max(d_n) +1 from " + ConnectionWithAccess.tablename[30] + " where prd = '" + ConnectionWithAccess.mprd + "' and d_n <> 999999 and d_c = " + Convert.ToInt32(prdbc.SelectedValue.ToString());
            ConnectionCommand.ExportToText(prdbc, prdocno);
            ConnectionWithAccess.md_n = prdocno.Text;
            pra_n.Text = get_a_n_from_d_c("P", Convert.ToInt32(prdbc.SelectedValue.ToString()));
            ConnectionWithAccess.query = "select a_n from " + ConnectionWithAccess.tablename[30] + " where d_c = " + Convert.ToInt32(prdbc.SelectedValue.ToString()) + " and d_n = 999999";
            DataTable dtData1 = ConnectionCommand.fGetDataTable();
            if (dtData1 != null && dtData1.Rows.Count > 0)
            {
                if (dtData1.Rows[0][0] != null)
                {
                    pra_n.Text = dtData1.Rows[0][0].ToString();
                }
            }
        }

        private void jjdbc_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (jjdbc.Text != "")
            {
                ConnectionWithAccess.query = "SELECT max(d_n) +1 from " + ConnectionWithAccess.tablename[25] + " where prd = '" + ConnectionWithAccess.mprd + "' and d_n <> 999999 and d_c = " + Convert.ToInt32(jjdbc.Text);
                ConnectionCommand.ExportToText(jjdbc, jjdocno);
                ConnectionWithAccess.md_n = jjdocno.Text;
            }
        }


        # endregion

        //private void dateCheckForSaleInvoice()
        //{
        //    ConnectionWithAccess.query = "select top 1 d_d from " + ConnectionWithAccess.tablename[21] + " where d_n = (SELECT max(d_n) from " + ConnectionWithAccess.tablename[21] + " where prd = '" + ConnectionWithAccess.mprd + "' and d_n <> 999999 and d_c = " + sidbc.SelectedValue.ToString() + " ) order by d_d desc";
        //    ConnectionCommand.ExportToDateTimePicker(sidatetime);
        //}

        //private void dateCheckForSalereplacement()
        //{
        //    ConnectionWithAccess.query = "select top 1 d_d from " + ConnectionWithAccess.tablename[30] + " where d_n = (SELECT max(d_n) from " + ConnectionWithAccess.tablename[30] + " where prd = '" + ConnectionWithAccess.mprd + "' and d_n <> 999999 and d_c = " + srdbc.SelectedValue.ToString() + " ) order by d_d desc";
        //    ConnectionCommand.ExportToDateTimePicker(srdatetime);
        //}

        //private void dateCheckForcashInvoice()
        //{
        //    ConnectionWithAccess.query = "select top 1 d_d from " + ConnectionWithAccess.tablename[21] + " where d_n = (SELECT max(d_n) from " + ConnectionWithAccess.tablename[21] + " where prd = '" + ConnectionWithAccess.mprd + "' and d_n <> 999999 and d_c = " + crdbc.SelectedValue.ToString() + " ) order by d_d desc";
        //    ConnectionCommand.ExportToDateTimePicker(sidatetime);
        //}

        private void getdaybookcode()
        {
            user_setting_only_visible = "N";
            PleaseWait objPleaseWait = new PleaseWait("Please wait Loading Data");
            objPleaseWait.Show();
            Application.DoEvents();
            if (subtabDataEntry.SelectedIndex == 0 && subtabsale.SelectedIndex == 0)
            {
                ConnectionWithAccess.data_entry_working = "Sale Party";
                current_working_tab = "100";
                if (chbPrivSaleV.Checked)
                    user_setting_only_visible = "T";
                check_save_button();
                if (chbPrivSaleE.Checked)
                {
                    if (sidbc.Items.Count == 0)
                        fill_sidbc();
                    sipartycode.Focus();
                }
            }
            else if (subtabDataEntry.SelectedIndex == 0 && subtabsale.SelectedIndex == 1)
            {
                ConnectionWithAccess.data_entry_working = "Sale Replacement";
                current_working_tab = "101";
                if (chbPrivSaleV.Checked)
                    user_setting_only_visible = "T";
                check_save_button();
                if (chbPrivSaleE.Checked)
                {
                    if (srdbc.Items.Count == 0)
                        fill_srdbc();
                    srpartycode.Focus();
                }
            }
            else if (subtabDataEntry.SelectedIndex == 0 && subtabsale.SelectedIndex == 2)
            {
                ConnectionWithAccess.data_entry_working = "Sale Order";
                current_working_tab = "102";
                if (chbPrivSaleV.Checked)
                    user_setting_only_visible = "T";
                check_save_button();
                if (chbPrivSaleE.Checked)
                {
                    if (sodbc.Items.Count == 0)
                        fill_sodbc();
                    sopartycode.Focus();
                }
            }
            else if (subtabDataEntry.SelectedIndex == 0 && subtabsale.SelectedIndex == 3)
            {
                ConnectionWithAccess.data_entry_working = "Simple Sale Party";
                current_working_tab = "100";
                if (chbPrivSaleV.Checked)
                    user_setting_only_visible = "T";
                check_save_button();
                if (chbPrivSaleE.Checked)
                {
                    ConnectionWithAccess.query = "SELECT max(d_n) +1 from " + ConnectionWithAccess.tablename[21] + " where prd = '" + ConnectionWithAccess.mprd + "' and d_n <> 999999 and d_c = " + Convert.ToInt32(sidbc.SelectedValue.ToString());
                    ConnectionCommand.ExportToText(sidbc, simple_docno);
                    ConnectionWithAccess.md_n = simple_docno.Text;
                    simple_a_n.Text = get_a_n_from_d_c("S", 1);
                    set_invoice_date(21, sidocno.Text, 1);
                    fill_si_sale_list();
                    simple_docno.Focus();
                }
            }
            else if (subtabDataEntry.SelectedIndex == 1 && subtabpurchase.SelectedIndex == 0)
            {
                ConnectionWithAccess.data_entry_working = "Purchase Party";
                current_working_tab = "110";
                if (ConnectionWithAccess.mUserFeatures.Substring(17, 1) == "Y")
                {
                    current_working_tab = "110";
                    fill_pidbc();
                    set_period_of_gst();
                    if (periodofgst == true)
                        pitx_code.Visible = false;
                    else
                        pitx_code.Visible = true;
                    pipartycode.Focus();
                }
            }
            else if (subtabDataEntry.SelectedIndex == 1 && subtabpurchase.SelectedIndex == 1)
            {
                current_working_tab = "110";
                if (ConnectionWithAccess.mUserFeatures.Substring(17, 1) == "Y")
                {
                    if (prdbc.Items.Count == 0)
                    {
                        ConnectionWithAccess.query = "select distinct d_c,f1.[desc] from " + ConnectionWithAccess.tablename[22] + " f22 inner join " + ConnectionWithAccess.tablename[1] + " f1 on f22.a_n = f1.a_n and f22.s_a = f1.s_a where f22.d_n = 999999";
                        DataTable dtd_c = ConnectionCommand.fGetDataTable();
                        if (dtd_c != null && dtd_c.Rows.Count > 0)
                            fFillDropdown(prdbc, "desc", "d_c", dtd_c);
                    }
                    prpartycode.Focus();
                }
                else
                    user_setting_only_visible = "T";
                check_save_button();
            }
            else if (subtabDataEntry.SelectedIndex == 1 && subtabpurchase.SelectedIndex == 2)
            {
                ConnectionWithAccess.data_entry_working = "Purchase Ordere Party";
                current_working_tab = "112";
                if (ConnectionWithAccess.mUserFeatures.Substring(17, 1) == "Y")
                {
                    current_working_tab = "112";
                    if (podbc.Items.Count == 0)
                    {
                        ConnectionWithAccess.query = "select distinct d_c,f1.[desc] from " + ConnectionWithAccess.tablename[22] + " f22 inner join " + ConnectionWithAccess.tablename[1] + " f1 on f22.a_n = f1.a_n and f22.s_a = f1.s_a where f22.d_n = 99999999";
                        DataTable dtd_c = ConnectionCommand.fGetDataTable();
                        if (dtd_c != null && dtd_c.Rows.Count > 0)
                            fFillDropdown(podbc, "desc", "d_c", dtd_c);
                    }
                    set_period_of_gst();
                    popartycode.Focus();
                }
                else
                    user_setting_only_visible = "T";
                check_save_button();
            }
            else if (subtabDataEntry.SelectedIndex == 2)
            {
                if (ConnectionWithAccess.mUserFeatures.Substring(19, 1) == "Y")
                {
                    if (subtabbank.SelectedIndex == 0)
                    {
                        current_working_tab = "120";
                        if (brdbc.Items.Count == 0)
                            fill_brdbc();
                        brpartycode.Focus();
                        move_cursor_to_button_position("atbnew");
                    }
                    else if (subtabbank.SelectedIndex == 1)
                    {
                        current_working_tab = "121";
                        if (bpdbc.Items.Count == 0)
                            fill_bpdbc();
                        bppartycode.Focus();
                        move_cursor_to_button_position("atbnew");
                    }
                    else if (subtabbank.SelectedIndex == 2)
                    {
                        current_working_tab = "122";
                        if (bddbc.Items.Count == 0)
                            fill_bddbc();

                        bdamt.Focus();
                        move_cursor_to_button_position("atbnew");
                    }
                    else if (subtabbank.SelectedIndex == 3)
                    {
                        current_working_tab = "123";
                        if (bwdbc.Items.Count == 0)
                            fill_bwdbc();
                        bwamt.Focus();
                        move_cursor_to_button_position("atbnew");
                    }
                    else if (subtabbank.SelectedIndex == 4)
                    {
                        current_working_tab = "124";
                        ConnectionWithAccess.query = "select distinct d_c,f1.[desc] from " + ConnectionWithAccess.tablename[23] + " f23 inner join " + ConnectionWithAccess.tablename[1] + " f1 on f23.a_n = f1.a_n and f23.s_a = f1.s_a where f23.d_n = 999999";
                        DataTable dtd_c = ConnectionCommand.fGetDataTable();
                        if (dtd_c != null && dtd_c.Rows.Count > 0)
                            fFillDropdown(cb_tr_from_dc, "desc", "d_c", dtd_c);

                        ConnectionWithAccess.query = "select distinct d_c,f1.[desc] from " + ConnectionWithAccess.tablename[23] + " f23 inner join " + ConnectionWithAccess.tablename[1] + " f1 on f23.a_n = f1.a_n and f23.s_a = f1.s_a where f23.d_n = 999999";
                        dtd_c = ConnectionCommand.fGetDataTable();
                        if (dtd_c != null && dtd_c.Rows.Count > 0)
                            fFillDropdown(cb_tr_to_dc, "desc", "d_c", dtd_c);
                        fill_bank_trans_list();
                    }
                }
                else
                    user_setting_only_visible = "T";
                check_save_button();
            }
            else if (subtabDataEntry.SelectedIndex == 3)
            {
                current_working_tab = "13";
                if (ConnectionWithAccess.mUserFeatures.Substring(21, 1) == "Y")
                {
                    if (subtabcash.SelectedIndex == 0)
                    {
                        current_working_tab = "130";
                        if (crdbc.Items.Count == 0)
                        {
                            ConnectionWithAccess.query = "select distinct d_c,f1.[desc] from " + ConnectionWithAccess.tablename[24] + " f24 inner join " + ConnectionWithAccess.tablename[1] + " f1 on f24.a_n = f1.a_n and f24.s_a = f1.s_a where f24.d_n = 999999";
                            DataTable dtd_c = ConnectionCommand.fGetDataTable();
                            if (dtd_c != null && dtd_c.Rows.Count > 0)
                                fFillDropdown(crdbc, "desc", "d_c", dtd_c);
                        }
                        crcurcashbal.Text = Convert.ToString(get_cash_balance("2010", "@@@", crdatetime.Value.ToString()));

                    }
                    else if (subtabcash.SelectedIndex == 1)
                    {
                        current_working_tab = "131";
                        if (cpdbc.Items.Count == 0)
                        {
                            ConnectionWithAccess.query = "select distinct d_c,f1.[desc] from " + ConnectionWithAccess.tablename[24] + " f24 inner join " + ConnectionWithAccess.tablename[1] + " f1 on f24.a_n = f1.a_n and f24.s_a = f1.s_a where f24.d_n = 999999";
                            DataTable dtd_c = ConnectionCommand.fGetDataTable();
                            if (dtd_c != null && dtd_c.Rows.Count > 0)
                                fFillDropdown(cpdbc, "desc", "d_c", dtd_c);
                        }
                        cpcurcashbal.Text = Convert.ToString(get_cash_balance("2010", "@@@", cpdatetime.Value.ToString()));
                    }
                }
                else
                    user_setting_only_visible = "T";
                check_save_button();
                //subtabDataEntry.TabPages[3].Hide();
            }
            else if (subtabDataEntry.SelectedIndex == 4)
            {
                current_working_tab = "140";
                if (ConnectionWithAccess.mUserFeatures.Substring(23, 1) == "Y")
                {
                    fill_jr_tran_list();
                    if (jjdbc.Text == "")
                        fill_jjdbc();

                    jjpartycode1.Focus();
                }
                else
                    user_setting_only_visible = "T";
                check_save_button();
            }
            else if (maintab.SelectedIndex == 1 && subtabDataEntry.SelectedIndex == 5 && tc_dataentry_additional.SelectedIndex == 2)
            {
                current_working_tab = "150";
                if (ConnectionWithAccess.mUserFeatures.Substring(25, 1) == "Y")
                    tb_dataentry_stock_item_date.Value = DateTime.Now;
                else
                    user_setting_only_visible = "T";
                check_save_button();
                //Bank Excel Upload
                ConnectionWithAccess.query = "select distinct d_c,f1.[desc] from " + ConnectionWithAccess.tablename[23] + " f23 inner join " + ConnectionWithAccess.tablename[1] + " f1 on f23.a_n = f1.a_n and f23.s_a = f1.s_a where f23.d_n = 999999";
                DataTable dtd_c = ConnectionCommand.fGetDataTable();
                if (dtd_c != null && dtd_c.Rows.Count > 0)
                {
                    if (cb_BU_from_dc.Items.Count < 2)
                        fFillDropdown(cb_BU_from_dc, "desc", "d_c", dtd_c);
                }
                ConnectionWithAccess.query = "select distinct d_c,f1.[desc] from " + ConnectionWithAccess.tablename[23] + " f23 inner join " + ConnectionWithAccess.tablename[1] + " f1 on f23.a_n = f1.a_n and f23.s_a = f1.s_a where f23.d_n = 999999";
                dtd_c = ConnectionCommand.fGetDataTable();
                if (dtd_c != null && dtd_c.Rows.Count > 0)
                {
                    fFillDropdown(cb_BU_to_dc, "desc", "d_c", dtd_c);
                }
            }
            else if (maintab.SelectedIndex == 1 && subtabDataEntry.SelectedIndex == 5 && tc_dataentry_additional.SelectedIndex == 0)
            {
                current_working_tab = "150";
                if (ConnectionWithAccess.mUserFeatures.Substring(25, 1) == "Y")
                    tb_dataentry_stock_item_date.Value = DateTime.Now;
                else
                    user_setting_only_visible = "T";
                check_save_button();
                //Bank Excel Upload
                ConnectionWithAccess.query = "select distinct d_c,f1.[desc] from " + ConnectionWithAccess.tablename[23] + " f23 inner join " + ConnectionWithAccess.tablename[1] + " f1 on f23.a_n = f1.a_n and f23.s_a = f1.s_a where f23.d_n = 999999";
                DataTable dtd_c = ConnectionCommand.fGetDataTable();
                if (dtd_c != null && dtd_c.Rows.Count > 0)
                {
                    if (cb_BU_from_dc.Items.Count < 2)
                        fFillDropdown(cb_BU_from_dc, "desc", "d_c", dtd_c);
                }
                ConnectionWithAccess.query = "select distinct d_c,f1.[desc] from " + ConnectionWithAccess.tablename[23] + " f23 inner join " + ConnectionWithAccess.tablename[1] + " f1 on f23.a_n = f1.a_n and f23.s_a = f1.s_a where f23.d_n = 999999";
                dtd_c = ConnectionCommand.fGetDataTable();
                if (dtd_c != null && dtd_c.Rows.Count > 0)
                {
                    fFillDropdown(cb_BU_to_dc, "desc", "d_c", dtd_c);
                }
            }
            else if (subtabDataEntry.SelectedIndex == 6)
            {
                fFillAreaList(cb_DE_arealist);
            }
            objPleaseWait.Close();
        }

        private void fill_sidbc()
        {
            ConnectionWithAccess.query = "select distinct d_c, f1.[desc] from " + ConnectionWithAccess.tablename[21] + " f21 inner join " + ConnectionWithAccess.tablename[1] + " f1 on f21.a_n = f1.a_n and f21.s_a = f1.s_a where f21.d_n = 999999";
            DataTable dtd_c = ConnectionCommand.fGetDataTable();
            if (dtd_c != null && dtd_c.Rows.Count > 0)
                fFillDropdown(sidbc, "desc", "d_c", dtd_c);
        }

        private void fill_srdbc()
        {
            ConnectionWithAccess.query = "select distinct d_c, f1.[desc] from " + ConnectionWithAccess.tablename[30] + " f30 inner join " + ConnectionWithAccess.tablename[1] + " f1 on f30.a_n = f1.a_n and f30.s_a = f1.s_a where f30.d_n = 999999";
            DataTable dtd_c = ConnectionCommand.fGetDataTable();
            if (dtd_c != null && dtd_c.Rows.Count > 0)
                fFillDropdown(srdbc, "desc", "d_c", dtd_c);
            else
                MessageBox.Show("Sorry, Daybook code for Replacement Not Found....");
        }

        private void fill_sodbc()
        {
            ConnectionWithAccess.query = "select distinct d_c,f1.[desc] from " + ConnectionWithAccess.tablename[21] + " f21 inner join " + ConnectionWithAccess.tablename[1] + " f1 on f21.a_n = f1.a_n and f21.s_a = f1.s_a where f21.d_n = 999999";
            DataTable dtd_c = ConnectionCommand.fGetDataTable();
            if (dtd_c != null && dtd_c.Rows.Count > 0)
                fFillDropdown(sodbc, "desc", "d_c", dtd_c);

        }

        private void fill_pidbc()
        {
            if (pidbc.Items.Count == 0)
            {
                ConnectionWithAccess.query = "select distinct d_c,f1.[desc] from " + ConnectionWithAccess.tablename[22] + " f22 inner join " + ConnectionWithAccess.tablename[1] + " f1 on f22.a_n = f1.a_n and f22.s_a = f1.s_a where f22.d_n = 999999";
                DataTable dtd_c = ConnectionCommand.fGetDataTable();
                if (dtd_c != null && dtd_c.Rows.Count > 0)
                    fFillDropdown(pidbc, "desc", "d_c", dtd_c);
            }
        }

        private void fill_brdbc()
        {
            brdbc.Visible = true;
            brdbc.Enabled = true;
            ConnectionWithAccess.query = "select distinct d_c,f1.[desc] from " + ConnectionWithAccess.tablename[23] + " f23 inner join " + ConnectionWithAccess.tablename[1] + " f1 on f23.a_n = f1.a_n and f23.s_a = f1.s_a where f23.d_n = 999999";
            DataTable dtd_c = ConnectionCommand.fGetDataTable();
            if (dtd_c != null && dtd_c.Rows.Count > 0)
                fFillDropdown(brdbc, "desc", "d_c", dtd_c);
        }

        private void fill_bpdbc()
        {
            bpdbc.Enabled = true;
            ConnectionWithAccess.query = "select distinct d_c,f1.[desc] from " + ConnectionWithAccess.tablename[23] + " f23 inner join " + ConnectionWithAccess.tablename[1] + " f1 on f23.a_n = f1.a_n and f23.s_a = f1.s_a where f23.d_n = 999999";
            DataTable dtd_c = ConnectionCommand.fGetDataTable();
            if (dtd_c != null && dtd_c.Rows.Count > 0)
                fFillDropdown(bpdbc, "desc", "d_c", dtd_c);
        }

        private void fill_bddbc()
        {
            bddbc.Enabled = true;
            ConnectionWithAccess.query = "select distinct d_c,f1.[desc] from " + ConnectionWithAccess.tablename[23] + " f23 inner join " + ConnectionWithAccess.tablename[1] + " f1 on f23.a_n = f1.a_n and f23.s_a = f1.s_a where f23.d_n = 999999";
            DataTable dtd_c = ConnectionCommand.fGetDataTable();
            if (dtd_c != null && dtd_c.Rows.Count > 0)
                fFillDropdown(bddbc, "desc", "d_c", dtd_c);
        }

        private void fill_bwdbc()
        {
            ConnectionWithAccess.query = "select distinct d_c,f1.[desc] from " + ConnectionWithAccess.tablename[23] + " f23 inner join " + ConnectionWithAccess.tablename[1] + " f1 on f23.a_n = f1.a_n and f23.s_a = f1.s_a where f23.d_n = 999999";
            DataTable dtd_c = ConnectionCommand.fGetDataTable();
            if (dtd_c != null && dtd_c.Rows.Count > 0)
                fFillDropdown(bwdbc, "desc", "d_c", dtd_c);
        }

        private void fill_jjdbc()
        {
            jjdbc.Text = "5";
            //ConnectionWithAccess.query = "select distinct d_c, '' as [desc] from " + ConnectionWithAccess.tablename[25] + " where d_n = 999999";
            //DataTable dtd_c = ConnectionCommand.fGetDataTable();
            //if (dtd_c != null && dtd_c.Rows.Count > 0)
            //    fFillDropdown(jjdbc, "desc", "d_c", dtd_c);


            //jjdbc.Visible = true;
            //ConnectionWithAccess.query = "select distinct d_c from " + ConnectionWithAccess.tablename[25] + " where d_n = 999999";
            //ConnectionCommand.retrieval(jjdbc);
            fill_jr_tran_list();
        }

        private void fFillDropdown(ComboBox cmbBox, string strDisplayMember, string strValueMember, DataTable dtComboData)
        {
            cmbBox.DisplayMember = strDisplayMember;
            cmbBox.ValueMember = strValueMember;
            cmbBox.DataSource = dtComboData;
        }

        #region filldatabase
        private void fill_transport(string ma_n, string mcity, ComboBox mcombobox)
        {
            mcombobox.Items.Clear();
            if (ma_n != null && ma_n != "" && mcity != null && mcity != "")
            {
                ConnectionWithAccess.query = "select distinct tpt from " + ConnectionWithAccess.tablename[4] + " f4 where f4.a_n = '" + ma_n + "' and f4.city = '" + mcity + "'";
                ConnectionCommand.retrieval(mcombobox);
            }
        }

        private void fill_si_sale_list()
        {
            if (subtabDataEntry.SelectedIndex == 0 && subtabsale.SelectedIndex == 0)
            {
                sisalelistdg.DataSource = null;
                ConnectionWithAccess.query = "select distinct f21.D_D, f21.D_N, f1.[desc] as [Desc], f1.city, f21.bamt, f21.tamt, f21.gamt, f21.a_n, f21.s_a, f21.d_y,f21.lr_num,f21.lr_date from " + ConnectionWithAccess.tablename[21] + " f21 inner join " + ConnectionWithAccess.tablename[1] + " f1 on f21.a_n = f1.a_n and f21.s_a = f1.s_a and f21.d_y = f1.d_y where f21.prd = '" + ConnectionWithAccess.mprd + "' and f21.d_c = " + sidbc.SelectedValue.ToString() + " and f21.a_n = '" + sia_n.Text + "'and f21.d_n <> 999999 order by f21.d_n desc";
                ConnectionCommand.accountHelp_datatable_Seperate(sisalelistdg, "sisalelistdg");
                sisalelistdg.Refresh();
            }
            else if (subtabDataEntry.SelectedIndex == 0 && subtabsale.SelectedIndex == 3)
            {
                simple_salelist.DataSource = null;
                ConnectionWithAccess.query = "select distinct f21.D_D, f21.D_N, f1.[desc] as [Desc], f1.city, f21.bamt, f21.tamt, f21.gamt, f21.a_n, f21.s_a, f21.d_y,f21.lr_num,f21.lr_date from " + ConnectionWithAccess.tablename[21] + " f21 inner join " + ConnectionWithAccess.tablename[1] + " f1 on f21.a_n = f1.a_n and f21.s_a = f1.s_a and f21.d_y = f1.d_y where f21.prd = '" + ConnectionWithAccess.mprd + "' and f21.d_c = " + sidbc.SelectedValue.ToString() + " and f21.a_n = '" + sia_n.Text + "'and f21.d_n <> 999999 order by f21.d_n desc";
                ConnectionCommand.accountHelp_datatable_Seperate(simple_salelist, "sisalelistdg");
            }
        }

        private void fillsrreplamentlist()
        {
            srsalelistdg.DataSource = null;
            ConnectionWithAccess.query = "select distinct f30.D_D, f30.D_N, f1.[desc] as [Desc], f1.city, f30.bamt, f30.tamt, f30.gamt, f30.a_n, f30.s_a, f30.d_y,f30.lr_num,f30.lr_date from " + ConnectionWithAccess.tablename[30] + " f30 inner join " + ConnectionWithAccess.tablename[1] + " f1 on f30.a_n = f1.a_n and f30.s_a = f1.s_a and f30.d_y = f1.d_y where f30.prd = '" + ConnectionWithAccess.mprd + "' and f30.d_c = " + srdbc.SelectedValue.ToString() + " and f30.a_n = '" + sra_n.Text + "' and f30.d_n <> 999999 order by f30.d_n desc";
            ConnectionCommand.accountHelp_datatable_Seperate(srsalelistdg, "srsalelistdg");
        }

        private void fillsosalelist()
        {
            sosalelistdg.DataSource = null;
            //ConnectionWithAccess.query = "select distinct f7.D_D, f7.D_N, f1.[desc] as [Desc], f1.city, f7.bamt, f7.tamt, f7.gamt, f7.a_n, f7.s_a, f7.d_y,f7.lr_num,f7.lr_date from " + ConnectionWithAccess.tablename[7] + " f7 inner join " + ConnectionWithAccess.tablename[1] + " f1 on f7.a_n = f1.a_n and f7.s_a = f1.s_a and f7.d_y = f1.d_y where f7.prd = '" + ConnectionWithAccess.mprd + "' and f7.d_c = " + sodbc.SelectedValue.ToString() + " and f7.a_n = '" + soa_n.Text + "'and f7.d_n <> 999999 order by f7.d_n desc";
            ConnectionWithAccess.query = "select distinct f7.D_D, f7.D_N, f1.[desc] as [Desc], f1.city, f7.bamt, f7.tamt, f7.gamt, f7.a_n, f7.s_a, f7.d_y,f7.lr_num,f7.lr_date from " + ConnectionWithAccess.tablename[7] + " f7 inner join " + ConnectionWithAccess.tablename[1] + " f1 on f7.a_n = f1.a_n and f7.s_a = f1.s_a and f7.d_y = f1.d_y where f7.prd = '" + ConnectionWithAccess.mprd + "' and f7.d_c = " + sodbc.SelectedValue.ToString() + " and f7.a_n = '" + soa_n.Text + "'and f7.d_n <> 999999 order by f7.d_n desc";
            //ConnectionWithAccess.query = "select f7.D_D, f7.D_N, f7.bamt, f7.tamt, f7.gamt, f7.a_n, f7.s_a, f7.d_y from " + ConnectionWithAccess.tablename[7] + " f7";
            //ConnectionWithAccess.query = "select distinct f7.D_D, f7.D_N, f1.[desc] as [Desc], f1.city, f7.bamt, f7.tamt, f7.gamt, f7.a_n, f7.s_a, f7.d_y,f7.lr_num,f7.lr_date from " + ConnectionWithAccess.tablename[1] + " f1, " + ConnectionWithAccess.tablename[7] + " f7 where f7.a_n = '" + soa_n.Text + "'and f1.a_n = f7.a_n and f1.s_a = f7.s_a and f7.prd = '" + ConnectionWithAccess.mprd + "' and f7.d_c = " + sodbc.SelectedValue.ToString() + " and f7.d_n <> 999999 order by f7.d_n desc";
            ConnectionCommand.accountHelp_datatable_Seperate(sosalelistdg, "sosalelistdg");
        }

        private void fillpipurclist()
        {
            ConnectionWithAccess.query = "select distinct f22.D_D, f22.D_N, f1.[desc] as [Desc], f1.city, f22.bamt, f22.tamt, f22.gamt, f22.a_n, f22.s_a, f22.d_y,f22.lr_num, " +
     " f22.lr_date, f22.TO_A_N, f22.TO_S_A, f1To.[Desc] as Desc_To from (" + ConnectionWithAccess.tablename[22] + " f22 LEFT JOIN " + ConnectionWithAccess.tablename[1] + " f1 on " +
     " f1.a_n = f22.a_n and f1.s_a = f22.s_a ) LEFT JOIN " + ConnectionWithAccess.tablename[1] + " f1To on f1To.a_n = f22.TO_A_N and f1To.s_a = f22.TO_S_A  " +
     " where f22.a_n = '" + pia_n.Text + "' and f22.prd = '" + ConnectionWithAccess.mprd + "' and f22.d_c = " + pidbc.SelectedValue.ToString() + " and f22.d_n <> 999999 order by f22.d_d desc";

            ConnectionCommand.accountHelp_datatable_GridColumns(pipurchaselist, "pipurchaselist");
        }

        private void fillprreplamentlist()
        {
            srsalelistdg.Rows.Clear();
            ConnectionWithAccess.query = "select distinct f30.D_D, f30.D_N, f1.[desc] as [Desc], f1.city, f30.bamt, f30.tamt, f30.gamt, f30.a_n, f30.s_a, f30.d_y,f30.lr_num,f30.lr_date from " + ConnectionWithAccess.tablename[1] + " f1, " + ConnectionWithAccess.tablename[30] + " f30 where f30.a_n = '" + pra_n.Text + "'and f1.a_n = f30.a_n and f1.s_a = f30.s_a  and f30.prd = '" + ConnectionWithAccess.mprd + "' and f30.d_c = " + prdbc.SelectedValue.ToString() + " and f30.d_n <> 999999 order by f30.d_n desc";
            ConnectionCommand.accountHelp_datatable_Seperate(prpurchaselistdg, "prsalelistdg");
            srsalelistdg.Columns[0].HeaderText = "Date";
            srsalelistdg.Columns[1].HeaderText = "Inv.num";
            srsalelistdg.Columns[2].HeaderText = "Name";
            srsalelistdg.Columns[3].HeaderText = "City";
            srsalelistdg.Columns[4].HeaderText = "Basic Amt";
            srsalelistdg.Columns[5].HeaderText = "Tax Amt";
            srsalelistdg.Columns[6].HeaderText = "Gross Amt";
            srsalelistdg.Columns[7].HeaderText = "A_n";
            srsalelistdg.Columns[8].HeaderText = "S_a";
            if (srsalelistdg.Rows.Count <= 1)
            {
                ConnectionWithAccess.mDateTime = Convert.ToDateTime(ConnectionWithAccess.msdate);
            }
        }

        private void fillpoorderlist()
        {
            ConnectionWithAccess.query = "select distinct f22.D_D, f22.D_N, f1.[desc] as [Desc], f1.city, f22.bamt, f22.tamt, f22.gamt, f22.a_n, f22.s_a, f22.d_y,f22.lr_num, " +
     " f22.lr_date, f22.TO_A_N, f22.TO_S_A, f1To.[Desc] as Desc_To from (" + ConnectionWithAccess.tablename[22] + " f22 LEFT JOIN " + ConnectionWithAccess.tablename[1] + " f1 on " +
     " f1.a_n = f22.a_n and f1.s_a = f22.s_a ) LEFT JOIN " + ConnectionWithAccess.tablename[1] + " f1To on f1To.a_n = f22.TO_A_N and f1To.s_a = f22.TO_S_A  " +
     " where f22.a_n = '" + poa_n.Text + "' and f22.prd = '" + ConnectionWithAccess.mprd + "' and f22.d_c = " + podbc.SelectedValue.ToString() + " and f22.d_n <> 99999999 and f22.d_n <> 999999 order by f22.d_d desc";

            ConnectionCommand.accountHelp_datatable_GridColumns(poorderlist, "poorderlist");
        }

        private void fill_bank_trans_list()
        {
            //r_p = 2 Receipt
            // r_p = 4 payment
            // r_p - 1 "Cash Deposit"
            //r_p = 3 cash withdrawal
            if (subtabbank.SelectedIndex == 0)
            {
                ConnectionWithAccess.query = "select f23.D_D, f23.D_N, f1.[desc] as [Desc], f1.city, f23.bamt, f23.ck_no,f23.ck_dt,f23.bank,f23.pass_date,f23.mess, f23.a_n, f23.s_a, f23.b_t, f23.r_p from " + ConnectionWithAccess.tablename[23] + " f23 inner join " + ConnectionWithAccess.tablename[1] + " f1 on f23.a_n = f1.a_n and f23.s_a = f1.s_a and f23.d_y = f1.d_y where f23.prd = '" + ConnectionWithAccess.mprd + "' and d_c = " + brdbc.SelectedValue.ToString() + " and F23.d_n <> 999999 and f23.r_p = '2' order by f23.d_d desc, f23.d_n desc";
                ConnectionCommand.accountHelp_datatable_Seperate(brtranlist, "brtranlist");
                brdatetime.MinDate = Convert.ToDateTime(ConnectionWithAccess.com_start_date);
                brdatetime.MaxDate = Convert.ToDateTime(ConnectionWithAccess.medate);
                brdatetime.MinDate = Convert.ToDateTime(ConnectionWithAccess.msdate);
                if (brtranlist.Rows.Count >= 1)
                    brdatetime.Value = Convert.ToDateTime(brtranlist.Rows[0].Cells[0].Value.ToString());
                else
                    brdatetime.Value = Convert.ToDateTime(ConnectionWithAccess.msdate);
            }
            else if (subtabbank.SelectedIndex == 1)
            {
                ConnectionWithAccess.query = "select f23.D_D, f23.D_N, f1.[desc] as [Desc], f1.city, f23.bamt, f23.ck_no,f23.ck_dt,f23.bank,f23.pass_date,f23.mess, f23.a_n, f23.s_a, f23.b_t, f23.r_p from " + ConnectionWithAccess.tablename[23] + " f23 inner join " + ConnectionWithAccess.tablename[1] + " f1 on f23.a_n = f1.a_n and f23.s_a = f1.s_a and f23.d_y = f1.d_y where f23.prd = '" + ConnectionWithAccess.mprd + "' and d_c = " + bpdbc.SelectedValue.ToString() + " and F23.d_n <> 999999 and f23.r_p = '4' order by f23.d_d desc, f23.d_n desc";
                ConnectionCommand.accountHelp_datatable_Seperate(bptranlist, "bptranlist");
                bpdatetime.MinDate = Convert.ToDateTime(ConnectionWithAccess.com_start_date);
                bpdatetime.MaxDate = Convert.ToDateTime(ConnectionWithAccess.medate);
                bpdatetime.MinDate = Convert.ToDateTime(ConnectionWithAccess.msdate);
                if (bptranlist.Rows.Count >= 1)
                    bpdatetime.Value = Convert.ToDateTime(bptranlist.Rows[0].Cells[0].Value.ToString());
                else
                {
                    bpdatetime.MaxDate = Convert.ToDateTime(ConnectionWithAccess.medate);
                    bpdatetime.MinDate = Convert.ToDateTime(ConnectionWithAccess.msdate);
                    bpdatetime.Value = Convert.ToDateTime(ConnectionWithAccess.msdate);
                }
            }
            else if (subtabbank.SelectedIndex == 2)
            {
                ConnectionWithAccess.query = "select f23.D_D, f23.D_N, f23.bamt, f23.mess from " + ConnectionWithAccess.tablename[23] + " f23 where f23.prd = '" + ConnectionWithAccess.mprd + "' and d_c = " + bddbc.SelectedValue.ToString() + " and F23.d_n <> 999999 and f23.r_p = '1' order by f23.d_d desc, f23.d_n desc";
                ConnectionCommand.accountHelp_datatable_Seperate(bdtranlist, "bdtranlist");
                bddatetime.MinDate = Convert.ToDateTime(ConnectionWithAccess.com_start_date);
                bddatetime.MaxDate = Convert.ToDateTime(ConnectionWithAccess.medate);
                bddatetime.MinDate = Convert.ToDateTime(ConnectionWithAccess.msdate);

                if (bdtranlist.Rows.Count >= 1)
                    bddatetime.Value = Convert.ToDateTime(bdtranlist.Rows[0].Cells[0].Value.ToString());
                else
                {
                    bddatetime.MaxDate = Convert.ToDateTime(ConnectionWithAccess.medate);
                    bddatetime.MinDate = Convert.ToDateTime(ConnectionWithAccess.msdate);
                    bddatetime.Value = Convert.ToDateTime(ConnectionWithAccess.msdate);
                }
            }
            else if (subtabbank.SelectedIndex == 3)
            {
                ConnectionWithAccess.query = "select f23.D_D, f23.D_N, f23.bamt, f23.mess from " + ConnectionWithAccess.tablename[23] + " f23 where f23.prd = '" + ConnectionWithAccess.mprd + "' and d_c = " + bwdbc.SelectedValue.ToString() + " and F23.d_n <> 999999 and f23.r_p = '3' order by f23.d_d desc, f23.d_n desc";
                ConnectionCommand.accountHelp_datatable_Seperate(bwtranlist, "bwtranlist");
                bwdatetime.MinDate = Convert.ToDateTime(ConnectionWithAccess.com_start_date);
                bwdatetime.MaxDate = Convert.ToDateTime(ConnectionWithAccess.medate);
                bwdatetime.MinDate = Convert.ToDateTime(ConnectionWithAccess.msdate);
                if (bwtranlist.Rows.Count >= 1)
                    bwdatetime.Value = Convert.ToDateTime(bwtranlist.Rows[0].Cells[0].Value.ToString());
                else
                {
                    bwdatetime.MaxDate = Convert.ToDateTime(ConnectionWithAccess.medate);
                    bwdatetime.MinDate = Convert.ToDateTime(ConnectionWithAccess.msdate);
                    bwdatetime.Value = Convert.ToDateTime(ConnectionWithAccess.msdate);
                }
            }
            else if (subtabbank.SelectedIndex == 4)
            {
                //ConnectionWithAccess.query = "select f23.D_D,f23.d_n, f1.[desc] as [tr_bank_name_1], '' as [tr_bank_name_2], (f23.bamt * -1),f23.mess,f23.d_c, f23.tran_d_c from " + ConnectionWithAccess.tablename[1] + " f1, " + ConnectionWithAccess.tablename[23] + " f23 where f1.a_n = f23.a_n and f1.s_a = f23.s_a and f23.prd = '" + ConnectionWithAccess.mprd + "' and F23.d_n <> 999999 and f23.r_p = '5' order by f23.d_d desc";
                //ConnectionWithAccess.query = "select f23.D_D,f23.d_n, '' as [desc], '' as [desc2], (f23.bamt * -1),f23.mess,f23.d_c, f23.tran_d_c from " + ConnectionWithAccess.tablename[23] + " f23 where f23.prd = '" + ConnectionWithAccess.mprd + "' and F23.d_n <> 999999 and f23.r_p = '5' order by f23.d_d desc";
                //ConnectionWithAccess.query = "select f23.D_D,f23.d_n, '' as [desc], '' as [desc2], (f23.bamt * -1),f23.mess,f23.d_c, f23.tran_d_c from " + ConnectionWithAccess.tablename[23] + " f23 where f23.prd = '" + ConnectionWithAccess.mprd + "' and F23.d_n <> 999999 and f23.tran_d_c <> 0 order by f23.d_d desc";
                ConnectionWithAccess.query = "select f23.D_D,f23.d_n, " + //'' as [desc], '' as [desc2], 
                    "(select distinct [a.desc] from " + ConnectionWithAccess.tablename[1] + " a inner join " + ConnectionWithAccess.tablename[23] + " b on b.a_n  = a.a_n " +
                        "where b.d_c = f23.d_c and d_n = 999999  and a.s_a ='@@@') as [desc], " +
                    "(select distinct [a.desc] from " + ConnectionWithAccess.tablename[1] + " a inner join " + ConnectionWithAccess.tablename[23] + " b on b.a_n  = a.a_n " +
                        "where b.d_c = f23.tran_d_c and d_n = 999999  and a.s_a ='@@@') as [desc2], " +
                    " f23.bamt, f23.mess, f23.d_c, f23.tran_d_c " +
                " from " + ConnectionWithAccess.tablename[23] + " f23 where f23.prd = '" + ConnectionWithAccess.mprd + "' and F23.d_n <> 999999 and f23.tran_d_c <> 0 order by f23.d_d desc, f23.d_n desc";

                ConnectionCommand.accountHelp_datatable_Seperate(tr_datagridview, "tr_datagridview");
            }
        }

        private void fill_cr_tran_list()
        {
            //r_p = 2 Receipt
            // r_p = 4 payment
            // r_p - 1 "Cash Deposit"
            //r_p = 3 cash withdrawal
            ConnectionWithAccess.query = "select f24.d_d, f24.d_n, f1.[desc] as [Desc], f1.city, f24.camt, f24.mess, f24.a_n, f24.s_a from " + ConnectionWithAccess.tablename[24] + " f24 inner join " + ConnectionWithAccess.tablename[1] + " f1 on f24.a_n = f1.a_n and f24.s_a = f1.s_a and f24.d_y = f1.d_y where prd = '" + ConnectionWithAccess.mprd + "' and d_c = " + crdbc.SelectedValue.ToString() + " and d_n <> 999999 and r_p = '2' and b_t ='3' and camt > 0 order by f24.d_d desc , f24.d_n desc";
            ConnectionCommand.accountHelp_datatable_Seperate(crtranlist, "crtranlist");
        }

        private void fill_cp_tran_list()
        {
            //r_p = 2 Receipt
            // r_p = 4 payment
            // r_p - 1 "Cash Deposit"
            //r_p = 3 cash withdrawala
            ConnectionWithAccess.query = "select f24.d_d, f24.d_n, f1.[desc] as [Desc], f1.city, f24.camt, f24.mess, f24.a_n, f24.s_a from " + ConnectionWithAccess.tablename[24] + " f24 inner join " + ConnectionWithAccess.tablename[1] + " f1 on f24.a_n = f1.a_n and f24.s_a = f1.s_a and f24.d_y = f1.d_y where prd = '" + ConnectionWithAccess.mprd + "' and d_c = " + cpdbc.SelectedValue.ToString() + " and d_n <> 999999 and r_p = '4' and b_t ='3' order by f24.d_d desc , f24.d_n desc";
            ConnectionCommand.accountHelp_datatable_Seperate(cptranlist, "cptranlist");
        }

        private void fill_jr_tran_list()
        {
            if (jjdbc.Items.Count > 0)
            {
                if (jjdbc.SelectedIndex == -1)
                    jjdbc.SelectedIndex = 0;
                ConnectionWithAccess.query = "select f25.d_d, f25.d_n, f1a.Desc as name1, f1a.City as city1, f25.jamt, f1b.desc as name2, f1b.City as city2, f25.mess, f25.a_n, f25.s_a, f25.na_n, f25.ns_a, f25.basic_amt, f25.igst_per, f25.igst_amt " +
                               " from " + ConnectionWithAccess.tablename[25] + " f25, " + ConnectionWithAccess.tablename[1] + " f1a, " + ConnectionWithAccess.tablename[1] + " f1b " +
                              " where  f1a.a_n = f25.a_n and f1a.s_a = f25.s_a and f1a.d_y='@@@' and " +
                              " f1b.a_n = f25.na_n and f1b.s_a = f25.ns_a and f1b.d_y='@@@' and " +
                              " f25.prd = '" + ConnectionWithAccess.mprd + "' and f25.d_c = " + jjdbc.Text + " and f25.d_n <> 999999 order by f25.d_d desc, f25.d_n desc ";

                ConnectionCommand.accountHelp_datatable_Seperate(jjtranlist, "jjtranlist");
                jjdatetime.MinDate = Convert.ToDateTime(ConnectionWithAccess.com_start_date);
                jjdatetime.MaxDate = Convert.ToDateTime(ConnectionWithAccess.medate);
                jjdatetime.MinDate = Convert.ToDateTime(ConnectionWithAccess.msdate);
                //if (jjtranlist.Rows.Count >= 1)
                //    jjdatetime.Value = Convert.ToDateTime(jjtranlist.Rows[0].Cells[0].Value.ToString());
                //else
                //{
                //    jjdatetime.MaxDate = Convert.ToDateTime(ConnectionWithAccess.medate);
                //    jjdatetime.MinDate = Convert.ToDateTime(ConnectionWithAccess.msdate);
                //    jjdatetime.Value = Convert.ToDateTime(ConnectionWithAccess.msdate);
                //}
            }
        }

        private void fill_dgv_item_in_which_batch_list()
        {
            ConnectionWithAccess.query = "select title from " + ConnectionWithAccess.tablename[16] + " where btype = '" + tbItemType.Text + "' and BITEM_CD = '" + tbItemCode.Text + "'";
            ConnectionCommand.accountHelp_datatable_Seperate(dgv_item_in_which_batch_list, "dgv_item_in_which_batch_list");
            if (dgv_item_in_which_batch_list.Rows.Count > 0)
                dgv_item_in_which_batch_list.Visible = true;
            else
                dgv_item_in_which_batch_list.Visible = false;
        }

        #endregion

        #region click

        private void atbnew_Click(object sender, EventArgs e)
        {
            PleaseWait objPleaseWait = new PleaseWait("Please wait opening New Data File....");
            objPleaseWait.Show();
            Application.DoEvents();
            function_working = "New";
            dgvStdCodeHelp.Visible = false;
            if (maintab.SelectedIndex == 1)
            {
                // data entry
                if (subtabDataEntry.SelectedIndex == 0 && subtabsale.SelectedIndex == 0)
                {
                    new_sale_invoice = true;
                    refresh_data_entry_sale_for_new_record();
                    sipartycode.Focus();
                }
                else if (subtabDataEntry.SelectedIndex == 0 && subtabsale.SelectedIndex == 1)
                    refresh_data_entry_sale_replacement_for_new_record();
                else if (subtabDataEntry.SelectedIndex == 0 && subtabsale.SelectedIndex == 2)
                    refresh_data_entry_sale_order_for_new_record();
                else if (subtabDataEntry.SelectedIndex == 0 && subtabsale.SelectedIndex == 3)
                {
                    new_sale_invoice = true;
                    refresh_data_entry_simple_sale_for_new_record();
                }
                else if (subtabDataEntry.SelectedIndex == 1)
                    refresh_data_entry_purc_for_new_record();
                else if (subtabDataEntry.SelectedIndex == 2)
                {
                    if (subtabbank.SelectedIndex == 0)
                        refresh_data_entry_bank_for_new_record();
                    else if (subtabbank.SelectedIndex == 1)
                        refresh_data_entry_bank_for_new_record();
                    else if (subtabbank.SelectedIndex == 2)
                        refresh_data_entry_bank_for_new_record();
                    else if (subtabbank.SelectedIndex == 3)
                        refresh_data_entry_bank_for_new_record();
                    else if (subtabbank.SelectedIndex == 4)
                        refresh_data_entry_bank_for_new_record();
                }
                else if (subtabDataEntry.SelectedIndex == 3)
                    refresh_data_entry_cash_for_new_record();
                else if (subtabDataEntry.SelectedIndex == 4)
                    refresh_data_entry_journal_for_new_record();
                else if (subtabDataEntry.SelectedIndex == 5 && tc_dataentry_additional.SelectedIndex == 0)
                {
                    refresh_item_stock_list();
                }
                else if (subtabDataEntry.SelectedIndex == 5 && tc_dataentry_additional.SelectedIndex == 2)
                {
                    pnlBankExcel.Visible = false;
                    dgvBankExcelUpload.Visible = false;
                    dgvBankExcelUpload.DataSource = null;
                }
            }
            else if (maintab.SelectedIndex == 2 && subtabMasters.SelectedIndex == 0)
            {
                // tbDesc.Text = "";
                refresh_master_account();
                if (cbParent.SelectedItem.Equals("INVESTMENTS"))
                {
                    check_data_type(tbA_N.Text.Trim());
                    if (data_type == "Numeric")
                    {
                        tbA_N.Text = (Convert.ToInt32(tbA_N.Text) + 1).ToString();
                        tbDesc.Text = "";
                    }
                }
            }
            else if (maintab.SelectedIndex == 2 && subtabMasters.SelectedIndex == 1)
            {
                refresh_item_master();
            }
            else if (maintab.SelectedIndex == 2 && subtabMasters.SelectedIndex == 2)
            {
                refresh_tax_master();
            }
            else if (maintab.SelectedIndex == 2 && subtabMasters.SelectedIndex == 3)
            {
                daybooklistmastertab();
            }
            else if (maintab.SelectedIndex == 2 && subtabMasters.SelectedIndex == 4)
            {
                refresh_master_period();
            }
            else if (maintab.SelectedIndex == 2 && subtabMasters.SelectedIndex == 5)
            {
                create_new_additional();
            }
            else if (maintab.SelectedIndex == 2 && subtabMasters.SelectedIndex == 6)
            {
                cmbArea.Visible = false;
                txtNewArea.Visible = true;
                txtNewArea.Text = "";
                cmbArea.Text = "";
                cmbArea.SelectedIndex = 0;
                cmbArea.Visible = true;
                fFillAreaGrid();
            }
            else if (maintab.SelectedIndex == 2 && subtabMasters.SelectedIndex == 7)
            {
                tb_fix_desc.Enabled = true;
                tb_fix_a_n.Text = "";
                tb_fix_s_a.Text = "";
                tb_fix_desc.Text = "";
                tb_fix_city.Text = "";
                tb_merge_a_n.Text = "";
                tb_merge_s_a.Text = "";
                tb_merge_desc.Text = "";
                tb_merge_city.Text = "";
                lbl_fixed_account_head.Text = "";
                lbl_merge_account_head.Text = "";
            }
            else if (maintab.SelectedIndex == 2 && subtabMasters.SelectedIndex == 8)
            {
                refresh_item_batch_list();
            }
            else if (maintab.SelectedIndex == 2 && subtabMasters.SelectedIndex == 9)
            {
                tb_fixed_item_title.Enabled = true;
                lbl_fixed_item_type.Text = "";
                lbl_fixed_item_code.Text = "";
                tb_fixed_item_title.Text = "";
                lbl_merge_item_type.Text = "";
                lbl_merge_item_code.Text = "";
                tb_merge_item_title.Text = "";
                item_merge_help.Visible = false;
                tb_fixed_item_title.Focus();
            }
            else if (maintab.SelectedIndex == 3 && subtabreports.SelectedIndex == 0)
            {
                pdf_viewer1.Visible = false;
                gdvreport.Visible = false;
                dgv_tax_report.Visible = false;
                cbRepSubType.Items.Clear();
                cbRepFormat.Items.Clear();
                cbRepFormat.Visible = true;
            }
            else if (maintab.SelectedIndex == 3 && subtabreports.SelectedIndex == 1)
            {
                tb_ledger_account_name.Text = "";
                btn_gen_ledg.Visible = false;
                LedDGV.Visible = false;
                tb_ledger_account_name.Focus();
            }
            else if (maintab.SelectedIndex == 4 && subtabsettings.SelectedIndex == 0)
                refresh_user_settings();
            else if (maintab.SelectedIndex == 4 && subtabsettings.SelectedIndex == 2)
            {
                comattach new_company_creation_form = new comattach();
                new_company_creation_form.Show();
                this.Hide();
            }
            show_images();
            if (maintab.SelectedIndex != 2 && subtabMasters.SelectedIndex != 1)
                atbcancel_Click(sender, e);
            objPleaseWait.Close();
        }

        private void atbsave_Click(object sender, EventArgs e)
        {
            if (backup == false)
            {
                PleaseWait objPleaseWait = new PleaseWait("Please wait saving data...");
                objPleaseWait.Show();
                Application.DoEvents();
                qr_image_details = null;
                if (access_line2 != null && access_line2.Length <= 2)
                {
                    if (maintab.SelectedIndex == 1)
                    {
                        //DATA ENTRY
                        save_data_entry();
                    }
                    else if (maintab.SelectedIndex == 2)
                    {
                        //maintain
                        if (subtabMasters.SelectedIndex == 0)
                        {
                            save_master_account();
                            fLoad_Account_Master_List();
                            fLoad_full_account_master_list();
                            fLoad_Party_Master_List();
                        }
                        else if (subtabMasters.SelectedIndex == 1)
                        {
                            save_master_item();
                            itemlistmastertab();
                            refresh_item_master();
                            fLoad_Item_Master_List();
                        }
                        else if (subtabMasters.SelectedIndex == 2)
                        {
                            insert_master_tax();
                            taxlistmatertab();
                            refresh_tax_master();
                        }
                        else if (subtabMasters.SelectedIndex == 3)
                        {
                            insert_master_daybook_code();
                        }
                        else if (subtabMasters.SelectedIndex == 4)
                        {
                            if (tbGP.Text == "")
                                tbGP.Text = "0";
                            ConnectionWithAccess.query = "select prd, [start], [end] from " + ConnectionWithAccess.tablename[50] + " where prd = '" + tbPrd.Text + "'";
                            DataTable dtData1 = ConnectionCommand.fGetDataTable();
                            if (dtData1 != null && dtData1.Rows.Count > 0)
                            {
                                if (tb_print_form.Text == "")
                                    tb_print_form.Text = "1";
                                if (cbprdlock.Checked == true)
                                    ConnectionWithAccess.query = "update " + ConnectionWithAccess.tablename[50] + " set [start] = '" + dtPrdSD.Value.ToShortDateString() + "', [End] = '" + dtPrdED.Value.ToShortDateString() + "', [lock] = 'Y'" + " , gp = '" + tbGP.Text + "', vat = '" + tb_vat_tax_required.Text + "', s_form = '" + tb_print_form.Text + "' where prd = '" + tbPrd.Text + "'";
                                else
                                    ConnectionWithAccess.query = "update " + ConnectionWithAccess.tablename[50] + " set [start] = '" + dtPrdSD.Value.ToShortDateString() + "', [End] = '" + dtPrdED.Value.ToShortDateString() + "', [lock] = 'N'" + " , gp = '" + tbGP.Text + "', vat = '" + tb_vat_tax_required.Text + "', s_form = " + tb_print_form.Text + " where prd = '" + tbPrd.Text + "'";
                                ConnectionCommand.fUpdateInsertDeleteData();
                            }
                            else
                            {
                                ConnectionWithAccess.query = "insert into " + ConnectionWithAccess.tablename[50] + " (prd, [start], [end],  [lock], gp, vat, s_form, [user], insert_dt_tm) values('" + tbPrd.Text + "', '" + dtPrdSD.Text + "','" + dtPrdED.Text + "', '" + "N" + "', " + tbGP.Text.Trim() + " , '" + tb_vat_tax_required.Text.Trim() + "', " + tb_print_form.Text.Trim() + ",'" + ConnectionWithAccess.muser + "', @currDate )";
                                add_user_date_time_function_compulsory_program();
                                ConnectionCommand.fUpdateInsertDeleteData();
                                mtbname = ConnectionWithAccess.mNIK + "_0021";
                                ConnectionWithAccess.query = "insert into " + mtbname + " (prd,d_c,b_t,d_n,d_d,a_n, [user], insert_dt_tm) values ('" + tbPrd.Text + "', 1, '1',999999, '" + Convert.ToDateTime("01/01/1901") + "' ,'2002','" + ConnectionWithAccess.muser + "', @currDate )";
                                add_user_date_time_function_compulsory_program();
                                ConnectionCommand.fUpdateInsertDeleteData();
                                mtbname = ConnectionWithAccess.mNIK + "_0022";
                                ConnectionWithAccess.query = "insert into " + mtbname + " (prd,d_c,b_t,d_n,d_d,a_n, [user], insert_dt_tm) values ('" + tbPrd.Text + "', 2, '1',999999, '" + Convert.ToDateTime("01/01/1901") + "' ,'4002','" + ConnectionWithAccess.muser + "', @currDate )";
                                add_user_date_time_function_compulsory_program();
                                ConnectionCommand.fUpdateInsertDeleteData();
                                mtbname = ConnectionWithAccess.mNIK + "_0023";
                                ConnectionWithAccess.query = "insert into " + mtbname + " (prd,d_c,b_t,d_n,d_d,a_n, [user], insert_dt_tm) values ('" + tbPrd.Text + "', 3, '1',999999, '" + Convert.ToDateTime("01/01/1901") + "' ,'2011','" + ConnectionWithAccess.muser + "', @currDate )";
                                add_user_date_time_function_compulsory_program();
                                ConnectionCommand.fUpdateInsertDeleteData();
                                mtbname = ConnectionWithAccess.mNIK + "_0024";
                                ConnectionWithAccess.query = "insert into " + mtbname + " (prd,d_c,b_t,d_n,d_d,a_n,mess, [user], insert_dt_tm) values ('" + tbPrd.Text + "', 4, '1',999999, '" + Convert.ToDateTime("01/01/1901") + "' ,'2010','2002','" + ConnectionWithAccess.muser + "', @currDate )"; ;
                                add_user_date_time_function_compulsory_program();
                                ConnectionCommand.fUpdateInsertDeleteData();
                                ConnectionWithAccess.query = "insert into " + mtbname + " (prd,d_c,b_t,d_n,d_d,a_n,mess, [user], insert_dt_tm) values ('" + tbPrd.Text + "', 20, '1',999999, '" + Convert.ToDateTime("01/01/1901") + "' ,'2010','2002','" + ConnectionWithAccess.muser + "', @currDate )";
                                add_user_date_time_function_compulsory_program();
                                ConnectionCommand.fUpdateInsertDeleteData();
                                mtbname = ConnectionWithAccess.mNIK + "_0025";
                                ConnectionWithAccess.query = "insert into " + mtbname + " (prd,d_c,b_t,d_n,d_d, [user], insert_dt_tm) values ('" + tbPrd.Text + "', 5, '1',999999, '" + Convert.ToDateTime("01/01/1901").ToShortDateString() + "','" + ConnectionWithAccess.muser + "', @currDate )";
                                add_user_date_time_function_compulsory_program();
                                ConnectionCommand.fUpdateInsertDeleteData();
                                mtbname = ConnectionWithAccess.mNIK + "_0030";
                                ConnectionWithAccess.query = "insert into " + mtbname + " (prd,d_c,b_t,d_n,d_d,a_n, [user], insert_dt_tm) values ('" + tbPrd.Text + "', 30, '1',999999, '" + Convert.ToDateTime("01/01/1901").ToShortDateString() + "' ,'2002','" + ConnectionWithAccess.muser + "', @currDate )";
                                add_user_date_time_function_compulsory_program();
                                ConnectionCommand.fUpdateInsertDeleteData();
                            }
                            periodlistmastertab();
                        }
                        else if (subtabMasters.SelectedIndex == 5)
                        {
                            save_additional_account();
                        }
                        else if (subtabMasters.SelectedIndex == 6)
                        {
                            save_area();
                        }
                        else if (subtabMasters.SelectedIndex == 8)
                        {
                            add_item_batch_list();
                            refresh_item_batch_list();
                        }
                    }
                    else if (maintab.SelectedIndex == 3)
                    {
                        if (subtabreports.SelectedIndex == 0)
                        {
                        }
                        else if (subtabreports.SelectedIndex == 1)
                        {
                        }
                        else if (subtabreports.SelectedIndex == 2)
                        {
                            if (cbBalShPer.Text != "@" || gb_tradingacc.Visible == true)
                            {
                                save_balance_sheet_gp_values(cbBalShPer.Text);
                                calculate_closing_capital_balance_and_add_in_new_period(cbBalShPer.Text, ConnectionWithAccess.get_old_prd_name(cbBalShPer.Text));
                            }
                        }
                        else if (subtabreports.SelectedIndex == 3)
                        {
                            if (cmbDateRangeGST.Text != "Custom Range")
                            {
                                temp_word = cmbDateRangeGST.Text + " " + Convert.ToDateTime(dtp_rg_from_date.Text).Year;
                                insert_update_gst_amount_in_file(temp_word);
                                move_cursor_to_button_position("save_gst_report_go_to_change_period");
                            }
                        }
                    }
                    else if (maintab.SelectedIndex == 4 && subtabsettings.SelectedIndex == 0)
                    {
                        add_update_user();
                        changestatusaspermemory();
                    }
                    else if (maintab.SelectedIndex == 4 && subtabsettings.SelectedIndex == 2)
                    {
                        save_company_text_file();
                    }
                }
                objPleaseWait.Close();
            }
        }

        private void save_bank_excel_record()
        {
            try
            {
                if (!string.IsNullOrEmpty(txtBankAccountName.Text.Trim()) && dgvBankExcelAccName.Rows.Count > 0)
                {
                    fUploadBankDetails();
                    //MessageBox.Show("Bank Excel Upload successfull");
                }
                else if (cb_BU_to_dc.SelectedValue.ToString() != "0")
                {
                    fUploadBankDetails();
                    //MessageBox.Show("Bank Excel Upload successfull");
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("Error in Bank Excel upload - " + ex.Message);
            }
        }

        private void insert_update_gst_amount_in_file(string mperiod)
        {
            ConnectionWithAccess.query = "delete from " + ConnectionWithAccess.tablename[12] + " where prd = '" + ConnectionWithAccess.mprd + "' and [month] = '" + mperiod + "'";
            ConnectionCommand.fUpdateInsertDeleteData();
            if (gst_amount_list.Count > 1)
            {
                ConnectionWithAccess.query = "insert into " + ConnectionWithAccess.tablename[12] + " (PRD,[month],tax_type,sale_amt,purc_amt,bank_amt,cash_amt,jour_amt,credit_amt,debit_amt,balance_amt,[USER],insert_dt_tm) values('" + ConnectionWithAccess.mprd + "' , '" + mperiod + "' , 'IGST'," + Convert.ToDouble(gst_amount_list[10]) + " , " + Convert.ToDouble(gst_amount_list[11]) + " , " + Convert.ToDouble(gst_amount_list[12]) + " , " + Convert.ToDouble(gst_amount_list[13]) + " , " + Convert.ToDouble(gst_amount_list[14]) + " , " + Convert.ToDouble(gst_amount_list[15]) + " , " + Convert.ToDouble(gst_amount_list[16]) + " , " + Convert.ToDouble(gst_amount_list[17]) + " , '" + ConnectionWithAccess.muser + "', @currDate )";
                add_user_date_time_function_compulsory_program();
                ConnectionCommand.fUpdateInsertDeleteData();
                ConnectionWithAccess.query = "insert into " + ConnectionWithAccess.tablename[12] + " (PRD,[month],tax_type,sale_amt,purc_amt,bank_amt,cash_amt,jour_amt,credit_amt,debit_amt,balance_amt,[USER],insert_dt_tm) values('" + ConnectionWithAccess.mprd + "' , '" + mperiod + "' , 'CGST'," + Convert.ToDouble(gst_amount_list[0]) + " , " + Convert.ToDouble(gst_amount_list[1]) + " , " + Convert.ToDouble(gst_amount_list[2]) + " , " + Convert.ToDouble(gst_amount_list[3]) + " , " + Convert.ToDouble(gst_amount_list[4]) + " , " + Convert.ToDouble(gst_amount_list[18]) + " , " + Convert.ToDouble(gst_amount_list[19]) + " , " + Convert.ToDouble(gst_amount_list[20]) + " , '" + ConnectionWithAccess.muser + "', @currDate )";
                add_user_date_time_function_compulsory_program();
                ConnectionCommand.fUpdateInsertDeleteData();
                ConnectionWithAccess.query = "insert into " + ConnectionWithAccess.tablename[12] + " (PRD,[month],tax_type,sale_amt,purc_amt,bank_amt,cash_amt,jour_amt,credit_amt,debit_amt,balance_amt,[USER],insert_dt_tm) values('" + ConnectionWithAccess.mprd + "' , '" + mperiod + "' , 'SGST'," + Convert.ToDouble(gst_amount_list[5]) + " , " + Convert.ToDouble(gst_amount_list[6]) + " , " + Convert.ToDouble(gst_amount_list[7]) + " , " + Convert.ToDouble(gst_amount_list[8]) + " , " + Convert.ToDouble(gst_amount_list[9]) + " , " + Convert.ToDouble(gst_amount_list[21]) + " , " + Convert.ToDouble(gst_amount_list[22]) + " , " + Convert.ToDouble(gst_amount_list[23]) + " , '" + ConnectionWithAccess.muser + "', @currDate )";
                add_user_date_time_function_compulsory_program();
                ConnectionCommand.fUpdateInsertDeleteData();
            }
        }

        private void subtabDataEntry_Click(object sender, EventArgs e)
        {
            current_tab_control_position();
            getdaybookcode();
        }

        private void subtabpurchase_Click(object sender, EventArgs e)
        {

            getdaybookcode();
        }

        private void subtabbank_Click(object sender, EventArgs e)
        {
            if (maintab.SelectedIndex == 1)
            {
                getdaybookcode();
                refresh_bank_document_number();
            }
        }

        private void PopulateSaleDetails(int iRowIndex = -1)
        {
            if (subtabsale.SelectedIndex == 0)
            {
                sale_invoice_saved = true;
                new_sale_invoice = false;
                msalepdf = null;
                if (ConnectionWithAccess.company_details[31] == "1")
                {
                    cb_print_Tpt_copy.Visible = true;
                    cb_print_chit_copy.Visible = true;
                }
                pdf_invoice.Visible = false;
                if (iRowIndex != -1)
                {
                    sidocno.Text = Convert.ToString(sisalelistdg.Rows[iRowIndex].Cells[1].Value);
                }
                else
                {
                    sidocno.Text = Convert.ToString(sisalelistdg.SelectedCells[1].Value);
                }
            }
            else if (subtabsale.SelectedIndex == 2)
            {
                sodocno.Text = Convert.ToString(sosalelistdg.SelectedCells[1].Value);
            }
            else if (subtabsale.SelectedIndex == 3)
            {
                msalepdf = null;
                if (ConnectionWithAccess.company_details[31] == "1")
                {
                    cb_print_Tpt_copy.Visible = true;
                    cb_print_chit_copy.Visible = true;
                }
                pdf_invoice.Visible = false;
                simple_docno.Text = Convert.ToString(simple_salelist.SelectedCells[1].Value);
            }
        }

        private void MainForm_KeyDown(object sender, KeyEventArgs e)
        {
            //MessageBox.Show("Keydown");
            if (e.KeyCode == Keys.F12)
            {
                isEscKeyPressed = true;
                Application.Restart();
                Environment.Exit(0);

            }
            if (maintab.SelectedIndex == 0 && e.KeyCode == Keys.Escape)
            {
                move_cursor_to_button_position("Exit_ok");
                const string message = "Do you want to close application?";
                const string caption = "Close Sharp";
                var result = MessageBox.Show(message, caption,
                                             MessageBoxButtons.YesNo,
                                             MessageBoxIcon.Question);
                if (result == DialogResult.Yes)
                {
                    fDeleteCompanyInUseFile();
                    login_user_time_out();
                    //if (ConnectionWithAccess.detach_exit == "Y")
                    //{
                    //    detachandcloseapplication();
                    //}
                    //this.ParentForm.Dispose();
                    System.Environment.Exit(1);
                    System.Windows.Forms.Application.Exit();
                    Application.Exit();
                    this.Close();
                }
            }
            //if (e.Alt && e.KeyCode == Keys.H || e.KeyCode == Keys.Escape)
            if (e.Alt && e.KeyCode == Keys.H || e.KeyCode == Keys.Escape)
            { maintab.SelectedIndex = 0; maintab_Click(sender, e); }
            else if (e.Alt && e.KeyCode == Keys.D)
            { maintab.SelectedIndex = 1; maintab_Click(sender, e); }
            else if (e.Alt && e.KeyCode == Keys.M)
            { maintab.SelectedIndex = 2; maintab_Click(sender, e); }
            else if (e.Alt && e.KeyCode == Keys.R)
            { maintab.SelectedIndex = 3; maintab_Click(sender, e); }
            else if (e.Alt && e.KeyCode == Keys.E)
            { maintab.SelectedIndex = 4; maintab_Click(sender, e); }
            else if (e.Alt && e.KeyCode == Keys.U)
            { maintab.SelectedIndex = 5; maintab_Click(sender, e); }
            else if (e.Alt && e.KeyCode == Keys.F1)
            { maintab.SelectedIndex = 6; maintab_Click(sender, e); }
            else if (e.KeyCode == Keys.F9)
            {
                maintab.SelectedIndex = 3;
                maintab_Click(sender, e);
                subtabreports.SelectedIndex = 1;
                tb_ledger_account_name.Focus();
            }
            if (maintab.SelectedIndex == 1)
            {//Data Entry
                if (e.Alt && e.KeyCode == Keys.S)
                { subtabDataEntry.SelectedIndex = 0; subtabDataEntry_Click(sender, e); }
                else if (e.Alt && e.KeyCode == Keys.P)
                { subtabDataEntry.SelectedIndex = 1; subtabDataEntry_Click(sender, e); }
                else if (e.Alt && e.KeyCode == Keys.B)
                { subtabDataEntry.SelectedIndex = 2; subtabDataEntry_Click(sender, e); }
                else if (e.Alt && e.KeyCode == Keys.C)
                { subtabDataEntry.SelectedIndex = 3; subtabDataEntry_Click(sender, e); }
                else if (e.Alt && e.KeyCode == Keys.J)
                { subtabDataEntry.SelectedIndex = 4; subtabDataEntry_Click(sender, e); }
                else if (e.Alt && e.KeyCode == Keys.A)
                { subtabDataEntry.SelectedIndex = 5; subtabDataEntry_Click(sender, e); }
                if (subtabDataEntry.SelectedIndex == 0)
                {//Sale
                    if (e.Alt && e.KeyCode == Keys.I)
                        subtabsale.SelectedIndex = 0;
                    else if (e.Alt && e.KeyCode == Keys.Y)
                        subtabsale.SelectedIndex = 1;
                    else if (e.Alt && e.KeyCode == Keys.O)
                        subtabsale.SelectedIndex = 2;
                }
                else if (subtabDataEntry.SelectedIndex == 1)
                {//Purchase
                    if (e.Alt && e.KeyCode == Keys.I)
                    { subtabpurchase.SelectedIndex = 0; subtabpurchase_Click(sender, e); }
                    else if (e.Alt && e.KeyCode == Keys.Y)
                    { subtabpurchase.SelectedIndex = 1; subtabpurchase_Click(sender, e); }
                }
                else if (subtabDataEntry.SelectedIndex == 2)
                {//Bank
                    if (e.Alt && e.KeyCode == Keys.I)
                    { subtabbank.SelectedIndex = 0; subtabbank_Click(sender, e); }
                    else if (e.Alt && e.KeyCode == Keys.Y)
                    { subtabbank.SelectedIndex = 1; subtabbank_Click(sender, e); }
                    else if (e.Alt && e.KeyCode == Keys.D)
                    { subtabbank.SelectedIndex = 2; subtabbank_Click(sender, e); }
                    else if (e.Alt && e.KeyCode == Keys.W)
                    { subtabbank.SelectedIndex = 3; subtabbank_Click(sender, e); }
                    else if (e.Alt && e.KeyCode == Keys.T)
                    { subtabbank.SelectedIndex = 4; subtabbank_Click(sender, e); }
                }
                else if (subtabDataEntry.SelectedIndex == 3)
                {//Cash
                    if (e.Alt && e.KeyCode == Keys.I)
                    { subtabcash.SelectedIndex = 0; subtabcash_Click(sender, e); }
                    else if (e.Alt && e.KeyCode == Keys.Y)
                    { subtabcash.SelectedIndex = 1; subtabcash_Click(sender, e); }
                }
                else if (subtabDataEntry.SelectedIndex == 3)
                {//Additional
                    if (e.Alt && e.KeyCode == Keys.I)
                        tc_dataentry_additional.SelectedIndex = 0;
                    else if (e.Alt && e.KeyCode == Keys.Y)
                        tc_dataentry_additional.SelectedIndex = 1;
                    cb_bank_show.SelectedIndex = 0;
                }
            }
            else if (maintab.SelectedIndex == 2)
            {//Masters
                if (e.Alt && e.KeyCode == Keys.Y)
                { subtabMasters.SelectedIndex = 0; subtabMasters_click(sender, e); }
                else if (e.Alt && e.KeyCode == Keys.I)
                { subtabMasters.SelectedIndex = 1; subtabMasters_click(sender, e); }
                else if (e.Alt && e.KeyCode == Keys.T)
                { subtabMasters.SelectedIndex = 2; subtabMasters_click(sender, e); }
                else if (e.Alt && e.KeyCode == Keys.B)
                { subtabMasters.SelectedIndex = 3; subtabMasters_click(sender, e); }
                else if (e.Alt && e.KeyCode == Keys.P)
                { subtabMasters.SelectedIndex = 4; subtabMasters_click(sender, e); }
                else if (e.Alt && e.KeyCode == Keys.A)
                { subtabMasters.SelectedIndex = 5; subtabMasters_click(sender, e); }
            }
            else if (maintab.SelectedIndex == 3)
            {//Reports
                if (e.Alt && e.KeyCode == Keys.A)
                    subtabreports.SelectedIndex = 0;
                else if (e.Alt && e.KeyCode == Keys.L)
                {
                    subtabreports.SelectedIndex = 1;
                    tb_ledger_account_name.Focus();
                }
                else if (e.Alt && e.KeyCode == Keys.T)
                    subtabreports.SelectedIndex = 2;
                else if (e.Alt && e.KeyCode == Keys.G)
                    subtabreports.SelectedIndex = 3;
                else if (e.Alt && e.KeyCode == Keys.C)
                    subtabreports.SelectedIndex = 4;
                else if (e.Control && e.KeyCode == Keys.F2)
                    atbpreview_Click(sender, e);
            }
            else if (maintab.SelectedIndex == 4)
            {//Settings
                if (e.Alt && e.KeyCode == Keys.Y)
                { subtabsettings.SelectedIndex = 0; subtabsettings_Click(sender, e); }
                else if (e.Alt && e.KeyCode == Keys.G)
                { subtabsettings.SelectedIndex = 1; subtabsettings_Click(sender, e); }
                else if (e.Alt && e.KeyCode == Keys.C)
                { subtabsettings.SelectedIndex = 2; subtabsettings_Click(sender, e); }
            }
            else if (maintab.SelectedIndex == 5)
            {//Help
                if (e.Alt && e.KeyCode == Keys.G)
                    subtabhelp.SelectedIndex = 0;
                else if (e.Alt && e.KeyCode == Keys.I)
                    subtabhelp.SelectedIndex = 1;
                else if (e.Alt && e.KeyCode == Keys.Y)
                    subtabhelp.SelectedIndex = 2;
            }
            //if (e.KeyCode == Keys.F12)
            //{
            //    periodgridview.Visible = true;
            //    ConnectionWithAccess.query = "select prd, start, [end] from " + ConnectionWithAccess.tablename[50] + " order by prd desc";
            //    ConnectionCommand.accountHelp(periodgridview, "ChangePeriod");
            //}
            //if(e.KeyCode.ToString() == "F12") 
            //{
            //       periodgridview.Visible = true;
            //    ConnectionWithAccess.query = "select prd, start, [end] from " + ConnectionWithAccess.tablename[50] + " order by prd desc";
            //    ConnectionCommand.accountHelp(periodgridview, "ChangePeriod");
            //}
            //if (e.KeyCode.ToString() == "Ctrl+S")
            //{
            //    atbsave_Click(sender, e);
            //}
        }

        private void PopulateSale_replacement_Details()
        {
            msalepdf = null;
            if (ConnectionWithAccess.company_details[31] == "1")
            {
                cb_print_Tpt_copy.Visible = true;
                cb_print_chit_copy.Visible = true;
            }
            pdf_invoice.Visible = false;
            //srdocno.Text = Convert.ToString(sisalelistdg.SelectedCells[1].Value);
        }

        private void PopulatepurchaseDetails()
        {
            new_purc_invoice = false;
            pdf_invoice.Visible = false;
            pidatetime.MinDate = Convert.ToDateTime(ConnectionWithAccess.com_start_date);
            pidatetime.MaxDate = Convert.ToDateTime(ConnectionWithAccess.com_end_date);
            pidatetime.Value = Convert.ToDateTime(pipurchaselist.SelectedCells[0].Value);
            pipartycode.Text = Convert.ToString(pipurchaselist.SelectedCells[2].Value);
            picity.Text = Convert.ToString(pipurchaselist.SelectedCells[3].Value);
            pia_n.Text = Convert.ToString(pipurchaselist.SelectedCells[7].Value);
            pis_a.Text = Convert.ToString(pipurchaselist.SelectedCells[8].Value);

            txtToParty.Text = Convert.ToString(pipurchaselist.SelectedCells[14].Value);
            pi_To_a_n.Text = Convert.ToString(pipurchaselist.SelectedCells[12].Value);
            pi_To_s_a.Text = Convert.ToString(pipurchaselist.SelectedCells[13].Value);


            pidocno.Text = Convert.ToString(pipurchaselist.SelectedCells[1].Value);
            old_purchase_invoice_number = pidocno.Text;
            if (periodofgst == true)
                pitx_code.Visible = false;
            else
                pitx_code.Visible = true;
            //populate_screen();
            //oldpurcinvoicedetails();
            //purchase_invoice_item_filling();
        }

        private void check_for_permission_and_sale_invoice_printed()
        {
            string temp_print;
            temp_print = "N";
            ConnectionWithAccess.query = "select print from " + ConnectionWithAccess.tablename[21] + " f21 where d_n  " + (sidocno.Text.Trim() == string.Empty ? "is null" : "= " + sidocno.Text.Trim()) + " and prd = '" + ConnectionWithAccess.mprd + "' and d_c = " + sidbc.SelectedValue.ToString();
            DataTable dtData1 = ConnectionCommand.fGetDataTable();

            if (dtData1 != null && dtData1.Rows.Count > 0)
            {
                if (dtData1.Rows[0][0] != null)
                    temp_print = dtData1.Rows[0][0].ToString();
            }
            if (temp_print == "Y" && !chbPriveditaccount.Checked)
            {
                sipartycode.ReadOnly = true;
                sidatetime.Enabled = false;
                sitransport.Enabled = false;
                sibasicamt.Enabled = false;
                siitemlist.Enabled = false;
                sitaxcode.Enabled = false;
            }
            else
            {
                if (sis_a.Text != "" && sid_y.Text == "")
                    sipartycode.ReadOnly = true;
                sidatetime.Enabled = true;
                sitransport.Enabled = true;
                sibasicamt.Enabled = true;
                siitemlist.Enabled = true;
                sitaxcode.Enabled = true;
            }
        }

        public void invisible_all_image()
        {
            btn_sms_account_balance.Visible = false; // send ledger balance on sms
            BtnLedgerWhastupBalanceAmount.Visible = false;
            lbl_sms_balance_amount.Visible = false;
            lbl_sms_balance_date.Visible = false;
            lbl_sms_balance_mobile_number.Visible = false;
            pb_common.Visible = false;
            pb_visiting_card.Visible = false;
            pb_invoice_imgPanel.Visible = false;
            cp_master_acc_name.Visible = false;
            pb_transport_copy.Visible = false;
            pb_personal_photo.Visible = false;
            pb_product.Visible = false;
        }

        public void clear_all_images()
        {
            if (pb_common.Image != null)
                pb_common.Image.Dispose();
            pb_common.Image = null;
            if (pb_visiting_card.Image != null)
                pb_visiting_card.Image.Dispose();
            pb_visiting_card.Image = null;
            if (pb_invoice_imgPanel.Image != null)
                pb_invoice_imgPanel.Image.Dispose();
            pb_invoice_imgPanel.Image = null;
            if (pb_transport_copy.Image != null)
                pb_transport_copy.Image.Dispose();
            pb_transport_copy.Image = null;
            if (pb_personal_photo.Image != null)
                pb_personal_photo.Image.Dispose();
            pb_personal_photo.Image = null;
            if (pb_product.Image != null)
                pb_product.Image.Dispose();
            pb_product.Image = null;

        }

        private void set_period_of_gst()
        {
            if (maintab.SelectedIndex == 1 && subtabDataEntry.SelectedIndex == 0 && subtabsale.SelectedIndex == 0)
            {
                if (Convert.ToDateTime(sidatetime.Text) <= Convert.ToDateTime("30/06/2017"))
                {
                    periodofgst = false;
                    sitaxcode.Visible = true;
                    sitaxcode.Enabled = true;
                    sitaxcode.ReadOnly = false;
                    sitaxrate.Visible = true;
                    sitaxdesc.Visible = true;
                    sitaxamt.Visible = true;
                }
                else
                {
                    periodofgst = true;
                    sitaxcode.Visible = false;
                    sitaxrate.Visible = false;
                    sitaxdesc.Visible = false;
                    sitaxamt.Visible = false;
                }
            }
            else if (maintab.SelectedIndex == 1 && subtabDataEntry.SelectedIndex == 1 && subtabsale.SelectedIndex == 0)
            {
                if (Convert.ToDateTime(pidatetime.Text) <= Convert.ToDateTime("30/06/2017"))
                {
                    lbl_pi_gst_tax.Visible = false;
                    tb_pi_igst_tax_amount.Visible = false;
                    periodofgst = false;
                    pitx_code.Visible = true;
                    pitaxcode.Visible = true;
                    pitaxdesc.Visible = true;
                    pitaxamt.Visible = true;
                }
                else
                {
                    lbl_pi_gst_tax.Visible = true;
                    tb_pi_igst_tax_amount.Visible = true;
                    periodofgst = true;
                    pitx_code.Visible = false;
                    pitaxcode.Visible = false;
                    pitaxdesc.Visible = false;
                    pitaxamt.Visible = false;
                }
            }
            else if (maintab.SelectedIndex == 3 && subtabreports.SelectedIndex == 1)
            {
                //if (LedDGV.CurrentRow.Cells[5].Value.ToString() == "Sale")
                //{
                //    if (Convert.ToDateTime(sidatetime.Text) <= Convert.ToDateTime("30/06/2017"))
                //    {
                //        periodofgst = false;
                //        sitaxcode.Visible = true;
                //        sitaxcode.Enabled = true;
                //        sitaxcode.ReadOnly = false;
                //        sitaxrate.Visible = true;
                //        sitaxdesc.Visible = true;
                //        sitaxamt.Visible = true;
                //    }
                //    else
                //    {
                //        periodofgst = true;
                //        sitaxcode.Visible = false;
                //        sitaxrate.Visible = false;
                //        sitaxdesc.Visible = false;
                //        sitaxamt.Visible = false;
                //    }
                //}
            }
        }

        private void maintab_Click(object sender, EventArgs e)
        {
            current_tab_control_position();
            set_period_of_gst();
            invisible_all_image();
            ConnectionWithAccess.md_y = "@@@";
            //btnchangeperiod.Visible = false;
            if (maintab.SelectedIndex == 0)
            {
                btnchangeperiod.Visible = true;
                current_working_tab = "0";
            }
            else if (maintab.SelectedTab.Text == "Data Entry(Alt+D)")
            {
                current_working_tab = "1" + subtabsale.SelectedIndex;
                if (subtabsale.SelectedIndex == 0)
                {
                    current_working_tab = "100";

                    if (chbPrivSaleE.Checked)
                    {
                        check_save_button();
                        ConnectionWithAccess.data_entry_working = "Sale Party";
                        sisalelistdg.Visible = true;
                        getdaybookcode();
                        cb_print_Tpt_copy.Visible = false;
                        cb_print_chit_copy.Visible = false;
                        move_cursor_to_button_position("sisalelistdg");
                    }
                    else if (!chbPrivDataEntAllV.Checked && !chbPrivSaleV.Checked)
                    {
                        maintab.TabPages[1].Hide();
                        sisalelistdg.Visible = false;
                        sisalelistdg.Visible = false;
                    }
                }
            }
            else if (maintab.SelectedTab.Text == "Masters(Alt+M)")
            {
                current_working_tab = "20";
                if (cbParent.SelectedIndex == -1 && cbParent.Items.Count > 0)
                    cbParent.SelectedIndex = 0;
                mastertab();
            }
            else if (maintab.SelectedTab.Text == "Reports(Alt+R)")
            {
                current_working_tab = "3";
                if (chbPrivReportsE.Checked)
                {
                    current_working_tab += subtabreports.SelectedIndex;
                    //report_analysis_check_box_selected_changed();
                    //cbRepType.SelectedIndex = 0;
                    //cbRepSubType.SelectedIndex = 0;
                    if (subtabreports.SelectedIndex == 0)
                    {
                        gdvreport.Visible = true;
                        //cbRepType.SelectedIndex = 0;

                        label253.Visible = true;
                        //if (cbrep_ana_d_c.Items.Count > 0)
                        //    cbrep_ana_d_c.SelectedIndex = 0;
                        fPopulatecmbDateRange(cmbDateRangeANALYSIS);
                        if (cbRepType.SelectedIndex == -1 && cbRepType.Items.Count > 0)
                            cbRepType.SelectedIndex = 0;
                        if (cbRepSubType.SelectedIndex == -1 && cbRepSubType.Items.Count > 0)
                            cbRepSubType.SelectedIndex = 0;
                        if (cbRepType.Text != "Job Work")
                            cbrep_ana_d_c.Visible = true;

                    }
                    else if (subtabreports.SelectedIndex == 1)
                        fPopulatecmbDateRange(cmbDateRangeLedger);
                    else if (subtabreports.SelectedIndex == 2)
                    {
                        cbBalShPer.Text = ConnectionWithAccess.mprd;
                        trading_report_generate.Visible = true;
                    }
                    else if (subtabreports.SelectedIndex == 3)
                        fPopulatecmbDateRange(cmbDateRangeGST);
                    else if (subtabreports.SelectedIndex == 3)
                        fPopulatecmbDateRange(cmbDateRangeGST);
                    else if (subtabreports.SelectedIndex == 6)
                    {
                        fPopulatecmbDateRange(cmbDateRangeMIX);
                        ConnectionWithAccess.query = "select f5.[type], f5.item_code, f5.[title], f5.clo_stk, f5.cat, f5.location from " + ConnectionWithAccess.tablename[5] + " f5 where f5.location = '" + mix_reports_d_c_combo_box.Text + "'";
                        ConnectionCommand.accountHelp_datatable_Seperate(mix_reports_dgv, "Item Box List", "[title] ASC");
                    }
                    else if (subtabreports.SelectedIndex == 7)
                        fPopulatecmbDateRange(cmbDateRangeOut);
                }
                else
                    maintab.TabPages[3].Hide();
            }
            else if (maintab.SelectedTab.Text == "Settings(Alt+E)")
            {
                if (backup == false)
                {
                    if (subtabsettings.SelectedIndex == 0)
                    {
                        current_working_tab = "40";
                        if (chbPrivUSetngE.Checked || ConnectionWithAccess.muser == "admin")
                        {
                            refresh_UserListDG();
                            subtabsettings.TabPages[0].Visible = true;
                            if (ConnectionWithAccess.muser != "MASTER USER")
                            {
                                tbUserName.Text = ConnectionWithAccess.muser;
                                tbPassword.Text = ConnectionWithAccess.mpassword;
                                changestatusaspermemory();
                            }
                        }
                        else
                        {
                            refresh_UserListDG();
                            gbUserSettings.Visible = false;
                            tbUserName.Text = ConnectionWithAccess.muser;
                            tbPassword.Text = ConnectionWithAccess.mpassword;
                            UserListDG.Visible = false;
                            readusersettingsfromfiletoMemory(ConnectionWithAccess.muser, ConnectionWithAccess.mpassword);
                            changestatusaspermemory();
                        }
                        //subtabsettings.TabPages[0].Hide();
                    }
                    else if (subtabsettings.SelectedIndex == 1)
                    {
                        if (chbPrivGSetngE.Checked || ConnectionWithAccess.muser == "admin")
                            subtabsettings.TabPages[1].Visible = true;
                        else
                            subtabsettings.TabPages[1].Hide();
                    }
                    else if (subtabsettings.SelectedIndex == 2)
                    {
                        if (chbPrivCompInE.Checked || ConnectionWithAccess.muser == "admin")
                            subtabsettings.TabPages[2].Visible = true;
                        else
                            subtabsettings.TabPages[2].Hide();
                    }
                }
                else
                {
                    subtabsettings.Visible = false;
                    subtabsettings.TabPages[0].Hide();
                }
            }
            else if (maintab.SelectedTab.Text == "Reports(Alt+R)")
            {
                current_working_tab = "50";
                if ((ConnectionWithAccess.mUserFeatures.Substring(35, 1) == "Y" || ConnectionWithAccess.muser == "admin") && backup == false)
                {
                    maintab.TabPages[5].Visible = true;
                    sisalelistdg.Visible = false;
                    refresh_UserListDG();
                    if (ConnectionWithAccess.mNIK == "AP2")
                        cb_get_fix_gp_of_ap2.Visible = true;
                }
                else
                    maintab.TabPages[5].Hide();
            }
            else if (maintab.SelectedTab.Text == "Data Merge")
            {
                current_working_tab = "50";
                CbDbTableName.Text = "AP2_0050";
                //DataTable userTables = null;
                //DBPath = "D:\\ACC\\ap2\\AP2.mdb";
                //conn = new OleDbConnection("Provider=Microsoft.Jet.OLEDB.4.0; Jet OLEDB:Database Password=sharp_mdb;" + "Data Source=" + DBPath);
                //string[] restrictions = new string[4];
                //restrictions[3] = "Table";
                //userTables = conn.GetSchema("Tables", restrictions);
                //List<string> tableNames = new List<string>();
                //for (int i = 0; i < userTables.Rows.Count; i++)
                //    tableNames.Add(userTables.Rows[i][2].ToString());

                //comboBox1.DataSource = tableNames;

                //var table = CbDbTableName.SelectedItem;
                //string query = "SELECT * From " + table;
                //if (table.ToString() != "~TMPCLP337301")
                //{
                //    using (OleDbDataAdapter adapter = new OleDbDataAdapter(query, conn))
                //    {
                //        DataSet ds = new DataSet();
                //        adapter.Fill(ds);
                //        DgDbTableData.DataSource = ds.Tables[0];
                //    }
                //    ClbDbColumn.Items.Clear();
                //    OleDbCommand cmd = new OleDbCommand("Select * from " + table, conn);

                //    OleDbDataReader dr;
                //    dr = cmd.ExecuteReader();
                //    List<string> ColumnNames = new List<string>();

                //    for (int i = 0; i < DgDbTableData.Columns.Count; i++)

                //        ClbDbColumn.Items.Add(dr.GetName(i).ToString(), CheckState.Checked);
                //    dr.Close();

                //}

                //if ((ConnectionWithAccess.mUserFeatures.Substring(35, 1) == "Y" || ConnectionWithAccess.muser == "admin") && backup == false)
                //{
                //    maintab.TabPages[5].Visible = true;
                //    sisalelistdg.Visible = false;
                //    refresh_UserListDG();
                //    if (ConnectionWithAccess.mNIK == "AP2")
                //        cb_get_fix_gp_of_ap2.Visible = true;
                //}
                //else
                //    maintab.TabPages[5].Hide();
            }
            //LoadImageType();
        }

        private string current_tab_control_position()
        {
            current_working_tab = maintab.SelectedIndex.ToString();
            if (maintab.SelectedIndex == 1)
            {
                current_working_tab += subtabDataEntry.SelectedIndex.ToString();
                if (subtabDataEntry.SelectedIndex == 0)
                    current_working_tab += subtabsale.SelectedIndex.ToString();
                else if (subtabDataEntry.SelectedIndex == 1)
                    current_working_tab += subtabpurchase.SelectedIndex.ToString();
                else if (subtabDataEntry.SelectedIndex == 2)
                    current_working_tab += subtabbank.SelectedIndex.ToString();
                else if (subtabDataEntry.SelectedIndex == 3)
                    current_working_tab += subtabcash.SelectedIndex.ToString();
                else if (subtabDataEntry.SelectedIndex == 5)
                    current_working_tab += tc_dataentry_additional.SelectedIndex.ToString();
            }
            else if (maintab.SelectedTab.Text == "Reports(Alt+R)")
            {
                current_working_tab += subtabreports.SelectedIndex.ToString();
            }
            return current_working_tab;
        }

        private void subtabsettings_Click(object sender, EventArgs e)
        {
            if (subtabsettings.SelectedIndex == 0 && ConnectionWithAccess.mUserFeatures.Substring(26, 1) == "Y")
            {
                bLoadUserSettingsInitial = true;
                refresh_UserListDG();
                gbUserSettings.Visible = false;
                UserListDG.Visible = false;
                readusersettingsfromfiletoMemory(ConnectionWithAccess.muser, ConnectionWithAccess.mpassword);
                bLoadUserSettingsInitial = false;
            }
            else if (subtabsettings.SelectedIndex == 0 && ConnectionWithAccess.mUserFeatures.Substring(27, 1) == "Y")
            {
                bLoadUserSettingsInitial = true;
                refresh_UserListDG();
                readusersettingsfromfiletoMemory(ConnectionWithAccess.muser, ConnectionWithAccess.mpassword);
                bLoadUserSettingsInitial = false;
            }
            //else if (subtabsettings.SelectedIndex == 0 && ConnectionWithAccess.mUserFeatures.Substring(28, 1) == "N")
            //    subtabsettings.TabPages[0].Hide();
            else if (subtabsettings.SelectedIndex == 1 && ConnectionWithAccess.mUserFeatures.Substring(29, 1) == "Y")
            {
                //    read_company_text_file();
            }
            else if (subtabsettings.SelectedIndex == 1 && ConnectionWithAccess.mUserFeatures.Substring(30, 1) == "N")
                subtabsettings.TabPages[1].Hide();
            else if (subtabsettings.SelectedIndex == 2 && ConnectionWithAccess.mUserFeatures.Substring(31, 1) == "Y")
            {
                //if (File.Exists(ConnectionWithAccess.mDataFile))
                //    read_company_text_file();
            }
            else if (subtabsettings.SelectedIndex == 2 && ConnectionWithAccess.mUserFeatures.Substring(32, 1) == "N")
                subtabsettings.TabPages[2].Hide();
        }

        private void subtabMasters_click(object sender, EventArgs e)
        {
            if (subtabMasters.SelectedIndex == 0)
                ConnectionWithAccess.data_entry_working = null;
            else if (subtabMasters.SelectedIndex == 8)
                ConnectionWithAccess.data_entry_working = "Item Batch List";
            mastertab();
        }

        private void TabControl2_Click(object sender, EventArgs e)
        {
            mastertab();
        }

        private void PeriodListDG_Click(object sender, EventArgs e)
        {
            rowIndex = PeriodListDG.CurrentCell.RowIndex;
            try
            {
                tbPrd.Text = Convert.ToString(PeriodListDG.Rows[rowIndex].Cells[0].Value);
                dtPrdSD.Text = Convert.ToString(PeriodListDG.Rows[rowIndex].Cells[1].Value);
                dtPrdED.Text = Convert.ToString(PeriodListDG.Rows[rowIndex].Cells[2].Value);
                //cbprdlock.Text = Convert.ToString(PeriodListDG.SelectedCells[3].Value);
                tbGP.Text = Convert.ToString(PeriodListDG.Rows[rowIndex].Cells[4].Value);
                if (Convert.ToString(PeriodListDG.Rows[rowIndex].Cells[3].Value) == "Y")
                {
                    cbprdlock.Checked = true;
                    tbGP.ReadOnly = true;
                }
                else
                {
                    cbprdlock.Checked = false;
                    tbGP.ReadOnly = false;
                }
                tb_vat_tax_required.Text = PeriodListDG.Rows[rowIndex].Cells[5].Value.ToString();
                tb_print_form.Text = PeriodListDG.Rows[rowIndex].Cells[7].Value.ToString();
                //tbclosingstock.Text = Convert.ToString(PeriodListDG.SelectedCells[5].Value);
                //tbopeningstock.Text = Convert.ToString(PeriodListDG.SelectedCells[6].Value);
            }
            catch (Exception ex)
            {
                //message_box.Text = Convert.ToString(ex);
            }

        }

        private void btnsendemail_Click(object sender, EventArgs e)
        {
            function_working = "export";
            atbpreview_Click(sender, e);
        }

        private void PictureBox49_Click(object sender, EventArgs e)
        {
            cb_all_sale_item_list.Visible = false;
            cb_all_sale_invoice_list.Visible = false;
            cb_all_sale_invoice_ledger.Visible = false;
            if (ConnectionWithAccess.company_details[31] == "1")
                sale_invoice_number_one();
            else if (ConnectionWithAccess.company_details[31] == "2")
                sale_invoice_number_two();
            else if (ConnectionWithAccess.company_details[31] == "3")
                //sale_invoice_Plain_Paper();
                sale_invoice_number_three();
            report_filename = msalepdf;
        }

        private void btndelete_Click(object sender, EventArgs e)
        {
            if (maintab.SelectedIndex == 1)
            {
            }
            else if (maintab.SelectedIndex == 2)
            {
                if (subtabMasters.SelectedIndex == 0)
                {

                }
                else if (subtabMasters.SelectedIndex == 1)
                {
                    int columnIndex = ItemListDG.CurrentCell.ColumnIndex;
                    int rowIndex = ItemListDG.CurrentCell.RowIndex;
                    if (rowIndex > -1)
                    {
                        ItemListDG.Rows.RemoveAt(rowIndex);
                        ItemListDG.Refresh(); // if needed
                    }
                }
                else if (subtabMasters.SelectedIndex == 2)
                {
                    int columnIndex = TaxListDG.CurrentCell.ColumnIndex;
                    int rowIndex = TaxListDG.CurrentCell.RowIndex;
                    if (rowIndex > -1)
                    {
                        TaxListDG.Rows.RemoveAt(rowIndex);
                        TaxListDG.Refresh(); // if needed
                    }
                }
                else if (subtabMasters.SelectedIndex == 3)
                {
                    int columnIndex = DBCListDG.CurrentCell.ColumnIndex;
                    int rowIndex = DBCListDG.CurrentCell.RowIndex;
                    if (rowIndex > -1)
                    {
                        DBCListDG.Rows.RemoveAt(rowIndex);
                        DBCListDG.Refresh(); // if needed
                    }
                }
                else if (subtabMasters.SelectedIndex == 4)
                {
                    int columnIndex = PeriodListDG.CurrentCell.ColumnIndex;
                    int rowIndex = PeriodListDG.CurrentCell.RowIndex;
                    if (rowIndex > -1)
                    {
                        ConnectionWithAccess.query = "delete from " + ConnectionWithAccess.tablename[50] + " where prd = " + PeriodListDG.SelectedCells[0] + " and start = " + PeriodListDG.SelectedCells[1] + " and [end] = " + PeriodListDG.SelectedCells[2];
                        ConnectionCommand.fUpdateInsertDeleteData();
                        PeriodListDG.Rows.RemoveAt(rowIndex);
                        PeriodListDG.Refresh(); // if needed
                    }
                }
            }
            else if (maintab.SelectedIndex == 4)
            {
                if (subtabsettings.SelectedIndex == 0)
                {
                    int columnIndex = UserListDG.CurrentCell.ColumnIndex;
                    int rowIndex = UserListDG.CurrentCell.RowIndex;
                    //string tempvalue1;
                    //string mf1 = (Convert.ToString(UserListDG.SelectedColumns[0]));
                    //tempvalue1.Text = UserListDG.row
                    if (rowIndex > -1)
                    {
                        ConnectionWithAccess.query = "delete from " + ConnectionWithAccess.tablename[52] + " where f1 = '" + UserListDG.SelectedCells[0].Value + "' and f2 = '" + UserListDG.SelectedCells[1].Value + "'";
                        ConnectionCommand.fUpdateInsertDeleteData();
                        UserListDG.Rows.RemoveAt(rowIndex);
                        UserListDG.Refresh();
                    }
                }
            }
        }

        private void btn_analysis_generate_click(object sender, EventArgs e)
        {
            PleaseWait objPleaseWait = new PleaseWait("Please wait Collecting Data");
            objPleaseWait.Show();
            Application.DoEvents();
            atbcancel_Click(sender, e);
            btn_analysis_generate.Visible = false;
            gdvreport.Visible = true;
            gdvreport.Size = new System.Drawing.Size(960, 372);
            if (cbRepType.Text == "Sale")
            {
                if (cbRepSubType.Text == "Invoice" && cbRepFormat.Text == "Document Wise")
                {
                    if (AFAnalysis.tbreprotArea.Text != "0 Selected")
                    {
                        ConnectionWithAccess.query = "select f21.D_D, f21.D_N, f1.[desc] as [Desc], f1.city, f1.gst_number, f21.gamt,f21.d_c,f21.a_n,f21.s_a  from " + ConnectionWithAccess.tablename[1] + " f1, " + ConnectionWithAccess.tablename[21] + " f21, " + ConnectionWithAccess.tablename[2] + " f2 where f21.a_n = '" + raa_n.Text + "' and f1.a_n = f21.a_n and f1.s_a = f21.s_a and f2.city = f1.city and f21.prd = '" + ConnectionWithAccess.mprd + "' and f21.d_d >= @From and f21.d_d <= @To and f2.Area_code in (" + AFAnalysis.selectedAreaList + ") and f21.d_c = " + cbrep_ana_d_c.SelectedValue.ToString() + " order by d_d,d_n ";
                    }
                    else
                    {
                        ConnectionWithAccess.query = "select f21.D_D, f21.D_N, f1.[desc] as [Desc], f1.city, f1.gst_number, f21.gamt,f21.d_c,f21.a_n,f21.s_a from " + ConnectionWithAccess.tablename[21] + " f21 inner join " + ConnectionWithAccess.tablename[1] + " f1 on f21.a_n = f1.a_n and f21.s_a = f1.s_a and f21.d_y = f1.d_y where f21.prd = '" + ConnectionWithAccess.mprd + "' and f21.d_d >= @From and f21.d_d <= @To and f21.d_c = " + cbrep_ana_d_c.SelectedValue.ToString();
                        if (AFAnalysis.tbselacc.Text != "0 Selected")
                            ConnectionWithAccess.query += " and f1.[desc] in (" + AFAnalysis.selectedPartyList + ") and f1.city in (" + AFAnalysis.selectedPartyCityList + ")";
                        else if (AFAnalysis.tbreportcity.Text != "0 Selected")
                            ConnectionWithAccess.query += " and f1.city in (" + AFAnalysis.selectedCityList + ")";
                        ConnectionWithAccess.query += " order by d_d,d_n";
                    }
                    excel_filename = "Sale List as on " + ConnectionWithAccess.mprd + "_" + DateTime.Now.Day + "_" + DateTime.Now.Month + "_" + DateTime.Now.Year + "_" + DateTime.Now.TimeOfDay.Hours + "_" + DateTime.Now.TimeOfDay.Minutes;
                }
                else if (cbRepSubType.Text == "Invoice" && cbRepFormat.Text == "Party Wise")
                {
                    ConnectionWithAccess.query = "select f21.D_D, f21.D_N, f1.[desc] as [Desc], f1.city, f1.gst_number, f21.gamt from " + ConnectionWithAccess.tablename[1] + " f1, " + ConnectionWithAccess.tablename[21] + " f21 where f21.a_n = '" + raa_n.Text + "' and f1.a_n = f21.a_n and f1.s_a = f21.s_a and f21.prd = '" + ConnectionWithAccess.mprd + "' and f21.d_d >= @From and f21.d_d <= @To and f21.d_c = " + cbrep_ana_d_c.SelectedValue.ToString() + " order by d_d,d_n ";
                    excel_filename = "Party Wise Sale List as on " + ConnectionWithAccess.mprd + "_" + DateTime.Now.Day + "_" + DateTime.Now.Month + "_" + DateTime.Now.Year + "_" + DateTime.Now.TimeOfDay.Hours + "_" + DateTime.Now.TimeOfDay.Minutes;
                }
                else if (cbRepSubType.Text == "Invoice" && cbRepFormat.Text == "Item Wise")
                {
                    ConnectionWithAccess.query = "select f21.D_D, f21.D_N, f1.[desc] as [Desc], f1.city, f1.gst_number, f21.gamt from " + ConnectionWithAccess.tablename[1] + " f1, " + ConnectionWithAccess.tablename[21] + " f21 where f21.a_n = '" + raa_n.Text + "' and f1.a_n = f21.a_n and f1.s_a = f21.s_a and f21.prd = '" + ConnectionWithAccess.mprd + "' and f21.d_d >= @From and f21.d_d <= @To and f21.d_c = " + cbrep_ana_d_c.SelectedValue.ToString() + " order by d_d,d_n ";
                    excel_filename = "Item Wise Sale List as on " + ConnectionWithAccess.mprd + "_" + DateTime.Now.Day + "_" + DateTime.Now.Month + "_" + DateTime.Now.Year + "_" + DateTime.Now.TimeOfDay.Hours + "_" + DateTime.Now.TimeOfDay.Minutes;
                }
                else if (cbRepSubType.Text == "Invoice" && cbRepFormat.Text == "Tax Sheet")
                {
                    ConnectionWithAccess.query = "select f21.D_D, f21.D_N, f1.[desc] as [Desc], f1.city, f1.gst_number, f21.gamt from " + ConnectionWithAccess.tablename[1] + " f1, " + ConnectionWithAccess.tablename[21] + " f21 where f21.a_n = '" + raa_n.Text + "' and f1.a_n = f21.a_n and f1.s_a = f21.s_a and f21.prd = '" + ConnectionWithAccess.mprd + "' and f21.d_d >= @From and f21.d_d <= @To and f21.d_c = " + cbrep_ana_d_c.SelectedValue.ToString() + " order by d_d,d_n ";
                    excel_filename = "Tax List as on " + ConnectionWithAccess.mprd + "_" + DateTime.Now.Day + "_" + DateTime.Now.Month + "_" + DateTime.Now.Year + "_" + DateTime.Now.TimeOfDay.Hours + "_" + DateTime.Now.TimeOfDay.Minutes;
                }
                else if (cbRepSubType.Text == "Replacement" && cbRepFormat.Text == "Document Wise")
                {
                    ConnectionWithAccess.query = "select f30.D_D, f30.D_N, f1.[desc] as [Desc], f1.city, f1.gst_number, f30.gamt,f30.d_c,f30.a_n,f30.s_a  from " + ConnectionWithAccess.tablename[1] + " f1, " + ConnectionWithAccess.tablename[30] + " f30, " + ConnectionWithAccess.tablename[2] + " f2 where f30.a_n = '" + raa_n.Text + "' and f1.a_n = f30.a_n and f1.s_a = f30.s_a and f2.city = f1.city and f30.prd = '" + ConnectionWithAccess.mprd + "' and f30.d_d >= @From and f30.d_d <= @To and f2.Area_code in (" + AFAnalysis.selectedAreaList + ") and f30.d_c = " + cbrep_ana_d_c.SelectedValue.ToString() + " order by d_d,d_n ";
                    //ConnectionWithAccess.query = "select distinct f30.D_D, f30.D_N, f1.[desc] as [Desc], f1.city, f1.gst_number, f30.bamt, f30.tamt, f30.gamt from " + ConnectionWithAccess.tablename[1] + " f1, " + ConnectionWithAccess.tablename[4] + " f4, " + ConnectionWithAccess.tablename[6] + " f6, " + ConnectionWithAccess.tablename[30] + " f30 where f1.a_n = f30.a_n and f1.s_a = f30.s_a and IsNull(f1.d_y) = IsNull(f4.d_y) and f6.tx_code = f30.tx_code and f4.a_n = f21.a_n and f4.s_a = f21.s_a and f30.prd = '" + ConnectionWithAccess.mprd + "' and f30.d_d >= @From and f30.d_d <= @To and f30.d_c = " + cbrep_ana_d_c.SelectedValue.ToString() + " and f4.a_n = f30.a_n and f4.s_a = f30.s_a order by f30.d_d,f30.d_n";
                    excel_filename = "Document Wise as on " + ConnectionWithAccess.mprd + "_" + DateTime.Now.Day + "_" + DateTime.Now.Month + "_" + DateTime.Now.Year + "_" + DateTime.Now.TimeOfDay.Hours + "_" + DateTime.Now.TimeOfDay.Minutes;
                }
                else if (cbRepSubType.Text == "Brief with Items")
                {
                    if (AFAnalysis.tbselacc.Text == "0 Selected" && AFAnalysis.tbreportcity.Text == "0 Selected" && AFAnalysis.tbreprotArea.Text == "0 Selected" && AFAnalysis.tbreportitems.Text == "0 Selected" && AFAnalysis.tbreporttax.Text == "0 Selected")
                        //ConnectionWithAccess.query = "select f21.D_D, f21.D_N, f1.[desc] as [Desc], f1.city, f1.gst_number, f21.gamt,f21.d_c,f21.a_n,f21.s_a from " + ConnectionWithAccess.tablename[1] + " f1, " + ConnectionWithAccess.tablename[21] + " f21 where f1.a_n = f21.a_n and f1.s_a = f21.s_a and f21.prd = '" + ConnectionWithAccess.mprd + "' and f21.d_d >= @From and f21.d_d <= @To and f21.d_c = " + cbrep_ana_d_c.SelectedValue.ToString() + " order by d_d,d_n ";
                        ConnectionWithAccess.query = "select f21.D_D, f21.D_N, f1.[desc] as [Desc], f1.city, f1.gst_number, f21.gamt,f21.d_c,f21.a_n,f21.s_a from " + ConnectionWithAccess.tablename[21] + " f21 inner join " + ConnectionWithAccess.tablename[1] + " f1 on f21.a_n = f1.a_n and f21.s_a = f1.s_a and f21.d_y = f1.d_y where f21.prd = '" + ConnectionWithAccess.mprd + "' and f21.d_d >= @From and f21.d_d <= @To and f21.d_c = " + cbrep_ana_d_c.SelectedValue.ToString() + " order by d_d,d_n ";
                    else
                    {
                        if (AFAnalysis.tbselacc.Text != "0 Selected")
                            ConnectionWithAccess.query = "select f21.D_D, f21.D_N, f1.[desc] as [Desc], f1.city, f1.gst_number, f21.gamt,f21.d_c,f21.a_n,f21.s_a  from " + ConnectionWithAccess.tablename[1] + " f1, " + ConnectionWithAccess.tablename[21] + " f21 where f21.a_n = '" + raa_n.Text + "' and f1.a_n = f21.a_n and f1.s_a = f21.s_a and f21.prd = '" + ConnectionWithAccess.mprd + "' and f21.d_d >= @From and f21.d_d <= @To and f1.[desc] in (" + AFAnalysis.selectedPartyList + ")  and f1.city in (" + AFAnalysis.selectedPartyCityList + ") and f21.d_c = " + cbrep_ana_d_c.SelectedValue.ToString() + " order by d_d,d_n ";
                        else if (AFAnalysis.tbreportcity.Text != "0 Selected")
                            ConnectionWithAccess.query = "select f21.D_D, f21.D_N, f1.[desc] as [Desc], f1.city, f1.gst_number, f21.gamt,f21.d_c,f21.a_n,f21.s_a  from " + ConnectionWithAccess.tablename[1] + " f1, " + ConnectionWithAccess.tablename[21] + " f21 where f21.a_n = '" + raa_n.Text + "' and f1.a_n = f21.a_n and f1.s_a = f21.s_a and f21.prd = '" + ConnectionWithAccess.mprd + "' and f21.d_d >= @From and f21.d_d <= @To and f1.city in (" + AFAnalysis.selectedCityList + ") and f21.d_c = " + cbrep_ana_d_c.SelectedValue.ToString() + " order by d_d,d_n ";
                        else if (AFAnalysis.tbreprotArea.Text != "0 Selected")
                            ConnectionWithAccess.query = "select f21.D_D, f21.D_N, f1.[desc] as [Desc], f1.city, f1.gst_number, f21.gamt,f21.d_c,f21.a_n,f21.s_a  from " + ConnectionWithAccess.tablename[1] + " f1, " + ConnectionWithAccess.tablename[21] + " f21, " + ConnectionWithAccess.tablename[2] + " f2 where f21.a_n = '" + raa_n.Text + "' and f1.a_n = f21.a_n and f1.s_a = f21.s_a and f2.city = f1.city and f21.prd = '" + ConnectionWithAccess.mprd + "' and f21.d_d >= @From and f21.d_d <= @To and f2.Area_code in (" + AFAnalysis.selectedAreaList + ") and f21.d_c = " + cbrep_ana_d_c.SelectedValue.ToString() + " order by d_d,d_n ";
                        else if (AFAnalysis.tbreporttax.Text != "0 Selected")
                            ConnectionWithAccess.query = "select f21.D_D, f21.D_N, f1.[desc] as [Desc], f1.city, f1.gst_number, f21.gamt,f21.d_c,f21.a_n,f21.s_a  from " + ConnectionWithAccess.tablename[1] + " f1, " + ConnectionWithAccess.tablename[21] + " f21 where f21.a_n = '" + raa_n.Text + "' and f1.a_n = f21.a_n and f1.s_a = f21.s_a and f21.prd = '" + ConnectionWithAccess.mprd + "' and f21.d_d >= @From and f21.d_d <= @To and f21.tx_code in (" + AFAnalysis.selectedTaxList + ") and f21.d_c = " + cbrep_ana_d_c.SelectedValue.ToString() + " order by d_d,d_n ";
                    }
                    excel_filename = "Brief Sale with Items as on " + ConnectionWithAccess.mprd + "_" + DateTime.Now.Day + "_" + DateTime.Now.Month + "_" + DateTime.Now.Year + "_" + DateTime.Now.TimeOfDay.Hours + "_" + DateTime.Now.TimeOfDay.Minutes;
                }
                else if (cbRepSubType.Text == "Balance")
                {
                    if (AFAnalysis.tbselacc.Text == "0 Selected" && AFAnalysis.tbreportcity.Text == "0 Selected" && AFAnalysis.tbreportitems.Text == "0 Selected" && AFAnalysis.tbreporttax.Text == "0 Selected")
                        ConnectionWithAccess.query = "select f51.a_n, f51.s_a,f1.[desc] as [Desc], f1.city, f51.amt,f51.d_d from " + ConnectionWithAccess.tablename[51] + " f51 inner join " + ConnectionWithAccess.tablename[1] + " f1 on f51.a_n = f1.a_n and f51.s_a = f1.s_a where f51.prd = '" + ConnectionWithAccess.mprd + "' and f51.a_n = '" + raa_n.Text + "' and f51.s_a <> '@@@'";
                    else
                    {
                        if (AFAnalysis.tbselacc.Text != "0 Selected")
                            ConnectionWithAccess.query = "select f51.a_n, f51.s_a,f1.[desc] as [Desc], f1.city, f51.amt,f51.d_d from " + ConnectionWithAccess.tablename[51] + " f51 inner join " + ConnectionWithAccess.tablename[1] + " f1 on f51.a_n = f1.a_n and f51.s_a = f1.s_a where f51.prd = '" + ConnectionWithAccess.mprd + "' and f51.a_n = '" + raa_n.Text + "' and f51.s_a <> '@@@' and f1.[desc] in (" + AFAnalysis.selectedPartyList + ")";
                        else if (AFAnalysis.tbreportcity.Text != "0 Selected")
                            ConnectionWithAccess.query = "select f51.a_n, f51.s_a,f1.[desc] as [Desc], f1.city, f51.amt,f51.d_d from " + ConnectionWithAccess.tablename[51] + " f51 inner join " + ConnectionWithAccess.tablename[1] + " f1 on f51.a_n = f1.a_n and f51.s_a = f1.s_a where f51.prd = '" + ConnectionWithAccess.mprd + "' and f51.a_n = '" + raa_n.Text + "' and f51.s_a <> '@@@' and f1.city in (" + AFAnalysis.selectedCityList + ")";
                        else if (AFAnalysis.tbreporttax.Text != "0 Selected")
                            ConnectionWithAccess.query = "select f51.a_n, f51.s_a,f1.[desc] as [Desc], f1.city, f51.amt,f51.d_d from " + ConnectionWithAccess.tablename[51] + " f51 inner join " + ConnectionWithAccess.tablename[1] + " f1 on f51.a_n = f1.a_n and f51.s_a = f1.s_a where f51.prd = '" + ConnectionWithAccess.mprd + "' and f51.a_n = '" + raa_n.Text + "' and f51.s_a <> '@@@' and f1.tx_code in (" + AFAnalysis.selectedTaxList + ")";
                    }
                    excel_filename = "Debitors Outsanding List_" + ConnectionWithAccess.mprd;
                }
                parameters_for_date_range(RepFrom.Text, RepTo.Text);
                ConnectionCommand.accountHelp_datatable_Seperate(gdvreport, "SaleList", "d_d ASC");
                fAdd_Sale_Report_Totals("d_d ASC");
                if (gdvreport.Rows.Count > 1)
                {
                    //f21.D_D, f21.D_N, f1.[desc] as [Desc], f1.city, f1.gst_number, f21.gamt
                    //gdvreport.DefaultCellStyle.Font = new System.Drawing.Font("Microsoft Sans Serif", 12);
                    gdvreport.Visible = true;
                    gdvreport.Columns[0].HeaderText = "Date";
                    gdvreport.Columns[1].HeaderText = "Doc. No";
                    gdvreport.Columns[2].HeaderText = "Name";
                    gdvreport.Columns[3].HeaderText = "City";
                    gdvreport.Columns[4].HeaderText = "Gst Number";
                    gdvreport.Columns[5].HeaderText = "Gross Amt";
                    gdvreport.Columns[0].Width = 90;
                    gdvreport.Columns[1].Width = 75;
                    gdvreport.Columns[2].Width = 300;
                    gdvreport.Columns[3].Width = 175;
                    gdvreport.Columns[4].Width = 150;
                    gdvreport.Columns[5].Width = 110;
                    gdvreport.Columns[0].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;
                    gdvreport.Columns[1].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;
                    gdvreport.Columns[5].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;
                    gdvreport.Columns[5].DefaultCellStyle.Format = "N2";
                    gdvreport.AllowUserToResizeColumns = false;
                    gdvreport.Columns[6].Visible = false;
                    gdvreport.Columns[7].Visible = false;
                    gdvreport.Columns[8].Visible = false;
                    gdvreport.FirstDisplayedScrollingRowIndex = gdvreport.Rows.Count - 2;
                    //if (gdvreport.Rows.Count > 0)
                    //    excel_filename = "Mini Sale List as on " + ConnectionWithAccess.mprd + "_" + DateTime.Now.Day + "_" + DateTime.Now.Month + "_" + DateTime.Now.Year + "_" + DateTime.Now.TimeOfDay.Hours + "_" + DateTime.Now.TimeOfDay.Minutes;
                    ConnectionWithAccess.export(gdvreport, excel_filename);
                    if (cbRepSubType.Text == "Balance")
                    {
                        generate_sale_balance_report();
                    }
                    else if (cbRepSubType.Text == "Brief with Items")
                    {
                        //sale_purchase_report_list_mini_old_old();
                        sale_purchase_report_list_mini_old("S");
                        //sale_purchase_report_list_mini();
                    }
                    else
                        sale_purchase_report_list_mini_auto_boxes();
                    move_cursor_to_button_position("atbpreview");
                }

            }
            else if (cbRepType.Text == "Purchase")
            {
                gdvreport.Visible = true;
                if (cbRepSubType.Text == "Balance")
                {
                    gdvreport.Visible = false;
                    generate_sale_balance_report();

                    pdf_viewer1.LoadFile(pdf_filename);
                    pdf_viewer1.Visible = true;
                }
                else
                {
                    if ((cbRepSubType.Text == "Invoice" && cbRepFormat.Text == "Document Wise") || cbRepSubType.Text == "Brief with Items")
                    {
                        if (AFAnalysis.tbselacc.Text == "0 Selected" && AFAnalysis.tbreportcity.Text == "0 Selected" && AFAnalysis.tbreportitems.Text == "0 Selected" && AFAnalysis.tbreporttax.Text == "0 Selected")
                            ConnectionWithAccess.query = "select f22.D_D, f22.D_N, f1.[desc] as [Desc], f1.city, f1.gst_number, f22.gamt, f22.d_c,f22.a_n,f22.s_a from " + ConnectionWithAccess.tablename[1] + " f1, " + ConnectionWithAccess.tablename[22] + " f22 where f1.a_n = f22.a_n and f1.s_a = f22.s_a and f22.prd = '" + ConnectionWithAccess.mprd + "' and f22.d_d >= @From and f22.d_d <= @To and f22.d_c = " + cbrep_ana_d_c.SelectedValue.ToString() + " order by f22.d_d,f22.d_n";
                        else
                        {
                            ConnectionWithAccess.query = "select f22.D_D, f22.D_N, f1.[desc] as [Desc], f1.city, f1.gst_number, f22.gamt,f22.d_c,f22.a_n,f22.s_a from " + ConnectionWithAccess.tablename[22] + " f22 inner join " + ConnectionWithAccess.tablename[1] + " f1 on f22.a_n = f1.a_n and f22.s_a = f1.s_a and f22.d_y = f1.d_y where f22.prd = '" + ConnectionWithAccess.mprd + "' and f22.d_d >= @From and f22.d_d <= @To and f22.d_c = " + cbrep_ana_d_c.SelectedValue.ToString();
                            if (AFAnalysis.tbselacc.Text != "0 Selected")
                                ConnectionWithAccess.query += " and f1.[desc] in (" + AFAnalysis.selectedPartyList + ") and f1.city in (" + AFAnalysis.selectedPartyCityList + ")";
                            else if (AFAnalysis.tbreportcity.Text != "0 Selected")
                                ConnectionWithAccess.query += " and f1.city in (" + AFAnalysis.selectedCityList + ")";
                            ConnectionWithAccess.query += " order by d_d,d_n";
                            //if (AFAnalysis.tbselacc.Text != "0 Selected")
                            //    ConnectionWithAccess.query = "select distinct f22.D_D, f22.D_N, f1.[desc] as [Desc], f1.city, f1.gst_number, f22.gamt from " + ConnectionWithAccess.tablename[1] + " f1, " + ConnectionWithAccess.tablename[22] + " f22 where f1.a_n = f22.a_n and f1.s_a = f22.s_a and f22.prd = '" + ConnectionWithAccess.mprd + "' and f22.d_d >= @From and f22.d_d <= @To and f1.[desc] in (" + AFAnalysis.selectedPartyList + ") and f22.d_c = " + cbrep_ana_d_c.SelectedValue.ToString();
                            //else if (AFAnalysis.tbreportcity.Text != "0 Selected")
                            //    ConnectionWithAccess.query = "select distinct f22.D_D, f22.D_N, f1.[desc] as [Desc], f1.city, f1.gst_number, f22.gamt from " + ConnectionWithAccess.tablename[1] + " f1, " + ConnectionWithAccess.tablename[22] + " f22 where f1.a_n = f22.a_n and f1.s_a = f22.s_a and f22.prd = '" + ConnectionWithAccess.mprd + "' and f22.d_d >= @From and f22.d_d <= @To and f1.city in (" + AFAnalysis.selectedCityList + ") and f22.d_c = " + cbrep_ana_d_c.SelectedValue.ToString();
                            //else if (AFAnalysis.tbreporttax.Text != "0 Selected")
                            //    ConnectionWithAccess.query = "select distinct f22.D_D, f22.D_N, f1.[desc] as [Desc], f1.city, f1.gst_number, f22.gamt from " + ConnectionWithAccess.tablename[1] + " f1, " + ConnectionWithAccess.tablename[22] + " f22 where f1.a_n = f22.a_n and f1.s_a = f22.s_a and f22.prd = '" + ConnectionWithAccess.mprd + "' and f22.d_d >= @From and f22.d_d <= @To and f22.tx_code in (" + AFAnalysis.selectedTaxList + ") and f22.d_c = " + cbrep_ana_d_c.SelectedValue.ToString();
                        }
                        excel_filename = "Document Wise Purchase List as on " + ConnectionWithAccess.mprd + "_" + DateTime.Now.Day + "_" + DateTime.Now.Month + "_" + DateTime.Now.Year + "_" + DateTime.Now.TimeOfDay.Hours + "_" + DateTime.Now.TimeOfDay.Minutes;
                    }
                    else if (cbRepSubType.Text == "Brief with Items")
                    {
                        if (AFAnalysis.tbselacc.Text == "0 Selected" && AFAnalysis.tbreportcity.Text == "0 Selected" && AFAnalysis.tbreportitems.Text == "0 Selected" && AFAnalysis.tbreporttax.Text == "0 Selected")
                        {
                            ConnectionWithAccess.query = "select f22.D_D, f22.D_N, f1.[desc] as [Desc], f1.city, f1.gst_number, f22.gamt, f22.d_c,f22.a_n,f22.s_a from " + ConnectionWithAccess.tablename[1] + " f1, " + ConnectionWithAccess.tablename[22] + " f22 where f1.a_n = f22.a_n and f1.s_a = f22.s_a and f22.prd = '" + ConnectionWithAccess.mprd + "' and f22.d_d >= @From and f22.d_d <= @To and f22.d_c = " + cbrep_ana_d_c.SelectedValue.ToString() + " order by f22.d_d,f22.d_n";
                            //ConnectionWithAccess.query = "select distinct f22.D_D, f22.D_N, f1.[desc] as [Desc], f1.city, f1.gst_number, f22.bamt, f22.tamt, f22.gamt from " + ConnectionWithAccess.tablename[1] + " f1, " + ConnectionWithAccess.tablename[6] + " f6, " + ConnectionWithAccess.tablename[4] + " f4, " + ConnectionWithAccess.tablename[22] + " f22 where f1.a_n = f22.a_n and f1.s_a = f22.s_a and f6.tx_code = f22.tx_code and f22.prd = '" + ConnectionWithAccess.mprd + "' and f22.d_d >= @From and f22.d_d <= @To and f4.a_n = f22.a_n and f4.s_a = f22.s_a order by f22.d_n";
                        }
                        else
                        {
                            if (AFAnalysis.tbselacc.Text != "0 Selected")
                                ConnectionWithAccess.query = "select distinct f22.D_D, f22.D_N, f1.[desc] as [Desc], f1.city, f1.gst_number, f22.bamt, f22.tamt, f22.gamt from " + ConnectionWithAccess.tablename[1] + " f1, " + ConnectionWithAccess.tablename[4] + " f4, " + ConnectionWithAccess.tablename[6] + " f6, " + ConnectionWithAccess.tablename[22] + " f22 where f1.a_n = f22.a_n and f1.s_a = f22.s_a and f6.tx_code = f22.tx_code and f4.a_n = f22.a_n and f4.s_a = f22.s_a and f22.prd = '" + ConnectionWithAccess.mprd + "' and f22.d_d >= @From and f22.d_d <= @To and f1.[desc] in (" + AFAnalysis.selectedPartyList + ") and f22.d_c = " + cbrep_ana_d_c.SelectedValue.ToString() + " order by f22.d_n";
                            else if (AFAnalysis.tbreportcity.Text != "0 Selected")
                                ConnectionWithAccess.query = "select distinct f22.D_D, f22.D_N, f1.[desc] as [Desc], f1.city, f1.gst_number, f22.bamt, f22.tamt, f22.gamt from " + ConnectionWithAccess.tablename[1] + " f1, " + ConnectionWithAccess.tablename[4] + " f4, " + ConnectionWithAccess.tablename[6] + " f6, " + ConnectionWithAccess.tablename[22] + " f22 where f1.a_n = f22.a_n and f1.s_a = f22.s_a and f6.tx_code = f22.tx_code and f4.a_n = f22.a_n and f4.s_a = f22.s_a and f22.prd = '" + ConnectionWithAccess.mprd + "' and f22.d_d >= @From and f22.d_d <= @To and f1.city in (" + AFAnalysis.selectedCityList + ") and f22.d_c = " + cbrep_ana_d_c.SelectedValue.ToString() + " order by f22.d_n";
                            else if (AFAnalysis.tbreporttax.Text != "0 Selected")
                                ConnectionWithAccess.query = "select distinct f22.D_D, f22.D_N, f1.[desc] as [Desc], f1.city, f1.gst_number, f22.bamt, f22.tamt, f22.gamt from " + ConnectionWithAccess.tablename[1] + " f1, " + ConnectionWithAccess.tablename[4] + " f4, " + ConnectionWithAccess.tablename[6] + " f6, " + ConnectionWithAccess.tablename[22] + " f22 where f1.a_n = f22.a_n and f1.s_a = f22.s_a and f6.tx_code = f22.tx_code and f4.a_n = f22.a_n and f4.s_a = f22.s_a and f22.prd = '" + ConnectionWithAccess.mprd + "' and f22.d_d >= @From and f22.d_d <= @To and f22.tx_code in (" + AFAnalysis.selectedTaxList + ") and f22.d_c = " + cbrep_ana_d_c.SelectedValue.ToString() + " order by f22.d_n";
                        }
                        excel_filename = "Brief Items Purchase List as on " + ConnectionWithAccess.mprd + "_" + DateTime.Now.Day + "_" + DateTime.Now.Month + "_" + DateTime.Now.Year + "_" + DateTime.Now.TimeOfDay.Hours + "_" + DateTime.Now.TimeOfDay.Minutes;
                    }
                    else if (cbRepSubType.Text == "Replacement" && cbRepFormat.Text == "Document Wise")
                    {
                        ConnectionWithAccess.query = "select distinct f30.D_D, f30.D_N, f1.[desc] as [Desc], f1.city, f1.gst_number, f30.bamt, f30.tamt, f30.gamt from " + ConnectionWithAccess.tablename[1] + " f1, " + ConnectionWithAccess.tablename[6] + " f6, " + ConnectionWithAccess.tablename[30] + " f30 where f1.a_n = f30.a_n and f1.s_a = f30.s_a and IsNull(f1.d_y) = IsNull(f30.d_y) and f6.tx_code = f30.tx_code and f30.prd = '" + ConnectionWithAccess.mprd + "' and f30.d_d >= @From and f30.d_d <= @To order by f30.d_n";
                        excel_filename = "Replacement Purchase List as on " + ConnectionWithAccess.mprd + "_" + DateTime.Now.Day + "_" + DateTime.Now.Month + "_" + DateTime.Now.Year + "_" + DateTime.Now.TimeOfDay.Hours + "_" + DateTime.Now.TimeOfDay.Minutes;
                    }
                    else if (cbRepSubType.Text == "Brief with Items")
                    {
                        sort_datewise_datagridview(gdvreport, "PurcList", 0, 1);
                        sale_purchase_party = new string[0];
                        for (row_counter = 0; row_counter < gdvreport.Rows.Count - 1; row_counter++)
                        {
                            temp_word = null;
                            for (column_counter = 0; column_counter < gdvreport.Columns.Count; column_counter++)
                            {
                                temp_word = temp_word + gdvreport.Rows[row_counter].Cells[column_counter].Value.ToString() + ",";
                            }
                            if (sale_purchase_party.Length == 0)
                                Array.Resize(ref sale_purchase_party, 1);
                            else
                                Array.Resize(ref sale_purchase_party, sale_purchase_party.Length + 1);
                            sale_purchase_party[sale_purchase_party.Length - 1] = temp_word;
                        }
                        generate_full_brief_purchase();
                    }
                    parameters_for_date_range(RepFrom.Text, RepTo.Text);
                    ConnectionCommand.accountHelp_datatable_Seperate(gdvreport, "PurcList", "d_d,d_n ASC");
                    fAdd_Sale_Report_Totals("d_d,d_n ASC");
                    if (gdvreport.Rows.Count > 1)
                    {
                        //f21.D_D, f21.D_N, f1.[desc] as [Desc], f1.city, f1.gst_number, f21.gamt
                        //gdvreport.DefaultCellStyle.Font = new System.Drawing.Font("Microsoft Sans Serif", 12);
                        gdvreport.Columns[0].HeaderText = "Date";
                        gdvreport.Columns[1].HeaderText = "Doc. No";
                        gdvreport.Columns[2].HeaderText = "Name";
                        gdvreport.Columns[3].HeaderText = "City";
                        gdvreport.Columns[4].HeaderText = "Gst Number";
                        gdvreport.Columns[5].HeaderText = "Gross Amt";
                        gdvreport.Columns[0].Width = 90;
                        gdvreport.Columns[1].Width = 75;
                        gdvreport.Columns[2].Width = 300;
                        gdvreport.Columns[3].Width = 175;
                        gdvreport.Columns[4].Width = 150;
                        gdvreport.Columns[5].Width = 110;
                        gdvreport.Columns[0].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;
                        gdvreport.Columns[1].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;
                        gdvreport.Columns[5].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;
                        gdvreport.Columns[5].DefaultCellStyle.Format = "N2";
                        gdvreport.AllowUserToResizeColumns = false;
                        gdvreport.FirstDisplayedScrollingRowIndex = gdvreport.Rows.Count - 2;
                        if (gdvreport.Rows.Count > 0)
                            excel_filename = "Mini Sale List as on " + ConnectionWithAccess.mprd + "_" + DateTime.Now.Day + "_" + DateTime.Now.Month + "_" + DateTime.Now.Year + "_" + DateTime.Now.TimeOfDay.Hours + "_" + DateTime.Now.TimeOfDay.Minutes;
                        ConnectionWithAccess.export(gdvreport, excel_filename);
                        if (cbRepSubType.Text == "Balance")
                        {
                            generate_sale_balance_report();
                        }
                        else if (cbRepSubType.Text == "Brief with Items")
                        {
                            //sale_purchase_report_list_mini_old_old();
                            sale_purchase_report_list_mini_old("P");
                            //sale_purchase_report_list_mini();
                        }
                        else
                            sale_purchase_report_list_mini_auto_boxes();
                    }
                }
                move_cursor_to_button_position("atbpreview");
            }
            else if (cbRepType.Text == "Bank")
            {
                if (cbRepSubType.Text == "All")
                {
                    if (cbRepFormat.Text == "Passed")
                    {
                        // b_t = "3"
                        StringBuilder strQuery = new StringBuilder();
                        if (cbrep_ana_d_c.SelectedValue.ToString() != "0")
                        {
                            // kunal there is issue

                            strQuery.Append(" select #" + ConnectionWithAccess.msdate + "# as [PASS_DATE],0 as [d_n],  'Opening Balance' as [desc], '' as [city], f51.amt as [amt], 0 as [pay_amt], 0 as [balance_amt] from " + ConnectionWithAccess.tablename[51] + " f51 where f51.prd = '" + ConnectionWithAccess.moprd + "' and f51.a_n = '" + raa_n.Text + "' and d_d = #01-01-1901# and f51.s_a = '@@@' union all");
                            if (CbBankEmergingReport.Checked == false)
                            {
                                strQuery.Append(" select f23.PASS_DATE, f23.D_N, f1.[desc] as [Desc], f1.city, f23.bamt as [amt], 0 as [pay_amt], 0 as [balance_amt] from " + ConnectionWithAccess.tablename[1] + " f1, " + ConnectionWithAccess.tablename[23] + " f23 where f1.a_n = f23.a_n and f1.s_a = f23.s_a and f1.d_y = f23.d_y and f23.b_t = '3' and f23.prd = '" + ConnectionWithAccess.mprd + "' and f23.pass_date >= @From and f23.pass_date <= @To and f23.bamt > 0 and r_p = '1' and f23.d_c = " + cbrep_ana_d_c.SelectedValue.ToString() + " and f23.a_n <> '7999' and f23.tran_d_c = 0 UNION ALL");
                                strQuery.Append(" select f23.PASS_DATE, f23.D_N, f1.[desc] as [Desc], f1.city, f23.bamt as [amt], 0 as [pay_amt], 0 as [balance_amt] from " + ConnectionWithAccess.tablename[1] + " f1, " + ConnectionWithAccess.tablename[23] + " f23 where f1.a_n = f23.a_n and f1.s_a = f23.s_a and f1.d_y = f23.d_y and f23.b_t = '3' and f23.prd = '" + ConnectionWithAccess.mprd + "' and f23.pass_date >= @From and f23.pass_date <= @To and f23.bamt > 0 and r_p = '2' and f23.d_c = " + cbrep_ana_d_c.SelectedValue.ToString() + " and f23.a_n <> '7999' and f23.tran_d_c = 0 UNION ALL");
                                strQuery.Append(" select f23.PASS_DATE, f23.D_N, f1.[desc] as [Desc], f1.city,  0 as [amt], (f23.bamt * -1) as [pay_amt], 0 as [balance_amt] from " + ConnectionWithAccess.tablename[1] + " f1, " + ConnectionWithAccess.tablename[23] + " f23 where f1.a_n = f23.a_n and f1.s_a = f23.s_a and f1.d_y = f23.d_y and f23.b_t = '3' and f23.prd = '" + ConnectionWithAccess.mprd + "' and f23.pass_date >= @From and f23.pass_date <= @To and f23.bamt < 0 and r_p = '3' and f23.d_c = " + cbrep_ana_d_c.SelectedValue.ToString() + " and f23.a_n <> '7999' and f23.tran_d_c = 0 UNION ALL");
                                strQuery.Append(" select f23.PASS_DATE, f23.D_N, f1.[desc] as [Desc], f1.city,  0 as [amt], (f23.bamt * -1) as [pay_amt], 0 as [balance_amt] from " + ConnectionWithAccess.tablename[1] + " f1, " + ConnectionWithAccess.tablename[23] + " f23 where f1.a_n = f23.a_n and f1.s_a = f23.s_a and f1.d_y = f23.d_y and f23.b_t = '3' and f23.prd = '" + ConnectionWithAccess.mprd + "' and f23.pass_date >= @From and f23.pass_date <= @To and f23.bamt < 0 and r_p = '4' and f23.d_c = " + cbrep_ana_d_c.SelectedValue.ToString() + " and f23.a_n <> '7999' and f23.tran_d_c = 0 UNION ALL");
                                strQuery.Append(" select f23.PASS_DATE, f23.D_N, 'CASH DEPOSITED IN BANK' as [Desc], '',  f23.bamt as [amt], 0 as [pay_amt], 0 as [balance_amt] from " + ConnectionWithAccess.tablename[1] + " f1, " + ConnectionWithAccess.tablename[23] + " f23 where f1.a_n = f23.a_n and f1.s_a = f23.s_a and f1.d_y = f23.d_y and f23.b_t = '3' and f23.prd = '" + ConnectionWithAccess.mprd + "' and f23.pass_date >= @From and f23.pass_date <= @To and f23.bamt > 0 and r_p = '1' and f23.d_c = " + cbrep_ana_d_c.SelectedValue.ToString() + " and f23.a_n = '7999' and f23.s_a = 'DEP' UNION ALL");
                                strQuery.Append(" select f23.PASS_DATE, f23.D_N, 'CASH WITHDRAWN FROM BANK' as [Desc], '',  0 as [amt], (f23.bamt * -1) as [pay_amt], 0 as [balance_amt] from " + ConnectionWithAccess.tablename[1] + " f1, " + ConnectionWithAccess.tablename[23] + " f23 where f1.a_n = f23.a_n and f1.s_a = f23.s_a and f1.d_y = f23.d_y and f23.b_t = '3' and f23.prd = '" + ConnectionWithAccess.mprd + "' and f23.pass_date >= @From and f23.pass_date <= @To and f23.bamt < 0 and r_p = '3' and f23.d_c = " + cbrep_ana_d_c.SelectedValue.ToString() + " and f23.a_n = '7999' and f23.s_a = 'WIT' UNION ALL");
                                strQuery.Append(" select f23.PASS_DATE, f23.D_N, f1.[desc] as [Desc], f1.city,  0 as [amt], (f23.bamt * -1) as [pay_amt], 0 as [balance_amt] from " + ConnectionWithAccess.tablename[1] + " f1, " + ConnectionWithAccess.tablename[23] + " f23 where f1.a_n = f23.a_n and f1.s_a = f23.s_a and f1.d_y = f23.d_y and f23.b_t = '3' and f23.prd = '" + ConnectionWithAccess.mprd + "' and f23.pass_date >= @From and f23.pass_date <= @To and r_p = '4' and f23.d_c = " + cbrep_ana_d_c.SelectedValue.ToString() + " and f23.tran_d_c <> 0 UNION ALL");
                                strQuery.Append(" select f23.PASS_DATE, f23.D_N, f1.[desc] as [Desc], f1.city, (f23.bamt * -1) as [amt], 0 as [pay_amt], 0 as [balance_amt] from  " + ConnectionWithAccess.tablename[1] + " f1, " + ConnectionWithAccess.tablename[23] + " f23 where f1.a_n = f23.a_n and f1.s_a = f23.s_a and f1.d_y = f23.d_y and f23.b_t = '3' and f23.prd = '" + ConnectionWithAccess.mprd + "' and f23.pass_date >= @From and f23.pass_date <= @To and r_p = '4' and f23.tran_d_c = " + cbrep_ana_d_c.SelectedValue.ToString());
                            }
                            else
                            {
                                //these two select quiers are used for emerging bank data
                                //strQuery.Append(" select f23.PASS_DATE, f23.D_N, f1.[desc] as [Desc], f1.city, f23.bamt as [amt], 0 as [pay_amt], 0 as [balance_amt] from  " + ConnectionWithAccess.tablename[1] + " f1, " + ConnectionWithAccess.tablename[23] + " f23 where f1.a_n = f23.a_n and f1.s_a = f23.s_a and f1.d_y = f23.d_y and f23.prd = '" + ConnectionWithAccess.mprd + "' and f23.pass_date >= @From and f23.pass_date <= @To and f23.d_c = " + cbrep_ana_d_c.SelectedValue.ToString() + " UNION ALL");
                                //strQuery.Append(" select f23.PASS_DATE, f23.D_N, f1.[desc] as [Desc], f1.city, f23.bamt as [amt], 0 as [pay_amt], 0 as [balance_amt] from  " + ConnectionWithAccess.tablename[1] + " f1, " + ConnectionWithAccess.tablename[23] + " f23 where f1.a_n = f23.a_n and f1.s_a = f23.s_a and f1.d_y = f23.d_y and f23.prd = '" + ConnectionWithAccess.mprd + "' and f23.pass_date >= @From and f23.pass_date <= @To and f23.tran_d_c = " + cbrep_ana_d_c.SelectedValue.ToString());
                                //strQuery.Append(" select f23.PASS_DATE, f23.D_N, f1.[desc] as [Desc], f1.city, 0 as [amt], (f23.bamt * -1) as [pay_amt], 0 as [balance_amt] from  " + ConnectionWithAccess.tablename[1] + " f1, " + ConnectionWithAccess.tablename[23] + " f23 where f1.a_n = f23.a_n and f1.s_a = f23.s_a and f1.d_y = f23.d_y and f23.prd = '" + ConnectionWithAccess.mprd + "' and f23.pass_date >= @From and f23.pass_date <= @To and f23.bamt < 0 and f23.d_c = " + cbrep_ana_d_c.SelectedValue.ToString() + " UNION ALL");
                                //strQuery.Append(" select f23.PASS_DATE, f23.D_N, f1.[desc] as [Desc], f1.city, 0 as [amt], (f23.bamt * -1) as [pay_amt], 0 as [balance_amt] from  " + ConnectionWithAccess.tablename[1] + " f1, " + ConnectionWithAccess.tablename[23] + " f23 where f1.a_n = f23.a_n and f1.s_a = f23.s_a and f1.d_y = f23.d_y and f23.prd = '" + ConnectionWithAccess.mprd + "' and f23.pass_date >= @From and f23.pass_date <= @To and f23.bamt < 0 and f23.tran_d_c = " + cbrep_ana_d_c.SelectedValue.ToString());

                                //                                strQuery.Append(" select f23.PASS_DATE, f23.D_N, f1.[desc] as [Desc], f1.city, 0 as [amt], (f23.bamt * -1) as [pay_amt], 0 as [balance_amt] from  " + ConnectionWithAccess.tablename[1] + " f1, " + ConnectionWithAccess.tablename[23] + " f23 where f1.a_n = f23.a_n and f1.s_a = f23.s_a and f23.prd = '" + ConnectionWithAccess.mprd + "' and f23.pass_date >= @From and f23.pass_date <= @To and f23.bamt < 0 and f23.tran_d_c = " + cbrep_ana_d_c.SelectedValue.ToString() + " UNION ALL");  // if adding this there is issue 

                                strQuery.Append(" select f23.PASS_DATE, f23.D_N, f1.[desc] as [Desc], f1.city, f23.bamt as [amt], 0 as [pay_amt], 0 as [balance_amt] from  " + ConnectionWithAccess.tablename[1] + " f1, " + ConnectionWithAccess.tablename[23] + " f23 where f1.a_n = f23.a_n and f1.s_a = f23.s_a and f23.prd = '" + ConnectionWithAccess.mprd + "' and f23.pass_date >= @From and f23.pass_date <= @To and f23.bamt > 0 and f23.d_c = " + cbrep_ana_d_c.SelectedValue.ToString() + " UNION ALL");
                                strQuery.Append(" select f23.PASS_DATE, f23.D_N, f1.[desc] as [Desc], f1.city, 0 as [amt], (f23.bamt * -1) as [pay_amt], 0 as [balance_amt] from  " + ConnectionWithAccess.tablename[1] + " f1, " + ConnectionWithAccess.tablename[23] + " f23 where f1.a_n = f23.a_n and f1.s_a = f23.s_a and f23.prd = '" + ConnectionWithAccess.mprd + "' and f23.pass_date >= @From and f23.pass_date <= @To and f23.bamt < 0 and f23.d_c = " + cbrep_ana_d_c.SelectedValue.ToString() + " UNION ALL");

                                strQuery.Append(" select f23.PASS_DATE, f23.D_N, f1.[desc] as [Desc], f1.city, 0 as [amt], (f23.bamt * -1) as [pay_amt], 0 as [balance_amt] from  " + ConnectionWithAccess.tablename[1] + " f1, " + ConnectionWithAccess.tablename[23] + " f23 where f1.a_n = f23.a_n and f1.s_a = f23.s_a and f1.d_y = f23.d_y and f23.prd = '" + ConnectionWithAccess.mprd + "' and f23.pass_date >= @From and f23.pass_date <= @To and f23.bamt < 0 and f23.tran_d_c = " + cbrep_ana_d_c.SelectedValue.ToString());
                                //strQuery.Append(" select f23.PASS_DATE, f23.D_N, f1.[desc] as [Desc], f1.city, 0 as [amt], (f23.bamt * -1) as [pay_amt], 0 as [balance_amt] from  " + ConnectionWithAccess.tablename[1] + " f1, " + ConnectionWithAccess.tablename[23] + " f23 where f1.a_n = f23.a_n and f1.s_a = f23.s_a and f1.d_y = f23.d_y and f23.prd = '" + ConnectionWithAccess.mprd + "' and f23.pass_date >= @From and f23.pass_date <= @To and f23.bamt < 0 and f23.d_c = " + cbrep_ana_d_c.SelectedValue.ToString() + " and Tran_d_c = 9");
                            }

                            //strQuery.Append(" select prd,a_n,s_a,(bamt * -1) as amt,d_c, 0 as tamt,'' as tx_code,b_t,tran_d_c,pass_date, 'B' as tmpCode, #01/01/1901# as d_d, '" + ConnectionWithAccess.muser + "' as [user], Now() as insert_dt_tm, '' as na_n, '' as ns_a from " + ConnectionWithAccess.tablename[23] + " where prd = '" + emerg_prd + "' and b_t = '3' and pass_date >= @From and pass_date <= @To ");
                            //strMainQuery.Append("select prd,a_n,s_a,(bamt * -1) as amt,d_c, 0 as tamt,'' as tx_code,b_t,tran_d_c,pass_date, 'B' as tmpCode, #01/01/1901# as d_d, '" + ConnectionWithAccess.muser + "' as [user], Now() as insert_dt_tm, '' as na_n, '' as ns_a from " + ConnectionWithAccess.tablename[23] + " where prd = '" + emerg_prd + "' and b_t = '3' and pass_date >= @From and pass_date <= @To ");
                            //strQuery.Append("select prd,a_n,s_a,(bamt * -1) as amt,d_c, 0 as tamt,'' as tx_code,b_t,tran_d_c,pass_date, 'B' as tmpCode, #01/01/1901# as d_d, '" + ConnectionWithAccess.muser + "' as [user], Now() as insert_dt_tm, '' as na_n, '' as ns_a from " + ConnectionWithAccess.tablename[23] + " where prd = '" + emerg_prd + "' and b_t = '3' and pass_date >= @From and pass_date <= @To ");
                        }
                        else
                        {
                            strQuery.Append(" select  #" + ConnectionWithAccess.msdate + "# as [PASS_DATE], 'Opening Balance', '' as [city], 0 as [d_n], f51.amt as [amt], 0 as [pay_amt], 0 as [balance_amt] from " + ConnectionWithAccess.tablename[51] + " f51 where f51.prd = '" + ConnectionWithAccess.moprd + "' and f51.a_n = '" + raa_n.Text + "' and d_d = #01-01-1901# and f51.s_a = '@@@' union all");
                            strQuery.Append(" select f23.PASS_DATE, f1.[desc] as [Desc], f1.city, f23.D_N, f23.bamt as [amt], 0 as [pay_amt], 0 as [balance_amt] from " + ConnectionWithAccess.tablename[1] + " f1, " + ConnectionWithAccess.tablename[23] + " f23 where f1.a_n = f23.a_n and f1.s_a = f23.s_a and f23.b_t = '3' and f23.prd = '" + ConnectionWithAccess.mprd + "' and f23.d_d >= @From and f23.d_d <= @To and f23.bamt > 0 and r_p = '1' and f23.a_n = '7999' UNION ALL");
                            strQuery.Append(" select f23.PASS_DATE, f1.[desc] as [Desc], f1.city, f23.D_N, f23.bamt as [amt], 0 as [pay_amt], 0 as [balance_amt] from " + ConnectionWithAccess.tablename[1] + " f1, " + ConnectionWithAccess.tablename[23] + " f23 where f1.a_n = f23.a_n and f1.s_a = f23.s_a and f23.b_t = '3' and f23.prd = '" + ConnectionWithAccess.mprd + "' and f23.d_d >= @From and f23.d_d <= @To and f23.bamt > 0 and r_p = '2' and f23.a_n = '7999' UNION ALL");
                            strQuery.Append(" select f23.PASS_DATE, f1.[desc] as [Desc], f1.city, f23.D_N,  0 as [amt], (f23.bamt * -1) as [pay_amt], 0 as [balance_amt] from " + ConnectionWithAccess.tablename[1] + " f1, " + ConnectionWithAccess.tablename[23] + " f23 where f1.a_n = f23.a_n and f1.s_a = f23.s_a and f23.b_t = '3' and f23.prd = '" + ConnectionWithAccess.mprd + "' and f23.d_d >= @From and f23.d_d <= @To and f23.bamt < 0 and r_p = '3' and f23.a_n <> '7999' UNION ALL");
                            strQuery.Append(" select f23.PASS_DATE, f1.[desc] as [Desc], f1.city, f23.D_N,  0 as [amt], (f23.bamt * -1) as [pay_amt], 0 as [balance_amt] from " + ConnectionWithAccess.tablename[1] + " f1, " + ConnectionWithAccess.tablename[23] + " f23 where f1.a_n = f23.a_n and f1.s_a = f23.s_a and f23.b_t = '3' and f23.prd = '" + ConnectionWithAccess.mprd + "' and f23.d_d >= @From and f23.d_d <= @To and f23.bamt < 0 and r_p = '4' and f23.a_n <> '7999' UNION ALL");
                            strQuery.Append(" select f23.PASS_DATE, f23.D_N, 'Cash Deposited in Bank' as [Desc], '',  (f23.bamt * -1) as [amt], 0 as [pay_amt], 0 as [balance_amt] from " + ConnectionWithAccess.tablename[1] + " f1, " + ConnectionWithAccess.tablename[23] + " f23 where f1.a_n = f23.a_n and f1.s_a = f23.s_a and f23.b_t = '3' and f23.prd = '" + ConnectionWithAccess.mprd + "' and f23.pass_date >= @From and f23.pass_date <= @To and f23.bamt > 0 and r_p = '1' and f23.a_n = '7999' and f23.s_a = 'DEP' UNION ALL");
                            strQuery.Append(" select f23.PASS_DATE, f23.D_N, 'Cash Withdrawn from Bank' as [Desc], '',  0 as [amt], (f23.bamt * -1) as [pay_amt], 0 as [balance_amt] from " + ConnectionWithAccess.tablename[1] + " f1, " + ConnectionWithAccess.tablename[23] + " f23 where f1.a_n = f23.a_n and f1.s_a = f23.s_a and f1.d_y = f23.d_y and f23.b_t = '3' and f23.prd = '" + ConnectionWithAccess.mprd + "' and f23.pass_date >= @From and f23.pass_date <= @To and f23.bamt < 0 and r_p = '3' and f23.a_n = '7999' and f23.s_a = 'WIT' UNION ALL");
                            strQuery.Append(" select f23.PASS_DATE, f1.[desc] as [Desc], f1.city, f23.D_N, f23.bamt as [amt], 0 as [pay_amt], 0 as [balance_amt] from " + ConnectionWithAccess.tablename[1] + " f1, " + ConnectionWithAccess.tablename[23] + " f23 where f1.a_n = f23.a_n and f1.s_a = f23.s_a and f1.d_y = f23.d_y and f23.b_t = '3' and f23.prd = '" + ConnectionWithAccess.mprd + "' and f23.d_d >= @From and f23.d_d <= @To and r_p = '4'");
                        }
                        ConnectionWithAccess.query = strQuery.ToString();
                        parameters_for_date_range(ConnectionWithAccess.msdate, RepTo.Text);
                        ConnectionCommand.accountHelp_datatable_Seperate(gdvreport, "Bankrep", "pass_date,d_n ASC");
                        fAdd_Bank_Report_Totals("pass_date,d_n ASC");
                        excel_filename = "Passed Bank List as on " + ConnectionWithAccess.mprd + "_" + DateTime.Now.Day + "_" + DateTime.Now.Month + "_" + DateTime.Now.Year + "_" + DateTime.Now.TimeOfDay.Hours + "_" + DateTime.Now.TimeOfDay.Minutes;
                    }
                    else if (cbRepFormat.Text == "Failed")
                    {
                        // b_t = "4"
                        StringBuilder strQuery = new StringBuilder();
                        strQuery.Append(" select distinct '', f23.a_n, f23.s_a, f23.D_D, f23.D_N, f1.[desc] as [Desc], f1.city, f23.bamt, '', '', f23.r_p from " + ConnectionWithAccess.tablename[1] + " f1, " + ConnectionWithAccess.tablename[23] + " f23 where f1.a_n = f23.a_n and f1.s_a = f23.s_a and IsNull(f1.d_y) = IsNull(f23.d_y) and f23.b_t = '4' and f23.prd = '" + ConnectionWithAccess.mprd + "' and f23.d_d >= #" + RepFrom.Text + "# and f23.d_d <=#" + RepTo.Text + "# and f23.bamt > 0 and f23.d_c = cbrep_ana_d_c.SelectedValue.ToString() union all");
                        strQuery.Append(" select distinct '', f23.a_n, f23.s_a, f23.D_D, f23.D_N, f1.[desc] as [Desc], f1.city, f23.bamt, '', '', f23.r_p from " + ConnectionWithAccess.tablename[1] + " f1, " + ConnectionWithAccess.tablename[23] + " f23 where f1.a_n = f23.a_n and f1.s_a = f23.s_a and IsNull(f1.d_y) = IsNull(f23.d_y) and f23.b_t = '4' and f23.prd = '" + ConnectionWithAccess.mprd + "' and f23.d_d >= #" + RepFrom.Text + "# and f23.d_d <=#" + RepTo.Text + "# and f23.bamt > 0 and f23.d_c = cbrep_ana_d_c.SelectedValue.ToString()");
                        //ConnectionWithAccess.query = "select distinct '', f23.a_n, f23.s_a, f23.D_D, f23.D_N, f1.[desc] as [Desc], f1.city, f23.bamt, '', '', f23.r_p from " + ConnectionWithAccess.tablename[1] + " f1, " + ConnectionWithAccess.tablename[23] + " f23 where f1.a_n = f23.a_n and f1.s_a = f23.s_a and IsNull(f1.d_y) = IsNull(f23.d_y) and f23.b_t = '4' and f23.prd = '" + ConnectionWithAccess.mprd + "' and f23.d_d >= #" + RepFrom.Text + "# and f23.d_d <=#" + RepTo.Text + "# and f23.bamt > 0 and f23.d_c = " + cbrep_ana_d_c.SelectedValue.ToString();
                        //ConnectionCommand.accountHelp_datatable_Seperate(gdvreport, "Bankrep");
                        //ConnectionWithAccess.query = "select distinct '', f23.a_n, f23.s_a, f23.D_D, f23.D_N, f1.[desc] as [Desc], f1.city, '', (f23.bamt * -1), '', f23.r_p from " + ConnectionWithAccess.tablename[1] + " f1, " + ConnectionWithAccess.tablename[23] + " f23 where f1.a_n = f23.a_n and f1.s_a = f23.s_a and IsNull(f1.d_y) = IsNull(f23.d_y) and f23.b_t = '4' and f23.prd = '" + ConnectionWithAccess.mprd + "' and f23.d_d >= #" + RepFrom.Text + "# and f23.d_d <=#" + RepTo.Text + "# and f23.bamt < 0 and f23.d_c = " + cbrep_ana_d_c.SelectedValue.ToString() + "";
                        //ConnectionCommand.multiplerows(gdvreport, "Bankrep");
                        excel_filename = "Failed Bank List as on " + ConnectionWithAccess.mprd + "_" + DateTime.Now.Day + "_" + DateTime.Now.Month + "_" + DateTime.Now.Year + "_" + DateTime.Now.TimeOfDay.Hours + "_" + DateTime.Now.TimeOfDay.Minutes;
                    }
                    else if (cbRepFormat.Text == "Pending")
                    {
                        // b_t = "2"
                        ConnectionWithAccess.query = "select distinct '', f23.a_n, f23.s_a, f23.D_D, f23.D_N, f1.[desc] as [Desc], f1.city, f23.bamt, '', '', f23.r_p from " + ConnectionWithAccess.tablename[1] + " f1, " + ConnectionWithAccess.tablename[23] + " f23 where f1.a_n = f23.a_n and f1.s_a = f23.s_a and IsNull(f1.d_y) = IsNull(f23.d_y) and f23.b_t = '2' and f23.prd = '" + ConnectionWithAccess.mprd + "' and f23.d_d >= #" + RepFrom.Text + "# and f23.d_d <=#" + RepTo.Text + "# and f23.bamt > 0 and f23.d_c = " + cbrep_ana_d_c.SelectedValue.ToString() + "";
                        ConnectionCommand.accountHelp_datatable_Seperate(gdvreport, "Bankrep");
                        ConnectionWithAccess.query = "select distinct '', f23.a_n, f23.s_a, f23.D_D, f23.D_N, f1.[desc] as [Desc], f1.city, '', (f23.bamt * -1), '', f23.r_p from " + ConnectionWithAccess.tablename[1] + " f1, " + ConnectionWithAccess.tablename[23] + " f23 where f1.a_n = f23.a_n and f1.s_a = f23.s_a and IsNull(f1.d_y) = IsNull(f23.d_y) and f23.b_t = '2' and f23.prd = '" + ConnectionWithAccess.mprd + "' and f23.d_d >= #" + RepFrom.Text + "# and f23.d_d <=#" + RepTo.Text + "# and f23.bamt < 0 and f23.d_c = " + cbrep_ana_d_c.SelectedValue.ToString() + "";
                        ConnectionCommand.multiplerows(gdvreport, "Bankrep");
                        excel_filename = "Pending Bank List as on " + ConnectionWithAccess.mprd + "_" + DateTime.Now.Day + "_" + DateTime.Now.Month + "_" + DateTime.Now.Year + "_" + DateTime.Now.TimeOfDay.Hours + "_" + DateTime.Now.TimeOfDay.Minutes;
                    }
                }
                else if (cbRepSubType.Text == "Receipt")
                {
                    // r_p = 1 "Cash Deposit"
                    //r_p = 2 Receipt
                    //r_p = 3 cash withdrawal
                    // r_p = 4 payment
                    if (cbRepFormat.Text == "Passed")
                    {
                        // b_t = "3"
                        ConnectionWithAccess.query = "select distinct '', f23.a_n, f23.s_a, f23.PASS_DATE, f23.D_N, f1.[desc] as [Desc], f1.city, f23.bamt, '', '', f23.r_p from " + ConnectionWithAccess.tablename[1] + " f1, " + ConnectionWithAccess.tablename[23] + " f23 where f1.a_n = f23.a_n and f1.s_a = f23.s_a and IsNull(f1.d_y) = IsNull(f23.d_y) and f23.prd = '" + ConnectionWithAccess.mprd + "' and f21.d_d >= @From and f21.d_d <= @To and f23.bamt > 0 and r_p = '2' and  f23.b_t = '3' and f23.d_c = " + cbrep_ana_d_c.SelectedValue.ToString() + "";
                        excel_filename = "Receipt Bank Passed List as on " + ConnectionWithAccess.mprd + "_" + DateTime.Now.Day + "_" + DateTime.Now.Month + "_" + DateTime.Now.Year + "_" + DateTime.Now.TimeOfDay.Hours + "_" + DateTime.Now.TimeOfDay.Minutes;
                    }
                    else if (cbRepFormat.Text == "Failed")
                    {
                        // b_t = "4"
                        ConnectionWithAccess.query = "select distinct '', f23.a_n, f23.s_a, f23.D_D, f23.D_N, f1.[desc] as [Desc], f1.city, f23.bamt, '', '', f23.r_p from " + ConnectionWithAccess.tablename[1] + " f1, " + ConnectionWithAccess.tablename[23] + " f23 where f1.a_n = f23.a_n and f1.s_a = f23.s_a and IsNull(f1.d_y) = IsNull(f23.d_y) and f23.prd = '" + ConnectionWithAccess.mprd + "' and f23.d_d >= @From and f23.d_d <= @To and f23.bamt > 0 and r_p = '2' and f23.b_t = '4' and f23.d_c = " + cbrep_ana_d_c.SelectedValue.ToString() + "";
                        excel_filename = "Receipt Bank Failed List as on " + ConnectionWithAccess.mprd + "_" + DateTime.Now.Day + "_" + DateTime.Now.Month + "_" + DateTime.Now.Year + "_" + DateTime.Now.TimeOfDay.Hours + "_" + DateTime.Now.TimeOfDay.Minutes;
                    }
                    else if (cbRepFormat.Text == "Pending")
                    {
                        // b_t = "2"
                        ConnectionWithAccess.query = "select distinct '', f23.a_n, f23.s_a, f23.D_D, f23.D_N, f1.[desc] as [Desc], f1.city, f23.bamt, '', '', f23.r_p from " + ConnectionWithAccess.tablename[1] + " f1, " + ConnectionWithAccess.tablename[23] + " f23 where f1.a_n = f23.a_n and f1.s_a = f23.s_a and IsNull(f1.d_y) = IsNull(f23.d_y) and f23.prd = '" + ConnectionWithAccess.mprd + "' and f23.d_d >= @From and f23.d_d <= @To and f23.bamt > 0 and r_p = '2' and  f23.b_t = '2' and f23.d_c = " + cbrep_ana_d_c.SelectedValue.ToString() + "";
                        excel_filename = "Receipt Bank Pending List as on " + ConnectionWithAccess.mprd + "_" + DateTime.Now.Day + "_" + DateTime.Now.Month + "_" + DateTime.Now.Year + "_" + DateTime.Now.TimeOfDay.Hours + "_" + DateTime.Now.TimeOfDay.Minutes;
                    }
                    parameters_for_date_range(RepFrom.Text, RepTo.Text);
                    ConnectionCommand.accountHelp_datatable_Seperate(gdvreport, "Bankrep");
                }
                else if (cbRepSubType.Text == "Payment")
                {
                    // r_p = 4 payment
                    if (cbRepFormat.Text == "Pending")
                    {
                        // b_t = "2"
                        ConnectionWithAccess.query = "select distinct '', f23.a_n, f23.s_a, f23.D_D, f23.D_N, f1.[desc] as [Desc], f1.city, '', (f23.bamt * -1), '', f23.r_p from " + ConnectionWithAccess.tablename[1] + " f1, " + ConnectionWithAccess.tablename[23] + " f23 where f1.a_n = f23.a_n and f1.s_a = f23.s_a and IsNull(f1.d_y) = IsNull(f23.d_y) and f23.prd = '" + ConnectionWithAccess.mprd + "' and f23.d_d >= @From and f23.d_d <= @To and f23.bamt < 0 and r_p = '4' and  f23.b_t = '2' and f23.d_c = " + cbrep_ana_d_c.SelectedValue.ToString() + "";
                        excel_filename = "Payment Bank Pending List as on " + ConnectionWithAccess.mprd + "_" + DateTime.Now.Day + "_" + DateTime.Now.Month + "_" + DateTime.Now.Year + "_" + DateTime.Now.TimeOfDay.Hours + "_" + DateTime.Now.TimeOfDay.Minutes;
                    }
                    else if (cbRepFormat.Text == "Passed")
                    {
                        // b_t = "3"
                        ConnectionWithAccess.query = "select distinct '', f23.a_n, f23.s_a, f23.PASS_DATE, f23.D_N, f1.[desc] as [Desc], f1.city, '', (f23.bamt * -1), '', f23.r_p from " + ConnectionWithAccess.tablename[1] + " f1, " + ConnectionWithAccess.tablename[23] + " f23 where f1.a_n = f23.a_n and f1.s_a = f23.s_a and IsNull(f1.d_y) = IsNull(f23.d_y) and f23.prd = '" + ConnectionWithAccess.mprd + "' and f23.d_d >= @From and f23.d_d <= @To and f23.bamt < 0 and r_p = '4' and  f23.b_t = '3' and f23.d_c = " + cbrep_ana_d_c.SelectedValue.ToString() + "";
                        excel_filename = "Payment Bank Passed List as on " + ConnectionWithAccess.mprd + "_" + DateTime.Now.Day + "_" + DateTime.Now.Month + "_" + DateTime.Now.Year + "_" + DateTime.Now.TimeOfDay.Hours + "_" + DateTime.Now.TimeOfDay.Minutes;
                    }
                    else if (cbRepFormat.Text == "Failed")
                    {
                        // b_t = "4"
                        ConnectionWithAccess.query = "select distinct '', f23.a_n, f23.s_a, f23.D_D, f23.D_N, f1.[desc] as [Desc], f1.city, '', (f23.bamt * -1), '', f23.r_p from " + ConnectionWithAccess.tablename[1] + " f1, " + ConnectionWithAccess.tablename[23] + " f23 where f1.a_n = f23.a_n and f1.s_a = f23.s_a and IsNull(f1.d_y) = IsNull(f23.d_y) and f23.prd = '" + ConnectionWithAccess.mprd + "' and f23.d_d >= @From and f23.d_d <= @To and f23.bamt < 0 and r_p = '4' and  f23.b_t = '4' and f23.d_c = " + cbrep_ana_d_c.SelectedValue.ToString() + "";
                        excel_filename = "Payment Bank Failed List as on " + ConnectionWithAccess.mprd + "_" + DateTime.Now.Day + "_" + DateTime.Now.Month + "_" + DateTime.Now.Year + "_" + DateTime.Now.TimeOfDay.Hours + "_" + DateTime.Now.TimeOfDay.Minutes;
                    }
                    parameters_for_date_range(RepFrom.Text, RepTo.Text);
                    ConnectionCommand.accountHelp_datatable_Seperate(gdvreport, "Bankrep");
                }
                else if (cbRepSubType.Text == "Deposit")
                {
                    // r_p - 1 "Cash Deposit"
                    // b_t = "3"
                    ConnectionWithAccess.query = "select distinct '', f23.a_n, f23.s_a, f23.PASS_DATE, f23.D_N, f1.[desc] as [Desc], f1.city, f23.bamt, '', '', f23.r_p from " + ConnectionWithAccess.tablename[1] + " f1, " + ConnectionWithAccess.tablename[23] + " f23 where f1.a_n = f23.a_n and f1.s_a = f23.s_a and IsNull(f1.d_y) = IsNull(f23.d_y) and f23.prd = '" + ConnectionWithAccess.mprd + "' and f23.d_d >= @From and f23.d_d <= @To and f23.bamt > 0 and r_p = '1' and  f23.b_t = '3' and f23.d_c = " + cbrep_ana_d_c.SelectedValue.ToString() + "";
                    parameters_for_date_range(RepFrom.Text, RepTo.Text);
                    ConnectionCommand.accountHelp_datatable_Seperate(gdvreport, "Bankrep");
                    excel_filename = "Bank Deposit List as on " + ConnectionWithAccess.mprd + "_" + DateTime.Now.Day + "_" + DateTime.Now.Month + "_" + DateTime.Now.Year + "_" + DateTime.Now.TimeOfDay.Hours + "_" + DateTime.Now.TimeOfDay.Minutes;
                }
                else if (cbRepSubType.Text == "Withdrawal")
                {
                    //r_p = 3 cash withdrawal
                    // b_t = "3"
                    ConnectionWithAccess.query = "select distinct '', f23.a_n, f23.s_a, f23.PASS_DATE, f23.D_N, f1.[desc] as [Desc], f1.city, '', (f23.bamt * -1), '', f23.r_p from " + ConnectionWithAccess.tablename[1] + " f1, " + ConnectionWithAccess.tablename[23] + " f23 where f1.a_n = f23.a_n and f1.s_a = f23.s_a and IsNull(f1.d_y) = IsNull(f23.d_y) and f23.prd = '" + ConnectionWithAccess.mprd + "' and f23.d_d >= @From and f23.d_d <= @To and f23.bamt < 0 and r_p = '3' and  f23.b_t = '3' and f23.d_c = " + cbrep_ana_d_c.SelectedValue.ToString() + "";
                    parameters_for_date_range(RepFrom.Text, RepTo.Text);
                    ConnectionCommand.accountHelp_datatable_Seperate(gdvreport, "Bankrep");
                    excel_filename = "Bank Withdrawal List as on " + ConnectionWithAccess.mprd + "_" + DateTime.Now.Day + "_" + DateTime.Now.Month + "_" + DateTime.Now.Year + "_" + DateTime.Now.TimeOfDay.Hours + "_" + DateTime.Now.TimeOfDay.Minutes;
                }
                if (gdvreport.Rows.Count > 1)
                {
                    //gdvreport.DefaultCellStyle.Font = new System.Drawing.Font("Microsoft Sans Serif", 9);
                    gdvreport.Columns[0].HeaderText = "Date";
                    gdvreport.Columns[1].HeaderText = "Doc. No";
                    gdvreport.Columns[2].HeaderText = "Name";
                    gdvreport.Columns[3].HeaderText = "City";
                    gdvreport.Columns[4].HeaderText = "Receipt";
                    gdvreport.Columns[5].HeaderText = "Payment";
                    gdvreport.Columns[6].HeaderText = "Balance";
                    gdvreport.Columns[0].Width = 75;
                    gdvreport.Columns[1].Width = 90;
                    gdvreport.Columns[2].Width = 300;
                    gdvreport.Columns[3].Width = 150;
                    gdvreport.Columns[4].Width = 93;
                    gdvreport.Columns[5].Width = 93;
                    gdvreport.Columns[6].Width = 93;
                    gdvreport.Columns[1].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;
                    gdvreport.Columns[4].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;
                    gdvreport.Columns[5].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;
                    gdvreport.Columns[6].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;
                    gdvreport.Columns[4].DefaultCellStyle.Format = "N2";
                    gdvreport.Columns[5].DefaultCellStyle.Format = "N2";
                    gdvreport.Columns[6].DefaultCellStyle.Format = "N2";
                    gdvreport.AllowUserToResizeColumns = false;
                    gdvreport.FirstDisplayedScrollingRowIndex = gdvreport.Rows.Count - 2;
                    if (gdvreport.Rows.Count > 0)
                        excel_filename = "Mini Sale List as on " + ConnectionWithAccess.mprd + "_" + DateTime.Now.Day + "_" + DateTime.Now.Month + "_" + DateTime.Now.Year + "_" + DateTime.Now.TimeOfDay.Hours + "_" + DateTime.Now.TimeOfDay.Minutes;
                    //ConnectionWithAccess.export(gdvreport, excel_filename);
                    bank_report_list_auto_boxes();
                    //generate_bank_report();
                }
                move_cursor_to_button_position("atbpreview");
            }
            else if (cbRepType.Text == "Cash")
            {
                StringBuilder strQuery = new StringBuilder();
                gdvreport.Visible = true;
                if (cbRepSubType.Text == "All")
                {
                    strQuery.Append(" select #" + ConnectionWithAccess.msdate + "# as [d_d],0 as [d_n], 'Opening Balance' as [desc], '' as [city], f51.amt as [camt], 0 as [camt * -1], 0 as [balance_amt] from " + ConnectionWithAccess.tablename[51] + " f51 where f51.prd = '" + ConnectionWithAccess.moprd + "' and f51.a_n = '" + raa_n.Text + "' and d_d = #01-01-1901# and f51.s_a = '@@@' UNION ALL");
                    strQuery.Append(" select f24.D_D, f24.D_N, f1.[desc] as [Desc], f1.city, f24.camt, '', 0 as [balance_amt] from " + ConnectionWithAccess.tablename[24] + " f24 inner join " + ConnectionWithAccess.tablename[1] + " f1 on f24.a_n = f1.a_n and f24.s_a = f1.s_a and f24.d_y = f1.d_y where f24.prd = '" + ConnectionWithAccess.mprd + "' and f24.d_d >= @From and f24.d_d <= @To and f24.camt > 0 and f24.d_c = " + cbrep_ana_d_c.SelectedValue.ToString() + " and f24.a_n <> '7999' union all  ");
                    strQuery.Append(" select f24.D_D, f24.D_N, f1.[desc] as [Desc], f1.city,  '', (f24.camt * -1), 0 as [balance_amt] from " + ConnectionWithAccess.tablename[24] + " f24 inner join " + ConnectionWithAccess.tablename[1] + " f1 on f24.a_n = f1.a_n and f24.s_a = f1.s_a and f24.d_y = f1.d_y where f24.prd = '" + ConnectionWithAccess.mprd + "' and f24.d_d >= @From and f24.d_d <= @To and f24.camt < 0 and f24.d_c = " + cbrep_ana_d_c.SelectedValue.ToString() + " and f24.a_n <> '7999' UNION ALL");
                    strQuery.Append(" select f23.D_D, f23.D_N, 'CASH WITHDRAWN FROM BANK' as [Desc], f1.city, (f23.bamt * -1), '', 0 as [balance_amt] from " + ConnectionWithAccess.tablename[23] + " f23 inner join " + ConnectionWithAccess.tablename[1] + " f1 on f23.a_n = f1.a_n and f23.s_a = f1.s_a and f23.d_y = f1.d_y where f23.prd = '" + ConnectionWithAccess.mprd + "' and f23.d_d >= @From and f23.d_d <= @To and f23.bamt < 0 and f23.a_n = '7999' and f23.s_a = 'WIT' UNION ALL");
                    strQuery.Append(" select f23.D_D, f23.D_N, 'CASH DEPOSITED IN BANK' as [Desc], f1.city, '', f23.bamt, 0 as [balance_amt] from " + ConnectionWithAccess.tablename[23] + " f23 inner join " + ConnectionWithAccess.tablename[1] + " f1 on f23.a_n = f1.a_n and f23.s_a = f1.s_a and f23.d_y = f1.d_y where f23.prd = '" + ConnectionWithAccess.mprd + "' and f23.d_d >= @From and f23.d_d <= @To and f23.bamt > 0 and f23.a_n = '7999' and f23.s_a = 'DEP'");
                    excel_filename = "Cash List as on " + ConnectionWithAccess.mprd + "_" + DateTime.Now.Day + "_" + DateTime.Now.Month + "_" + DateTime.Now.Year + "_" + DateTime.Now.TimeOfDay.Hours + "_" + DateTime.Now.TimeOfDay.Minutes;
                }
                else if (cbRepSubType.Text == "Receipt")
                {
                    ConnectionWithAccess.query = "select distinct '',  f24.a_n, f24.s_a, f24.D_D, f24.D_N, f1.[desc] as [Desc], f1.city, f24.camt, '', '', '' from " + ConnectionWithAccess.tablename[1] + " f1, " + ConnectionWithAccess.tablename[24] + " f24 where f1.a_n = f24.a_n and f1.s_a = f24.s_a and IsNull(f1.d_y) = IsNull(f24.d_y) and f24.r_p = '1' and f24.prd = '" + ConnectionWithAccess.mprd + "' and f24.d_d >= #" + RepFrom.Text + "# and f24.d_d <=#" + RepTo.Text + "# and f24.d_c = " + cbrep_ana_d_c.SelectedValue.ToString() + " order by f24.d_n";
                    ConnectionCommand.accountHelp_datatable_Seperate(gdvreport, "Cashrep");
                    ConnectionWithAccess.query = "select distinct '',  f24.a_n, f24.s_a, f24.D_D, f24.D_N, f1.[desc] as [Desc], f1.city, f24.camt, '', '', '' from " + ConnectionWithAccess.tablename[1] + " f1, " + ConnectionWithAccess.tablename[24] + " f24 where f1.a_n = f24.a_n and f1.s_a = f24.s_a and IsNull(f1.d_y) = IsNull(f24.d_y) and f24.r_p = '2' and f24.prd = '" + ConnectionWithAccess.mprd + "' and f24.d_d >= #" + RepFrom.Text + "# and f24.d_d <=#" + RepTo.Text + "# and f24.d_c = " + cbrep_ana_d_c.SelectedValue.ToString() + " order by f24.d_n";
                    ConnectionCommand.multiplerows(gdvreport, "Cashrep");
                    excel_filename = "Cash Receipt List as on " + ConnectionWithAccess.mprd + "_" + DateTime.Now.Day + "_" + DateTime.Now.Month + "_" + DateTime.Now.Year + "_" + DateTime.Now.TimeOfDay.Hours + "_" + DateTime.Now.TimeOfDay.Minutes;
                }
                else if (cbRepSubType.Text == "Payment")
                {
                    ConnectionWithAccess.query = "select distinct '',  f24.a_n, f24.s_a, f24.D_D, f24.D_N, f1.[desc] as [Desc], f1.city, '', (f24.camt * -1), '', '' from " + ConnectionWithAccess.tablename[1] + " f1, " + ConnectionWithAccess.tablename[24] + " f24 where f1.a_n = f24.a_n and f1.s_a = f24.s_a and IsNull(f1.d_y) = IsNull(f24.d_y) and f24.r_p = '3' and f24.prd = '" + ConnectionWithAccess.mprd + "' and f24.d_d >= #" + RepFrom.Text + "# and f24.d_d <=#" + RepTo.Text + "# and f24.d_c = " + cbrep_ana_d_c.SelectedValue.ToString() + "  order by f24.d_n";
                    ConnectionCommand.accountHelp_datatable_Seperate(gdvreport, "Cashrep");
                    ConnectionWithAccess.query = "select distinct '',  f24.a_n, f24.s_a, f24.D_D, f24.D_N, f1.[desc] as [Desc], f1.city, '', (f24.camt * -1), '', '' from " + ConnectionWithAccess.tablename[1] + " f1, " + ConnectionWithAccess.tablename[24] + " f24 where f1.a_n = f24.a_n and f1.s_a = f24.s_a and IsNull(f1.d_y) = IsNull(f24.d_y) and f24.r_p = '4' and f24.prd = '" + ConnectionWithAccess.mprd + "' and f24.d_d >= #" + RepFrom.Text + "# and f24.d_d <=#" + RepTo.Text + "# and f24.d_c = " + cbrep_ana_d_c.SelectedValue.ToString() + "  order by f24.d_n";
                    ConnectionCommand.multiplerows(gdvreport, "Cashrep");
                    excel_filename = "Cash Payment List as on " + ConnectionWithAccess.mprd + "_" + DateTime.Now.Day + "_" + DateTime.Now.Month + "_" + DateTime.Now.Year + "_" + DateTime.Now.TimeOfDay.Hours + "_" + DateTime.Now.TimeOfDay.Minutes;
                }
                ConnectionWithAccess.query = strQuery.ToString();
                //parameters_for_date_range(RepFrom.Text, RepTo.Text);
                parameters_for_date_range(ConnectionWithAccess.msdate, RepTo.Text);
                ConnectionCommand.accountHelp_datatable_Seperate(gdvreport, "Cashrep", "d_d ASC");
                fAdd_cash_Report_Totals("d_d ASC");
                if (gdvreport.Rows.Count > 1)
                {
                    //gdvreport.DefaultCellStyle.Font = new System.Drawing.Font("Microsoft Sans Serif", 9);
                    gdvreport.Columns[0].HeaderText = "Date";
                    gdvreport.Columns[1].HeaderText = "Doc. No";
                    gdvreport.Columns[2].HeaderText = "Name";
                    gdvreport.Columns[3].HeaderText = "City";
                    gdvreport.Columns[4].HeaderText = "Receipt";
                    gdvreport.Columns[5].HeaderText = "Payment";
                    gdvreport.Columns[6].HeaderText = "Balance";
                    gdvreport.Columns[0].Width = 75;
                    gdvreport.Columns[1].Width = 90;
                    gdvreport.Columns[2].Width = 300;
                    gdvreport.Columns[3].Width = 150;
                    gdvreport.Columns[4].Width = 93;
                    gdvreport.Columns[5].Width = 93;
                    gdvreport.Columns[6].Width = 93;
                    gdvreport.Columns[1].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;
                    gdvreport.Columns[4].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;
                    gdvreport.Columns[5].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;
                    gdvreport.Columns[6].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;
                    gdvreport.Columns[4].DefaultCellStyle.Format = "N2";
                    gdvreport.Columns[5].DefaultCellStyle.Format = "N2";
                    gdvreport.Columns[6].DefaultCellStyle.Format = "N2";
                    gdvreport.AllowUserToResizeColumns = false;
                    gdvreport.FirstDisplayedScrollingRowIndex = gdvreport.Rows.Count - 2;
                    if (gdvreport.Rows.Count > 0)
                        excel_filename = "Cash List as on " + ConnectionWithAccess.mprd + "_" + DateTime.Now.Day + "_" + DateTime.Now.Month + "_" + DateTime.Now.Year + "_" + DateTime.Now.TimeOfDay.Hours + "_" + DateTime.Now.TimeOfDay.Minutes;
                    ConnectionWithAccess.export(gdvreport, excel_filename);
                    cash_report_list_auto_boxes();
                    //generate_cash_report();
                }
                move_cursor_to_button_position("atbpreview");
            }
            else if (cbRepType.Text == "Journal")
            {
                gdvreport.Visible = true;
                //ConnectionWithAccess.query = "select distinct '', f25.a_n, f25.s_a, f25.na_n, f25.ns_a, f25.D_D, f25.D_N, f1.[desc] as [Desc], f1.city, f25.jamt from " + ConnectionWithAccess.tablename[1] + " f1, " + ConnectionWithAccess.tablename[25] + " f25 where f1.a_n = f25.a_n and f1.s_a = f25.s_a and f25.prd = '" + ConnectionWithAccess.mprd + "' and f25.d_d >= @From and f25.d_d <= @To order by f25.d_n";


                ConnectionWithAccess.query = "select f25.d_d, f25.d_n, f1a.Desc as name1, f1a.City as city1, f25.jamt, f1b.desc as name2, f1b.City as city2, f25.mess, f25.a_n, f25.s_a, f25.na_n, f25.ns_a, f25.basic_amt, f25.igst_per, f25.igst_amt " +
                                             " from " + ConnectionWithAccess.tablename[25] + " f25, " + ConnectionWithAccess.tablename[1] + " f1a, " + ConnectionWithAccess.tablename[1] + " f1b " +
                                            " where  f1a.a_n = f25.a_n and f1a.s_a = f25.s_a and f1a.d_y='@@@' and " +
                                            " f1b.a_n = f25.na_n and f1b.s_a = f25.ns_a and f1b.d_y='@@@' and " +
                                            " f25.prd = '" + ConnectionWithAccess.mprd + "' and f25.d_n <> 999999 order by f25.d_n, f25.d_d DESC";


                parameters_for_date_range(RepFrom.Text, RepTo.Text);
                ConnectionCommand.accountHelp_datatable_Seperate(gdvreport, "Jourrep", "d_d ASC");

                if (gdvreport.Rows.Count > 1)
                {
                    gdvreport.Columns[0].HeaderText = "Date";
                    gdvreport.Columns[1].HeaderText = "d_n";
                    gdvreport.Columns[2].HeaderText = "name1";
                    gdvreport.Columns[3].HeaderText = "city1";
                    gdvreport.Columns[4].HeaderText = "jamt";
                    gdvreport.Columns[5].HeaderText = "name2";
                    gdvreport.Columns[6].HeaderText = "city2";
                    gdvreport.Columns[7].HeaderText = "mess";
                    gdvreport.Columns[8].HeaderText = "a_n";
                    gdvreport.Columns[9].HeaderText = "s_a";
                    gdvreport.Columns[10].HeaderText = "na_n";
                    gdvreport.Columns[11].HeaderText = "ns_a";
                    gdvreport.Columns[12].HeaderText = "basic_amt";
                    gdvreport.Columns[13].HeaderText = "igst_per";
                    gdvreport.Columns[14].HeaderText = "igst_amt";
                    gdvreport.Columns[0].Width = 65;
                    gdvreport.Columns[1].Width = 68;
                    gdvreport.Columns[2].Width = 210;
                    gdvreport.Columns[3].Width = 100;
                    gdvreport.Columns[4].Width = 68;
                    gdvreport.Columns[5].Width = 210;
                    gdvreport.Columns[6].Width = 100;
                    gdvreport.Columns[7].Width = 100;
                    //gdvreport.Columns[8].Width = 140;
                    //gdvreport.Columns[9].Width = 120;
                    //gdvreport.Columns[10].Width = 72;
                    //gdvreport.Columns[11].Width = 54;
                    //gdvreport.Columns[12].Width = 90;
                    //gdvreport.Columns[13].Width = 60;
                    //gdvreport.Columns[14].Width = 240;
                    gdvreport.Columns[4].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;
                    gdvreport.Columns[8].Visible = false;
                    gdvreport.Columns[9].Visible = false;
                    gdvreport.Columns[10].Visible = false;
                    gdvreport.Columns[11].Visible = false;
                    gdvreport.Columns[12].Visible = false;
                    gdvreport.Columns[13].Visible = false;
                    gdvreport.Columns[14].Visible = false;
                    gdvreport.FirstDisplayedScrollingRowIndex = gdvreport.Rows.Count - 2;
                    if (gdvreport.Rows.Count > 0)
                        excel_filename = "Journal List as on " + ConnectionWithAccess.mprd + "_" + DateTime.Now.Day + "_" + DateTime.Now.Month + "_" + DateTime.Now.Year + "_" + DateTime.Now.TimeOfDay.Hours + "_" + DateTime.Now.TimeOfDay.Minutes;
                    ConnectionWithAccess.export(gdvreport, excel_filename);
                    jour_report_list_auto_boxes();
                    //generate_general_report();
                }
                move_cursor_to_button_position("atbpreview");
            }
            else if (cbRepType.Text == "Outstanding Debitors")
            {
                DataTable dtDataOutstanding = null;
                temporary_list_1.Clear();
                temporary_list_2.Clear();
                temporary_list_3.Clear();
                //PleaseWait objPleaseWait = new PleaseWait("Please wait Collecting Data");
                //objPleaseWait.Show();
                //Application.DoEvents();
                ConnectionWithAccess.ma_n = get_a_n_from_d_c("S", Convert.ToInt32(cbrep_ana_d_c.SelectedValue.ToString()));
                dtDataOutstanding = get_list_of_debitors_outstanding_accounts(ConnectionWithAccess.mprd);
                //if (RepTo.Value != DateTime.Today)
                //{
                for (array_counter1 = 0; array_counter1 < dtDataOutstanding.Rows.Count; array_counter1++)
                {
                    ConnectionWithAccess.ms_a = dtDataOutstanding.Rows[array_counter1][2].ToString();
                    temp_double = get_account_balance(ConnectionWithAccess.ma_n, ConnectionWithAccess.ms_a, RepTo.Value.ToString());
                    dtDataOutstanding.Rows[array_counter1][3] = temp_double.ToString();
                }
                //}
                if (cb_outstanding_bills.Checked)
                {
                    for (array_counter1 = 0; array_counter1 < dtDataOutstanding.Rows.Count; array_counter1++)
                    {
                        //var cellArray = temporary_list_1[array_counter1].Split(new[] { ',' });
                        ConnectionWithAccess.ms_a = dtDataOutstanding.Rows[array_counter1][2].ToString();
                        if (Convert.ToSingle(dtDataOutstanding.Rows[array_counter1][3].ToString()) > 0)
                        {
                            extract_outstanding_details_of_accounts(RepTo.Value.ToString());
                            if (array_counter1 == 31)
                                temp_word2 = "";
                        }
                    }
                    generate_outstanding_list_with_invoices(dtDataOutstanding);
                }
                else
                {
                    generate_outstanding_list_only_auto_boxes(dtDataOutstanding);
                }
                atbpreview_Click(sender, e);
                move_cursor_to_button_position("atbcancel");
            }
            else if (cbRepType.Text == "Outstanding Creditors")
            {
                temporary_list_1.Clear();
                temporary_list_2.Clear();
                temporary_list_3.Clear();
                //PleaseWait objPleaseWait = new PleaseWait("Please wait Collecting Data");
                //objPleaseWait.Show();
                //Application.DoEvents();
                ConnectionWithAccess.ma_n = get_a_n_from_d_c("P", Convert.ToInt32(cbrep_ana_d_c.SelectedValue.ToString()));
                DataTable dtDataOutstanding = get_list_of_creditors_outstanding_accounts(ConnectionWithAccess.mprd);

                //if (RepTo.Value != DateTime.Today)
                if (RepTo.Value.ToShortDateString() != ConnectionWithAccess.medate)
                {
                    for (array_counter1 = 0; array_counter1 < dtDataOutstanding.Rows.Count; array_counter1++)
                    {
                        ConnectionWithAccess.ms_a = dtDataOutstanding.Rows[array_counter1][2].ToString();
                        temp_double = (get_account_balance(ConnectionWithAccess.ma_n, ConnectionWithAccess.ms_a, RepTo.Value.ToString())) * -1;
                        dtDataOutstanding.Rows[array_counter1][3] = temp_double.ToString();
                    }
                }
                if (cb_outstanding_bills.Checked)
                {
                    for (array_counter1 = 0; array_counter1 < dtDataOutstanding.Rows.Count; array_counter1++)
                    //for (array_counter1 = 0; array_counter1 < 20; array_counter1++)
                    {
                        //var cellArray = temporary_list_1[array_counter1].Split(new[] { ',' });
                        ConnectionWithAccess.ms_a = dtDataOutstanding.Rows[array_counter1][2].ToString();
                        if (Convert.ToSingle(dtDataOutstanding.Rows[array_counter1][3].ToString()) > 0)
                        {
                            extract_outstanding_details_of_accounts(RepTo.Value.ToString());
                            if (array_counter1 == 31)
                                temp_word2 = "";
                        }
                    }
                    generate_outstanding_list_with_invoices(dtDataOutstanding);
                }
                else
                {
                    generate_outstanding_list_only_auto_boxes(dtDataOutstanding);
                    //generate_outstanding_list_only(dtDataOutstanding);
                }
                atbpreview_Click(sender, e);
                move_cursor_to_button_position("atbcancel");
                //objPleaseWait.Close();
            }
            else if (cbRepType.Text == "Debitors Advances")
            {
                temporary_list_1.Clear();
                temporary_list_2.Clear();
                temporary_list_3.Clear();
                ConnectionWithAccess.ma_n = get_a_n_from_d_c("S", Convert.ToInt32(cbrep_ana_d_c.SelectedValue.ToString()));
                DataTable dtDataOutstanding = get_list_of_debitors_advances_accounts();
                if (chkBill.Checked || cb_outstanding_bills.Checked)
                {
                    for (array_counter1 = 0; array_counter1 < dtDataOutstanding.Rows.Count; array_counter1++)
                    //for (array_counter1 = 0; array_counter1 < 20; array_counter1++)
                    {
                        //var cellArray = temporary_list_1[array_counter1].Split(new[] { ',' });
                        ConnectionWithAccess.ms_a = dtDataOutstanding.Rows[array_counter1][2].ToString();
                        if (Convert.ToSingle(dtDataOutstanding.Rows[array_counter1][3].ToString()) > 0)
                        {
                            extract_outstanding_details_of_accounts(RepTo.Value.ToString());
                            if (array_counter1 == 31)
                                temp_word2 = "";
                        }
                    }
                    generate_outstanding_list_with_invoices(dtDataOutstanding);
                }
                else
                    generate_outstanding_list_only(dtDataOutstanding);
                atbpreview_Click(sender, e);
                move_cursor_to_button_position("atbcancel");
                //objPleaseWait.Close();
            }
            else if (cbRepType.Text == "Creditors Deposits")
            {
                temporary_list_1.Clear();
                temporary_list_2.Clear();
                temporary_list_3.Clear();
                ConnectionWithAccess.ma_n = get_a_n_from_d_c("P", Convert.ToInt32(cbrep_ana_d_c.SelectedValue.ToString()));
                DataTable dtDataOutstanding = get_list_of_creditors_deposits_accounts();
                if (chkBill.Checked || cb_outstanding_bills.Checked)
                {
                    for (array_counter1 = 0; array_counter1 < dtDataOutstanding.Rows.Count; array_counter1++)
                    //for (array_counter1 = 0; array_counter1 < 20; array_counter1++)
                    {
                        //var cellArray = temporary_list_1[array_counter1].Split(new[] { ',' });
                        ConnectionWithAccess.ms_a = dtDataOutstanding.Rows[array_counter1][2].ToString();
                        if (Convert.ToSingle(dtDataOutstanding.Rows[array_counter1][3].ToString()) > 0)
                        {
                            extract_outstanding_details_of_accounts(RepTo.Value.ToString());
                            if (array_counter1 == 31)
                                temp_word2 = "";
                        }
                    }
                    generate_outstanding_list_with_invoices(dtDataOutstanding);
                }
                else
                    generate_outstanding_list_only(dtDataOutstanding);
                atbpreview_Click(sender, e);
                move_cursor_to_button_position("atbcancel");
            }
            else if (cbRepType.Text == "Opening Balances" || cbRepType.Text == "Closing Balances")
            {
                if (cbRepType.Text == "Opening Balances" && cbRepSubType.Text == "Customer's")
                {
                    ConnectionWithAccess.query = "select '', f51.a_n, f51.s_a, f1.[desc] as [Desc], f1.city, f51.amt from " + ConnectionWithAccess.tablename[51] + " f51 inner join " + ConnectionWithAccess.tablename[1] + " f1 on f51.a_n = f1.a_n and f51.s_a = f1.s_a where f51.prd = '" + ConnectionWithAccess.moprd + "' and f51.a_n = '2002' and f51.amt <> 0 and d_d = #01-01-1901# and f1.s_a <> '@@@' order by f1.a_n,f1.s_a";
                    ConnectionCommand.accountHelp_datatable_Seperate(gdvreport, "Cust_bal_rep");
                    excel_filename = "Customers Balance List as on " + ConnectionWithAccess.mprd + "_" + DateTime.Now.Day + "_" + DateTime.Now.Month + "_" + DateTime.Now.Year + "_" + DateTime.Now.TimeOfDay.Hours + "_" + DateTime.Now.TimeOfDay.Minutes;
                }
                else if (cbRepType.Text == "Opening Balances" && cbRepSubType.Text == "Supplier's")
                {
                    ConnectionWithAccess.query = "select '', f51.a_n, f51.s_a, f1.[desc] as [Desc], f1.city, f51.amt from " + ConnectionWithAccess.tablename[51] + " f51 inner join " + ConnectionWithAccess.tablename[1] + " f1 on f51.a_n = f1.a_n and f51.s_a = f1.s_a where f51.prd = '" + ConnectionWithAccess.moprd + "' and f51.a_n = '4002' and f51.amt <> 0 and d_d = #01-01-1901# and f1.s_a <> '@@@' order by f1.a_n,f1.s_a";
                    ConnectionCommand.accountHelp_datatable_Seperate(gdvreport, "Supl_bal_rep");
                    excel_filename = "Suppliers Balance List as on " + ConnectionWithAccess.mprd + "_" + DateTime.Now.Day + "_" + DateTime.Now.Month + "_" + DateTime.Now.Year + "_" + DateTime.Now.TimeOfDay.Hours + "_" + DateTime.Now.TimeOfDay.Minutes;
                }
                else if (cbRepType.Text == "Closing Balances" && cbRepSubType.Text == "Customer's")
                {
                    ConnectionWithAccess.query = "select distinct '', f51.a_n, f51.s_a, f1.[desc] as [Desc], f1.city, f51.amt from " + ConnectionWithAccess.tablename[1] + " f1, " + ConnectionWithAccess.tablename[51] + " f51 where f1.a_n = f51.a_n and f1.s_a = f51.s_a and f51.prd = '" + ConnectionWithAccess.mprd + "' and f51.a_n = '2002' and f51.amt <> 0 and d_d = #01-01-1901# and f1.s_a <> '@@@'";
                    ConnectionCommand.accountHelp_datatable_Seperate(gdvreport, "Cust_bal_rep");
                    excel_filename = "Customers Balance List as on " + ConnectionWithAccess.mprd + "_" + DateTime.Now.Day + "_" + DateTime.Now.Month + "_" + DateTime.Now.Year + "_" + DateTime.Now.TimeOfDay.Hours + "_" + DateTime.Now.TimeOfDay.Minutes;
                }
                else if (cbRepType.Text == "Closing Balances" && cbRepSubType.Text == "Supplier's")
                {
                    ConnectionWithAccess.query = "select distinct '', f51.a_n, f51.s_a, f1.[desc] as [Desc], f1.city, (f51.amt *-1) from " + ConnectionWithAccess.tablename[1] + " f1, " + ConnectionWithAccess.tablename[51] + " f51 where f1.a_n = f51.a_n and f1.s_a = f51.s_a and f51.prd = '" + ConnectionWithAccess.mprd + "' and f51.a_n = '4002' and d_d = #01-01-1901# and f1.s_a <> '@@@'";
                    ConnectionCommand.accountHelp_datatable_Seperate(gdvreport, "Supl_bal_rep");
                    excel_filename = "Suppliers Balance List as on " + ConnectionWithAccess.mprd + "_" + DateTime.Now.Day + "_" + DateTime.Now.Month + "_" + DateTime.Now.Year + "_" + DateTime.Now.TimeOfDay.Hours + "_" + DateTime.Now.TimeOfDay.Minutes;
                }
                if (gdvreport.Rows.Count > 1)
                {
                    gdvreport.Columns[0].HeaderText = "Sort Date";
                    gdvreport.Columns[1].HeaderText = "A_n";
                    gdvreport.Columns[2].HeaderText = "S_a";
                    gdvreport.Columns[3].HeaderText = "Name ";
                    gdvreport.Columns[4].HeaderText = "City";
                    gdvreport.Columns[5].HeaderText = "Balance";
                    gdvreport.Columns[3].Width = 300;
                    gdvreport.Columns[4].Width = 200;
                    gdvreport.Columns[5].Width = 120;
                    gdvreport.Columns[5].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;
                    gdvreport.FirstDisplayedScrollingRowIndex = gdvreport.Rows.Count - 2;
                    if (gdvreport.Rows.Count > 0)
                    {
                        //getTotal(gdvreport, 5);
                        gdvreport.Columns[0].Visible = false;
                        gdvreport.Columns[1].Visible = false;
                        gdvreport.Columns[2].Visible = false;
                        generate_Debitors_creditors_report();
                    }
                    atbpreview_Click(sender, e);
                    move_cursor_to_button_position("atbcancel");
                }
            }
            else if (cbRepType.Text == "Loans Taken")
            {
                ConnectionWithAccess.query = "select '', f51.a_n, f51.s_a, f1.[desc] as [Desc], f1.city, (f51.amt *-1) from " + ConnectionWithAccess.tablename[51] + " f51 inner join " + ConnectionWithAccess.tablename[1] + " f1 on f51.a_n = f1.a_n and f51.s_a = f1.s_a where f51.prd = '" + ConnectionWithAccess.mprd + "' and f51.a_n = '3555' and f51.amt <> 0 and d_d = #01-01-1901# and f1.s_a <> '@@@' order by f1.a_n,f1.s_a";
                ConnectionCommand.accountHelp_datatable_Seperate(gdvreport, "Loans Taken");
                excel_filename = "Loans Taken List as on " + ConnectionWithAccess.mprd + "_" + DateTime.Now.Day + "_" + DateTime.Now.Month + "_" + DateTime.Now.Year + "_" + DateTime.Now.TimeOfDay.Hours + "_" + DateTime.Now.TimeOfDay.Minutes;
                if (gdvreport.Rows.Count > 1)
                {
                    gdvreport.Columns[0].HeaderText = "Sort Date";
                    gdvreport.Columns[1].HeaderText = "A_n";
                    gdvreport.Columns[2].HeaderText = "S_a";
                    gdvreport.Columns[3].HeaderText = "Name ";
                    gdvreport.Columns[4].HeaderText = "City";
                    gdvreport.Columns[5].HeaderText = "Balance";
                    gdvreport.Columns[3].Width = 300;
                    gdvreport.Columns[4].Width = 200;
                    gdvreport.Columns[5].Width = 120;
                    gdvreport.Columns[5].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;
                    gdvreport.FirstDisplayedScrollingRowIndex = gdvreport.Rows.Count - 2;

                    gdvreport.Columns[0].Visible = false;
                    gdvreport.Columns[1].Visible = false;
                    gdvreport.Columns[2].Visible = false;
                    generate_Debitors_creditors_report();

                    atbpreview_Click(sender, e);
                    move_cursor_to_button_position("atbcancel");
                }
            }
            else if (cbRepType.Text == "Loans Given")
            {
                ConnectionWithAccess.query = "select '', f51.a_n, f51.s_a, f1.[desc] as [Desc], f1.city, f51.amt from " + ConnectionWithAccess.tablename[51] + " f51 inner join " + ConnectionWithAccess.tablename[1] + " f1 on f51.a_n = f1.a_n and f51.s_a = f1.s_a where f51.prd = '" + ConnectionWithAccess.mprd + "' and f51.a_n = '3500' and f51.amt <> 0 and d_d = #01-01-1901# and f1.s_a <> '@@@' order by f1.a_n,f1.s_a";
                ConnectionCommand.accountHelp_datatable_Seperate(gdvreport, "Loans Taken");
                excel_filename = "Loans Given List as on " + ConnectionWithAccess.mprd + "_" + DateTime.Now.Day + "_" + DateTime.Now.Month + "_" + DateTime.Now.Year + "_" + DateTime.Now.TimeOfDay.Hours + "_" + DateTime.Now.TimeOfDay.Minutes;
                if (gdvreport.Rows.Count > 1)
                {
                    gdvreport.Columns[0].HeaderText = "Sort Date";
                    gdvreport.Columns[1].HeaderText = "A_n";
                    gdvreport.Columns[2].HeaderText = "S_a";
                    gdvreport.Columns[3].HeaderText = "Name ";
                    gdvreport.Columns[4].HeaderText = "City";
                    gdvreport.Columns[5].HeaderText = "Balance";
                    gdvreport.Columns[3].Width = 300;
                    gdvreport.Columns[4].Width = 200;
                    gdvreport.Columns[5].Width = 120;
                    gdvreport.Columns[5].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;
                    gdvreport.FirstDisplayedScrollingRowIndex = gdvreport.Rows.Count - 2;

                    gdvreport.Columns[0].Visible = false;
                    gdvreport.Columns[1].Visible = false;
                    gdvreport.Columns[2].Visible = false;
                    generate_Debitors_creditors_report();

                    atbpreview_Click(sender, e);
                    move_cursor_to_button_position("atbcancel");
                }
            }
            else if (cbRepType.Text == "Stock")
            {
                if (cbRepSubType.Text == "Opening Stock")
                {
                    gdvreport.Visible = true;
                    ConnectionWithAccess.query = "select [type],item_code,[title],opn_stk,price,o_s_amt,igst_per,hsn_code from " + ConnectionWithAccess.tablename[05] + " where opn_stk > 0  and unused = '" + cbRepFormat.SelectedIndex.ToString() + "' order by [title]";
                    ConnectionCommand.accountHelp_datatable_Seperate(gdvreport, "Jourrep");
                    excel_filename = "Items Opening Stock List as on " + ConnectionWithAccess.mprd + "_" + DateTime.Now.Day + "_" + DateTime.Now.Month + "_" + DateTime.Now.Year + "_" + DateTime.Now.TimeOfDay.Hours + "_" + DateTime.Now.TimeOfDay.Minutes;
                    if (gdvreport.Rows.Count > 1)
                    {
                        for (row_pointer = 0; row_pointer < gdvreport.Rows.Count - 1; row_pointer++)
                        {
                            gdvreport.Rows[row_pointer].Cells[5].Value = (Convert.ToInt32(gdvreport.Rows[row_pointer].Cells[3].Value.ToString()) * Convert.ToInt32(gdvreport.Rows[row_pointer].Cells[4].Value.ToString())).ToString();
                        }
                        gdvreport.Columns[0].HeaderText = "Type";
                        gdvreport.Columns[1].HeaderText = "Item_code";
                        gdvreport.Columns[2].HeaderText = "title";
                        gdvreport.Columns[3].HeaderText = "Open. Stock";
                        gdvreport.Columns[4].HeaderText = "Price";
                        gdvreport.Columns[5].HeaderText = "Amount";
                        gdvreport.FirstDisplayedScrollingRowIndex = gdvreport.Rows.Count - 2;
                        if (gdvreport.Rows.Count > 0)
                        {
                            //generate_general_report();
                        }
                    }
                }
                else if (cbRepSubType.Text == "Current Stock")
                {
                    gdvreport.Visible = true;
                    ConnectionWithAccess.query = "select [type],item_code,[title],clo_stk,p_price,tot from " + ConnectionWithAccess.tablename[05] + " where unused = '" + cbRepFormat.SelectedIndex.ToString() + "' order by [title]";
                    ConnectionCommand.accountHelp_datatable_Seperate(gdvreport, "item_Closing_stock");
                    excel_filename = "Items Opening Stock List as on " + ConnectionWithAccess.mprd + "_" + DateTime.Now.Day + "_" + DateTime.Now.Month + "_" + DateTime.Now.Year + "_" + DateTime.Now.TimeOfDay.Hours + "_" + DateTime.Now.TimeOfDay.Minutes;
                    if (gdvreport.Rows.Count > 1)
                    {
                        for (row_pointer = 0; row_pointer < gdvreport.Rows.Count - 1; row_pointer++)
                        {
                            gdvreport.Rows[row_pointer].Cells[5].Value = (Convert.ToSingle(gdvreport.Rows[row_pointer].Cells[3].Value.ToString()) * Convert.ToSingle(gdvreport.Rows[row_pointer].Cells[4].Value.ToString())).ToString();
                        }

                        gdvreport.FirstDisplayedScrollingRowIndex = gdvreport.Rows.Count - 2;
                        if (gdvreport.Rows.Count > 0)
                        {
                            item_closing_stock_list();
                        }
                    }
                }
                else if (cbRepSubType.Text == "Type wise")
                {
                    gdvreport.Visible = true;
                    ConnectionWithAccess.query = "select [type],item_code,[title],opn_stk,clo_stk,price from " + ConnectionWithAccess.tablename[05] + " order by [title]";
                    ConnectionCommand.accountHelp_datatable_Seperate(gdvreport, "Item Stock");
                    excel_filename = "Items Opening Stock List as on " + ConnectionWithAccess.mprd + "_" + DateTime.Now.Day + "_" + DateTime.Now.Month + "_" + DateTime.Now.Year + "_" + DateTime.Now.TimeOfDay.Hours + "_" + DateTime.Now.TimeOfDay.Minutes;
                    if (gdvreport.Rows.Count > 1)
                    {
                        //for (row_pointer = 0; row_pointer < gdvreport.Rows.Count - 1; row_pointer++)
                        //{
                        //    gdvreport.Rows[row_pointer].Cells[5].Value = (Convert.ToInt32(gdvreport.Rows[row_pointer].Cells[3].Value.ToString()) * Convert.ToInt32(gdvreport.Rows[row_pointer].Cells[4].Value.ToString())).ToString();
                        //}
                        gdvreport.Columns[0].HeaderText = "Type";
                        gdvreport.Columns[1].HeaderText = "Item_code";
                        gdvreport.Columns[2].HeaderText = "title";
                        gdvreport.Columns[3].HeaderText = "Open. Stock";
                        gdvreport.Columns[4].HeaderText = "Clos. Stock";
                        gdvreport.Columns[5].HeaderText = "Price";
                        gdvreport.Columns[0].Width = 50;
                        gdvreport.Columns[1].Width = 75;
                        gdvreport.Columns[2].Width = 350;
                        gdvreport.Columns[3].Width = 100;
                        gdvreport.Columns[4].Width = 100;
                        gdvreport.Columns[5].Width = 100;
                        gdvreport.Columns[3].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;
                        gdvreport.Columns[4].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;
                        gdvreport.Columns[5].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;
                        gdvreport.Columns[3].DefaultCellStyle.Format = "N2";
                        gdvreport.Columns[4].DefaultCellStyle.Format = "N2";
                        gdvreport.Columns[5].DefaultCellStyle.Format = "N2";
                        gdvreport.FirstDisplayedScrollingRowIndex = gdvreport.Rows.Count - 2;
                        if (gdvreport.Rows.Count > 0)
                        {
                            generate_item_list();
                            //generate_general_report();
                        }
                    }
                }
                move_cursor_to_button_position("atbpreview");
            }
            else if (cbRepType.Text == "Old Outstanding Debitors")
            {
                temporary_list_1.Clear();
                temporary_list_2.Clear();
                temporary_list_3.Clear();
                //PleaseWait objPleaseWait = new PleaseWait("Please wait Collecting Data");
                //objPleaseWait.Show();
                //Application.DoEvents();
                //ConnectionWithAccess.ma_n = get_a_n_from_d_c("S", Convert.ToInt32(cbrep_ana_d_c.SelectedValue.ToString()));
                DataTable dtDataOutstanding = get_list_of_debitors_outstanding_accounts(ConnectionWithAccess.get_old_prd_name(ConnectionWithAccess.mprd));
                if (cb_outstanding_bills.Checked)
                {
                    for (array_counter1 = 0; array_counter1 < dtDataOutstanding.Rows.Count; array_counter1++)
                    //for (array_counter1 = 0; array_counter1 < 20; array_counter1++)
                    {
                        //var cellArray = temporary_list_1[array_counter1].Split(new[] { ',' });
                        ConnectionWithAccess.ms_a = dtDataOutstanding.Rows[array_counter1][2].ToString();
                        if (Convert.ToSingle(dtDataOutstanding.Rows[array_counter1][3].ToString()) > 0)
                        {
                            extract_outstanding_details_of_accounts(RepTo.Value.ToString());
                            if (array_counter1 == 31)
                                temp_word2 = "";
                        }
                    }
                    generate_outstanding_list_with_invoices(dtDataOutstanding);
                }
                else
                    generate_outstanding_list_only(dtDataOutstanding);
                atbpreview_Click(sender, e);
                move_cursor_to_button_position("atbcancel");
                //objPleaseWait.Close();
            }
            else if (cbRepType.Text == "Old Outstanding Creditors")
            {
                temporary_list_1.Clear();
                temporary_list_2.Clear();
                temporary_list_3.Clear();
                //PleaseWait objPleaseWait = new PleaseWait("Please wait Collecting Data");
                //objPleaseWait.Show();
                //Application.DoEvents();
                ConnectionWithAccess.ma_n = get_a_n_from_d_c("P", Convert.ToInt32(cbrep_ana_d_c.SelectedValue.ToString()));
                DataTable dtDataOutstanding = get_list_of_creditors_outstanding_accounts(ConnectionWithAccess.get_old_prd_name(ConnectionWithAccess.mprd));
                if (cb_outstanding_bills.Checked)
                {
                    for (array_counter1 = 0; array_counter1 < dtDataOutstanding.Rows.Count; array_counter1++)
                    //for (array_counter1 = 0; array_counter1 < 20; array_counter1++)
                    {
                        //var cellArray = temporary_list_1[array_counter1].Split(new[] { ',' });
                        ConnectionWithAccess.ms_a = dtDataOutstanding.Rows[array_counter1][2].ToString();
                        if (Convert.ToSingle(dtDataOutstanding.Rows[array_counter1][3].ToString()) > 0)
                        {
                            extract_outstanding_details_of_accounts(RepTo.Value.ToString());
                            if (array_counter1 == 31)
                                temp_word2 = "";
                        }
                    }
                    generate_outstanding_list_with_invoices(dtDataOutstanding);
                }
                else
                    generate_outstanding_list_only(dtDataOutstanding);
                atbpreview_Click(sender, e);
                move_cursor_to_button_position("atbcancel");
                //objPleaseWait.Close();
            }
            else if (cbRepType.Text == "Old Loans Taken")
            {
                ConnectionWithAccess.query = "select '', f51.a_n, f51.s_a, f1.[desc] as [Desc], f1.city, (f51.amt *-1) from " + ConnectionWithAccess.tablename[51] + " f51 inner join " + ConnectionWithAccess.tablename[1] + " f1 on f51.a_n = f1.a_n and f51.s_a = f1.s_a where f51.prd = '" + ConnectionWithAccess.moprd + "' and f51.a_n = '3555' and f51.amt <> 0 and d_d = #01-01-1901# and f1.s_a <> '@@@' order by f1.a_n,f1.s_a";
                ConnectionCommand.accountHelp_datatable_Seperate(gdvreport, "Loans Taken");
                excel_filename = "Loans Taken List as on " + ConnectionWithAccess.mprd + "_" + DateTime.Now.Day + "_" + DateTime.Now.Month + "_" + DateTime.Now.Year + "_" + DateTime.Now.TimeOfDay.Hours + "_" + DateTime.Now.TimeOfDay.Minutes;
                if (gdvreport.Rows.Count > 1)
                {
                    gdvreport.Columns[0].HeaderText = "Sort Date";
                    gdvreport.Columns[1].HeaderText = "A_n";
                    gdvreport.Columns[2].HeaderText = "S_a";
                    gdvreport.Columns[3].HeaderText = "Name ";
                    gdvreport.Columns[4].HeaderText = "City";
                    gdvreport.Columns[5].HeaderText = "Balance";
                    gdvreport.Columns[3].Width = 300;
                    gdvreport.Columns[4].Width = 200;
                    gdvreport.Columns[5].Width = 120;
                    gdvreport.Columns[5].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;
                    gdvreport.FirstDisplayedScrollingRowIndex = gdvreport.Rows.Count - 2;

                    gdvreport.Columns[0].Visible = false;
                    gdvreport.Columns[1].Visible = false;
                    gdvreport.Columns[2].Visible = false;
                    generate_Debitors_creditors_report();

                    atbpreview_Click(sender, e);
                    move_cursor_to_button_position("atbcancel");
                }
            }
            else if (cbRepType.Text == "Loans Given")
            {
                ConnectionWithAccess.query = "select '', f51.a_n, f51.s_a, f1.[desc] as [Desc], f1.city, f51.amt from " + ConnectionWithAccess.tablename[51] + " f51 inner join " + ConnectionWithAccess.tablename[1] + " f1 on f51.a_n = f1.a_n and f51.s_a = f1.s_a where f51.prd = '" + ConnectionWithAccess.mprd + "' and f51.a_n = '3500' and f51.amt <> 0 and d_d = #01-01-1901# and f1.s_a <> '@@@' order by f1.a_n,f1.s_a";
                ConnectionCommand.accountHelp_datatable_Seperate(gdvreport, "Loans Taken");
                excel_filename = "Loans Given List as on " + ConnectionWithAccess.mprd + "_" + DateTime.Now.Day + "_" + DateTime.Now.Month + "_" + DateTime.Now.Year + "_" + DateTime.Now.TimeOfDay.Hours + "_" + DateTime.Now.TimeOfDay.Minutes;
                if (gdvreport.Rows.Count > 1)
                {
                    gdvreport.Columns[0].HeaderText = "Sort Date";
                    gdvreport.Columns[1].HeaderText = "A_n";
                    gdvreport.Columns[2].HeaderText = "S_a";
                    gdvreport.Columns[3].HeaderText = "Name ";
                    gdvreport.Columns[4].HeaderText = "City";
                    gdvreport.Columns[5].HeaderText = "Balance";
                    gdvreport.Columns[3].Width = 300;
                    gdvreport.Columns[4].Width = 200;
                    gdvreport.Columns[5].Width = 120;
                    gdvreport.Columns[5].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;
                    gdvreport.FirstDisplayedScrollingRowIndex = gdvreport.Rows.Count - 2;

                    gdvreport.Columns[0].Visible = false;
                    gdvreport.Columns[1].Visible = false;
                    gdvreport.Columns[2].Visible = false;
                    generate_Debitors_creditors_report();

                    atbpreview_Click(sender, e);
                    move_cursor_to_button_position("atbcancel");
                }
            }
            else if (cbRepType.Text == "Job Work")
            {
                string str_tmp_a_n = "6700";
                if (cbRepSubType.Text == "Batch Dispatch Process")
                {


                    //ConnectionWithAccess.query = "select D_C, a_n,s_a, BAMT from " + ConnectionWithAccess.tablename[21] + " where a_n = '" + str_tmp_a_n + "'";
                    string strQuery = "select f16.item_code, f16.Title, f16.Btype, f16.Bitem_CD, f16.QTY, f3.Title, f3.D_N, f3.S_A, f3.D_C " +
                        " from (( " + ConnectionWithAccess.tablename[16] + " f16 left outer  join " + ConnectionWithAccess.tablename[03] + " f3 on f16.Bitem_CD = f3.Item_Code ) " +
                        " left outer join " + ConnectionWithAccess.tablename[21] + " f21 on f21.A_N = f3.A_N and f21.D_N = f3.D_N and f21.D_C = f3.D_C) " +
                        " where f16.item_code = '" + cmb_analysis_account_item_name.SelectedValue.ToString() + "'  and f3.A_N = '" + str_tmp_a_n + "' " +
                        " and f21.D_D between @FromDate and @ToDate ";
                    ConnectionWithAccess.query = strQuery;
                    parameters_for_date_range(RepFrom.Text, RepTo.Text);
                    DataTable dttmp = ConnectionCommand.fGetDataTable();
                    /*//strQuery += " UNION ";
                   //strQuery += "select f16.item_code, f16.Title, f16.Btype, f16.Bitem_CD, f16.QTY, f3.Title, f3.D_N, f3.S_A, f3.D_C " +
                   //    " from (( " + ConnectionWithAccess.tablename[16] + " f16 left outer  join " + ConnectionWithAccess.tablename[03] + " f3 on f16.Bitem_CD = f3.Item_Code ) " +
                   //    " left outer join " + ConnectionWithAccess.tablename[22] + " f22 on f22.TO_A_N  = f3.A_N and f22.D_N= f3.D_N and f22.D_C = f3.D_C) " +
                   //    " where f16.item_code = '" + cmb_analysis_account_item_name.SelectedValue.ToString() + "'  and f3.A_N = '" + str_tmp_a_n + "' " +
                   //    " and f2.D_D between @FromDate and @ToDate ";
                    

                   ConnectionWithAccess.query = strQuery;
                   parameters_for_date_range(RepFrom.Text, RepTo.Text);
                   ConnectionCommand.accountHelp_datatable_Seperate(gdvreport, "Job_Work_Dispatch");
                    */
                    DataTable dtOwnMaterial, dtDirectSentMaterial, dtReceivedMaterial, dtBatchListItems;
                    //Own Material Sent
                    ConnectionWithAccess.md_c = get_d_c_from_a_n("JS", "6700");
                    ConnectionWithAccess.query = "select f21.D_D, f21.D_N, f1.[desc] as [Desc], f1.city, f1.gst_number, f21.gamt,f21.d_c,f21.a_n,f21.s_a from " + ConnectionWithAccess.tablename[21] + " f21 inner join " + ConnectionWithAccess.tablename[1] + " f1 on f21.a_n = f1.a_n and f21.s_a = f1.s_a and f21.d_y = f1.d_y where f21.prd = '" + ConnectionWithAccess.mprd + "' and f21.d_d >= @From and f21.d_d <= @To and f21.d_c = " + ConnectionWithAccess.md_c;
                    parameters_for_date_range(RepFrom.Text, RepTo.Text);
                    dtOwnMaterial = ConnectionCommand.fGetDataTable();

                    //Direct Material Sent
                    ConnectionWithAccess.md_c = get_d_c_from_a_n("P", "4002");
                    ConnectionWithAccess.query = "select f22.D_D, f22.D_N, f1.[desc] as [Desc], f1.city, f1.gst_number, f22.gamt, f22.d_c,f22.a_n,f22.s_a from " + ConnectionWithAccess.tablename[1] + " f1, " + ConnectionWithAccess.tablename[22] + " f22 where f1.a_n = f22.a_n and f1.s_a = f22.s_a and f22.prd = '" + ConnectionWithAccess.mprd + "' and f22.d_d >= @From and f22.d_d <= @To and f22.d_c = " + ConnectionWithAccess.md_c + " and f22.to_a_n = '6700' order by f22.d_d,f22.d_n";
                    parameters_for_date_range(RepFrom.Text, RepTo.Text);
                    dtDirectSentMaterial = ConnectionCommand.fGetDataTable();

                    //Received
                    ConnectionWithAccess.md_c = get_d_c_from_a_n("JR", "6700");
                    ConnectionWithAccess.query = "select f22.D_D, f22.D_N, f1.[desc] as [Desc], f1.city, f1.gst_number, f22.gamt, f22.d_c,f22.a_n,f22.s_a from " + ConnectionWithAccess.tablename[1] + " f1, " + ConnectionWithAccess.tablename[22] + " f22 where f1.a_n = f22.a_n and f1.s_a = f22.s_a and f22.prd = '" + ConnectionWithAccess.mprd + "' and f22.d_d >= @From and f22.d_d <= @To and f22.d_c = " + ConnectionWithAccess.md_c + " order by f22.d_d,f22.d_n";
                    parameters_for_date_range(RepFrom.Text, RepTo.Text);
                    dtReceivedMaterial = ConnectionCommand.fGetDataTable();

                    //Batch List Items
                    ConnectionWithAccess.query = "select  b.[type], b.item_code,b.[title],a.qty,a.cat,a.price,a.amount, a.[user], a.insert_dt_tm from " +
                    ConnectionWithAccess.tablename[16] + " a inner join " + ConnectionWithAccess.tablename[05] +
                    " b on b.[Type] = a.BType and b.Item_Code = a.BITEM_CD " +
                    " where a.[type] = '" + ibl_type.Text + "' and a.item_code = '" + cmb_analysis_account_item_name.SelectedValue.ToString() + "' and a.qty > 0 order by b.[title]";
                    dtBatchListItems = ConnectionCommand.fGetDataTable();

                    double dQty = 0;
                    double.TryParse(tb_analysis_batch_qty.Text, out dQty);
                    DataColumn dcColReqQty = new DataColumn("ReqQty", typeof(double), dQty.ToString());
                    dtBatchListItems.Columns.Add(dcColReqQty);

                    DataColumn dcTotalQty = new DataColumn("TotalQty", typeof(double), "qty * ReqQty");
                    dtBatchListItems.Columns.Add(dcTotalQty);


                }
                else if (cbRepSubType.Text == "Own Material Sent")
                {
                    ConnectionWithAccess.md_c = get_d_c_from_a_n("JS", "6700");
                    ConnectionWithAccess.query = "select f21.D_D, f21.D_N, f1.[desc] as [Desc], f1.city, f1.gst_number, f21.gamt,f21.d_c,f21.a_n,f21.s_a from " + ConnectionWithAccess.tablename[21] + " f21 inner join " + ConnectionWithAccess.tablename[1] + " f1 on f21.a_n = f1.a_n and f21.s_a = f1.s_a and f21.d_y = f1.d_y where f21.prd = '" + ConnectionWithAccess.mprd + "' and f21.d_d >= @From and f21.d_d <= @To and f21.d_c = " + ConnectionWithAccess.md_c;

                    excel_filename = "Own Material Sent as on " + ConnectionWithAccess.mprd + "_" + DateTime.Now.Day + "_" + DateTime.Now.Month + "_" + DateTime.Now.Year + "_" + DateTime.Now.TimeOfDay.Hours + "_" + DateTime.Now.TimeOfDay.Minutes;

                    parameters_for_date_range(RepFrom.Text, RepTo.Text);
                    ConnectionCommand.accountHelp_datatable_Seperate(gdvreport, "SaleList", "d_d ASC");
                    fAdd_Sale_Report_Totals("d_d ASC");

                    ConnectionWithAccess.export(gdvreport, excel_filename);
                    sale_purchase_report_list_mini_old("S");
                    //sale_purchase_report_list_mini_auto_boxes();
                    move_cursor_to_button_position("atbpreview");
                }
                else if (cbRepSubType.Text == "Direct Material Sent")
                {
                    ConnectionWithAccess.md_c = get_d_c_from_a_n("P", "4002");
                    //ConnectionWithAccess.query = "select distinct f22.D_D, f22.D_N, f1.[desc] as [Desc], f1.city, f1.gst_number, f22.bamt, f22.tamt, f22.gamt from " + ConnectionWithAccess.tablename[1] + " f1, " + ConnectionWithAccess.tablename[6] + " f6, " + ConnectionWithAccess.tablename[4] + " f4, " + ConnectionWithAccess.tablename[22] + " f22 where f1.a_n = f22.a_n and f1.s_a = f22.s_a and f6.tx_code = f22.tx_code and f22.prd = '" + ConnectionWithAccess.mprd + "' and f22.d_d >= @From and f22.d_d <= @To and f4.a_n = f22.a_n and f4.s_a = f22.s_a order by f22.d_n";
                    //ConnectionWithAccess.query = "select f22.D_D, f22.D_N, f1.[desc] as [Desc], f1.city, f1.gst_number, f22.gamt, f22.d_c,f22.a_n,f22.s_a from " + ConnectionWithAccess.tablename[1] + " f1, " + ConnectionWithAccess.tablename[22] + " f22 where f1.a_n = f22.a_n and f1.s_a = f22.s_a and f22.prd = '" + ConnectionWithAccess.mprd + "' and f22.d_d >= @From and f22.d_d <= @To and f22.d_c = " + ConnectionWithAccess.md_c + " order by f22.d_d,f22.d_n";
                    ConnectionWithAccess.query = "select f22.D_D, f22.D_N, f1.[desc] as [Desc], f1.city, f1.gst_number, f22.gamt, f22.d_c,f22.a_n,f22.s_a from " + ConnectionWithAccess.tablename[1] + " f1, " + ConnectionWithAccess.tablename[22] + " f22 where f1.a_n = f22.a_n and f1.s_a = f22.s_a and f22.prd = '" + ConnectionWithAccess.mprd + "' and f22.d_d >= @From and f22.d_d <= @To and f22.d_c = " + ConnectionWithAccess.md_c + " and f22.to_a_n = '6700' order by f22.d_d,f22.d_n";

                    excel_filename = "Direct Material Sent as on " + ConnectionWithAccess.mprd + "_" + DateTime.Now.Day + "_" + DateTime.Now.Month + "_" + DateTime.Now.Year + "_" + DateTime.Now.TimeOfDay.Hours + "_" + DateTime.Now.TimeOfDay.Minutes;

                    parameters_for_date_range(RepFrom.Text, RepTo.Text);
                    ConnectionCommand.accountHelp_datatable_Seperate(gdvreport, "PurcList", "d_d ASC");
                    fAdd_Sale_Report_Totals("d_d ASC");

                    ConnectionWithAccess.export(gdvreport, excel_filename);
                    sale_purchase_report_list_mini_old("P");
                    //sale_purchase_report_list_mini_auto_boxes();
                    move_cursor_to_button_position("atbpreview");
                }
                else if (cbRepSubType.Text == "Material Received")
                {
                    ConnectionWithAccess.md_c = get_d_c_from_a_n("JR", "6700");
                    ConnectionWithAccess.query = "select f22.D_D, f22.D_N, f1.[desc] as [Desc], f1.city, f1.gst_number, f22.gamt, f22.d_c,f22.a_n,f22.s_a from " + ConnectionWithAccess.tablename[1] + " f1, " + ConnectionWithAccess.tablename[22] + " f22 where f1.a_n = f22.a_n and f1.s_a = f22.s_a and f22.prd = '" + ConnectionWithAccess.mprd + "' and f22.d_d >= @From and f22.d_d <= @To and f22.d_c = " + ConnectionWithAccess.md_c + " order by f22.d_d,f22.d_n";

                    excel_filename = "Material Received as on " + ConnectionWithAccess.mprd + "_" + DateTime.Now.Day + "_" + DateTime.Now.Month + "_" + DateTime.Now.Year + "_" + DateTime.Now.TimeOfDay.Hours + "_" + DateTime.Now.TimeOfDay.Minutes;

                    parameters_for_date_range(RepFrom.Text, RepTo.Text);
                    ConnectionCommand.accountHelp_datatable_Seperate(gdvreport, "PurcList", "d_d ASC");
                    fAdd_Sale_Report_Totals("d_d ASC");

                    ConnectionWithAccess.export(gdvreport, excel_filename);
                    sale_purchase_report_list_mini_old("P");
                    //sale_purchase_report_list_mini_auto_boxes();
                    move_cursor_to_button_position("atbpreview");
                }
                else if (cbRepSubType.Text == "Closing Stock")
                {
                    int strDirectSending_d_c = get_d_c_from_a_n("P", "4002");
                    int strOwnSending_d_c = get_d_c_from_a_n("JS", "6700");
                    int strReceived_d_c = get_d_c_from_a_n("JR", "6700");

                    string strQuery = "select f3.item_code, f3.[title], Sum(QTY) as SentQty FROM " +
                        "(select f3.item_code, f3.[title], f3.qty as QTY " +
                   " from (( " + ConnectionWithAccess.tablename[21] + " f21  " +
                   " inner join " + ConnectionWithAccess.tablename[1] + " f1 on f21.a_n = f1.a_n and f21.s_a = f1.s_a and f21.d_y = f1.d_y)  " +
                   " inner join " + ConnectionWithAccess.tablename[03] + " f3 on f3.prd = f21.prd and f3.d_c = f21.d_c and f3.d_n = f21.d_n) " +
                   " where f21.prd = '" + ConnectionWithAccess.mprd + "' and f21.d_d >= @From and f21.d_d <= @To and f21.d_c = " + strOwnSending_d_c.ToString() +
                   " and f3.amount > 0 " +
                   //" and f3.Title like '%Toride%' " +
                   " UNION ALL " +

                   " select f3.item_code, f3.Title, f3.qty as QTY " +
                   "  from ((" + ConnectionWithAccess.tablename[1] + " f1  " +
                    " INNER JOIN " + ConnectionWithAccess.tablename[22] + " f22 on f1.a_n = f22.a_n and f1.s_a = f22.s_a ) " +
                    " INNER JOIN " + ConnectionWithAccess.tablename[03] + " f3 on f3.prd = f22.prd and f3.d_n = f22.D_N and f3.D_C  = f22.d_c and f3.s_a = f22.s_a) " +
                    " where f22.prd = '" + ConnectionWithAccess.mprd + "' and f22.d_d >= @From and f22.d_d <= @To and f22.d_c = " + strDirectSending_d_c.ToString() +
                    " and f22.to_a_n = '6700'  " +
                    //" and f3.Title like '%Toride%'" +
                    " ) group by  item_code, [title] ";

                    ConnectionWithAccess.query = strQuery;
                    parameters_for_date_range(RepFrom.Text, RepTo.Text);
                    DataTable dtSent = ConnectionCommand.fGetDataTable();

                    ConnectionWithAccess.query = "select  BITEM_CD as item_code, Title, SUM(ReceivedQty) as RecQty FROM ( " +
                    " select f3.item_code, f3.qty, f16.BITEM_CD, F5.Title, (f3.Qty * f16.Qty) as ReceivedQty " +
                    " from ((((" + ConnectionWithAccess.tablename[1] + " f1 " +
                    " INNER JOIN " + ConnectionWithAccess.tablename[22] + " f22 on f1.a_n = f22.a_n and f1.s_a = f22.s_a ) " +
                    " INNER JOIN " + ConnectionWithAccess.tablename[03] + " f3 on f3.d_n = f22.d_n and f3.prd = f22.prd and f3.s_a = f22.s_a) " +
                    " INNER JOIN " + ConnectionWithAccess.tablename[16] + " f16 on f3.item_code = f16.Item_Code ) " +
                    " INNER JOIN " + ConnectionWithAccess.tablename[05] + " f5 on f5.Item_Code = f16.BITEM_CD ) " +
                    " where  f22.prd = '" + ConnectionWithAccess.mprd + "' and f22.d_d >= @From and f22.d_d <= @To  and f22.d_c = " + strReceived_d_c.ToString() +
                    " ) group by BITEM_CD, Title ";
                    //" and f16.item_code = '" + cmb_analysis_account_item_name.SelectedValue.ToString() + "') group by BITEM_CD, Title ";

                    parameters_for_date_range(RepFrom.Text, RepTo.Text);
                    DataTable dtReceived = ConnectionCommand.fGetDataTable();

                    DataTable dtFinalTable = new DataTable();
                    dtFinalTable.Columns.Add(new DataColumn("item_code"));
                    dtFinalTable.Columns.Add(new DataColumn("Title"));
                    dtFinalTable.Columns.Add(new DataColumn("SentQty", typeof(decimal)));
                    dtFinalTable.Columns.Add(new DataColumn("RecQty", typeof(decimal)));

                    foreach (DataRow drRow in dtSent.Rows)
                    {
                        DataRow drNewRow = dtFinalTable.NewRow();
                        drNewRow["item_code"] = drRow["item_code"];
                        drNewRow["Title"] = drRow["Title"];
                        drNewRow["SentQty"] = drRow["SentQty"];
                        drNewRow["RecQty"] = 0;
                        dtFinalTable.Rows.Add(drNewRow);
                    }

                    foreach (DataRow drRow in dtReceived.Rows)
                    {
                        DataRow dr1 = dtFinalTable.Select("item_code=" + drRow["item_code"].ToString()).FirstOrDefault();
                        if (dr1 != null)
                        {
                            dr1["RecQty"] = drRow["RecQty"];
                        }
                        else
                        {
                            DataRow drNewRow = dtFinalTable.NewRow();
                            drNewRow["item_code"] = drRow["item_code"];
                            drNewRow["Title"] = drRow["Title"];
                            drNewRow["RecQty"] = drRow["RecQty"];
                            drNewRow["SentQty"] = 0;
                            dtFinalTable.Rows.Add(drNewRow);
                        }
                    }
                    dtFinalTable.Columns.Add(new DataColumn("PendingQty", typeof(decimal), "SentQty - RecQty"));

                    dtFinalTable.DefaultView.Sort = "[Title] ASC ";

                    if (dtFinalTable != null)
                    {
                        gdvreport.DataSource = dtFinalTable;
                        gdvreport.AutoGenerateColumns = true;
                        gdvreport.Columns[0].HeaderText = "Type";
                        gdvreport.Columns[1].HeaderText = "Title";
                        gdvreport.Columns[2].HeaderText = "Sent Qty.";
                        gdvreport.Columns[3].HeaderText = "Received Qty.";
                        gdvreport.Columns[4].HeaderText = "Pending Qty.";
                        gdvreport.Columns[0].Width = 75;
                        gdvreport.Columns[1].Width = 400;
                        gdvreport.Columns[2].Width = 120;
                        gdvreport.Columns[3].Width = 120;
                        gdvreport.Columns[4].Width = 120;
                        gdvreport.Columns[2].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;
                        gdvreport.Columns[3].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;
                        gdvreport.Columns[4].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;
                        gdvreport.Columns[2].DefaultCellStyle.Format = "N2";
                        gdvreport.Columns[3].DefaultCellStyle.Format = "N2";
                        gdvreport.Columns[4].DefaultCellStyle.Format = "N2";
                        if (gdvreport.Rows.Count > 1)
                            gdvreport.FirstDisplayedScrollingRowIndex = gdvreport.Rows.Count - 2;
                        job_work_closing_stock_report_list_auto_boxes();
                        ConnectionWithAccess.export(gdvreport, excel_filename);
                    }
                }

            }
            else if (cbRepType.Text == "Sal-Pur-Ledger")
            {
                sal_pur_ledger_report();
            }
            btn_analysis_generate.Visible = true;
            objPleaseWait.Close();
        }

        public DataTable LINQResultToDataTable<T>(IEnumerable<T> Linqlist)
        {
            DataTable dt = new DataTable();


            PropertyInfo[] columns = null;

            if (Linqlist == null) return dt;

            foreach (T Record in Linqlist)
            {

                if (columns == null)
                {
                    columns = ((Type)Record.GetType()).GetProperties();
                    foreach (PropertyInfo GetProperty in columns)
                    {
                        Type colType = GetProperty.PropertyType;

                        if ((colType.IsGenericType) && (colType.GetGenericTypeDefinition()
                        == typeof(Nullable<>)))
                        {
                            colType = colType.GetGenericArguments()[0];
                        }

                        dt.Columns.Add(new DataColumn(GetProperty.Name, colType));
                    }
                }

                DataRow dr = dt.NewRow();

                foreach (PropertyInfo pinfo in columns)
                {
                    dr[pinfo.Name] = pinfo.GetValue(Record, null) == null ? DBNull.Value : pinfo.GetValue
                    (Record, null);
                }

                dt.Rows.Add(dr);
            }
            return dt;
        }
        private void btn_gst_generate_report_Click(object sender, EventArgs e)
        {
            PleaseWait objPleaseWait = new PleaseWait("Please wait Collecting Data");
            objPleaseWait.Show();
            Application.DoEvents();
            if (cb_rg_report_type.SelectedItem.Equals("SALE") || cb_rg_report_type.SelectedItem.Equals("PURCHASE"))
            {
                dgv_gst_report.Visible = true;
                if (cb_rg_report_type.SelectedItem.Equals("SALE"))
                    ConnectionWithAccess.query = "select distinct f21.D_D, f21.D_N, f1.[desc] as [Desc], f1.city, f1.gst_number, f21.bamt,f21.IGST_AMT, f21.gamt from " + ConnectionWithAccess.tablename[1] + " f1, " + ConnectionWithAccess.tablename[21] + " f21 where f1.a_n = f21.a_n and f1.s_a = f21.s_a and f21.prd = '" + ConnectionWithAccess.mprd + "' and f21.d_d >= @From and f21.d_d <= @To and f21.d_c = " + cb_rg_d_c.Text + " order by f21.d_n";
                else if (cb_rg_report_type.SelectedItem.Equals("Purchase"))
                    ConnectionWithAccess.query = "select distinct f22.D_D, f22.D_N, f1.[desc] as [Desc], f1.city, f1.gst_number, f22.bamt,f22.IGST_AMT, f22.gamt from " + ConnectionWithAccess.tablename[1] + " f1, " + ConnectionWithAccess.tablename[22] + " f22 where f1.a_n = f22.a_n and f1.s_a = f22.s_a and f22.prd = '" + ConnectionWithAccess.mprd + "' and f22.d_d >= @From and f22.d_d <= @To and f22.d_c = " + cb_rg_d_c.Text + " order by f22.d_n";
                parameters_for_date_range(dtp_rg_from_date.Text, dtp_rg_to_date.Text);
                ConnectionCommand.accountHelp_datatable_Seperate(dgv_gst_report, "Gst Sale List");
                excel_filename = "Sale List as on " + ConnectionWithAccess.mprd + "_" + DateTime.Now.Day + "_" + DateTime.Now.Month + "_" + DateTime.Now.Year + "_" + DateTime.Now.TimeOfDay.Hours + "_" + DateTime.Now.TimeOfDay.Minutes;
                if (dgv_gst_report.Rows.Count > 1)
                {
                    //f21.D_D, f21.D_N, f1.[desc] as [Desc], f1.city, f1.gst_number, f21.bamt, f21.tamt, f21.gamt
                    dgv_gst_report.Columns[0].HeaderText = "Date";
                    dgv_gst_report.Columns[1].HeaderText = "Doc. No";
                    dgv_gst_report.Columns[2].HeaderText = "Name";
                    dgv_gst_report.Columns[3].HeaderText = "City";
                    dgv_gst_report.Columns[4].HeaderText = "Gst Number";
                    dgv_gst_report.Columns[5].HeaderText = "Basic. Amt";
                    dgv_gst_report.Columns[6].HeaderText = "Tax Amt";
                    dgv_gst_report.Columns[7].HeaderText = "Gross Amt";

                    dgv_gst_report.Columns[0].Width = 75;
                    dgv_gst_report.Columns[1].Width = 75;
                    dgv_gst_report.Columns[2].Width = 240;
                    dgv_gst_report.Columns[3].Width = 150;
                    dgv_gst_report.Columns[4].Width = 120;
                    dgv_gst_report.Columns[5].Width = 80;
                    dgv_gst_report.Columns[6].Width = 70;
                    dgv_gst_report.Columns[7].Width = 90;
                    dgv_gst_report.Columns[0].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;
                    dgv_gst_report.Columns[1].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;
                    dgv_gst_report.Columns[5].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;
                    dgv_gst_report.Columns[6].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;
                    dgv_gst_report.Columns[7].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;
                    ////getTotal(dgv_gst_report, 5);
                    ////getTotal(dgv_gst_report, 6);
                    ////getTotal(dgv_gst_report, 7);
                    double bamt = 0, tamt = 0, gamt = 0;
                    for (row_pointer = 0; row_pointer < dgv_gst_report.Rows.Count; row_pointer++)
                    {
                        if (dgv_gst_report.Rows[row_pointer].Cells[5].Value != System.DBNull.Value)
                            bamt += Convert.ToInt32(dgv_gst_report.Rows[row_pointer].Cells[5].Value);
                        if (dgv_gst_report.Rows[row_pointer].Cells[6].Value != System.DBNull.Value)
                            tamt += Convert.ToInt32(dgv_gst_report.Rows[row_pointer].Cells[6].Value);
                        if (dgv_gst_report.Rows[row_pointer].Cells[7].Value != System.DBNull.Value)
                            gamt += Convert.ToInt32(dgv_gst_report.Rows[row_pointer].Cells[7].Value);
                    }

                    excel_filename = "Gst Sale List as on " + ConnectionWithAccess.mprd + "_" + DateTime.Now.Day + "_" + DateTime.Now.Month + "_" + DateTime.Now.Year + "_" + DateTime.Now.TimeOfDay.Hours + "_" + DateTime.Now.TimeOfDay.Minutes;
                }
                ConnectionWithAccess.export(gdvreport, excel_filename);
            }
            else if (cb_rg_report_type.SelectedItem.Equals("DIFFERENCE"))
            {
                generate_pdf_for_gst_difference();
                gst_report_pdf_viewer.LoadFile(report_filename);
                gst_report_pdf_viewer.Visible = true;
                move_cursor_to_button_position("atbsave");
            }
            else if (cb_rg_report_type.SelectedItem.Equals("GSTR1"))
            {
                //generate_GSTR1_excel_file();
                generate_gstr1_csv_file();
            }
            else if (cb_rg_report_type.SelectedItem.Equals("GSTR2"))
            {
                //generate_GSTR1_excel_file();
                generate_gstr2_jason_file();
            }
            else if (cb_rg_report_type.SelectedItem.Equals("Sales Register"))
            {
                generate_Sales_Register_csv_file();
            }
            objPleaseWait.Close();
        }

        private void Button7_Click(object sender, EventArgs e)
        {
        }

        private void btnexporttoexcel_Click(object sender, EventArgs e)
        {
            //if (chbcompanydetail.Checked == true)
            excel_filename = "as on " + DateTime.Now.Day + "_" + DateTime.Now.Month + "_" + DateTime.Now.Year + "_" + DateTime.Now.TimeOfDay.Hours + "_" + DateTime.Now.TimeOfDay.Minutes;
            ConnectionWithAccess.export(LedDGV, excel_filename);
        }

        private void brtranlist_Click(object sender, EventArgs e)
        {
            bramt.ReadOnly = false;
            brdatetime.Value = Convert.ToDateTime(brtranlist.SelectedCells[0].Value);
            brdocno.Text = Convert.ToString(brtranlist.SelectedCells[1].Value);
            brpartycode.Text = Convert.ToString(brtranlist.SelectedCells[2].Value);
            brpartyname.Text = Convert.ToString(brtranlist.SelectedCells[2].Value);
            brpartycity.Text = Convert.ToString(brtranlist.SelectedCells[3].Value);
            bramt.Text = Convert.ToString(brtranlist.SelectedCells[4].Value);
            old_bank_receipt_amount = Convert.ToDouble(brtranlist.SelectedCells[4].Value);
            brchkno.Text = Convert.ToString(brtranlist.SelectedCells[5].Value);
            if (brtranlist.SelectedCells[6].Value.ToString() != "" && brtranlist.SelectedCells[6].Value != null)
                brchkdate.Value = Convert.ToDateTime(brtranlist.SelectedCells[6].Value);
            cbchqbank.Text = Convert.ToString(brtranlist.SelectedCells[7].Value);
            brpassdate.Text = Convert.ToString(brtranlist.SelectedCells[8].Value);
            brcomm.Text = Convert.ToString(brtranlist.SelectedCells[9].Value);
            bra_n.Text = Convert.ToString(brtranlist.SelectedCells[10].Value);
            brs_a.Text = Convert.ToString(brtranlist.SelectedCells[11].Value);
            brpartyoverallbalance.Text = Convert.ToString(get_account_balance(bra_n.Text, brs_a.Text, Convert.ToString(brdatetime.Text)));
            //b_t = 2 for balance, b_t = 3 for passed, b_t = 4 for failed.
            if (Convert.ToString(brtranlist.SelectedCells[12].Value) == "2")
                brchkstatus.SelectedIndex = 0;
            else if (Convert.ToString(brtranlist.SelectedCells[12].Value) == "3")
            {
                brchkstatus.SelectedIndex = 1;
                old_bank_receipt_amount = Convert.ToDouble(bramt.Text);
            }
            else if (Convert.ToString(brtranlist.SelectedCells[12].Value) == "4")
                brchkstatus.SelectedIndex = 2;
            populate_screen();

            //get_account_balance(bra_n.Text, brs_a.Text, Convert.ToString(brdatetime.Text));

            bramt.Focus();
            move_cursor_to_button_position("atbnew");
        }

        private void bdtranlist_Click(object sender, EventArgs e)
        {
            bddatetime.Value = Convert.ToDateTime(bdtranlist.SelectedCells[0].Value);
            bddocno.Text = Convert.ToString(bdtranlist.SelectedCells[1].Value);
            ConnectionWithAccess.md_n = Convert.ToString(bdtranlist.SelectedCells[1].Value);
            bdamt.Text = Convert.ToString(bdtranlist.SelectedCells[2].Value);
            old_bank_deposit_amount = Convert.ToDouble(bdtranlist.SelectedCells[2].Value);
            bdcomm.Text = Convert.ToString(bdtranlist.SelectedCells[3].Value);
            bdamt.Focus();
            move_cursor_to_button_position("atbnew");
        }

        private void bwtranlist_Click(object sender, EventArgs e)
        {
            bwdatetime.Value = Convert.ToDateTime(bwtranlist.SelectedCells[0].Value);
            bwdocno.Text = Convert.ToString(bwtranlist.SelectedCells[1].Value);
            bwamt.Text = Convert.ToString(Convert.ToDouble((bwtranlist.SelectedCells[2].Value).ToString()) * -1);
            old_bank_withdrawal_amount = Convert.ToDouble((bwtranlist.SelectedCells[2].Value).ToString()) * -1;
            bwcomm.Text = Convert.ToString(bwtranlist.SelectedCells[3].Value);
            bwamt.Focus();
            move_cursor_to_button_position("atbnew");
        }

        private void bptranlist_Click(object sender, EventArgs e)
        {
            bpdatetime.Value = Convert.ToDateTime(bptranlist.SelectedCells[0].Value);
            bpdocno.Text = "";
            if (bpdocno.Text == Convert.ToString(bptranlist.SelectedCells[1].Value))
                bpdocno_TextChanged(sender, e);
            else
                bpdocno.Text = Convert.ToString(bptranlist.SelectedCells[1].Value);
        }

        #region user_settings_checkbox_click

        private void chbPrivDataEntAllV_Click(object sender, EventArgs e)
        {
            if (chbPrivDataEntAllV.Checked == true)
            {
                chbPrivSaleV.Checked = true;
                chbPrivPurchaseV.Checked = true;
                chbPrivBankV.Checked = true;
                chbPrivCashV.Checked = true;
                chbPrivJournalV.Checked = true;
                chbPrivDataEntAllE.Checked = false;
                chbPrivSaleE.Checked = false;
                chbPrivPurchaseE.Checked = false;
                chbPrivBankE.Checked = false;
                chbPrivCashE.Checked = false;
                chbPrivJournalE.Checked = false;
            }
            else
            {
                chbPrivSaleV.Checked = false;
                chbPrivPurchaseV.Checked = false;
                chbPrivBankV.Checked = false;
                chbPrivCashV.Checked = false;
                chbPrivJournalV.Checked = false;
            }
        }

        private void chbPrivMastersAllV_Click(object sender, EventArgs e)
        {
            if (chbPrivMastersAllV.Checked == true)
            {
                chbPrivAccountV.Checked = true;
                chbPrivItemV.Checked = true;
                chbPrivTaxV.Checked = true;
                chbPrivDbcV.Checked = true;
                chbPrivPeriodV.Checked = true;
                chbPrivMastersAllE.Checked = false;
                chbPrivAccountE.Checked = false;
                chbPrivItemE.Checked = false;
                chbPrivTaxE.Checked = false;
                chbPrivDbcE.Checked = false;
                chbPrivPeriodE.Checked = false;
            }
            else
            {
                chbPrivAccountV.Checked = false;
                chbPrivItemV.Checked = false;
                chbPrivTaxV.Checked = false;
                chbPrivDbcV.Checked = false;
                chbPrivPeriodV.Checked = false;
            }
        }

        private void chbPrivOthersAllV_Click(object sender, EventArgs e)
        {
            if (chbPrivOthersAllV.Checked == true)
            {
                chbPrivUSetngV.Checked = true;
                chbPrivGSetngV.Checked = true;
                chbPrivCompInV.Checked = true;
                chbPrivReportsV.Checked = true;
                chbPrivUtilitiesV.Checked = true;
                chbPrivUSetngE.Checked = false;
                chbPrivGSetngE.Checked = false;
                chbPrivCompInE.Checked = false;
                chbPrivReportsE.Checked = false;
                chbPrivUtilitiesE.Checked = false;
                chbPrivOthersAllE.Checked = false;
            }
            else
            {
                chbPrivUSetngV.Checked = false;
                chbPrivGSetngV.Checked = false;
                chbPrivCompInV.Checked = false;
                chbPrivReportsV.Checked = false;
                chbPrivUtilitiesV.Checked = false;
            }
        }

        private void chbPrivMastersAllE_Click(object sender, EventArgs e)
        {
            if (chbPrivMastersAllE.Checked == true)
            {
                chbPrivAccountE.Checked = true;
                chbPrivItemE.Checked = true;
                chbPrivTaxE.Checked = true;
                chbPrivDbcE.Checked = true;
                chbPrivPeriodE.Checked = true;
                chbPrivMastersAllV.Checked = false;
                chbPrivAccountV.Checked = false;
                chbPrivItemV.Checked = false;
                chbPrivTaxV.Checked = false;
                chbPrivDbcV.Checked = false;
                chbPrivPeriodV.Checked = false;
            }
            else
            {
                chbPrivAccountV.Checked = false;
                chbPrivAccountE.Checked = false;
                chbPrivItemE.Checked = false;
                chbPrivTaxE.Checked = false;
                chbPrivDbcE.Checked = false;
                chbPrivPeriodE.Checked = false;
            }
        }

        private void chbPrivAccountV_Click(object sender, EventArgs e)
        {
            if (chbPrivAccountV.Checked == true)
            {
                chbPrivMastersAllE.Checked = false;
                chbPrivAccountE.Checked = false;
            }
            else
                chbPrivMastersAllV.Checked = false;
        }

        private void chbPrivItemV_Click(object sender, EventArgs e)
        {
            if (chbPrivItemV.Checked == true)
            {
                chbPrivMastersAllE.Checked = false;
                chbPrivItemE.Checked = false;
            }
            else
                chbPrivMastersAllV.Checked = false;
        }

        private void chbPrivTaxV_Click(object sender, EventArgs e)
        {
            if (chbPrivTaxV.Checked == true)
            {
                chbPrivMastersAllE.Checked = false;
                chbPrivTaxE.Checked = false;
            }
            else
                chbPrivMastersAllV.Checked = false;
        }

        private void chbPrivDbcV_Click(object sender, EventArgs e)
        {
            if (chbPrivDbcV.Checked == true)
            {
                chbPrivMastersAllE.Checked = false;
                chbPrivDbcE.Checked = false;
            }
            else
                chbPrivMastersAllV.Checked = false;
        }

        private void chbPrivPeriodV_Click(object sender, EventArgs e)
        {
            if (chbPrivPeriodV.Checked == true)
            {
                chbPrivMastersAllE.Checked = false;
                chbPrivPeriodE.Checked = false;
            }
            else
                chbPrivMastersAllV.Checked = false;
        }

        private void chbPrivAccountE_Click(object sender, EventArgs e)
        {
            if (chbPrivAccountE.Checked == true)
            {
                chbPrivMastersAllV.Checked = false;
                chbPrivAccountV.Checked = false;
            }
            else
                chbPrivMastersAllE.Checked = false;
        }

        private void chbPrivItemE_Click(object sender, EventArgs e)
        {
            if (chbPrivItemE.Checked == true)
            {
                chbPrivMastersAllV.Checked = false;
                chbPrivItemV.Checked = false;
            }
            else
                chbPrivMastersAllE.Checked = false;
        }

        private void chbPrivTaxE_Click(object sender, EventArgs e)
        {
            if (chbPrivTaxE.Checked == true)
            {
                chbPrivMastersAllV.Checked = false;
                chbPrivTaxV.Checked = false;
            }
            else
                chbPrivMastersAllE.Checked = false;
        }

        private void chbPrivDbcE_Click(object sender, EventArgs e)
        {
            if (chbPrivDbcE.Checked == true)
            {
                chbPrivMastersAllV.Checked = false;
                chbPrivDbcV.Checked = false;
            }
            else
                chbPrivMastersAllE.Checked = false;
        }

        private void chbPrivPeriodE_Click(object sender, EventArgs e)
        {
            if (chbPrivPeriodE.Checked == true)
            {
                chbPrivMastersAllV.Checked = false;
                chbPrivPeriodV.Checked = false;
            }
            else
                chbPrivMastersAllE.Checked = false;
        }

        private void chbPrivDataEntAllE_Click(object sender, EventArgs e)
        {
            if (chbPrivDataEntAllE.Checked == true)
            {
                chbPrivDataEntAllV.Checked = false;
                chbPrivSaleV.Checked = false;
                chbPrivPurchaseV.Checked = false;
                chbPrivBankV.Checked = false;
                chbPrivCashV.Checked = false;
                chbPrivJournalV.Checked = false;
                chbPrivSaleE.Checked = true;
                chbPrivPurchaseE.Checked = true;
                chbPrivBankE.Checked = true;
                chbPrivCashE.Checked = true;
                chbPrivJournalE.Checked = true;
            }
            else
            {
                chbPrivSaleE.Checked = false;
                chbPrivPurchaseE.Checked = false;
                chbPrivBankE.Checked = false;
                chbPrivCashE.Checked = false;
                chbPrivJournalE.Checked = false;
            }
        }

        private void chbPrivSaleV_Click(object sender, EventArgs e)
        {
            if (chbPrivSaleV.Checked == true)
            {
                chbPrivDataEntAllE.Checked = false;
                chbPrivSaleE.Checked = false;
            }
            else
                chbPrivDataEntAllV.Checked = false;
        }

        private void chbPrivPurchaseE_Click(object sender, EventArgs e)
        {
            if (chbPrivPurchaseE.Checked == true)
            {
                chbPrivDataEntAllV.Checked = false;
                chbPrivPurchaseV.Checked = false;
            }
            else
                chbPrivDataEntAllE.Checked = false;
        }

        private void chbPrivBankE_Click(object sender, EventArgs e)
        {
            if (chbPrivBankE.Checked == true)
            {
                chbPrivDataEntAllV.Checked = false;
                chbPrivBankV.Checked = false;
            }
            else
                chbPrivDataEntAllE.Checked = false;
        }

        private void chbPrivCashE_Click(object sender, EventArgs e)
        {
            if (chbPrivCashE.Checked == true)
            {
                chbPrivDataEntAllV.Checked = false;
                chbPrivCashV.Checked = false;
            }
            else
                chbPrivDataEntAllE.Checked = false;
        }

        private void chbPrivJournalE_Click(object sender, EventArgs e)
        {
            if (chbPrivJournalE.Checked == true)
            {
                chbPrivDataEntAllV.Checked = false;
                chbPrivJournalV.Checked = false;
            }
            else
                chbPrivDataEntAllE.Checked = false;
        }

        private void chbPrivPurchaseV_Click(object sender, EventArgs e)
        {
            if (chbPrivPurchaseV.Checked == true)
            {
                chbPrivDataEntAllE.Checked = false;
                chbPrivPurchaseE.Checked = false;
            }
            else
                chbPrivDataEntAllV.Checked = false;
        }

        private void chbPrivBankV_Click(object sender, EventArgs e)
        {
            if (chbPrivBankV.Checked == true)
            {
                chbPrivDataEntAllE.Checked = false;
                chbPrivBankE.Checked = false;
            }
            else
                chbPrivDataEntAllV.Checked = false;
        }

        private void chbPrivCashV_Click(object sender, EventArgs e)
        {
            if (chbPrivCashV.Checked == true)
            {
                chbPrivDataEntAllE.Checked = false;
                chbPrivCashE.Checked = false;
            }
            else
                chbPrivDataEntAllV.Checked = false;
        }

        private void chbPrivJournalV_Click(object sender, EventArgs e)
        {
            if (chbPrivJournalV.Checked == true)
            {
                chbPrivDataEntAllE.Checked = false;
                chbPrivJournalE.Checked = false;
            }
            else
                chbPrivDataEntAllV.Checked = false;
        }

        private void chbPrivSaleE_Click(object sender, EventArgs e)
        {
            if (chbPrivSaleE.Checked == true)
            {
                chbPrivDataEntAllV.Checked = false;
                chbPrivSaleV.Checked = false;
            }
            else
                chbPrivDataEntAllE.Checked = false;
        }

        private void chbPrivOthersAllE_Click(object sender, EventArgs e)
        {
            if (chbPrivOthersAllE.Checked == true)
            {
                chbPrivUSetngE.Checked = true;
                chbPrivGSetngE.Checked = true;
                chbPrivCompInE.Checked = true;
                chbPrivReportsE.Checked = true;
                chbPrivUtilitiesE.Checked = true;
                chbPrivOthersAllV.Checked = false;
                chbPrivUSetngV.Checked = false;
                chbPrivGSetngV.Checked = false;
                chbPrivCompInV.Checked = false;
                chbPrivReportsV.Checked = false;
                chbPrivUtilitiesV.Checked = false;
            }
            else
            {
                chbPrivUSetngE.Checked = false;
                chbPrivGSetngE.Checked = false;
                chbPrivCompInE.Checked = false;
                chbPrivReportsE.Checked = false;
                chbPrivUtilitiesE.Checked = false;
            }
        }

        private void chbPrivUSetngV_Click(object sender, EventArgs e)
        {
            if (chbPrivUSetngV.Checked == true)
            {
                chbPrivOthersAllE.Checked = false;
                chbPrivUSetngE.Checked = false;
            }
            else
                chbPrivOthersAllV.Checked = false;
        }

        private void chbPrivUSetngE_Click(object sender, EventArgs e)
        {
            if (chbPrivUSetngE.Checked == true)
            {
                chbPrivOthersAllV.Checked = false;
                chbPrivUSetngV.Checked = false;
            }
            else
                chbPrivOthersAllE.Checked = false;
        }

        private void chbPrivGSetngE_Click(object sender, EventArgs e)
        {
            if (chbPrivGSetngE.Checked == true)
            {
                chbPrivOthersAllV.Checked = false;
                chbPrivGSetngV.Checked = false;
            }
            else
                chbPrivOthersAllE.Checked = false;
        }

        private void chbPrivCompInE_Click(object sender, EventArgs e)
        {
            if (chbPrivCompInE.Checked == true)
            {
                chbPrivOthersAllV.Checked = false;
                chbPrivCompInV.Checked = false;
            }
            else
                chbPrivOthersAllE.Checked = false;
        }

        private void chbPrivReportsE_Click(object sender, EventArgs e)
        {
            if (chbPrivReportsE.Checked == true)
            {
                chbPrivOthersAllV.Checked = false;
                chbPrivReportsV.Checked = false;
            }
            else
                chbPrivOthersAllE.Checked = false;
        }

        private void chbPrivUtilitiesE_Click(object sender, EventArgs e)
        {
            if (chbPrivUtilitiesE.Checked == true)
            {
                chbPrivOthersAllV.Checked = false;
                chbPrivUtilitiesV.Checked = false;
            }
            else
                chbPrivOthersAllE.Checked = false;
        }

        private void chbPrivGSetngV_Click(object sender, EventArgs e)
        {

            if (chbPrivGSetngV.Checked == true)
            {
                chbPrivOthersAllE.Checked = false;
                chbPrivGSetngE.Checked = false;
            }
            else
                chbPrivOthersAllV.Checked = false;
        }

        private void chbPrivCompInV_Click(object sender, EventArgs e)
        {
            if (chbPrivCompInV.Checked == true)
            {
                chbPrivOthersAllE.Checked = false;
                chbPrivCompInE.Checked = false;
            }
            else
                chbPrivOthersAllV.Checked = false;
        }

        private void chbPrivReportsV_Click(object sender, EventArgs e)
        {
            if (chbPrivReportsV.Checked == true)
            {
                chbPrivOthersAllE.Checked = false;
                chbPrivReportsE.Checked = false;
            }
            else
                chbPrivOthersAllV.Checked = false;
        }

        private void chbPrivUtilitiesV_Click(object sender, EventArgs e)
        {
            if (chbPrivUtilitiesV.Checked == true)
            {
                chbPrivOthersAllE.Checked = false;
                chbPrivUtilitiesE.Checked = false;
            }
            else
                chbPrivOthersAllV.Checked = false;
        }

        #endregion

        private void rdbvisiting_Click(object sender, EventArgs e)
        {
            show_images();
        }

        private void rdbpersonal_Click(object sender, EventArgs e)
        {
            show_images();
        }

        bool bsiPartyChangeIgnore = false;

        private void si_party_help_Click(object sender, EventArgs e)
        {
            PleaseWait objPleaseWait = new PleaseWait("Please wait Collecting Data");
            objPleaseWait.Show();
            Application.DoEvents();
            try
            {
                if (maintab.SelectedIndex == 1 && subtabDataEntry.SelectedIndex == 0 && subtabsale.SelectedIndex == 0)
                {
                    rowIndex = si_party_help.CurrentCell.RowIndex;
                    if (sideliverycode.Text == "")
                    {
                        bsiPartyChangeIgnore = true;
                        sipartycode.Text = Convert.ToString(si_party_help.Rows[rowIndex].Cells[0].Value);
                        sicity.Text = Convert.ToString(si_party_help.Rows[rowIndex].Cells[1].Value);
                        sia_n.Text = Convert.ToString(si_party_help.Rows[rowIndex].Cells[2].Value);
                        sis_a.Text = Convert.ToString(si_party_help.Rows[rowIndex].Cells[3].Value);
                        sid_y.Text = "@@@";
                        get_account_details_from_04(sia_n.Text, sis_a.Text);
                        fill_transport(sia_n.Text, sicity.Text, sitransport);
                        sitransport.Text = account_detail_from_04[30];
                        check_if_have_delivery_account(sia_n.Text, sis_a.Text);
                    }
                    else
                    {
                        sideliverycode.Text = Convert.ToString(si_party_help.Rows[rowIndex].Cells[0].Value);
                        sideliverycity.Text = Convert.ToString(si_party_help.Rows[rowIndex].Cells[1].Value);
                        sid_y.Text = Convert.ToString(si_party_help.Rows[rowIndex].Cells[4].Value);
                    }
                    siitemlist.Enabled = true;
                    siitemlist.Visible = true;
                }
                populate_screen();
                get_tax_desc_from_dc("S", sidbc.SelectedValue.ToString(), Convert.ToInt32(sitaxcode.Text));
                show_images();
                si_party_help.Visible = false;
            }
            catch (Exception ex)
            {

            }
            finally
            {
                bsiPartyChangeIgnore = false;
            }
            objPleaseWait.Close();
            siitemlist.Enabled = true;
            siitemlist.Visible = true;
            move_cursor_to_button_position("si_party_help_Click");
        }

        private void subtabreports_Click(object sender, EventArgs e)
        {
            current_tab_control_position();

            pdf_viewer2.Visible = false;
            pdf_viewer3.Visible = false;
            move_cursor_to_button_position("btn_analysis_generate");
            pdf_viewer_report_outstanding.Visible = false;
            if (subtabreports.SelectedIndex == 0)
            {
                if (report_filename != null)
                    pdf_viewer1.Visible = true;
                if (RepFrom.MaxDate < Convert.ToDateTime(ConnectionWithAccess.msdate))
                    RepFrom.MaxDate = Convert.ToDateTime(ConnectionWithAccess.msdate);
                if (RepTo.MaxDate < Convert.ToDateTime(ConnectionWithAccess.medate))
                    RepTo.MaxDate = Convert.ToDateTime(ConnectionWithAccess.medate);
                RepFrom.MinDate = Convert.ToDateTime(ConnectionWithAccess.msdate);
                RepFrom.Value = Convert.ToDateTime(ConnectionWithAccess.msdate);
                RepTo.MinDate = Convert.ToDateTime(ConnectionWithAccess.msdate);
                if (Convert.ToDateTime(ConnectionWithAccess.medate) >= DateTime.Today)
                    RepTo.Value = DateTime.Today;
                else
                    RepTo.Value = Convert.ToDateTime(ConnectionWithAccess.medate);
                gdvreport.Visible = true;
                fPopulatecmbDateRange(cmbDateRangeANALYSIS);
                if (cbRepType.SelectedIndex == -1 && cbRepType.Items.Count > 0)
                    cbRepType.SelectedIndex = 0;
                if (cbRepSubType.SelectedIndex == -1 && cbRepSubType.Items.Count > 0)
                    cbRepSubType.SelectedIndex = 0;
                if (cbRepType.SelectedIndex == 7 || cbRepType.SelectedIndex == 9)
                {
                    RepFrom.MinDate = Convert.ToDateTime(ConnectionWithAccess.com_start_date);
                    RepFrom.Value = Convert.ToDateTime(ConnectionWithAccess.com_start_date);
                    RepTo.MinDate = Convert.ToDateTime(ConnectionWithAccess.com_start_date);
                }
            }
            else if (subtabreports.SelectedIndex == 1)
            {
                //fPopulatecmbDateRange(cmbDateRangeLedger);
                //ConnectionWithAccess.data_entry_working = "Ledger";
                tb_ledger_account_name.Focus();
            }
            else if (subtabreports.SelectedIndex == 2)
            {
                trading_report_generate.Visible = true;
                move_cursor_to_button_position("trading_report_generate");
            }
            else if (subtabreports.SelectedIndex == 3)
            {
                fPopulatecmbDateRange(cmbDateRangeGST);
                move_cursor_to_button_position("btn_gst_generate_report");
            }
            else if (subtabreports.SelectedIndex == 6)
            {
                fPopulatecmbDateRange(cmbDateRangeMIX);
            }
            else if (subtabreports.SelectedIndex == 7)
            {
                fPopulatecmbDateRange(cmbDateRangeOut);
                rodbc.Visible = true;
                ConnectionWithAccess.query = "select distinct d_c from " + ConnectionWithAccess.tablename[21] + " where d_n = 999999";
                ConnectionCommand.retrieval(rodbc);
            }
        }

        private void trading_report_generate_Click(object sender, EventArgs e)
        {
            PleaseWait objPleaseWait = new PleaseWait("Please wait Collecting Data");
            objPleaseWait.Show();
            Application.DoEvents();
            BalShDGV.Visible = true;
            //BalShDGV.Rows.Clear();
            BalShDGV.DataSource = null;
            if (cbBalShAc.Text == "Trial Balance Report")
            {
                add_contains_of_trial_balance_in_gridview();
                excel_filename = "Trial Balance_" + cbBalShPer.Text;
                generate_trial_balance();
            }
            else if (cbBalShAc.Text == "Trading Account")
            {
                add_contains_of_trading_account_in_gridview();
                //add_difference_record_in_trading_pl_balance_sheet();
                //get_two_totals(BalShDGV, 5, 8);
                //ConnectionCommand.hide_columns_of_datagridview(BalShDGV, "0,1");
                excel_filename = "Trading Account_" + cbBalShPer.Text;
                generate_trading_account();
            }
            else if (cbBalShAc.Text == "Profit and Loss Account")
            {
                add_contains_of_profit_and_loss_in_gridview();
                //add_difference_record_in_trading_pl_balance_sheet();
                //get_two_totals(BalShDGV, 5, 8);
                //ConnectionCommand.hide_columns_of_datagridview(BalShDGV, "0,1");
                excel_filename = "Profit and Loss Account_" + cbBalShPer.Text;
                generate_profit_and_loss_account();
            }
            else if (cbBalShAc.Text == "Capital Account")
            {
                add_contains_of_capital_account_in_gridview(cbBalShPer.Text);
                //add_difference_record_in_trading_pl_balance_sheet();
                //get_two_totals(BalShDGV, 5, 8);
                //ConnectionCommand.hide_columns_of_datagridview(BalShDGV, "0,1,2");
                excel_filename = "Capital Account_" + cbBalShPer.Text;
                generate_capital_account();
            }
            else if (cbBalShAc.Text == "Balance Sheet")
            {
                add_contains_of_balance_sheet_in_gridview(cbBalShPer.Text);
                //ConnectionCommand.hide_columns_of_datagridview(BalShDGV, "0,1,2");
                //this.BalShDGV.RowTemplate.DefaultCellStyle.Font = new System.Drawing.Font("cour", 12F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
                excel_filename = "Balance Sheet_" + cbBalShPer.Text;
                generate_balance_sheet_account();
            }
            else if (cbBalShAc.Text == "Tr_Pl_Ca_Blst")
            {
                if (ckbx_all_periods.Checked)
                {
                    generate_all_period_tr_pl_ca_blst();
                }
                else
                {
                    //generate_full_balance_sheet_report(cbBalShPer.Text);
                    generate_full_balance_sheet_report_PDFTable(cbBalShPer.Text);
                    //generate_full_balance_sheet_report_auto_boxes(cbBalShPer.Text);
                    //tr_pl_ca_blst_auto_boxes(cbBalShPer.Text);
                    atbpreview_Click(sender, e);
                    move_cursor_to_button_position("atbcancel");
                }
                ////fTradingAllReports(cbBalShPer.Text);
                //add_contains_of_trading_account_in_gridviewold();
                //add_contains_of_profit_and_loss_in_gridviewold(true);
                //add_contains_of_capital_account_in_gridviewold(cbBalShPer.Text, true);
                //add_contains_of_balance_sheet_in_gridviewold(ConnectionWithAccess.mprd, true);
                ////add_contains_of_debitors_outstanding_in_gridview(true);
                ////add_contains_of_creditors_outstanding_in_gridview(true);
                ////add_contains_of_debitors_advances_in_gridview(true);
                ////add_contains_of_creditors_deposits_in_gridview(true);
                //excel_filename = "All Reports_" + cbBalShPer.Text;
                //generate_tr_pl_capital_balance_sheet_together();
            }
            else if (cbBalShAc.Text == "Debitors Outstanding")
            {
                add_contains_of_debitors_outstanding_in_gridview();
                excel_filename = "Debitors Outstanding List_" + cbBalShPer.Text;
            }
            else if (cbBalShAc.Text == "Creditors Balance")
            {
                add_contains_of_creditors_outstanding_in_gridview();
                excel_filename = "Creditors Outstanding List_" + cbBalShPer.Text;
            }
            else if (cbBalShAc.Text == "Debitors Advances")
            {
                add_contains_of_debitors_advances_in_gridview();
                excel_filename = "Debitors Advances List_" + cbBalShPer.Text;
            }
            else if (cbBalShAc.Text == "Creditors Deposits")
            {
                add_contains_of_creditors_deposits_in_gridview();
                excel_filename = "Creditors Deposits List_" + cbBalShPer.Text;
            }
            else if (cbBalShAc.Text == "Balance sheet Summary")
            {
                generate_balance_sheet_summary();
            }
            ConnectionCommand.delete_empty_gridview_rows(BalShDGV);
            ConnectionCommand.invisible_empty_gridview_column(BalShDGV);
            if (BalShDGV.Rows.Count > 3)
                BalShDGV.FirstDisplayedScrollingRowIndex = BalShDGV.Rows.Count - 2;
            ConnectionWithAccess.export(BalShDGV, excel_filename);
            objPleaseWait.Close();
        }

        private void pb_rep_ana_printer_Click(object sender, EventArgs e)
        {
            //PrintDocument document = new PrintDocument();
            //document.PrinterSettings.PrintFileName = FileName;
            //document.Print();
        }

        private void atbexport_Click(object sender, EventArgs e)
        {
            function_working = "export";
            export.email_subject = null;
            if (maintab.SelectedIndex == 1 && subtabDataEntry.SelectedIndex == 0 && subtabsale.SelectedIndex == 0)
            {
                print_sale_invoice();
                pdf_invoice.BringToFront();
                pdf_invoice.Visible = true;
                pdf_filename = msalepdf;
                export.email_subject = "Sale Invoice";
            }
            else if (maintab.SelectedIndex == 3 && subtabreports.SelectedIndex == 1)
            {
                if (account_detail_from_04.Count() > 24)
                {
                    pdf_filename = ledger_filename;
                    export.email_subject = "Ledger Report";
                    export.email_id = account_detail_from_04[24];
                }
                else
                    MessageBox.Show("There is no Valid Email Id for Process....");
            }
            else if (maintab.SelectedIndex == 3 && subtabreports.SelectedIndex == 2 && cbBalShAc.Text == "Trial Balance Report")
                pdf_filename = trading_filename;
            else if (maintab.SelectedIndex == 3 && subtabreports.SelectedIndex == 2 && cbBalShAc.Text == "Trading Account")
                pdf_filename = trading_filename;
            else if (maintab.SelectedIndex == 3 && subtabreports.SelectedIndex == 2 && cbBalShAc.Text == "Profit and Loss Account")
                pdf_filename = trading_filename;
            else if (maintab.SelectedIndex == 3 && subtabreports.SelectedIndex == 2 && cbBalShAc.Text == "Capital Account")
                pdf_filename = trading_filename;
            else if (maintab.SelectedIndex == 3 && subtabreports.SelectedIndex == 2 && cbBalShAc.Text == "Balance Sheet")
                pdf_filename = trading_filename;
            else if (maintab.SelectedIndex == 3 && subtabreports.SelectedIndex == 2 && cbBalShAc.Text == "Tr_Pl_Ca_Blst")
                pdf_filename = trading_filename;
            else if (maintab.SelectedIndex == 3 && subtabreports.SelectedIndex == 2 && cbBalShAc.Text == "GP/NP Calculation")
                pdf_filename = trading_filename;
            else if (maintab.SelectedIndex == 3 && subtabreports.SelectedIndex == 2 && cbBalShAc.Text == "Balance sheet Summary")
                pdf_filename = trading_filename;
            if (pdf_filename != null && pdf_filename != "")
            {
                export exportscreen = new export();
                exportscreen.Show();
                Application.DoEvents();
                //pdf_filename = null;
                if (maintab.SelectedIndex == 1 && subtabDataEntry.SelectedIndex == 0 && subtabsale.SelectedIndex == 0)
                    pdf_filename = msalepdf;
                else if (maintab.SelectedIndex == 3 && subtabreports.SelectedIndex == 1)
                    pdf_filename = ledger_filename;
                else if (maintab.SelectedIndex == 3 && subtabreports.SelectedIndex == 2 && cbBalShAc.Text == "Trial Balance Report")
                    pdf_filename = trading_filename;
                else if (maintab.SelectedIndex == 3 && subtabreports.SelectedIndex == 2 && cbBalShAc.Text == "Trading Account")
                    pdf_filename = trading_filename;
                else if (maintab.SelectedIndex == 3 && subtabreports.SelectedIndex == 2 && cbBalShAc.Text == "Profit and Loss Account")
                    pdf_filename = trading_filename;
                else if (maintab.SelectedIndex == 3 && subtabreports.SelectedIndex == 2 && cbBalShAc.Text == "Capital Account")
                    pdf_filename = trading_filename;
                else if (maintab.SelectedIndex == 3 && subtabreports.SelectedIndex == 2 && cbBalShAc.Text == "Balance Sheet")
                    pdf_filename = trading_filename;
                else if (maintab.SelectedIndex == 3 && subtabreports.SelectedIndex == 2 && cbBalShAc.Text == "Tr_Pl_Ca_Blst")
                    pdf_filename = trading_filename;
                else if (maintab.SelectedIndex == 3 && subtabreports.SelectedIndex == 2 && cbBalShAc.Text == "GP/NP Calculation")
                    pdf_filename = trading_filename;
                else if (maintab.SelectedIndex == 3 && subtabreports.SelectedIndex == 2 && cbBalShAc.Text == "Balance sheet Summary")
                    pdf_filename = trading_filename;
            }
            else
                MessageBox.Show("No Report Selected for Display");
            pdf_filename = ConnectionWithAccess.remove_filename_error(pdf_filename);
        }

        private void atbpreview_Click(object sender, EventArgs e)
        {
            //          PrintController = New StandardPrintController

            //printDocument1.PrintController = new System.Drawing.Printing.StandardPrintController();
            //function_working = "Preview";
            PleaseWait objPleaseWait = new PleaseWait("Please wait Creating Pdf for Preview");
            objPleaseWait.Show();
            Application.DoEvents();
            //atbpreview.Enabled = false;
            if (maintab.SelectedIndex == 1 && subtabDataEntry.SelectedIndex == 0 && subtabsale.SelectedIndex == 0)
            {
                check_data_type(sigrossamt.Text);
                if (data_type == "Numeric")
                {
                    if (Convert.ToDouble(sigrossamt.Text) > 0)
                    {
                        print_sale_invoice();
                    }
                    if (msalepdf != null)
                    {
                        Clipboard.SetText(msalepdf);
                        report_filename = msalepdf;
                    }
                }
            }
            else if (maintab.SelectedIndex == 1 && subtabDataEntry.SelectedIndex == 5) // generate bank excel report
            {
                generate_bank_excel_report();
                report_filename = pdf_filename;
            }
            else if (maintab.SelectedIndex == 2 && subtabMasters.SelectedIndex == 8) // generate item batch list
            {
                item_batch_list_auto_boxes();
                report_filename = pdf_filename;
            }
            else if (maintab.SelectedIndex == 3 && subtabreports.SelectedIndex == 0)
                report_filename = pdf_filename;
            else if (maintab.SelectedIndex == 3 && subtabreports.SelectedIndex == 1)
                report_filename = ledger_filename;
            else if (maintab.SelectedIndex == 3 && subtabreports.SelectedIndex == 2 && cbBalShAc.Text == "Trial Balance Report")
                report_filename = trading_filename;
            else if (maintab.SelectedIndex == 3 && subtabreports.SelectedIndex == 2 && cbBalShAc.Text == "Trading Account")
                report_filename = trading_filename;
            else if (maintab.SelectedIndex == 3 && subtabreports.SelectedIndex == 2 && cbBalShAc.Text == "Profit and Loss Account")
                report_filename = trading_filename;
            else if (maintab.SelectedIndex == 3 && subtabreports.SelectedIndex == 2 && cbBalShAc.Text == "Capital Account")
                report_filename = trading_filename;
            else if (maintab.SelectedIndex == 3 && subtabreports.SelectedIndex == 2 && cbBalShAc.Text == "Balance Sheet")
                report_filename = trading_filename;
            else if (maintab.SelectedIndex == 3 && subtabreports.SelectedIndex == 2 && cbBalShAc.Text == "Tr_Pl_Ca_Blst")
                report_filename = trading_filename;
            else if (maintab.SelectedIndex == 3 && subtabreports.SelectedIndex == 2 && cbBalShAc.Text == "GP/NP Calculation")
                report_filename = trading_filename;
            else if (maintab.SelectedIndex == 3 && subtabreports.SelectedIndex == 2 && cbBalShAc.Text == "Balance sheet Summary")
                report_filename = trading_filename;
            else if (maintab.SelectedIndex == 3 && subtabreports.SelectedIndex == 6)
                report_filename = pdf_filename;
            else if (maintab.SelectedIndex == 3 && subtabreports.SelectedIndex == 7)
                report_filename = pdf_filename;
            else if (maintab.SelectedIndex == 4 && subtabsettings.SelectedIndex == 2)
            {
                generate_company_details_pdf();
                report_filename = pdf_filename;
            }
            if (report_filename != null && File.Exists(report_filename))
            {
                if (maintab.SelectedIndex == 1 && subtabDataEntry.SelectedIndex == 0 && subtabsale.SelectedIndex == 0)
                {
                    //print_sale_invoice();
                }
                else if (maintab.SelectedIndex == 1 && subtabDataEntry.SelectedIndex == 5)
                {
                    pdf_viewer_additional.Location = new System.Drawing.Point(0, 0);
                    pdf_viewer_additional.Size = new System.Drawing.Size(1300, 500);
                    pdf_viewer_additional.Visible = true;
                    pdf_viewer_additional.BringToFront();
                    pdf_viewer_additional.LoadFile(report_filename);
                }
                else if (maintab.SelectedIndex == 3 && subtabreports.SelectedIndex == 0)
                {
                    pdf_viewer1.Visible = true;
                    pdf_viewer2.Visible = false;
                    pdf_viewer3.Visible = false;
                    pdf_viewer1.BringToFront();
                    pdf_viewer1.LoadFile(report_filename);
                }
                else if (maintab.SelectedIndex == 3 && subtabreports.SelectedIndex == 1)
                {
                    btn_gen_ledg.Visible = false;
                    pdf_viewer1.Visible = false;
                    pdf_viewer2.Visible = true;
                    pdf_viewer3.Visible = false;
                    pdf_viewer2.BringToFront();
                    pdf_viewer2.LoadFile(report_filename);
                }
                else if (maintab.SelectedIndex == 3 && subtabreports.SelectedIndex == 2)
                {
                    trading_report_generate.Visible = false;
                    pdf_viewer1.Visible = false;
                    pdf_viewer2.Visible = false;
                    pdf_viewer3.Visible = true;
                    pdf_viewer3.BringToFront();
                    pdf_viewer3.LoadFile(report_filename);
                }
                else if (maintab.SelectedIndex == 3 && subtabreports.SelectedIndex == 6)
                {
                    trading_report_generate.Visible = false;
                    pdf_viewer1.Visible = false;
                    pdf_viewer2.Visible = false;
                    pdf_viewer3.Visible = false;
                    mix_reports_PDF.Visible = true;
                    mix_reports_PDF.BringToFront();
                    mix_reports_PDF.LoadFile(report_filename);
                }
                else if (maintab.SelectedIndex == 3 && subtabreports.SelectedIndex == 7)
                {
                    pdf_viewer_report_outstanding.Visible = true;
                    pdf_viewer_report_outstanding.BringToFront();
                    pdf_viewer_report_outstanding.LoadFile(report_filename);
                }
                else if (maintab.SelectedIndex == 4 && subtabsettings.SelectedIndex == 2)
                {
                    pdf_viewer_company_details.Location = new System.Drawing.Point(0, 0);
                    pdf_viewer_company_details.Size = new System.Drawing.Size(1300, 500);
                    pdf_viewer_company_details.Visible = true;
                    pdf_viewer_company_details.BringToFront();
                    pdf_viewer_company_details.LoadFile(report_filename);
                }
                else if (maintab.SelectedIndex == 2 && subtabMasters.SelectedIndex == 8)
                {
                    pdf_master_item_batch_list.Location = new System.Drawing.Point(0, 0);
                    pdf_master_item_batch_list.Size = new System.Drawing.Size(1300, 500);
                    pdf_master_item_batch_list.Visible = true;
                    pdf_master_item_batch_list.BringToFront();
                    pdf_master_item_batch_list.LoadFile(report_filename);
                }

                else
                    MessageBox.Show("No Report Selected for Display");
            }
            else
                MessageBox.Show("No Report Selected for Display");
            move_cursor_to_button_position("print_pdf");
            objPleaseWait.Close();
        }

        private void atbcancel_Click(object sender, EventArgs e)
        {
            atbpreview.Enabled = true;
            pdf_common.Visible = false;
            if (maintab.SelectedIndex == 1 && subtabDataEntry.SelectedIndex == 0 && subtabsale.SelectedIndex == 0)
            {
                msalepdf = null;
                move_cursor_to_button_position("sisalelistdg");
            }
            else if (maintab.SelectedIndex == 1 && subtabDataEntry.SelectedIndex == 2 && subtabbank.SelectedIndex == 1)
            {
                move_cursor_to_button_position("btn_cheque_print");
            }
            else if (maintab.SelectedIndex == 1 && subtabDataEntry.SelectedIndex == 5)
            {

                if (tc_dataentry_additional.SelectedIndex == 2 && pdf_viewer_additional.Visible == false && dgvBankExcelUpload.Visible == true)
                {
                    vDeletebank_entry(); //Delete Extra Bank Entry according to Excel Upload
                }
                else
                    pdf_viewer_additional.Visible = false;

                //if (tc_dataentry_additional.SelectedIndex == 2 &&  dgvBankExcelUpload.Visible == true)
                //{
                //    vDeletebank_entry(); //Delete Extra Bank Entry according to Excel Upload
                //}
            }
            else if (maintab.SelectedIndex == 2 && subtabMasters.SelectedIndex == 8)
            {
                pdf_filename = null;
                //pdf_master_item_batch_list.Visible = false;
                //move_cursor_to_button_position("btn_analysis_generate");
            }
            else if (maintab.SelectedIndex == 3 && subtabreports.SelectedIndex == 0)
            {
                pdf_filename = null;
                pdf_viewer1.Visible = false;
                dgv_tax_report.Visible = false;
                //cbRepSubType.Items.Clear();
                //cbRepFormat.Items.Clear();
                //cbRepFormat.Visible = true;
                move_cursor_to_button_position("btn_analysis_generate");
            }
            else if (maintab.SelectedIndex == 3 && subtabreports.SelectedIndex == 1)
            {
                ledger_filename = null;
                LedDGV.Visible = false;
                move_cursor_to_button_position("btn_gen_ledg");
            }
            else if (maintab.SelectedIndex == 3 && subtabreports.SelectedIndex == 2)
            {
                pdf_viewer3.Visible = false;
                trading_filename = null;
                move_cursor_to_button_position("trading_report_generate");
            }
            else if (maintab.SelectedIndex == 3 && subtabreports.SelectedIndex == 6)
            {
                //mix_reports_PDF.Visible = false;
                trading_filename = null;
                move_cursor_to_button_position("atbpreview");
            }
            report_filename = null;
            pdf_filename = null;
            pdf_viewer2.Visible = false;
            pdf_viewer3.Visible = false;
            pdf_viewer_report_outstanding.Visible = false;
            pdf_invoice.Visible = false;
            btn_gen_ledg.Visible = true;
            trading_report_generate.Visible = true;
            btn_gen_ledg.Visible = true;
            btnGenerateOutstandingReport.Visible = true;
            cb_all_sale_item_list.Visible = true;
            cb_all_sale_invoice_list.Visible = true;
            cb_all_sale_invoice_ledger.Visible = true;
            if (maintab.SelectedIndex == 2 && subtabMasters.SelectedIndex == 0)
                vDeleteAccount(); //Delete Account
            else if (maintab.SelectedIndex == 2 && subtabMasters.SelectedIndex == 1)
                vDeleteItem(); //Delete Item
            //else if (maintab.SelectedIndex == 2 && subtabMasters.SelectedIndex == 3)
            //    vDeletedaybook(); //Delete Item
            else if (maintab.SelectedIndex == 3 && subtabreports.SelectedIndex == 3)
                gst_report_pdf_viewer.Visible = false;
            else if (maintab.SelectedIndex == 4 && subtabsettings.SelectedIndex == 0)
            {
                if (tbUserName.Text.ToLower() != "admin")
                {
                    ConnectionWithAccess.query = "Delete from " + ConnectionWithAccess.tablename[52] + " where [f1] = '" + tbUserName.Text.Trim() + "' ";
                    ConnectionCommand.fUpdateInsertDeleteData();
                    refresh_UserListDG();
                }
            }
            else if (maintab.SelectedIndex == 4 && subtabsettings.SelectedIndex == 2)
                pdf_viewer_company_details.Visible = false;
            else if (maintab.SelectedIndex == 5)
                utilities_pdfviewer.Visible = false;
        }

        private void btn_gen_ledg_Click(object sender, EventArgs e)
        {
            PleaseWait objPleaseWait = new PleaseWait("Please wait Collecting Data");
            objPleaseWait.Show();
            Application.DoEvents();
            if (function_working != "Item Ledger")
            {
                LedDGV.Visible = true;
                contains_for_ledger_account_union(rla_n.Text, rls_a.Text, (LedTo.Value).ToString());
                if (LedDGV.Columns.Count > 1)
                {
                    if (LedDGV.Rows.Count > 0)
                    {
                        if (cmbDateRangeLedger.Text != "Full Period")
                        {
                            if (Convert.ToDateTime(Ledfrom.Text) > Convert.ToDateTime(ConnectionWithAccess.com_start_date))
                            {
                                LedDGV.Visible = false;
                                delete_old_date_record(LedDGV, 3, Ledfrom.Text, rla_n.Text);
                            }
                        }
                        DataTable dtNewTable = ((DataTable)LedDGV.DataSource).Clone();

                        dtNewTable = ((DataTable)LedDGV.DataSource);

                        //DataTable selected = view.ToTable(false, "amt");

                        if (dtNewTable.Rows.Count != 0 && dtNewTable != null)
                        {
                            DataView view = new DataView(dtNewTable);
                            view.Sort = "[Date],documents asc";
                            DataTable dtNewTable1 = view.ToTable();
                            for (int i = dtNewTable1.Rows.Count - 1; i >= 0; i--)
                            {
                                DataRow dr = dtNewTable1.Rows[i];
                                if (dr["debit"].ToString() == "0" && dr["credit"].ToString() == "0" && dr["balance"].ToString() == "0")
                                    dr.Delete();
                            }

                            DataTable sortedTable = update_datatable_balances(dtNewTable1, 6, 7, 8);
                            if (cb_ledger_from_last_zero.Checked)
                            {
                                mfound = "N";
                                temp_count = 0;
                                row_pointer = 0;
                                for (int i = sortedTable.Rows.Count - 2; i >= 0; i--)
                                {
                                    if (Convert.ToSingle(sortedTable.Rows[i]["balance"].ToString()) == 0)
                                    {
                                        mfound = "Y";
                                        temp_count++;
                                        row_pointer = i;
                                        break;
                                    }
                                }
                                if (mfound == "Y")
                                    sortedTable = sortedTable.AsEnumerable().Skip(row_pointer + 1).CopyToDataTable<DataRow>();
                            }
                            string strTotalCol1 = getTotal_Datatable(sortedTable, 6);
                            string strTotalCol2 = getTotal_Datatable(sortedTable, 7);

                            if (!string.IsNullOrEmpty(strTotalCol1) && !string.IsNullOrEmpty(strTotalCol2))
                            {
                                DataRow drTotalRow = sortedTable.NewRow();
                                drTotalRow[6] = strTotalCol1;
                                drTotalRow[7] = strTotalCol2;
                                sortedTable.Rows.Add(drTotalRow);
                            }

                            if (sortedTable.Rows[0]["date"].ToString().Substring(0, 10) == "01/01/1901")
                                sortedTable.Rows[0]["date"] = Ledfrom.Text;
                            LedDGV.DataSource = null;


                            LedDGV.DataSource = sortedTable;// dtNewTable.DefaultView;
                            ConnectionCommand.hide_columns_of_datagridview(LedDGV, "0,1,2");
                            LedDGV.FirstDisplayedScrollingRowIndex = LedDGV.Rows.Count - 2;
                            LedDGV.Visible = true;
                            excel_filename = "Ledger of_" + tb_ledger_account_name.Text.Trim() + "_" + rla_n.Text + "_" + rls_a.Text + "_as on_" + ConnectionWithAccess.mprd;
                            ledger_filename = excel_filename;
                            ConnectionWithAccess.export(LedDGV, excel_filename);
                            if (cb_add_purchase_items_in_ledger.Checked || cb_add_sale_items_in_ledger.Checked)
                                generate_ledger_report();
                            else
                                generate_ledger_report();
                            //generate_ledger_report_auto_boxes();
                        }
                    }
                }
                tb_ledger_account_name.Focus();
            }
            else
            {
                LedDGV.Visible = true;
                contains_for_ledger_item_union(ledger_type.Text, ledger_item_code.Text, (LedTo.Value).ToString());
                if (LedDGV.Columns.Count > 1)
                {
                    if (LedDGV.Rows.Count > 0)
                    {
                        if (cmbDateRangeLedger.Text != "Full Period")
                        {
                            if (Convert.ToDateTime(Ledfrom.Text) > Convert.ToDateTime(ConnectionWithAccess.com_start_date))
                                delete_old_date_record(LedDGV, 3, Ledfrom.Text, "");
                        }
                        DataTable dtNewTable = ((DataTable)LedDGV.DataSource).Clone();

                        dtNewTable = ((DataTable)LedDGV.DataSource);

                        //DataTable selected = view.ToTable(false, "amt");

                        if (dtNewTable != null)
                        {
                            DataView view = new DataView(dtNewTable);
                            view.Sort = "[Date] asc";
                            DataTable dtNewTable1 = view.ToTable();

                            //DataTable dtNewTable1 = ((DataTable)LedDGV.DataSource).Clone();

                            DataTable sortedTable = update_datatable_balances(dtNewTable1, 6, 7, 8);

                            string strTotalCol1 = getTotal_Datatable(sortedTable, 6);
                            string strTotalCol2 = getTotal_Datatable(sortedTable, 7);

                            if (!string.IsNullOrEmpty(strTotalCol1) && !string.IsNullOrEmpty(strTotalCol2))
                            {
                                DataRow drTotalRow = sortedTable.NewRow();
                                drTotalRow[6] = strTotalCol1;
                                drTotalRow[7] = strTotalCol2;
                                sortedTable.Rows.Add(drTotalRow);
                            }

                            LedDGV.DataSource = null;
                            LedDGV.DataSource = sortedTable;// dtNewTable.DefaultView;
                        }
                        ConnectionCommand.hide_columns_of_datagridview(LedDGV, "0,1,2");
                        LedDGV.FirstDisplayedScrollingRowIndex = LedDGV.Rows.Count - 2;
                        excel_filename = "Ledger of_" + tb_ledger_account_name.Text.Trim() + "_" + rla_n.Text + "_" + rls_a.Text + "_as on_" + ConnectionWithAccess.mprd;
                        ledger_filename = excel_filename;
                        ConnectionWithAccess.export(LedDGV, excel_filename);
                        //generate_ledger_report();
                    }
                }
            }
            move_cursor_to_button_position("atbpreview");
            objPleaseWait.Close();
            //subForm_Report objsub = new subForm_Report();
            //objsub.pdfFileToLoad = ledger_filename;
            //objsub.Show();

        }

        private void crtranlist_Click(object sender, EventArgs e)
        {
            cramt.ReadOnly = false;
            crdocno.Text = "";
            crdatetime.Value = Convert.ToDateTime(crtranlist.SelectedCells[0].Value);
            crdocno.Text = Convert.ToString(crtranlist.SelectedCells[1].Value);
            populate_screen();
            cramt.Focus();
            move_cursor_to_button_position("atbnew");
        }

        private void subtabcash_Click(object sender, EventArgs e)
        {
            getdaybookcode();
        }

        private void pipurchaselist_Click(object sender, EventArgs e)
        {
            PleaseWait objPleaseWait = new PleaseWait("Please wait Collecting Data");
            objPleaseWait.Show();
            Application.DoEvents();
            pi_party_help.Visible = false;
            pidbc.Enabled = false;
            pidocno.Text = "";   // first reset docno is compulsory
            pdf_invoice.Visible = false;
            PopulatepurchaseDetails();
            pipartybalance.Text = Convert.ToString(get_account_balance(pia_n.Text, pis_a.Text, Convert.ToString(pidatetime.Text)));
            pipartycode.Enabled = false;
            picity.Enabled = false;
            objPleaseWait.Close();
        }

        private void picPartyList_Click(object sender, EventArgs e)
        {
            multiple_choice = "Party";
            chkpartyList.Visible = true;
            chkpartyList.Size = new System.Drawing.Size(342, 334);
            btnPartyListSelectAll.Visible = true;
            btncloseselection.Visible = true;
            fill_report_party_combobox(raa_n.Text);
        }

        private void btnPartyListSelectAll_Click(object sender, EventArgs e)
        {
            for (int i = 0; i < chkpartyList.Items.Count - 1; i++)
            {
                if (btnPartyListSelectAll.Text == "Select All")
                    chkpartyList.SetItemCheckState(i, CheckState.Checked);
                else
                    chkpartyList.SetItemCheckState(i, CheckState.Unchecked);
            }
            if (btnPartyListSelectAll.Text == "Select All")
                btnPartyListSelectAll.Text = "UnSelect All";
            else
                btnPartyListSelectAll.Text = "Select All";
            tbselacc.Text = "0 Selected";
            selectedpartyname = null;
            gdvreport.Visible = false;
            dgv_tax_report.Visible = false;
        }

        private void btnclosePartyList_Click(object sender, EventArgs e)
        {
            chkpartyList.Visible = false;
            chkcityList.Visible = false;
            chktaxlist.Visible = false;
            btnPartyListSelectAll.Visible = false;
            btncloseselection.Visible = false;
            selectedpartyname = "";
            temp_int = 0;
            if (multiple_choice == "Party")
            {
                for (row_pointer = 0; row_pointer < chkpartyList.Items.Count - 1; row_pointer++)
                {
                    if (chkpartyList.GetItemCheckState(row_pointer) == CheckState.Checked)
                    {
                        selectedpartyname = selectedpartyname + "'" + chkpartyList.Items[row_pointer].ToString() + "',";
                        temp_int++;
                    }
                }
                if (temp_int > 0)
                    selectedpartyname = selectedpartyname.Substring(0, selectedpartyname.Length - 1);
                tbselacc.Text = Convert.ToString(temp_int) + " Selected";
            }
            else if (multiple_choice == "City")
            {
                for (row_pointer = 0; row_pointer < chkcityList.Items.Count - 1; row_pointer++)
                {
                    if (chkcityList.GetItemCheckState(row_pointer) == CheckState.Checked)
                    {
                        selectedcitylist = selectedcitylist + "'" + chkcityList.Items[row_pointer].ToString() + "',";
                        temp_int++;
                    }
                }
                if (temp_int > 0)
                    selectedcitylist = selectedcitylist.Substring(0, selectedcitylist.Length - 1);
                tbreportcity.Text = Convert.ToString(temp_int) + " Selected";
            }
            else if (multiple_choice == "Tax")
            {
                for (row_pointer = 0; row_pointer < chktaxlist.Items.Count - 1; row_pointer++)
                {
                    if (chktaxlist.GetItemCheckState(row_pointer) == CheckState.Checked)
                    {
                        temp_word = chktaxlist.Items[row_pointer].ToString().Substring(0, (chktaxlist.Items[row_pointer].ToString().IndexOf("-")) - 1);
                        selectedtaxlist = selectedtaxlist + "'" + temp_word + "',";
                        temp_int++;
                    }
                }
                if (temp_int > 0)
                    selectedtaxlist = selectedtaxlist.Substring(0, selectedtaxlist.Length - 1);
                tbreporttax.Text = Convert.ToString(temp_int) + " Selected";
            }
            gdvreport.Visible = false;
            dgv_tax_report.Visible = false;
        }

        private void PictureBox43_Click(object sender, EventArgs e)
        {
            report_keys_enable();
            if (multiple_choice == "Party")
            {
                for (row_pointer = 0; row_pointer < chkpartyList.Items.Count - 1; row_pointer++)
                {
                    if (chkpartyList.GetItemCheckState(row_pointer) == CheckState.Checked)
                        chkpartyList.SetItemCheckState(row_pointer, CheckState.Unchecked);
                }
                tbselacc.Text = "0 Selected";
                btnPartyListSelectAll.Text = "Select All";
            }
            else if (multiple_choice == "City")
            {
                for (row_pointer = 0; row_pointer < chkcityList.Items.Count - 1; row_pointer++)
                {
                    if (chkcityList.GetItemCheckState(row_pointer) == CheckState.Checked)
                        chkcityList.SetItemCheckState(row_pointer, CheckState.Unchecked);
                }
                tbreportcity.Text = "0 Selected";
                btnPartyListSelectAll.Text = "Select All";
            }
            else if (multiple_choice == "Tax")
            {
                for (row_pointer = 0; row_pointer < chktaxlist.Items.Count - 1; row_pointer++)
                {
                    if (chktaxlist.GetItemCheckState(row_pointer) == CheckState.Checked)
                        chktaxlist.SetItemCheckState(row_pointer, CheckState.Unchecked);
                }
                tbreporttax.Text = "0 Selected";
                btnPartyListSelectAll.Text = "Select All";
            }
            gdvreport.Visible = false;
            dgv_tax_report.Visible = false;
        }

        private void picpartycity_Click(object sender, EventArgs e)
        {
            multiple_choice = "City";
            chkcityList.Visible = true;
            chkcityList.Size = new System.Drawing.Size(342, 304);
            btnPartyListSelectAll.Visible = true;
            btncloseselection.Visible = true;
            fill_report_city_combobox(raa_n.Text);
        }

        private void btncityListSelectAll_Click(object sender, EventArgs e)
        {
            for (int i = 0; i < chkcityList.Items.Count - 1; i++)
            {
                chkcityList.SetItemCheckState(i, CheckState.Unchecked);
            }
            tbreportcity.Text = "0 Selected";
            selectedcitylist = null;
            gdvreport.Visible = false;
            dgv_tax_report.Visible = false;
        }

        private void pictaxList_Click(object sender, EventArgs e)
        {
            multiple_choice = "Tax";
            chktaxlist.Visible = true;
            chktaxlist.Size = new System.Drawing.Size(342, 294);
            btnPartyListSelectAll.Visible = true;
            btncloseselection.Visible = true;
            fill_report_tax_combobox(cbrep_ana_d_c.SelectedValue.ToString());
        }

        private void btntaxListSelectAll_Click(object sender, EventArgs e)
        {
            for (int i = 0; i < chktaxlist.Items.Count - 1; i++)
            {
                chktaxlist.SetItemCheckState(i, CheckState.Unchecked);
            }
            tbreporttax.Text = "0 Selected";
            selectedtaxlist = null;
            gdvreport.Visible = false;
            dgv_tax_report.Visible = false;
        }

        private void btncloseselection_Click(object sender, EventArgs e)
        {
            chkpartyList.Visible = false;
            chkcityList.Visible = false;
            chktaxlist.Visible = false;
            btnPartyListSelectAll.Visible = false;
            btncloseselection.Visible = false;
            selectedpartyname = "";
            temp_int = 0;
            if (multiple_choice == "Party")
            {
                selectedpartyname = null;
                selectedpartycity = null;
                for (row_pointer = 0; row_pointer < chkpartyList.Items.Count; row_pointer++)
                {
                    if (chkpartyList.GetItemCheckState(row_pointer) == CheckState.Checked)
                    {
                        var cellArray = chkpartyList.Items[row_pointer].ToString().Trim().Split(new[] { ',' });
                        selectedpartyname = selectedpartyname + "'" + cellArray[0] + "',";
                        selectedpartycity = selectedpartycity + "'" + cellArray[1] + "',";
                        temp_int++;
                    }
                }
                if (temp_int > 0)
                {
                    selectedpartyname = selectedpartyname.Substring(0, selectedpartyname.Length - 1);
                    selectedpartycity = selectedpartycity.Substring(0, selectedpartycity.Length - 1);
                }
                tbselacc.Text = Convert.ToString(temp_int) + " Selected";
            }
            else if (multiple_choice == "City")
            {
                selectedcitylist = null;
                for (row_pointer = 0; row_pointer < chkcityList.Items.Count; row_pointer++)
                {
                    if (chkcityList.GetItemCheckState(row_pointer) == CheckState.Checked)
                    {
                        selectedcitylist = selectedcitylist + "'" + chkcityList.Items[row_pointer].ToString() + "',";
                        temp_int++;
                    }
                }
                if (temp_int > 0)
                    selectedcitylist = selectedcitylist.Substring(0, selectedcitylist.Length - 1);
                tbreportcity.Text = Convert.ToString(temp_int) + " Selected";
            }
            else if (multiple_choice == "Tax")
            {
                selectedtaxlist = null;
                for (row_pointer = 0; row_pointer < chktaxlist.Items.Count; row_pointer++)
                {
                    if (chktaxlist.GetItemCheckState(row_pointer) == CheckState.Checked)
                    {
                        temp_word = chktaxlist.Items[row_pointer].ToString().Substring(0, (chktaxlist.Items[row_pointer].ToString().IndexOf("-")) - 1);
                        selectedtaxlist = selectedtaxlist + "'" + temp_word + "',";
                        temp_int++;
                    }
                }
                if (temp_int > 0)
                    selectedtaxlist = selectedtaxlist.Substring(0, selectedtaxlist.Length - 1);
                tbreporttax.Text = Convert.ToString(temp_int) + " Selected";
            }
            gdvreport.Visible = false;
            dgv_tax_report.Visible = false;
        }

        private void cptranlist_Click(object sender, EventArgs e)
        {
            cpdatetime.Value = Convert.ToDateTime(cptranlist.SelectedCells[0].Value);
            cpdocno.Text = Convert.ToString(cptranlist.SelectedCells[1].Value);
            old_cash_payment_amount = Convert.ToDouble(cptranlist.SelectedCells[4].Value);
        }

        private void rb_yearly_Click(object sender, EventArgs e)
        {
            rb_monthly.Checked = false;
            rb_yearly.Checked = true;
        }

        private void rb_monthly_Click(object sender, EventArgs e)
        {
            rb_yearly.Checked = false;
            rb_monthly.Checked = true;
        }

        private void btnbackup_Click(object sender, EventArgs e)
        {
            //BackupDatabase("Ap2_backup_Trial");
        }

        private void braccountdg_Click(object sender, EventArgs e)
        {
            select_party_for_bank();
            brpartyname.Text = ConnectionWithAccess.mdesc;
            brpartycontact.Text = ConnectionWithAccess.accountcontact;
            brpartyaddress.Text = ConnectionWithAccess.accountaddress;
            brpartyoverallbalance.Text = Convert.ToString(get_account_balance(bra_n.Text, brs_a.Text, Convert.ToString(brdatetime.Text)));
            if (braccountdg.CurrentRow != null)
                br_master_acc_name.Text = common_account_head(bra_n.Text);
            bramt.ReadOnly = false;
            brtranlist.Visible = true;
            braccountdg.Visible = false;
            bramt.Focus();
            move_cursor_to_button_position("atbnew");
        }

        private void pi_party_help_Click(object sender, EventArgs e)
        {
            mRowIndex = pi_party_help.CurrentCell.RowIndex;

            if (chkAddToParty.Checked)
            {
                txtToParty.Text = Convert.ToString(pi_party_help.Rows[mRowIndex].Cells[0].Value);
                //picity.Text = Convert.ToString(pi_party_help.Rows[mRowIndex].Cells[1].Value);
                pi_To_a_n.Text = Convert.ToString(pi_party_help.Rows[mRowIndex].Cells[2].Value);
                pi_To_s_a.Text = Convert.ToString(pi_party_help.Rows[mRowIndex].Cells[3].Value);
                pi_party_help.Visible = false;

            }
            else
            {
                pipartycode.Text = Convert.ToString(pi_party_help.Rows[mRowIndex].Cells[0].Value);
                picity.Text = Convert.ToString(pi_party_help.Rows[mRowIndex].Cells[1].Value);
                pia_n.Text = Convert.ToString(pi_party_help.Rows[mRowIndex].Cells[2].Value);
                pis_a.Text = Convert.ToString(pi_party_help.Rows[mRowIndex].Cells[3].Value);
                if (pitaxcode.Text != "")
                    get_tax_desc_from_dc("P", sidbc.SelectedValue.ToString(), Convert.ToInt32(pitaxcode.Text));
                show_images();
                ConnectionWithAccess.query = "SELECT max(d_n) +1 from " + ConnectionWithAccess.tablename[22] + " where prd = '" + ConnectionWithAccess.mprd + "' and d_n <> 999999 and d_c = " + pidbc.SelectedValue.ToString() + " and a_n = '" + pia_n.Text + "' and s_a = '" + pis_a.Text + "'";
                ConnectionCommand.ExportToText(pidbc, pidocno);
                pi_party_help.Visible = false;
                //pidocno.ReadOnly = false;
                pitransport.Visible = true;
                piitemlist.Enabled = false;
                //pibasicamt.ReadOnly = false;
            }
            pidocno.Focus();
        }

        private void po_party_help_CellClick(object sender, DataGridViewCellEventArgs e)
        {
            mRowIndex = po_party_help.CurrentCell.RowIndex;
            popartycode.Text = Convert.ToString(po_party_help.Rows[mRowIndex].Cells[0].Value);
            pocity.Text = Convert.ToString(po_party_help.Rows[mRowIndex].Cells[1].Value);
            poa_n.Text = Convert.ToString(po_party_help.Rows[mRowIndex].Cells[2].Value);
            pos_a.Text = Convert.ToString(po_party_help.Rows[mRowIndex].Cells[3].Value);
            //if (potaxcode.Text != "")
            //    get_tax_desc_from_dc("PO", sidbc.SelectedValue.ToString(), Convert.ToInt32(potaxcode.Text));
            show_images();
            ConnectionWithAccess.query = "SELECT max(d_n) +1 from " + ConnectionWithAccess.tablename[22] + " where prd = '" + ConnectionWithAccess.mprd + "' and d_n <> 999999 and d_n <> 99999999 and d_c = " + podbc.SelectedValue.ToString() + " and a_n = '" + poa_n.Text + "' and s_a = '" + pos_a.Text + "'";
            ConnectionCommand.ExportToText(podbc, podocno);
            po_party_help.Visible = false;
            //podocno.ReadOnly = false;
            //potransport.Visible = true;
            poitemlist.Enabled = false;
            //pobasicamt.ReadOnly = false;
            podocno.Focus();
        }

        private void master_account_help_dg_Click(object sender, EventArgs e)
        {
            select_account_for_master();
            get_bank_details();
            if (cbParent.SelectedItem.Equals("SUNDRY DEBTORS") && tbdelivery.Text == "")
            {
                btn_add_delivery_account.Visible = true;
                btn_add_delivery_account.Text = "Add Delivery Account";
            }
            else
            {
                if (tbdelivery.Text == "")
                {
                    btn_add_delivery_account.Visible = true;
                    btn_add_delivery_account.Text = "Add Sub Account";
                }
            }
            cb_common_image.Checked = true;
        }

        private void si_item_help_Click(object sender, EventArgs e)
        {
            rowIndex = si_item_help.CurrentCell.RowIndex;
            mtype = Convert.ToString(si_item_help.Rows[rowIndex].Cells[0].Value);
            mitem_code = Convert.ToString(si_item_help.Rows[rowIndex].Cells[1].Value);
            ConnectionWithAccess.query = "select [type], item_code, [title],price,igst_per,hsn_code from " + ConnectionWithAccess.tablename[03] + " where a_n = '" + sia_n.Text + "' and s_a = '" + sis_a.Text + "' and [type] = '" + mtype + "' and item_code = '" + mitem_code + "' order by D_d desc";
            DataTable dtData1 = ConnectionCommand.fGetDataTable();
            if (dtData1 != null && dtData1.Rows.Count > 0)
            {
                if (dtData1.Rows[0][0] != null)
                {
                    siitemlist.Rows[siitemlistrowindex].Cells[0].Value = dtData1.Rows[0][0].ToString();
                    siitemlist.Rows[siitemlistrowindex].Cells[1].Value = dtData1.Rows[0][1].ToString();
                    siitemlist.Rows[siitemlistrowindex].Cells[6].Value = dtData1.Rows[0][3].ToString();
                    mprice = Convert.ToDouble(dtData1.Rows[0][3].ToString());
                    if (dtData1.Rows[0][4].ToString() != "")
                        siitemlist.Rows[siitemlistrowindex].Cells[7].Value = dtData1.Rows[0][4].ToString();
                    if (dtData1.Rows[0][5].ToString() != "")
                        siitemlist.Rows[siitemlistrowindex].Cells[8].Value = dtData1.Rows[0][5].ToString();
                }
            }
            get_item_details_from_05_using_type_item_code(mtype, mitem_code);
            siitemlist.Rows[siitemlistrowindex].Cells[0].Value = item_details_from_05[0];
            siitemlist.Rows[siitemlistrowindex].Cells[1].Value = item_details_from_05[1];
            siitemlist.Rows[siitemlistrowindex].Cells[2].Value = item_details_from_05[2];
            mtitle = Convert.ToString(siitemlist.Rows[siitemlistrowindex].Cells[2].Value);
            mcase = 1;
            mbox = Convert.ToDouble(item_details_from_05[3]);
            mqty = Convert.ToDouble(item_details_from_05[4]);
            if (siitemlist.Rows[siitemlistrowindex].Cells[6].Value != System.DBNull.Value)
            {
                if (Convert.ToDouble(siitemlist.Rows[siitemlistrowindex].Cells[6].Value) == 0.00)
                    mprice = Convert.ToDouble(item_details_from_05[5]);
            }
            else
                mprice = Convert.ToDouble(item_details_from_05[5]);
            siitemlist.Rows[siitemlistrowindex].Cells[3].Value = mcase;
            siitemlist.Rows[siitemlistrowindex].Cells[4].Value = mbox;
            siitemlist.Rows[siitemlistrowindex].Cells[5].Value = mbox * mqty;
            siitemlist.Rows[siitemlistrowindex].Cells[6].Value = mprice;
            //if (siitemlist.Rows[siitemlistrowindex].Cells[6].Value == null)
            //    siitemlist.Rows[siitemlistrowindex].Cells[6].Value = mprice;
            //else
            //    if (siitemlist.Rows[siitemlistrowindex].Cells[6].Value == System.DBNull.Value)
            //        siitemlist.Rows[siitemlistrowindex].Cells[6].Value = mprice.ToString();
            mamount = mcase * mbox * mqty * mprice;
            siitemlist.Rows[siitemlistrowindex].Cells[7].Value = Convert.ToString(mamount);
            siitemlist.Rows[siitemlistrowindex].Cells[8].Value = item_details_from_05[8];
            siitemlist.Rows[siitemlistrowindex].Cells[9].Value = item_details_from_05[9];
            siitemlist.Rows[siitemlistrowindex].Cells[10].Value = item_details_from_05[10];
            si_item_help.Visible = false;
            if (!chb_allow_stock_check_bypass.Checked)
            {
                double.TryParse(item_details_from_05[7].ToString(), out temp_double);
                if (temp_double == 0.0)
                    MessageBox.Show("Sorry, There is no Stock to Sell");
                else if (mqty > temp_double)
                {
                    MessageBox.Show("Sorry, Available Stock for sell Quantity is " + temp_double.ToString());
                    if (temp_double > 0)
                        mqty = temp_double;
                    else
                        mqty = 0;
                    siitemlist.Rows[siitemlistrowindex].Cells[4].Value = Convert.ToDouble(mqty / Convert.ToDouble(item_details_from_05[4]));
                    siitemlist.Rows[siitemlistrowindex].Cells[5].Value = mqty;
                    mamount = mcase * mbox * mqty * mprice;
                    siitemlist.Rows[siitemlistrowindex].Cells[7].Value = Convert.ToString(mamount);
                }
            }
            calculateSaleItemTotal();
            show_images();
        }

        private void ledger_account_help_CellClick(object sender, DataGridViewCellEventArgs e)
        {
            rowIndex = ledger_account_help.CurrentCell.RowIndex;
            rla_n.Text = ledger_account_help.Rows[rowIndex].Cells[2].Value.ToString();
            rls_a.Text = ledger_account_help.Rows[rowIndex].Cells[3].Value.ToString();
            tb_ledger_account_name.Text = ledger_account_help.Rows[rowIndex].Cells[0].Value.ToString();
            tb_ledger_account_city.Text = ledger_account_help.Rows[rowIndex].Cells[1].Value.ToString();
            lbl_ledger_master_account_name.Text = ledger_account_help.Rows[rowIndex].Cells[4].Value.ToString();
            show_images();
            ledger_account_help.Visible = false;
            lbl_ledger_master_account_name.Visible = true;
            btn_gen_ledg.Visible = true;
            move_cursor_to_button_position("btn_gen_ledg");
            btn_gen_ledg.Focus();
        }

        private void ledger_account_help_Click(object sender, EventArgs e)
        {

        }

        private void pi_item_help_Click(object sender, EventArgs e)
        {
            rowIndex = pi_item_help.CurrentCell.RowIndex;
            mtype = Convert.ToString(pi_item_help.Rows[rowIndex].Cells[0].Value);
            mitem_code = Convert.ToString(pi_item_help.Rows[rowIndex].Cells[1].Value);
            mtitle = Convert.ToString(pi_item_help.Rows[rowIndex].Cells[2].Value);
            get_item_details_from_05_using_type_item_code(mtype, mitem_code);
            mcase = 1;
            if (item_details_from_05.Count > 3)
            {
                piitemlist.Rows[piitemlistrowindex].Cells[0].Value = item_details_from_05[0];
                piitemlist.Rows[piitemlistrowindex].Cells[1].Value = item_details_from_05[1];
                piitemlist.Rows[piitemlistrowindex].Cells[2].Value = item_details_from_05[2];
                mbox = Convert.ToDouble(item_details_from_05[3]);
                mqty = Convert.ToDouble(item_details_from_05[4]);
                if (item_details_from_05[6].ToString() == "0.00")
                {
                    mprice = Convert.ToDouble(item_details_from_05[5]);
                    ConnectionWithAccess.query = "update " + ConnectionWithAccess.tablename[05] + " set p_price = " + Convert.ToDouble(item_details_from_05[5]) + " where type = '" + mtype + "' and item_code = '" + mitem_code + "'";
                    ConnectionCommand.fUpdateInsertDeleteData();
                    fLoad_Item_Master_List();
                }
                else
                {
                    mprice = Convert.ToDouble(item_details_from_05[11]);
                }

            }
            piitemlist.Rows[piitemlistrowindex].Cells[3].Value = mcase;
            piitemlist.Rows[piitemlistrowindex].Cells[4].Value = mbox * mcase;
            piitemlist.Rows[piitemlistrowindex].Cells[5].Value = mbox * mqty;
            piitemlist.Rows[piitemlistrowindex].Cells[6].Value = mprice;
            mamount = mcase * mbox * mqty * mprice;
            piitemlist.Rows[piitemlistrowindex].Cells[7].Value = Convert.ToString(mamount);
            if (item_details_from_05.Count > 3)
            {
                piitemlist.Rows[piitemlistrowindex].Cells[8].Value = item_details_from_05[8];
                piitemlist.Rows[piitemlistrowindex].Cells[9].Value = item_details_from_05[9];
                piitemlist.Rows[piitemlistrowindex].Cells[10].Value = item_details_from_05[10];
            }
            pi_item_help.Visible = false;
            calculatepurcItemTotal();
        }

        private void pitaxlist_dgv_Click(object sender, EventArgs e)
        {
            pitx_code.Text = Convert.ToString(pitaxlist_dgv.CurrentRow.Cells[0].Value);
            ConnectionWithAccess.query = "select tx_code,tax_rate, [desc] from " + ConnectionWithAccess.tablename[6] + " where d_c = " + Convert.ToInt32(pidbc.SelectedValue.ToString()) + " and tx_code like '" + pitx_code.Text + "'";
            DataTable dtData1 = ConnectionCommand.fGetDataTable();
            if (dtData1 != null && dtData1.Rows.Count > 0)
            {
                if (dtData1.Rows[0][0] != null)
                {
                    pitaxrate.Text = dtData1.Rows[0][1].ToString();
                    pitaxdesc.Text = dtData1.Rows[0][2].ToString();
                }
            }
            pitaxlist_dgv.Visible = false;
            calculatepurcItemTotal();
        }

        private void btnchangeperiod_Click(object sender, EventArgs e)
        {
            periodgridview.Visible = true;
            ConnectionWithAccess.query = "select prd, start, [end] from " + ConnectionWithAccess.tablename[50] + " order by prd desc";
            ConnectionCommand.accountHelp(periodgridview, "ChangePeriod");
        }

        private void bp_datagridview_Click(object sender, EventArgs e)
        {

        }

        private void cp_datagridview_Click(object sender, EventArgs e)
        {
            cpamt.ReadOnly = false;
            cp_igst_per.ReadOnly = false;
            cp_basicamt.ReadOnly = false;
            select_party_for_cash();
            cppartyname.Text = ConnectionWithAccess.mdesc;
            cppartycontact.Text = ConnectionWithAccess.accountcontact;
            cppartyaddress.Text = ConnectionWithAccess.accountaddress;
            cppartyoverallbalance.Text = Convert.ToString(get_account_balance(cpa_n.Text, cps_a.Text, cpdatetime.Text));
            if (cp_datagridview.CurrentRow != null)
            {
                cp_master_acc_name.Text = common_account_head(cpa_n.Text);
                label175.Text = common_account_head(cpa_n.Text);
            }
            bp_dgv_gst_tax_brief.DataSource = null;
            if (cpdocno.Text != "")
            {
                ConnectionWithAccess.query = "select f8.bamt, f8.igst_per, f8.igst_amt, f8.gamt from " + ConnectionWithAccess.tablename[8] + " f8 where f8.book = 'C' and f8.prd = '" + ConnectionWithAccess.mprd + "' and f8.d_c = " + cpdbc.SelectedValue.ToString() + " and f8.r_p = '4' and F8.d_n = " + cpdocno.Text;
                ConnectionCommand.accountHelp_datatable_Seperate(cp_dgv_gst_tax_brief, "cp_dgv_gst_tax_brief");
            }
            cptranlist.Visible = true;
            cpamt.Focus();
            move_cursor_to_button_position("atbnew");
        }

        private void cr_datagridview_Click(object sender, EventArgs e)
        {
            cramt.ReadOnly = false;
            select_party_for_cash();
            crpartyname.Text = ConnectionWithAccess.mdesc;
            crpartycontact.Text = ConnectionWithAccess.accountcontact;
            crpartyaddress.Text = ConnectionWithAccess.accountaddress;
            crpartybalance.Text = Convert.ToString(get_account_balance(cra_n.Text, crs_a.Text, crdatetime.Text));
            if (cr_datagridview.CurrentRow != null)
                cr_master_acc_name.Text = common_account_head(cra_n.Text);
            crtranlist.Visible = true;
            cramt.Focus();
            move_cursor_to_button_position("atbnew");
        }

        private void tr_datagridview_Click(object sender, EventArgs e)
        {
            tr_datetime.Value = Convert.ToDateTime(tr_datagridview.SelectedCells[0].Value);
            tr_docno.Text = Convert.ToString(tr_datagridview.SelectedCells[1].Value);
            ConnectionWithAccess.md_n = Convert.ToString(tr_datagridview.SelectedCells[1].Value);
            tr_amt.Text = Convert.ToString(Convert.ToDouble(tr_datagridview.SelectedCells[4].Value) * -1);
            tr_comm.Text = Convert.ToString(tr_datagridview.SelectedCells[5].Value);
            cb_tr_from_dc.SelectedValue = Convert.ToString(tr_datagridview.SelectedCells[6].Value);
            cb_tr_to_dc.SelectedValue = Convert.ToString(tr_datagridview.SelectedCells[7].Value);
            old_bank_transfer_amount = Convert.ToSingle(tr_datagridview.SelectedCells[4].Value);
        }

        private void atbprint_Click(object sender, EventArgs e)
        {
            report_filename = null;
            if (maintab.SelectedIndex == 1)
            {
                if (subtabDataEntry.SelectedIndex == 0 && subtabsale.SelectedIndex == 0)
                {
                    if (cb_common_image.Checked == true)
                    {
                        if (File.Exists(scan_image_filename))
                            SendToPrinter(scan_image_filename);
                        //PrintDocument printDocument1 = new PrintDocument();
                        //printDocument1.PrintPage += new PrintPageEventHandler(printDocument1_PrintPage);
                        //printDocument1.Print();
                    }
                    else
                        print_sale_invoice();
                }
            }
            else if (maintab.SelectedIndex == 2)
            {
                if (subtabDataEntry.SelectedIndex == 0 && subtabsale.SelectedIndex == 0)
                {
                }
            }
            else if (maintab.SelectedIndex == 3)
            {
                if (subtabreports.SelectedIndex == 0)
                {
                    report_filename = pdf_filename;
                }
                else if (subtabreports.SelectedIndex == 1)
                {
                    report_filename = ledger_filename;
                }
                else if (subtabreports.SelectedIndex == 2)
                {
                    report_filename = trading_filename;
                }
            }
            if (cb_common_image.Checked == false)
                SendToPrinter(report_filename);
        }

        private void jour_datagridview_Click(object sender, EventArgs e)
        {
            select_party_for_jour();
            if (jour_datagridview.CurrentRow != null)
                lbl_cp_account_head.Text = common_account_head(ja_n.Text);
            jjtranlist.Visible = true;
            //jjamt.Focus();
        }

        private void jjtranlist_Click(object sender, EventArgs e)
        {
            jj_dgv_gst_tax_brief.DataSource = null;
            lbl_jour_payer_acc_head.Visible = true;
            gb_payer_details.Visible = true;
            gb_payee_details.Visible = true;
            jj_dgv_gst_tax_brief.DataSource = null;
            jj_dgv_gst_tax_brief.Visible = true;
            //jjdatetime.Value = Convert.ToDateTime(jjtranlist.SelectedCells[1].Value);
            jjdocno.Text = Convert.ToString(jjtranlist.SelectedCells[1].Value);
            jjamt.Text = Convert.ToString(jjtranlist.SelectedCells[4].Value);
            old_journal_amount = Convert.ToDouble(jjtranlist.SelectedCells[4].Value);
            jjcomm.Text = Convert.ToString(jjtranlist.SelectedCells[6].Value);
            ja_n.Text = Convert.ToString(jjtranlist.SelectedCells[7].Value);
            js_a.Text = Convert.ToString(jjtranlist.SelectedCells[8].Value);
            jna_n.Text = Convert.ToString(jjtranlist.SelectedCells[9].Value);
            jns_a.Text = Convert.ToString(jjtranlist.SelectedCells[10].Value);
            jjbamt.Text = Convert.ToString(jjtranlist.SelectedCells[11].Value);
            jjigst_per.Text = Convert.ToString(jjtranlist.SelectedCells[12].Value);
            jjigst_amt.Text = Convert.ToString(jjtranlist.SelectedCells[13].Value);
            jjamt.ReadOnly = false;
            jjbamt.ReadOnly = false;
            jjigst_per.ReadOnly = false;
            populate_screen();
            jjpartycode2.Enabled = true;
        }

        private void cb_common_image_Click(object sender, EventArgs e)
        {
            if (cb_common_image.Checked == true)
                show_images();
            else
            {
                rb_transport_copy.Visible = false;
                rb_invoice.Visible = false;
                rb_visiting_card.Visible = false;
                invisible_all_image();
            }
        }

        private void emerg_balance_Click(object sender, EventArgs e)
        {
            //emerg_balance_function_old();
            //temporary_list_1.Clear();
            emerg_balance_function_new();
            //save_EmergingData_from_memory();
            MessageBox.Show("Emerging Process Done.....");
        }

        private void save_EmergingData_from_memory()
        {
            ConnectionWithAccess.mtextfilename = ConnectionWithAccess.data_drive + "acc\\" + ConnectionWithAccess.mNIK + "EmergingData.txt";
            File.Delete(ConnectionWithAccess.mtextfilename);
            StringBuilder sb = new StringBuilder();
            for (row_counter = 0; row_counter < temporary_list_1.Count; row_counter++)
            {
                sb.AppendLine(temporary_list_1[row_counter]);
            }
            TextWriter writer = new StreamWriter(ConnectionWithAccess.mtextfilename);
            writer.WriteLine(sb);
            writer.Flush();
            //MessageBox.Show("File Created Successfully");
            writer.Close();
        }

        private void btnEmergeNew_Click(object sender, EventArgs e)
        {
            emerg_balance_function_new();
        }

        private void master_item_help_Click(object sender, EventArgs e)
        {
            tbTitle.Text = Convert.ToString(master_item_help.SelectedCells[2].Value);
            tbTitle.ReadOnly = true;
            update_masters_items_screen_details(tbTitle.Text);
        }

        private void sitaxlist_Click(object sender, EventArgs e)
        {
            sitaxcode.Text = Convert.ToString(sitaxlist.CurrentRow.Cells[0].Value);
            sitaxrate.Text = Convert.ToString(sitaxlist.CurrentRow.Cells[1].Value);
            sitaxdesc.Text = Convert.ToString(sitaxlist.CurrentRow.Cells[2].Value);
            sitaxamt.Text = Convert.ToString(Convert.ToDouble(sibasicamt.Text) * Convert.ToDouble(sitaxrate.Text) / 100);
            sale_invoice_amount += Convert.ToDouble(sitaxamt.Text);
            if (si_freight_amt.Text != "" && si_freight_amt.Text != "0.00")
                sale_invoice_amount += Convert.ToDouble(si_freight_amt.Text);
            if (si_packing_amt.Text != "" && si_packing_amt.Text != "0.00")
                sale_invoice_amount += Convert.ToDouble(si_packing_amt.Text);
            if (si_insurance_amt.Text != "" && si_insurance_amt.Text != "0.00")
                sale_invoice_amount += Convert.ToDouble(si_insurance_amt.Text);
            if (si_other_amt.Text != "" && si_other_amt.Text != "0.00")
                sale_invoice_amount += Convert.ToDouble(si_other_amt.Text);
            calculate_roundoff();
            if (siroundoffamt.Text != "" && siroundoffamt.Text != "0.00")
                sale_invoice_amount += Convert.ToDouble(siroundoffamt.Text);
            sale_invoice_amount = Math.Round(sale_invoice_amount, 2);
            sigrossamt.Text = Convert.ToString(sale_invoice_amount);

            sitaxlist.Visible = false;
            cb_all_sale_invoice_ledger.Visible = true;
            cb_all_sale_invoice_list.Visible = true;
            cb_all_sale_item_list.Visible = true;
        }

        private void ItemListDG_Click(object sender, EventArgs e)
        {
            tbTitle.Text = ItemListDG.CurrentRow.Cells[2].Value.ToString();
            update_masters_items_screen_details(tbTitle.Text);
        }

        private void btn_create_sqllite_file_Click(object sender, EventArgs e)
        {
            sqlite_filename = "F:\\ACC\\AP2\\AP2";
            SQLiteConnection.CreateFile(sqlite_filename);
            SQLiteConnection m_dbConnection = new SQLiteConnection("Data Source=" + sqlite_filename + ";Version=3;");
            m_dbConnection.Open();
            string mDRIVE = "F";
            //ConnectionWithAccess.mtextfilename = mDRIVE + ":\\" + "acc\\table_structure.txt";
            //ConnectionWithAccess.mtextfilename = mDRIVE + ":\\" + "visual studio\\projects\\sharp\\table_structure.txt";
            ConnectionWithAccess.mtextfilename = mDRIVE + ":\\ACC\\table_structure.txt";
            var lines = File.ReadAllLines(ConnectionWithAccess.mtextfilename);
            for (int i = 0; i < lines.Count(); i++)
            {
                if (lines[i] != null)
                {
                    temp_word = lines[i];
                    if (temp_word.Substring(0, 1) == "_")
                    {
                        string struction_sintex, query;
                        mtbname = ConnectionWithAccess.mNIK + temp_word;
                        struction_sintex = lines[i + 1];
                        query = "create table " + mtbname + "(" + struction_sintex + ")";
                        SQLiteCommand command = new SQLiteCommand(query, m_dbConnection);
                        command.ExecuteNonQuery();
                    }
                }
            }
            m_dbConnection.Close();
            MessageBox.Show("Sqlite File Generated Sucessfully");
        }

        private void rb_sale_tax_Click(object sender, EventArgs e)
        {
            rb_sale_tax.Checked = true;
            rb_purchase_tax.Checked = false;
            taxlistmatertab();
        }

        private void rb_purchase_tax_Click(object sender, EventArgs e)
        {
            rb_sale_tax.Checked = false;
            rb_purchase_tax.Checked = true;
            taxlistmatertab();
        }

        private void TaxListDG_Click(object sender, EventArgs e)
        {
            tbTaxCode.Text = Convert.ToString(TaxListDG.SelectedCells[1].Value);
            tbTaxRate.Text = Convert.ToString(TaxListDG.SelectedCells[2].Value);
            tbTaxDesc.Text = Convert.ToString(TaxListDG.SelectedCells[3].Value);
        }

        private void periodgridview_Click(object sender, EventArgs e)
        {
            ConnectionWithAccess.mprd = Convert.ToString(periodgridview.CurrentRow.Cells[0].Value);
            ConnectionWithAccess.msdate = Convert.ToString(periodgridview.CurrentRow.Cells[1].Value);
            ConnectionWithAccess.medate = Convert.ToString(periodgridview.CurrentRow.Cells[2].Value);
            if (DateTime.Today > Convert.ToDateTime(ConnectionWithAccess.msdate))
            {
                if (DateTime.Today <= Convert.ToDateTime(ConnectionWithAccess.medate))
                {
                    ConnectionWithAccess.medate = (DateTime.Today.ToShortDateString()).ToString();
                }
            }
            try
            {
                ConnectionWithAccess.moprd = ConnectionWithAccess.get_old_prd_name(ConnectionWithAccess.mprd);
                ConnectionWithAccess.mnew_prd = ConnectionWithAccess.get_next_prd_name(ConnectionWithAccess.mprd);
                RepFrom.Value = Convert.ToDateTime(ConnectionWithAccess.msdate);
                RepTo.Value = Convert.ToDateTime(ConnectionWithAccess.medate);
            }
            catch (Exception ex)
            { }
            periodgridview.Visible = false;
            load_all_period_values();
            if (ConnectionWithAccess.msdate.Contains(" "))
                ConnectionWithAccess.msdate = ConnectionWithAccess.msdate.Substring(0, ConnectionWithAccess.msdate.IndexOf(" "));
            if (ConnectionWithAccess.medate.Contains(" "))
                ConnectionWithAccess.medate = ConnectionWithAccess.medate.Substring(0, ConnectionWithAccess.medate.IndexOf(" "));
            //ToolStripStatusPeriod.Text = "<" + ConnectionWithAccess.data_drive.Substring(0, 1) + "> " + ConnectionWithAccess.mprd.ToString() + "  " + ConnectionWithAccess.msdate + "  To  " + ConnectionWithAccess.medate.ToString();
        }

        private void pb_change_period_Click(object sender, EventArgs e)
        {
            disable_all_keys();
            dgv_period.Visible = true;
            dgv_period.EditMode = DataGridViewEditMode.EditProgrammatically;
            periodgridview.Visible = true;
            ConnectionWithAccess.query = "select prd, start, [end] from " + ConnectionWithAccess.tablename[50] + " order by prd desc";
            ConnectionCommand.accountHelp_datatable(dgv_period, "dgv_period");
            dgv_period.Columns[0].HeaderText = "Prd";
            dgv_period.Columns[1].HeaderText = "Start";
            dgv_period.Columns[2].HeaderText = "End";
            dgv_period.Columns[0].Width = 27;
            dgv_period.Columns[1].Width = 96;
            dgv_period.Columns[2].Width = 96;
            dgv_period.Focus();
        }

        private void dgv_period_Click(object sender, EventArgs e)
        {
            ConnectionWithAccess.mprd = Convert.ToString(dgv_period.CurrentRow.Cells[0].Value);
            go_to_selected_period(ConnectionWithAccess.mprd);
            clear_all_datagridview_after_period_change();
            dgv_period.Visible = false;
            load_all_period_values();
            load_necessary_values();
            sidbc.Text = "";
            sidbc_SelectedIndexChanged(sender, e);
            pidbc.Text = "";
            pidbc_SelectedIndexChanged(sender, e);
            text_to_display_on_top_function();
            enable_all_keys();
            getdaybookcode();
            atbnew_Click(sender, e);
            fSetDateRangeOnPeriodChange();
        }

        private void text_to_display_on_top_function()
        {
            if (ConnectionWithAccess.msdate.Contains(" "))
                ConnectionWithAccess.msdate = ConnectionWithAccess.msdate.Substring(0, ConnectionWithAccess.msdate.IndexOf(" "));
            if (ConnectionWithAccess.medate.Contains(" "))
                ConnectionWithAccess.medate = ConnectionWithAccess.medate.Substring(0, ConnectionWithAccess.medate.IndexOf(" "));
            /*ToolStripStatusPeriod.Text = "<" + ConnectionWithAccess.data_drive.Substring(0, 1) + "> " + ConnectionWithAccess.mprd.ToString() + "  " + ConnectionWithAccess.msdate + "  To  " + ConnectionWithAccess.medate.ToString();
            text_to_display_on_top = ConnectionWithAccess.company_details[1] + " " + version + "ver                                                              " + ToolStripStatusPeriod.Text;
            this.Text = text_to_display_on_top;*/
        }

        private void ToolStripMenuItem4_Click(object sender, EventArgs e)
        {
            atbsave_Click(sender, e);
        }

        private void DBCListDG_Click(object sender, EventArgs e)
        {
            tbDBC.Text = Convert.ToString(DBCListDG.CurrentRow.Cells[0].Value);
            cb_transfer_account.Text = Convert.ToString(DBCListDG.CurrentRow.Cells[1].Value);
            if (cbAction.SelectedIndex == 2)
            {
                tbbank_accnumber.Text = "";
                label132.Visible = true;
                tbbank_accnumber.Visible = true;
                find_bank_account_name_from_d_c(Convert.ToInt32(tbDBC.Text));
            }
        }

        private void sr_item_help_Click(object sender, EventArgs e)
        {
            sritemlistrowindex = sritemlist.CurrentCell.RowIndex;
            mtype = Convert.ToString(sr_item_help.CurrentRow.Cells[0].Value);
            mitem_code = Convert.ToString(sr_item_help.CurrentRow.Cells[1].Value);
            mtitle = Convert.ToString(sr_item_help.CurrentRow.Cells[2].Value);
            ConnectionWithAccess.query = "select [type], item_code, [title],price,igst_per,hsn_code from " + ConnectionWithAccess.tablename[03] + " where a_n = '" + sra_n.Text + "' and s_a = '" + srs_a.Text + "' and [type] = '" + mtype + "' and item_code = '" + mitem_code + "'";
            DataTable dtData1 = ConnectionCommand.fGetDataTable();
            if (dtData1 != null && dtData1.Rows.Count > 0)
            {
                if (dtData1.Rows[0][0] != null)
                {
                    sritemlist.Rows[sritemlistrowindex].Cells[2].Value = dtData1.Rows[0][0].ToString();
                    sritemlist.Rows[sritemlistrowindex].Cells[3].Value = dtData1.Rows[0][1].ToString();
                    sritemlist.Rows[sritemlistrowindex].Cells[4].Value = dtData1.Rows[0][2].ToString();
                    sritemlist.Rows[sritemlistrowindex].Cells[6].Value = dtData1.Rows[0][3].ToString();
                }
            }
            ConnectionWithAccess.query = "select [type], item_code, [title],packing,box,price,clo_stk,cat,igst_per,hsn_code from " + ConnectionWithAccess.tablename[05] + " where [type] = '" + mtype + "' and item_code = '" + mitem_code + "'";
            dtData1 = ConnectionCommand.fGetDataTable();
            if (dtData1 != null && dtData1.Rows.Count > 0)
            {
                if (dtData1.Rows[0][0] != null)
                {
                    temp_word = dtData1.Rows[0][0].ToString();
                    sritemlist.Rows[sritemlistrowindex].Cells[0].Value = dtData1.Rows[0][0].ToString();
                    sritemlist.Rows[sritemlistrowindex].Cells[1].Value = dtData1.Rows[0][1].ToString();
                    sritemlist.Rows[sritemlistrowindex].Cells[2].Value = dtData1.Rows[0][2].ToString();
                    mcase = 1;
                    mbox = Convert.ToDouble(dtData1.Rows[0][3].ToString());
                    mqty = Convert.ToDouble(dtData1.Rows[0][4].ToString());
                    mprice = Convert.ToDouble(dtData1.Rows[0][5].ToString());
                    sritemlist.Rows[sritemlistrowindex].Cells[3].Value = mcase;
                    sritemlist.Rows[sritemlistrowindex].Cells[4].Value = Convert.ToDouble(dtData1.Rows[0][3].ToString());
                    //sritemlist.Rows[sritemlistrowindex].Cells[5].Value = Convert.ToDouble(dtData1.Rows[0][3].ToString()) * Convert.ToDouble(dtData1.Rows[0][4].ToString());
                    if (sritemlist.Rows[sritemlistrowindex].Cells[6].Value == null)
                        sritemlist.Rows[sritemlistrowindex].Cells[6].Value = mprice;
                    else
                        Double.TryParse(sritemlist.Rows[sritemlistrowindex].Cells[6].Value.ToString(), out mprice);
                    //mprice = Convert.ToDouble(sritemlist.Rows[sritemlistrowindex].Cells[6].Value);
                    mamount = mcase * mbox * mqty * mprice;
                    sritemlist.Rows[sritemlistrowindex].Cells[7].Value = Convert.ToString(mamount);
                    int totalrowcount = sritemlist.Rows.Count;
                    sale_replace_amount = 0;
                    for (int i = 0; i < totalrowcount; i++)
                    {
                        sale_replace_amount = sale_replace_amount + Convert.ToDouble(sritemlist.Rows[i].Cells[7].Value);
                    }
                    srbasicamt.Enabled = false;
                    srbasicamt.Text = string.Format("{0:0.00}", Convert.ToDouble(sale_replace_amount));
                }
            }
            sr_item_help.Visible = false;
        }

        private void srsalelistdg_Click(object sender, EventArgs e)
        {
            srdatetime.Value = Convert.ToDateTime(srsalelistdg.SelectedCells[0].Value);
            srdocno.Text = Convert.ToString(srsalelistdg.SelectedCells[1].Value);
            oldsalereplacementdetails();
            //sale_replacement_item_filling();
            srpartycode.Enabled = false;
        }

        private void periodF10ToolStripMenuItem_Click(object sender, EventArgs e)
        {
            pb_change_period_Click(sender, e);
        }

        private void dgv_dataentry_additional_item_Click(object sender, EventArgs e)
        {
            show_images();
        }

        private void so_item_help_Click(object sender, EventArgs e)
        {
            mtype = Convert.ToString(so_item_help.CurrentRow.Cells[0].Value);
            mitem_code = Convert.ToString(so_item_help.CurrentRow.Cells[1].Value);
            mtitle = Convert.ToString(so_item_help.CurrentRow.Cells[2].Value);
            ConnectionWithAccess.query = "select [type], item_code, [title],price,igst_per,hsn_code from " + ConnectionWithAccess.tablename[03] + " where a_n = '" + soa_n.Text + "' and s_a = '" + sos_a.Text + "' and [type] = '" + mtype + "' and item_code = '" + mitem_code + "'";
            DataTable dtData1 = ConnectionCommand.fGetDataTable();
            if (dtData1 != null && dtData1.Rows.Count > 0)
            {
                if (dtData1.Rows[0][0] != null)
                {
                    temp_word = dtData1.Rows[0][0].ToString();
                    soitemlist.Rows[soitemlistrowindex].Cells[0].Value = dtData1.Rows[0][0].ToString();
                    soitemlist.Rows[soitemlistrowindex].Cells[1].Value = dtData1.Rows[0][1].ToString();
                    soitemlist.Rows[soitemlistrowindex].Cells[6].Value = dtData1.Rows[0][3].ToString();
                }
            }
            ConnectionWithAccess.query = "select [type], item_code, [title],packing,box,price,clo_stk,cat,igst_per,hsn_code from " + ConnectionWithAccess.tablename[05] + " where [type] = '" + mtype + "' and item_code = '" + mitem_code + "'";
            dtData1 = ConnectionCommand.fGetDataTable();
            if (dtData1 != null && dtData1.Rows.Count > 0)
            {
                if (dtData1.Rows[0][0] != null)
                {
                    temp_word = dtData1.Rows[0][0].ToString();
                    soitemlist.Rows[soitemlistrowindex].Cells[0].Value = dtData1.Rows[0][0].ToString();
                    soitemlist.Rows[soitemlistrowindex].Cells[1].Value = dtData1.Rows[0][1].ToString();
                    soitemlist.Rows[soitemlistrowindex].Cells[2].Value = dtData1.Rows[0][2].ToString();
                    mcase = 1;
                    mbox = Convert.ToDouble(dtData1.Rows[0][3].ToString());
                    mqty = Convert.ToDouble(dtData1.Rows[0][4].ToString());
                    mprice = Convert.ToDouble(dtData1.Rows[0][5].ToString());
                    soitemlist.Rows[soitemlistrowindex].Cells[3].Value = mcase;
                    soitemlist.Rows[soitemlistrowindex].Cells[4].Value = mbox * mcase;
                    soitemlist.Rows[soitemlistrowindex].Cells[5].Value = mbox * mqty;
                    if (soitemlist.Rows[soitemlistrowindex].Cells[6].Value == null)
                        soitemlist.Rows[soitemlistrowindex].Cells[6].Value = mprice;
                    else
                        mprice = Convert.ToDouble(soitemlist.Rows[soitemlistrowindex].Cells[6].Value);
                    mamount = mcase * mbox * mqty * mprice;
                    soitemlist.Rows[soitemlistrowindex].Cells[7].Value = Convert.ToString(mamount);
                    soitemlist.Rows[soitemlistrowindex].Cells[8].Value = dtData1.Rows[0][6].ToString();
                    so_item_help.Visible = false;
                    int totalrowcount = soitemlist.Rows.Count;
                    sale_order_amount = 0;
                    for (int i = 0; i < totalrowcount; i++)
                    {
                        sale_order_amount = sale_order_amount + Convert.ToDouble(soitemlist.Rows[i].Cells[7].Value);
                    }
                    sobasicamt.Enabled = false;
                    sobasicamt.Text = string.Format("{0:0.00}", Convert.ToDouble(sale_order_amount));
                }
            }
        }

        //private void so_party_help_Click(object sender, EventArgs e)
        //{
        //    select_party_for_sale();
        //    soitemlist.Enabled = true;
        //    sobasicamt.Enabled = true;
        //}

        private void dgv_user_list_Click(object sender, EventArgs e)
        {
            tbUserName.Text = Convert.ToString(dgv_user_list.CurrentRow.Cells[0].Value);
            tbPassword.Text = Convert.ToString(dgv_user_list.CurrentRow.Cells[1].Value);
            readusersettingsfromfiletoMemory(tbUserName.Text, tbPassword.Text);
            changestatusaspermemory();
            dgv_user_list.Visible = false;
        }

        private void ToolStripMenuItem6_Click(object sender, EventArgs e)
        {
            atbcancel_Click(sender, e);
        }

        private void btn_cheque_print_Click(object sender, EventArgs e)
        {
            get_account_details_from_01(bpa_n.Text, bps_a.Text);
            get_account_details_from_04(bpa_n.Text, bps_a.Text);
            cheque_pdf = ConnectionWithAccess.data_drive + "acc\\" + ConnectionWithAccess.mNIK + "\\reports\\cheque_print_bp";
            cheque_pdf += "_" + ConnectionWithAccess.mprd;
            cheque_pdf += "_" + Convert.ToInt32(bpdbc.SelectedValue.ToString());
            cheque_pdf += "_" + bpdocno.Text;
            if (chb_add_datetime_in_output.Checked)
                cheque_pdf += "_" + DateTime.Now.Day + "_" + DateTime.Now.Month + "_" + DateTime.Now.Year + "_" + DateTime.Now.TimeOfDay.Hours + "_" + DateTime.Now.TimeOfDay.Minutes;
            cheque_pdf += ".pdf";
            doc1 = new Document(PageSize.A4.Rotate(), 5, 200, 200, 10);
            ConnectionWithAccess.create_file_folder(cheque_pdf);
            //doc1 = new Document(new Document(100f, 300f));
            FileStream FS1 = File.Create(cheque_pdf);
            writer = PdfWriter.GetInstance(doc1, FS1);
            doc1.Open();
            current_pdf_page_number = 1;
            Paragraph para = new Paragraph("");
            para.Font.Size = 25;
            temp_word = bpdatetime.Text;
            print_pdf_line(cour_11_red, temp_word, 600, 100);
            temp_word = account_detail_from_01[04].Trim() + " - " + account_detail_from_01[08].Trim();
            print_pdf_line(cour_11_red, temp_word, 80, -18);

            temp_word = bpamt.Text;
            if (temp_word.Contains("."))
                temp_word = temp_word.Substring(0, temp_word.Length - 3);
            temp_word = (NumberToWords(Convert.ToInt32(temp_word))) + " Only";
            print_pdf_line(cour_11, temp_word, 80, 24);

            temp_word = bpamt.Text.Trim();
            if (!temp_word.Contains("."))
                temp_word = temp_word + ".00/-";
            else
                temp_word = bpamt.Text.Trim() + "/-";
            temp_word = "***" + temp_word + "***";
            print_pdf_line(cour_11_bold, temp_word, 500, -18);

            temp_word = bpdocno.Text;
            print_pdf_line(cour_11, temp_word, 450, 24);
            doc1.Close();
            pdf_common.Location = new System.Drawing.Point(20, 240);
            pdf_common.Size = new System.Drawing.Size(1150, 390);
            pdf_common.BringToFront();
            pdf_common.Visible = true;
            //sisalelistdg.Visible = false;
            //pbdataentry.Visible = false;
            pdf_invoice.Size = new System.Drawing.Size(1200, 381);
            pdf_common.LoadFile(cheque_pdf);
            move_cursor_to_button_position("atbcancel");
        }

        private void atbscan_Click(object sender, EventArgs e)
        {
            find_scan_image_type();
            atbscan.Visible = false;
            Scan_documents(scan_image_type);
            //Scan_documents(maintab.SelectedTab.Text);
            atbscan.Visible = true;
        }

        private void btn_reset_setup_code_Click(object sender, EventArgs e)
        {
            if (File.Exists(ConnectionWithAccess.setup_drive + "sharp\\sharp_info.txt"))
            {
                File.Delete(ConnectionWithAccess.setup_drive + "sharp\\sharp_info.txt");
                Application.Restart();
                Environment.Exit(1);
            }
        }

        private void btn_update_mdb_structure_Click(object sender, EventArgs e)
        {
            PleaseWait objPleaseWait = new PleaseWait("Please wait Updating Database files");
            objPleaseWait.Show();
            Application.DoEvents();

            // update_all_company_mdb_tables();
            btn_update_mdb_structure.Visible = false;
            tablestructureupdate.update_all_tables();
            btn_update_mdb_structure.Visible = true;
            objPleaseWait.Close();
        }

        private void dgvStdCodeHelp_Click(object sender, EventArgs e)
        {
            PleaseWait objPleaseWait = new PleaseWait("Please wait Loading Std File");
            objPleaseWait.Show();
            Application.DoEvents();
            try
            {
                rowIndex = dgvStdCodeHelp.CurrentRow.Index;
                bstdcode = false;
                tbStd.Text = Convert.ToString(dgvStdCodeHelp.Rows[rowIndex].Cells[2].Value);
                tbstate.Text = Convert.ToString(dgvStdCodeHelp.Rows[rowIndex].Cells[3].Value);
                tbCity.Text = Convert.ToString(dgvStdCodeHelp.Rows[rowIndex].Cells[1].Value);
                tbcountry.Text = Convert.ToString(dgvStdCodeHelp.Rows[rowIndex].Cells[0].Value);
                dgvStdCodeHelp.Visible = false;
                tbstate.BackColor = Color.White;
            }
            catch (Exception ex)
            {

            }
            objPleaseWait.Close();
            bstdcode = true;
            move_cursor_to_button_position("atbsave");
        }

        private void pb_backup_data_Click(object sender, EventArgs e)
        {
            backup objbackstore = new backup();
            objbackstore.Show();
            Application.DoEvents();
            //objbackstore.Close();
        }

        private void atbDelete_Click(object sender, EventArgs e)
        {
            if (maintab.SelectedIndex == 2)
            {
                if (subtabMasters.SelectedIndex == 0)
                {
                    vDeleteAccount(); //Delete Account
                }
                else if (subtabMasters.SelectedIndex == 1)
                {
                    vDeleteItem(); //Delete Item
                }
            }
        }

        private void btn_music_Click(object sender, EventArgs e)
        {
            report_filename = null;
            if (maintab.SelectedIndex == 1)
            {
                if (subtabDataEntry.SelectedIndex == 0 && subtabsale.SelectedIndex == 0)
                {
                    if (periodofgst)
                    {
                        Printing_delivery_challan();
                    }
                }
            }
        }

        private void atbfont_Click(object sender, EventArgs e)
        {
            DialogResult result = fontDialog1.ShowDialog();
            if (result == DialogResult.OK)
            {
                foreach (Control c in this.Controls)
                {
                    c.Font = fontDialog1.Font;
                }
                var cvt = new FontConverter();
                //string s = cvt.ConvertToString(this.Font);
                strSelectedFont = cvt.ConvertToString(fontDialog1.Font);
                read_company_text_file();
                ConnectionWithAccess.company_font = cvt.ConvertToString(fontDialog1.Font);//.ToString();
                ConnectionWithAccess.company_details[35] = cvt.ConvertToString(fontDialog1.Font);//.ToString();
                save_company_text_file_from_memory();
            }
        }

        private void pb_data_migration_Click(object sender, EventArgs e)
        {
            try
            {
                disable_all_keys();
                pb_data_migration.Visible = false;
                update_database_text_filename = ConnectionWithAccess.data_drive + "acc\\" + ConnectionWithAccess.mNIK + "\\" + ConnectionWithAccess.mNIK + "a_i_o.txt";
                if (File.Exists(update_database_text_filename))
                {
                    reload_from_file = File.ReadAllLines(update_database_text_filename);
                    for (int i = 0; i < reload_from_file.Length - 1; i++)
                    {
                        word = reload_from_file[i];
                        this.Text = "Please wait Updating Database File " + word;
                        if (word != null && word != "")
                        {
                            if (word.Contains("File"))
                            {
                                if (word.Contains("File END"))
                                {
                                    i++;
                                    if (i < reload_from_file.Length)
                                        word = reload_from_file[i];
                                }
                                file_number = word.Substring(6, word.Length - 6);
                                if (file_number == "025")
                                    temp_word = "Sanjay";
                                if (i < reload_from_file.Length - 1)
                                {
                                    i++;
                                    word = reload_from_file[i];
                                    field_name = word.Split(new[] { ',' });
                                    fieldnamedata = word;
                                    if (file_number != "70" && file_number != "27")
                                    {
                                        //truncate(file_number);
                                        delete_data_before_date(file_number, dtp_import_before.Value.ToShortDateString());
                                    }
                                }
                            }
                            else
                            {
                                if (file_number == "001")
                                {
                                    if (i == 152)
                                        new_word = "Sanjay";
                                    new_word = "";
                                    data_in_record = word.Split(new[] { ',' });
                                    for (row_counter = 0; row_counter < data_in_record.Length; row_counter++)
                                    {
                                        if (row_counter != 7)
                                            new_word += data_in_record[row_counter] + ",";
                                        else
                                            if (data_in_record[row_counter].Trim() == "''")
                                            new_word += "0,";
                                        else
                                            new_word += data_in_record[row_counter].Replace("'", "") + ",";
                                    }
                                    new_word = new_word.Substring(0, new_word.Length - 1);
                                    word = new_word;
                                    record_number = i.ToString();
                                }
                                else if (file_number == "003")
                                {
                                    if (i == 3248)
                                        new_word = "Sanjay";
                                    new_word = "";
                                    data_in_record = word.Split(new[] { ',' });
                                    for (row_counter = 0; row_counter < data_in_record.Length; row_counter++)
                                    {
                                        if (row_counter != 7)
                                            new_word += data_in_record[row_counter] + ",";
                                        else
                                            if (data_in_record[row_counter].Trim() == "''")
                                            new_word += "0,";
                                        else
                                            new_word += data_in_record[row_counter].Replace("'", "") + ",";
                                    }
                                    new_word = new_word.Substring(0, new_word.Length - 1);
                                    word = new_word;
                                    record_number = i.ToString();
                                }
                                else if (file_number == "051")
                                {
                                    if (i == 3248)
                                        new_word = "Sanjay";
                                    new_word = "";
                                    data_in_record = word.Split(new[] { ',' });
                                    for (row_counter = 0; row_counter < data_in_record.Length; row_counter++)
                                    {
                                        if (row_counter == 0)
                                            new_word += data_in_record[row_counter].Replace("'", "") + "0,";
                                        else if (row_counter != 6 && row_counter != 7 && row_counter != 10 && row_counter != 11 && row_counter != 13)
                                            new_word += data_in_record[row_counter] + ",";
                                        else
                                            if (data_in_record[row_counter].Trim() == "''")
                                            new_word += "0.00,";
                                        else if (!data_in_record[row_counter].Contains("."))
                                            new_word += data_in_record[row_counter] + ".00,";
                                        else
                                            new_word += data_in_record[row_counter].Replace("'", "") + ",";
                                    }
                                    new_word = new_word.Substring(0, new_word.Length - 1);
                                    word = new_word;
                                    record_number = i.ToString();
                                }
                                if (file_number != null && file_number != "" && fieldnamedata != null && fieldnamedata != "" && word != null && word != "")
                                {
                                    if (file_number != "030")
                                    {
                                        if (file_number != "022")
                                        {
                                            insert_table_data(file_number, fieldnamedata, word);
                                        }
                                        else
                                        {
                                            var cellArray = word.Split(new[] { ',' });
                                            for (row_counter = 0; row_counter < cellArray.Count(); row_counter++)
                                            {
                                                if (row_counter == 5)
                                                {
                                                    if (cellArray[row_counter].Trim().Length > 8)
                                                    {
                                                        temp_word = "sanjay";
                                                    }
                                                    else if (cellArray[row_counter].Trim().Contains("E"))
                                                    {
                                                        cellArray[row_counter] = cellArray[row_counter].Replace("E", "").Trim();
                                                    }
                                                }
                                            }
                                            insert_table_data(file_number, fieldnamedata, word);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else
                {
                    MessageBox.Show("Import Text File Not Found");
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
            btn_clean_data_Click(sender, e);
            enable_all_keys();
            pb_data_migration.Visible = true;
        }

        private void btn_clean_data_Click(object sender, EventArgs e)
        {
            PleaseWait objPleaseWait = new PleaseWait("Please wait Cleaning Database Files");
            objPleaseWait.Show();
            Application.DoEvents();
            update_s_a_column_data();
            check_for_compulsory_records();
            remove_records_with_zero_amounts();
            remove_records_with_blank_a_n_s_a_d_y();
            replace_all_bank_nara_with_mess_in_bank();
            DeleteBankTransferToBankErrorEntries();
            add_gst_master_accounts();
            replace_all_opening_and_closing_stock_with_zero_for_null();
            if (ConnectionWithAccess.mNIK == "AP2")
            {
                update_gp_per_of_ap2();
                repair_bank_data_for_ap2();
            }
            if (ConnectionWithAccess.mNIK == "JI1")
            {
                ConnectionWithAccess.query = "update " + ConnectionWithAccess.tablename[23] + " set IGST_AMT = 0";
                ConnectionCommand.fUpdateInsertDeleteData();
            }
            //if (ConnectionWithAccess.mNIK == "AP1")
            //    remove_records_for_period_before_t_from_ap1();
            ConnectionWithAccess.query = "delete from " + ConnectionWithAccess.tablename[05] + " where [title] = '' ";
            ConnectionCommand.fUpdateInsertDeleteData();
            if (ConnectionWithAccess.mNIK != "SJ1")
            {
                delete_01_missing_records_from_others();
            }
            fLoad_All_DataTables();
            objPleaseWait.Close();
        }

        private void delete_01_missing_records_from_others()
        {
            //ConnectionWithAccess.query = "Select f21.a_n, f21.s_a, f21.d_y, f1.a_n, f1.s_a, f1.d_y from " + ConnectionWithAccess.tablename[21] + " F21 Left outer join " + ConnectionWithAccess.tablename[1] + " F1 on f1.a_n =f21.a_n and f1.s_a = f21.s_a and  f1.d_y = f21.d_y Where f1.a_n is null and f1.s_a is null and f1.d_y is null";
            //ConnectionCommand.fUpdateInsertDeleteData();
            //DataTable dtD_N = ConnectionCommand.fGetDataTable();
            ConnectionWithAccess.query = "delete DISTINCTROW f21.* from " + ConnectionWithAccess.tablename[21] + " F21 Left outer join " + ConnectionWithAccess.tablename[1] + " F1 on f1.a_n = f21.a_n and f1.s_a = f21.s_a and  f1.d_y = f21.d_y Where f1.a_n is null and f1.s_a is null and f1.d_y is null";
            ConnectionCommand.fUpdateInsertDeleteData();
            ConnectionWithAccess.query = "delete DISTINCTROW f22.* from " + ConnectionWithAccess.tablename[22] + " F22 Left outer join " + ConnectionWithAccess.tablename[1] + " F1 on f1.a_n = f22.a_n and f1.s_a = f22.s_a and  f1.d_y = f22.d_y Where f1.a_n is null and f1.s_a is null and f1.d_y is null";
            ConnectionCommand.fUpdateInsertDeleteData();
            ConnectionWithAccess.query = "delete DISTINCTROW f23.* from " + ConnectionWithAccess.tablename[23] + " F23 Left outer join " + ConnectionWithAccess.tablename[1] + " F1 on f1.a_n = f23.a_n and f1.s_a = f23.s_a and  f1.d_y = f23.d_y Where f1.a_n is null and f1.s_a is null and f1.d_y is null";
            ConnectionCommand.fUpdateInsertDeleteData();
            ConnectionWithAccess.query = "delete DISTINCTROW f24.* from " + ConnectionWithAccess.tablename[24] + " F24 Left outer join " + ConnectionWithAccess.tablename[1] + " F1 on f1.a_n = f24.a_n and f1.s_a = f24.s_a and  f1.d_y = f24.d_y Where f1.a_n is null and f1.s_a is null and f1.d_y is null";
            ConnectionCommand.fUpdateInsertDeleteData();
            ConnectionWithAccess.query = "delete DISTINCTROW f25.* from " + ConnectionWithAccess.tablename[25] + " F25 Left outer join " + ConnectionWithAccess.tablename[1] + " F1 on f1.a_n = f25.a_n and f1.s_a = f25.s_a Where f1.a_n is null and f1.s_a is null";
            ConnectionCommand.fUpdateInsertDeleteData();
            ConnectionWithAccess.query = "delete DISTINCTROW f25.* from " + ConnectionWithAccess.tablename[25] + " F25 Left outer join " + ConnectionWithAccess.tablename[1] + " F1 on f1.a_n = f25.na_n and f1.s_a = f25.ns_a Where f1.a_n is null and f1.s_a is null";
            ConnectionCommand.fUpdateInsertDeleteData();
            ConnectionWithAccess.query = "delete DISTINCTROW f3.* from " + ConnectionWithAccess.tablename[03] + " F3 Left outer join " + ConnectionWithAccess.tablename[05] + " F5 on f5.[type] = f3.[type] and f5.item_code = f3.item_code Where f5.[type] is null and f5.item_code is null";
            ConnectionCommand.fUpdateInsertDeleteData();
            ConnectionWithAccess.query = "delete DISTINCTROW f16.* from " + ConnectionWithAccess.tablename[16] + " F16 Left outer join " + ConnectionWithAccess.tablename[05] + " F5 on f5.[type] = f16.[type] and f5.item_code = f16.item_code Where f5.[type] is null and f5.item_code is null";
            ConnectionCommand.fUpdateInsertDeleteData();
            ConnectionWithAccess.query = "delete DISTINCTROW f18.* from " + ConnectionWithAccess.tablename[18] + " F18 Left outer join " + ConnectionWithAccess.tablename[05] + " F5 on f5.[type] = f18.[type] and f5.item_code = f18.item_code Where f5.[type] is null and f5.item_code is null";
            ConnectionCommand.fUpdateInsertDeleteData();
            ConnectionWithAccess.query = "delete DISTINCTROW f26.* from " + ConnectionWithAccess.tablename[26] + " F26 Left outer join " + ConnectionWithAccess.tablename[05] + " F5 on f5.[type] = f26.[type] and f5.item_code = f26.item_code Where f5.[type] is null and f5.item_code is null";
            ConnectionCommand.fUpdateInsertDeleteData();
            ConnectionWithAccess.query = "delete DISTINCTROW f57.* from " + ConnectionWithAccess.tablename[57] + " F57 Left outer join " + ConnectionWithAccess.tablename[05] + " F5 on f5.[type] = f57.[type] and f5.item_code = f57.item_code Where f5.[type] is null and f5.item_code is null";
            ConnectionCommand.fUpdateInsertDeleteData();
            ConnectionWithAccess.query = "delete DISTINCTROW f70.* from " + ConnectionWithAccess.tablename[70] + " F70 Left outer join " + ConnectionWithAccess.tablename[05] + " F5 on f5.[type] = f70.[type] and f5.item_code = f70.item_code Where f5.[type] is null and f5.item_code is null";
            ConnectionCommand.fUpdateInsertDeleteData();
            ConnectionWithAccess.query = "delete DISTINCTROW f51.* from " + ConnectionWithAccess.tablename[51] + " F51 Left outer join " + ConnectionWithAccess.tablename[1] + " F1 on f1.a_n = f51.a_n and f1.s_a = f51.s_a Where f1.a_n is null and f1.s_a is null";
            ConnectionCommand.fUpdateInsertDeleteData();
        }

        private void DeleteBankTransferToBankErrorEntries()
        {
            //ConnectionWithAccess.query = "delete f23.PASS_DATE, f23.D_N, f1.[desc], f1.city, f23.bamt from " + ConnectionWithAccess.tablename[23] + " f23 inner join " + ConnectionWithAccess.tablename[1] + " f1 on f23.a_n = f1.a_n and f23.s_a = f1.s_a where prd = '" + ConnectionWithAccess.mprd + "' and b_t = '3' and f23.a_n like '%2011%' and f23.tran_d_c = 0";
            ConnectionWithAccess.query = "delete * from " + ConnectionWithAccess.tablename[23] +
            " where prd = '" + ConnectionWithAccess.mprd + "' and b_t = '3' and a_n like '2011%' and tran_d_c = 0";
            ConnectionCommand.fUpdateInsertDeleteData();
        }

        private void pb_calculator_Click(object sender, EventArgs e)
        {
            System.Diagnostics.Process.Start("calc");
        }

        private void pb_company_details_Click(object sender, EventArgs e)
        {
            if (chbPrivCompInE.Checked)
            {
                maintab.SelectedIndex = 4;
                maintab_Click(sender, e);
                subtabsettings.SelectedIndex = 2;
                subtabsettings_Click(sender, e);
                if (File.Exists(ConnectionWithAccess.mDataFile))
                    read_company_text_file();
            }
        }

        private void cb_change_master_account_name_Click(object sender, EventArgs e)
        {
            if (cb_change_master_account_name.Checked)
            {
                tbDesc.ReadOnly = false;
                tbCity.ReadOnly = false;
            }
            else
            {
                tbDesc.ReadOnly = true;
                tbCity.ReadOnly = true;
            }
        }

        private void pb_party_balance_Click(object sender, EventArgs e)
        {
            maintab.SelectedIndex = 3;
            maintab_Click(sender, e);
            subtabreports.SelectedIndex = 1;
            subtabreports_Click(sender, e);
        }

        private void pb_sale_report_Click(object sender, EventArgs e)
        {
            maintab.SelectedIndex = 3;
            maintab_Click(sender, e);
            subtabreports.SelectedIndex = 0;
            subtabreports_Click(sender, e);
            cbRepType.SelectedIndex = 0;
        }

        private void pb_purchase_report_Click(object sender, EventArgs e)
        {
            maintab.SelectedIndex = 3;
            maintab_Click(sender, e);
            subtabreports.SelectedIndex = 0;
            subtabreports_Click(sender, e);
            cbRepType.SelectedIndex = 1;
        }

        private void btn_import_latest_version_Click(object sender, EventArgs e)
        {
            PleaseWait objPleaseWait = new PleaseWait("Please wait downloading latest Setup");
            objPleaseWait.Show();
            Application.DoEvents();
            setup_filename = myExeDir.Substring(0, 3) + "sharp\\latest\\SHARP_setup";
            setup_filename += "_" + DateTime.Now.Day + "_" + DateTime.Now.Month + "_" + DateTime.Now.Year + "_" + DateTime.Now.TimeOfDay.Hours + "_" + DateTime.Now.TimeOfDay.Minutes + ".exe";
            ConnectionWithAccess.create_file_folder(setup_filename);
            FileDownloader.DownloadFileFromURLToPath("https://drive.google.com/open?id=0B6_3MAhBDc65bDJXQ3ltNWRPR00", setup_filename);
            objPleaseWait.Close();
            MessageBox.Show("Latest version downloaded at " + setup_filename);
        }

        private void btn_latest_exe_Click(object sender, EventArgs e)
        {
            PleaseWait objPleaseWait = new PleaseWait("Please wait downloading latest Exe");
            objPleaseWait.Show();
            Application.DoEvents();
            exe_filename = myExeDir.Substring(0, 3) + "sharp\\latest\\sharp accounting.exe";
            ConnectionWithAccess.create_file_folder(exe_filename);
            FileDownloader.DownloadFileFromURLToPath("https://drive.google.com/open?id=0B6_3MAhBDc65aEtYbGphMmRJdFk", exe_filename);
            objPleaseWait.Close();
            MessageBox.Show("Latest version downloaded at " + exe_filename);
            string latest_setup_exe;
            latest_setup_exe = myExeDir.Substring(0, 3) + "sharp\\get_latest_software.exe";
            if (File.Exists(latest_setup_exe))
            {
                Process.Start(latest_setup_exe);
                fDeleteCompanyInUseFile();
                login_user_time_out();
                System.Environment.Exit(1);
                System.Windows.Forms.Application.Exit();
                Application.Exit();
                this.Close();
            }
            else
            {
                MessageBox.Show("Sorry, Supported Latest_setup_exe File Not Found. Reinstall Setup & try Again");
            }
        }

        private void pb_emerg_stock_Click(object sender, EventArgs e)
        {
            PleaseWait objPleaseWait = new PleaseWait("Please wait Emerging Data");
            objPleaseWait.Show();
            Application.DoEvents();
            emerg_item_Stock();
            objPleaseWait.Close();
            text_to_display_on_top_function();
        }

        private void pb_send_bulk_sms_Click(object sender, EventArgs e)
        {
            PleaseWait objPleaseWait = new PleaseWait("Please wait Sending Bulk Sms");
            objPleaseWait.Show();
            Application.DoEvents();
            //SMS.SendSMS(tb_sms_mobilenumber.Text, rtb_sms_content.Text, "User Setting");
            //update_sms_table(tb_sms_mobilenumber.Text, rtb_sms_content.Text, "User Setting", SMS.sms_response);
            objPleaseWait.Close();
            //(string strMobileNo, string strMsg, string from_position, string response)
            //using (System.Net.WebClient client = new System.Net.WebClient()) ;
            //try
            //{
            //    string url = "http://www.smsjust.com/blank/sms/user/urlsms.php?username=sanjayailani&response=Y&pass=sanjay@1234&senderid=ANUPEG&dest_mobileno={0}&message={1}";
            //    //string result = client.DownloadString(url);
            //    //string result=Client
            //    //if (result.Contains("OK"))
            //    //    MessageBox.Show("Your message has been successfully Sent.", "Message", MessageBoxButtons.OK, MessageBoxIcon.Information);
            //    //else
            //    //    MessageBox.Show("Message send failuer.", "Message", MessageBoxButtons.OK, MessageBoxIcon.Information);
            //}

            //catch (Exception ex)
            //{
            //    MessageBox.Show(ex.Message, "Message", MessageBoxButtons.OK, MessageBoxIcon.Error);

            //}

        }

        private void prpurchaselistdg_Click(object sender, EventArgs e)
        {
            prdatetime.Value = Convert.ToDateTime(prpurchaselistdg.SelectedCells[0].Value);
            prdocno.Text = Convert.ToString(prpurchaselistdg.SelectedCells[1].Value);
            oldpurcreplacementdetails();
            //sale_replacement_item_filling();
            prpartycode.Enabled = false;
        }

        private void pr_acc_help_dgv_Click(object sender, EventArgs e)
        {

        }

        private void btn_notepad_Click(object sender, EventArgs e)
        {
            string filename = "Default";
            if (maintab.SelectedIndex == 1 && subtabDataEntry.SelectedIndex == 0)
                filename = "Sale";
            else if (maintab.SelectedIndex == 1 && subtabDataEntry.SelectedIndex == 1)
                filename = "Purchase";
            else if (maintab.SelectedIndex == 1 && subtabDataEntry.SelectedIndex == 2)
                filename = "Bank";
            else if (maintab.SelectedIndex == 1 && subtabDataEntry.SelectedIndex == 3)
                filename = "Cash";
            else if (maintab.SelectedIndex == 1 && subtabDataEntry.SelectedIndex == 4)
                filename = "Journal";
            else if (maintab.SelectedIndex == 1 && subtabDataEntry.SelectedIndex == 5)
                filename = "Additional";
            else if (maintab.SelectedIndex == 2 && subtabMasters.SelectedIndex == 0)
                filename = "Account";
            else if (maintab.SelectedIndex == 2 && subtabMasters.SelectedIndex == 1)
                filename = "Item";
            else if (maintab.SelectedIndex == 2 && subtabMasters.SelectedIndex == 2)
                filename = "Tax";
            else if (maintab.SelectedIndex == 2 && subtabMasters.SelectedIndex == 3)
                filename = "DayBook";
            else if (maintab.SelectedIndex == 2 && subtabMasters.SelectedIndex == 4)
                filename = "Period";
            else if (maintab.SelectedIndex == 2 && subtabMasters.SelectedIndex == 5)
                filename = "MastersAdditional";

            notepad_filename = ConnectionWithAccess.data_drive + "acc\\" + ConnectionWithAccess.mNIK + "\\excel Reports\\" + filename + ".txt";
            Process.Start("notepad.exe", notepad_filename);
        }

        private void pb_si_sendsms_Click(object sender, EventArgs e)
        {
            sendsms();
        }

        private void btnGenCustReport_Click(object sender, EventArgs e)
        {
            try
            {
                ConnectionWithAccess.query = "select a.Desc as [Name], a.PAN, a.aadhar_card as [Aadhar Card], a.gst_number as [GST #], b.o_mob as [Mobile1], b.r_mob as " +
                            " [Mobile2], b.email as [Email], b.isd as [ISD Code], b.std as [STD Code], b.phone1, b.phone12, b.phone2, b.phone22, b.fax " +
                            " from " + ConnectionWithAccess.tablename[1] + " a inner join " + ConnectionWithAccess.tablename[4] + " b on b.s_a = a.s_a " +
                            " where  a.a_n =  b.a_n and  a.a_n in ('2002', '4002') and (a.s_a <> '' and a.s_a <> '@@@') and (b.s_a <> '' and b.s_a <> '@@@') ";
                ConnectionCommand.accountHelp_datatable_Seperate(dgvCustomerList, "CustomerList");
                dgvCustomerList.Visible = true;
            }
            catch (Exception ex)
            {
            }
            finally
            {
                if (dgvCustomerList.Rows.Count > 0)
                    btnCustListToExcel.Visible = true;
                else
                    btnCustListToExcel.Visible = false;
            }
        }

        private void btnCustListToExcel_Click(object sender, EventArgs e)
        {
            if (dgvCustomerList.Rows.Count > 0)
            {
                string strexcel_filename = "Customer List as on " + DateTime.Now.Day + "_" + DateTime.Now.Month + "_" + DateTime.Now.Year + "_" + DateTime.Now.TimeOfDay.Hours + "_" + DateTime.Now.TimeOfDay.Minutes;
                strexcel_filename = ConnectionWithAccess.remove_filename_error(strexcel_filename);
                ConnectionWithAccess.export(dgvCustomerList, strexcel_filename);
            }
        }

        private void btnClearCustList_Click(object sender, EventArgs e)
        {
            dgvCustomerList.DataSource = null;
            dgvCustomerList.Visible = false;
            btnCustListToExcel.Visible = false;
        }

        private void btnGenerateChart_Click(object sender, EventArgs e)
        {
            GenerateChart();
        }

        private void btnClearChart_Click(object sender, EventArgs e)
        {
            ctProfitLoss.Visible = false;
        }

        private void btn_mix_sundry_debitors_Click(object sender, EventArgs e)
        {
            mix_reports_dgv.Visible = false;
            if (tbselacc.Text == "0 Selected" && tbreportcity.Text == "0 Selected" && tbreportitems.Text == "0 Selected" && tbreporttax.Text == "0 Selected")
                ConnectionWithAccess.query = "select f51.a_n, f51.s_a,f1.[desc] as [Desc], f1.city, f51.amt,f51.d_d from " + ConnectionWithAccess.tablename[51] + " f51 inner join " + ConnectionWithAccess.tablename[1] + " f1 on f51.a_n = f1.a_n and f51.s_a = f1.s_a where f51.prd = '" + ConnectionWithAccess.mprd + "' and f51.a_n = '" + raa_n.Text + "' and f51.s_a <> '@@@' and f51.amt > 0";
            else
            {
                if (tbselacc.Text != "0 Selected")
                    ConnectionWithAccess.query = "select f51.a_n, f51.s_a,f1.[desc] as [Desc], f1.city, f51.amt,f51.d_d from " + ConnectionWithAccess.tablename[51] + " f51 inner join " + ConnectionWithAccess.tablename[1] + " f1 on f51.a_n = f1.a_n and f51.s_a = f1.s_a where f51.prd = '" + ConnectionWithAccess.mprd + "' and f51.a_n = '" + raa_n.Text + "' and f51.s_a <> '@@@' and f1.[desc] in (" + selectedpartyname + " and f51.amt > 0)";
                else if (tbreportcity.Text != "0 Selected")
                    ConnectionWithAccess.query = "select f51.a_n, f51.s_a,f1.[desc] as [Desc], f1.city, f51.amt,f51.d_d from " + ConnectionWithAccess.tablename[51] + " f51 inner join " + ConnectionWithAccess.tablename[1] + " f1 on f51.a_n = f1.a_n and f51.s_a = f1.s_a where f51.prd = '" + ConnectionWithAccess.mprd + "' and f51.a_n = '" + raa_n.Text + "' and f51.s_a <> '@@@' and f1.city in (" + selectedcitylist + " and f51.amt > 0)";
                else if (tbreporttax.Text != "0 Selected")
                    ConnectionWithAccess.query = "select f51.a_n, f51.s_a,f1.[desc] as [Desc], f1.city, f51.amt,f51.d_d from " + ConnectionWithAccess.tablename[51] + " f51 inner join " + ConnectionWithAccess.tablename[1] + " f1 on f51.a_n = f1.a_n and f51.s_a = f1.s_a where f51.prd = '" + ConnectionWithAccess.mprd + "' and f51.a_n = '" + raa_n.Text + "' and f51.s_a <> '@@@' and f1.tx_code in (" + selectedtaxlist + " and f51.amt > 0)";
            }
            excel_filename = "Debitors Outsanding List_" + ConnectionWithAccess.mprd;
            //parameters_for_date_range(mix_dt_from.Text, mix_dt_to.Text);
            ConnectionCommand.accountHelp_datatable_Seperate(mix_reports_dgv, "SaleList", "[desc] ASC");
            fAdd_total_row(mix_reports_dgv, "amt", 4, "[desc] ASC");
            //fAdd_Sale_Report_Totals("d_d ASC");

            if (mix_reports_dgv.Rows.Count > 1)
            {
                mix_reports_dgv.Visible = true;
                mix_reports_dgv.DefaultCellStyle.Font = new System.Drawing.Font("Microsoft Sans Serif", 15);
                mix_reports_dgv.Columns[0].HeaderText = "A_N";
                mix_reports_dgv.Columns[1].HeaderText = "S_A";
                mix_reports_dgv.Columns[2].HeaderText = "Name";
                mix_reports_dgv.Columns[3].HeaderText = "City";
                mix_reports_dgv.Columns[4].HeaderText = "Amt";
                mix_reports_dgv.Columns[0].Width = 90;
                mix_reports_dgv.Columns[1].Width = 75;
                mix_reports_dgv.Columns[2].Width = 500;
                mix_reports_dgv.Columns[3].Width = 250;
                mix_reports_dgv.Columns[4].Width = 180;
                mix_reports_dgv.Columns[4].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;
                mix_reports_dgv.Columns[4].DefaultCellStyle.Format = "N2";
                mix_reports_dgv.AllowUserToResizeColumns = false;
                mix_reports_dgv.Columns[0].Visible = false;
                mix_reports_dgv.Columns[1].Visible = false;
                mix_reports_dgv.Columns[5].Visible = false;
                mix_reports_dgv.FirstDisplayedScrollingRowIndex = mix_reports_dgv.Rows.Count - 2;
                if (mix_reports_dgv.Rows.Count > 0)
                    excel_filename = "Mini Sale List as on " + ConnectionWithAccess.mprd + "_" + DateTime.Now.Day + "_" + DateTime.Now.Month + "_" + DateTime.Now.Year + "_" + DateTime.Now.TimeOfDay.Hours + "_" + DateTime.Now.TimeOfDay.Minutes;
                ConnectionWithAccess.export(mix_reports_dgv, excel_filename);
                //generate_sale_balance_report();
            }
        }

        private void btn_mix_debitors_advances_Click(object sender, EventArgs e)
        {
            mix_reports_dgv.Visible = false;
            if (tbselacc.Text == "0 Selected" && tbreportcity.Text == "0 Selected" && tbreportitems.Text == "0 Selected" && tbreporttax.Text == "0 Selected")
                ConnectionWithAccess.query = "select f51.a_n, f51.s_a,f1.[desc] as [Desc], f1.city, f51.amt,f51.d_d from " + ConnectionWithAccess.tablename[51] + " f51 inner join " + ConnectionWithAccess.tablename[1] + " f1 on f51.a_n = f1.a_n and f51.s_a = f1.s_a where f51.prd = '" + ConnectionWithAccess.mprd + "' and f51.a_n = '" + raa_n.Text + "' and f51.s_a <> '@@@' and f51.amt < 0";
            else
            {
                if (tbselacc.Text != "0 Selected")
                    ConnectionWithAccess.query = "select f51.a_n, f51.s_a,f1.[desc] as [Desc], f1.city, f51.amt,f51.d_d from " + ConnectionWithAccess.tablename[51] + " f51 inner join " + ConnectionWithAccess.tablename[1] + " f1 on f51.a_n = f1.a_n and f51.s_a = f1.s_a where f51.prd = '" + ConnectionWithAccess.mprd + "' and f51.a_n = '" + raa_n.Text + "' and f51.s_a <> '@@@' and f1.[desc] in (" + selectedpartyname + " and f51.amt < 0)";
                else if (tbreportcity.Text != "0 Selected")
                    ConnectionWithAccess.query = "select f51.a_n, f51.s_a,f1.[desc] as [Desc], f1.city, f51.amt,f51.d_d from " + ConnectionWithAccess.tablename[51] + " f51 inner join " + ConnectionWithAccess.tablename[1] + " f1 on f51.a_n = f1.a_n and f51.s_a = f1.s_a where f51.prd = '" + ConnectionWithAccess.mprd + "' and f51.a_n = '" + raa_n.Text + "' and f51.s_a <> '@@@' and f1.city in (" + selectedcitylist + " and f51.amt < 0)";
                else if (tbreporttax.Text != "0 Selected")
                    ConnectionWithAccess.query = "select f51.a_n, f51.s_a,f1.[desc] as [Desc], f1.city, f51.amt,f51.d_d from " + ConnectionWithAccess.tablename[51] + " f51 inner join " + ConnectionWithAccess.tablename[1] + " f1 on f51.a_n = f1.a_n and f51.s_a = f1.s_a where f51.prd = '" + ConnectionWithAccess.mprd + "' and f51.a_n = '" + raa_n.Text + "' and f51.s_a <> '@@@' and f1.tx_code in (" + selectedtaxlist + " and f51.amt < 0)";
            }
            excel_filename = "Debitors Outsanding List_" + ConnectionWithAccess.mprd;
            //parameters_for_date_range(mix_dt_from.Text, mix_dt_to.Text);
            ConnectionCommand.accountHelp_datatable_Seperate(mix_reports_dgv, "SaleList", "[desc] ASC");
            fAdd_total_row(mix_reports_dgv, "amt", 4, "[desc] ASC");
            //fAdd_Sale_Report_Totals("d_d ASC");

            if (mix_reports_dgv.Rows.Count > 1)
            {
                mix_reports_dgv.Visible = true;
                mix_reports_dgv.DefaultCellStyle.Font = new System.Drawing.Font("Microsoft Sans Serif", 15);
                mix_reports_dgv.Columns[0].HeaderText = "A_N";
                mix_reports_dgv.Columns[1].HeaderText = "S_A";
                mix_reports_dgv.Columns[2].HeaderText = "Name";
                mix_reports_dgv.Columns[3].HeaderText = "City";
                mix_reports_dgv.Columns[4].HeaderText = "Amt";
                mix_reports_dgv.Columns[0].Width = 90;
                mix_reports_dgv.Columns[1].Width = 75;
                mix_reports_dgv.Columns[2].Width = 500;
                mix_reports_dgv.Columns[3].Width = 250;
                mix_reports_dgv.Columns[4].Width = 180;
                mix_reports_dgv.Columns[4].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;
                mix_reports_dgv.Columns[4].DefaultCellStyle.Format = "N2";
                mix_reports_dgv.AllowUserToResizeColumns = false;
                mix_reports_dgv.Columns[0].Visible = false;
                mix_reports_dgv.Columns[1].Visible = false;
                mix_reports_dgv.Columns[5].Visible = false;
                mix_reports_dgv.FirstDisplayedScrollingRowIndex = mix_reports_dgv.Rows.Count - 2;
                if (mix_reports_dgv.Rows.Count > 0)
                    excel_filename = "Mini Sale List as on " + ConnectionWithAccess.mprd + "_" + DateTime.Now.Day + "_" + DateTime.Now.Month + "_" + DateTime.Now.Year + "_" + DateTime.Now.TimeOfDay.Hours + "_" + DateTime.Now.TimeOfDay.Minutes;
                ConnectionWithAccess.export(mix_reports_dgv, excel_filename);
                //generate_sale_balance_report();
            }
        }

        private void btn_mix_generate_Click(object sender, EventArgs e)
        {
            mix_reports_dgv.Visible = false;
            //DEBITOR'S OUTSTANDING DEBITOR'S ADVANCES CREDITOR'S OUTSTANDING CREDITOR'S ADVANCES 
            if (mix_reports_combo_box.SelectedItem.Equals("DEBITOR'S OUTSTANDING"))
            {
                if (tbselacc.Text == "0 Selected" && tbreportcity.Text == "0 Selected" && tbreportitems.Text == "0 Selected" && tbreporttax.Text == "0 Selected")
                    ConnectionWithAccess.query = "select f51.a_n, f51.s_a,f1.[desc] as [Desc], f1.city, f51.amt,f51.d_d from " + ConnectionWithAccess.tablename[51] + " f51 inner join " + ConnectionWithAccess.tablename[1] + " f1 on f51.a_n = f1.a_n and f51.s_a = f1.s_a where f51.prd = '" + ConnectionWithAccess.mprd + "' and f51.a_n = '" + tb_mix_a_n.Text + "' and f51.s_a <> '@@@' and f51.amt > 0";
                else
                {
                    if (tbselacc.Text != "0 Selected")
                        ConnectionWithAccess.query = "select f51.a_n, f51.s_a,f1.[desc] as [Desc], f1.city, f51.amt,f51.d_d from " + ConnectionWithAccess.tablename[51] + " f51 inner join " + ConnectionWithAccess.tablename[1] + " f1 on f51.a_n = f1.a_n and f51.s_a = f1.s_a where f51.prd = '" + ConnectionWithAccess.mprd + "' and f51.a_n = '" + tb_mix_a_n.Text + "' and f51.s_a <> '@@@' and f1.[desc] in (" + selectedpartyname + " and f51.amt > 0)";
                    else if (tbreportcity.Text != "0 Selected")
                        ConnectionWithAccess.query = "select f51.a_n, f51.s_a,f1.[desc] as [Desc], f1.city, f51.amt,f51.d_d from " + ConnectionWithAccess.tablename[51] + " f51 inner join " + ConnectionWithAccess.tablename[1] + " f1 on f51.a_n = f1.a_n and f51.s_a = f1.s_a where f51.prd = '" + ConnectionWithAccess.mprd + "' and f51.a_n = '" + tb_mix_a_n.Text + "' and f51.s_a <> '@@@' and f1.city in (" + selectedcitylist + " and f51.amt > 0)";
                    else if (tbreporttax.Text != "0 Selected")
                        ConnectionWithAccess.query = "select f51.a_n, f51.s_a,f1.[desc] as [Desc], f1.city, f51.amt,f51.d_d from " + ConnectionWithAccess.tablename[51] + " f51 inner join " + ConnectionWithAccess.tablename[1] + " f1 on f51.a_n = f1.a_n and f51.s_a = f1.s_a where f51.prd = '" + ConnectionWithAccess.mprd + "' and f51.a_n = '" + tb_mix_a_n.Text + "' and f51.s_a <> '@@@' and f1.tx_code in (" + selectedtaxlist + " and f51.amt > 0)";
                }
                excel_filename = "Debitors Outsanding List_" + ConnectionWithAccess.mprd;
                ConnectionCommand.accountHelp_datatable_Seperate(mix_reports_dgv, "SaleList", "[desc] ASC");
                fAdd_total_row(mix_reports_dgv, "amt", 4, "[desc] ASC");
            }
            else if (mix_reports_combo_box.SelectedItem.Equals("DEBITOR'S ADVANCES"))
            {
                if (tbselacc.Text == "0 Selected" && tbreportcity.Text == "0 Selected" && tbreportitems.Text == "0 Selected" && tbreporttax.Text == "0 Selected")
                    ConnectionWithAccess.query = "select f51.a_n, f51.s_a,f1.[desc] as [Desc], f1.city, (f51.amt * -1),f51.d_d from " + ConnectionWithAccess.tablename[51] + " f51 inner join " + ConnectionWithAccess.tablename[1] + " f1 on f51.a_n = f1.a_n and f51.s_a = f1.s_a where f51.prd = '" + ConnectionWithAccess.mprd + "' and f51.a_n = '" + tb_mix_a_n.Text + "' and f51.s_a <> '@@@' and f51.amt < 0";
                else
                {
                    if (tbselacc.Text != "0 Selected")
                        ConnectionWithAccess.query = "select f51.a_n, f51.s_a,f1.[desc] as [Desc], f1.city, (f51.amt * -1),f51.d_d from " + ConnectionWithAccess.tablename[51] + " f51 inner join " + ConnectionWithAccess.tablename[1] + " f1 on f51.a_n = f1.a_n and f51.s_a = f1.s_a where f51.prd = '" + ConnectionWithAccess.mprd + "' and f51.a_n = '" + tb_mix_a_n.Text + "' and f51.s_a <> '@@@' and f1.[desc] in (" + selectedpartyname + " and f51.amt > 0)";
                    else if (tbreportcity.Text != "0 Selected")
                        ConnectionWithAccess.query = "select f51.a_n, f51.s_a,f1.[desc] as [Desc], f1.city, (f51.amt * -1),f51.d_d from " + ConnectionWithAccess.tablename[51] + " f51 inner join " + ConnectionWithAccess.tablename[1] + " f1 on f51.a_n = f1.a_n and f51.s_a = f1.s_a where f51.prd = '" + ConnectionWithAccess.mprd + "' and f51.a_n = '" + tb_mix_a_n.Text + "' and f51.s_a <> '@@@' and f1.city in (" + selectedcitylist + " and f51.amt > 0)";
                    else if (tbreporttax.Text != "0 Selected")
                        ConnectionWithAccess.query = "select f51.a_n, f51.s_a,f1.[desc] as [Desc], f1.city, (f51.amt * -1),f51.d_d from " + ConnectionWithAccess.tablename[51] + " f51 inner join " + ConnectionWithAccess.tablename[1] + " f1 on f51.a_n = f1.a_n and f51.s_a = f1.s_a where f51.prd = '" + ConnectionWithAccess.mprd + "' and f51.a_n = '" + tb_mix_a_n.Text + "' and f51.s_a <> '@@@' and f1.tx_code in (" + selectedtaxlist + " and f51.amt > 0)";
                }
                excel_filename = "Debitors Outsanding List_" + ConnectionWithAccess.mprd;
                ConnectionCommand.accountHelp_datatable_Seperate(mix_reports_dgv, "SaleList", "[desc] ASC"); fAdd_total_row(mix_reports_dgv, "amt", 4, "[desc] ASC");
                fAdd_total_row(mix_reports_dgv, "amt", 4, "[desc] ASC");
            }
            else if (mix_reports_combo_box.SelectedItem.Equals("CREDITOR'S OUTSTANDING"))
            {
                if (tbselacc.Text == "0 Selected" && tbreportcity.Text == "0 Selected" && tbreportitems.Text == "0 Selected" && tbreporttax.Text == "0 Selected")
                    ConnectionWithAccess.query = "select f51.a_n, f51.s_a,f1.[desc] as [Desc], f1.city, (f51.amt * -1),f51.d_d from " + ConnectionWithAccess.tablename[51] + " f51 inner join " + ConnectionWithAccess.tablename[1] + " f1 on f51.a_n = f1.a_n and f51.s_a = f1.s_a where f51.prd = '" + ConnectionWithAccess.mprd + "' and f51.a_n = '" + tb_mix_a_n.Text + "' and f51.s_a <> '@@@' and f51.amt < 0";
                else
                {
                    if (tbselacc.Text != "0 Selected")
                        ConnectionWithAccess.query = "select f51.a_n, f51.s_a,f1.[desc] as [Desc], f1.city, (f51.amt * -1),f51.d_d from " + ConnectionWithAccess.tablename[51] + " f51 inner join " + ConnectionWithAccess.tablename[1] + " f1 on f51.a_n = f1.a_n and f51.s_a = f1.s_a where f51.prd = '" + ConnectionWithAccess.mprd + "' and f51.a_n = '" + tb_mix_a_n.Text + "' and f51.s_a <> '@@@' and f1.[desc] in (" + selectedpartyname + " and f51.amt > 0)";
                    else if (tbreportcity.Text != "0 Selected")
                        ConnectionWithAccess.query = "select f51.a_n, f51.s_a,f1.[desc] as [Desc], f1.city, (f51.amt * -1),f51.d_d from " + ConnectionWithAccess.tablename[51] + " f51 inner join " + ConnectionWithAccess.tablename[1] + " f1 on f51.a_n = f1.a_n and f51.s_a = f1.s_a where f51.prd = '" + ConnectionWithAccess.mprd + "' and f51.a_n = '" + tb_mix_a_n.Text + "' and f51.s_a <> '@@@' and f1.city in (" + selectedcitylist + " and f51.amt > 0)";
                    else if (tbreporttax.Text != "0 Selected")
                        ConnectionWithAccess.query = "select f51.a_n, f51.s_a,f1.[desc] as [Desc], f1.city, (f51.amt * -1),f51.d_d from " + ConnectionWithAccess.tablename[51] + " f51 inner join " + ConnectionWithAccess.tablename[1] + " f1 on f51.a_n = f1.a_n and f51.s_a = f1.s_a where f51.prd = '" + ConnectionWithAccess.mprd + "' and f51.a_n = '" + tb_mix_a_n.Text + "' and f51.s_a <> '@@@' and f1.tx_code in (" + selectedtaxlist + " and f51.amt > 0)";
                }
                excel_filename = "Debitors Outsanding List_" + ConnectionWithAccess.mprd;
                ConnectionCommand.accountHelp_datatable_Seperate(mix_reports_dgv, "SaleList", "[desc] ASC");
                fAdd_total_row(mix_reports_dgv, "amt", 4, "[desc] ASC");
            }
            else if (mix_reports_combo_box.SelectedItem.Equals("CREDITOR'S ADVANCES"))
            {
                if (tbselacc.Text == "0 Selected" && tbreportcity.Text == "0 Selected" && tbreportitems.Text == "0 Selected" && tbreporttax.Text == "0 Selected")
                    ConnectionWithAccess.query = "select f51.a_n, f51.s_a,f1.[desc] as [Desc], f1.city, f51.amt,f51.d_d from " + ConnectionWithAccess.tablename[51] + " f51 inner join " + ConnectionWithAccess.tablename[1] + " f1 on f51.a_n = f1.a_n and f51.s_a = f1.s_a where f51.prd = '" + ConnectionWithAccess.mprd + "' and f51.a_n = '" + tb_mix_a_n.Text + "' and f51.s_a <> '@@@' and f51.amt > 0";
                else
                {
                    if (tbselacc.Text != "0 Selected")
                        ConnectionWithAccess.query = "select f51.a_n, f51.s_a,f1.[desc] as [Desc], f1.city, f51.amt,f51.d_d from " + ConnectionWithAccess.tablename[51] + " f51 inner join " + ConnectionWithAccess.tablename[1] + " f1 on f51.a_n = f1.a_n and f51.s_a = f1.s_a where f51.prd = '" + ConnectionWithAccess.mprd + "' and f51.a_n = '" + tb_mix_a_n.Text + "' and f51.s_a <> '@@@' and f1.[desc] in (" + selectedpartyname + " and f51.amt > 0)";
                    else if (tbreportcity.Text != "0 Selected")
                        ConnectionWithAccess.query = "select f51.a_n, f51.s_a,f1.[desc] as [Desc], f1.city, f51.amt,f51.d_d from " + ConnectionWithAccess.tablename[51] + " f51 inner join " + ConnectionWithAccess.tablename[1] + " f1 on f51.a_n = f1.a_n and f51.s_a = f1.s_a where f51.prd = '" + ConnectionWithAccess.mprd + "' and f51.a_n = '" + tb_mix_a_n.Text + "' and f51.s_a <> '@@@' and f1.city in (" + selectedcitylist + " and f51.amt > 0)";
                    else if (tbreporttax.Text != "0 Selected")
                        ConnectionWithAccess.query = "select f51.a_n, f51.s_a,f1.[desc] as [Desc], f1.city, f51.amt,f51.d_d from " + ConnectionWithAccess.tablename[51] + " f51 inner join " + ConnectionWithAccess.tablename[1] + " f1 on f51.a_n = f1.a_n and f51.s_a = f1.s_a where f51.prd = '" + ConnectionWithAccess.mprd + "' and f51.a_n = '" + tb_mix_a_n.Text + "' and f51.s_a <> '@@@' and f1.tx_code in (" + selectedtaxlist + " and f51.amt > 0)";
                }
                excel_filename = "Debitors Outsanding List_" + ConnectionWithAccess.mprd;
                ConnectionCommand.accountHelp_datatable_Seperate(mix_reports_dgv, "SaleList", "[desc] ASC");
                fAdd_total_row(mix_reports_dgv, "amt", 4, "[desc] ASC");
            }
            else if (mix_reports_combo_box.SelectedItem.Equals("ITEM'S CLOSING STOCK"))
            {
                ConnectionWithAccess.query = "select [type], item_code, [title],packing,box,price,clo_stk,cat,igst_per,hsn_code from " + ConnectionWithAccess.tablename[05] + " where clo_stk <> 0";
                ConnectionCommand.accountHelp_datatable_Seperate(mix_reports_dgv, "SaleList", "[title] ASC");
                excel_filename = "ITEMS_CLOSING_LIST_OF_" + ConnectionWithAccess.mprd;
            }
            else if (mix_reports_combo_box.SelectedItem.Equals("OMS PURCHASE LIST"))
            {
                ConnectionWithAccess.query = "select f22.D_D, f22.D_N, f1.[desc] as [Desc], f1.city,f1.state, f1.gst_number, f22.gamt, f22.d_c,f22.a_n,f22.s_a from " + ConnectionWithAccess.tablename[22] + " f22 inner join " + ConnectionWithAccess.tablename[1] + " f1 on f22.a_n = f1.a_n and f22.s_a = f1.s_a where f22.prd = '" + ConnectionWithAccess.mprd + "'";
                ConnectionCommand.accountHelp_datatable_Seperate(mix_reports_dgv, "OMS PURCHASE LIST", "d_d,d_n");
                filter_oms_purchase();
                excel_filename = "OMS PURCHASE LIST_OF_" + ConnectionWithAccess.mprd;
            }
            if (mix_reports_dgv.Rows.Count > 1)
            {
                mix_reports_dgv.Visible = true;
                //mix_reports_dgv.DefaultCellStyle.Font = new System.Drawing.Font("Microsoft Sans Serif", 15);
                //mix_reports_dgv.Columns[0].HeaderText = "A_N";
                //mix_reports_dgv.Columns[1].HeaderText = "S_A";
                //mix_reports_dgv.Columns[2].HeaderText = "Name";
                //mix_reports_dgv.Columns[3].HeaderText = "City";
                //mix_reports_dgv.Columns[4].HeaderText = "Amt";
                //mix_reports_dgv.Columns[0].Width = 90;
                //mix_reports_dgv.Columns[1].Width = 75;
                //mix_reports_dgv.Columns[2].Width = 500;
                //mix_reports_dgv.Columns[3].Width = 250;
                //mix_reports_dgv.Columns[4].Width = 180;
                //mix_reports_dgv.Columns[4].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;
                //mix_reports_dgv.Columns[4].DefaultCellStyle.Format = "N2";
                //mix_reports_dgv.AllowUserToResizeColumns = false;
                //mix_reports_dgv.Columns[0].Visible = false;
                //mix_reports_dgv.Columns[1].Visible = false;
                //mix_reports_dgv.Columns[5].Visible = false;
                mix_reports_dgv.FirstDisplayedScrollingRowIndex = mix_reports_dgv.Rows.Count - 2;

                ConnectionWithAccess.export(mix_reports_dgv, excel_filename);
                //generate_sale_balance_report();
            }
        }

        private void btnGenerateOutstandingReport_Click(object sender, EventArgs e)
        {
            btnGenerateOutstandingReport.Visible = false;
            temporary_list_1.Clear();
            temporary_list_2.Clear();
            temporary_list_3.Clear();
            PleaseWait objPleaseWait = new PleaseWait("Please wait Collecting Data");
            objPleaseWait.Show();
            Application.DoEvents();
            ConnectionWithAccess.ma_n = get_a_n_from_d_c("S", Convert.ToInt32(rodbc.Text));
            DataTable dtDataOutstanding = get_list_of_debitors_outstanding_accounts(ConnectionWithAccess.mprd);
            if (chkBill.Checked || cb_outstanding_bills.Checked)
            {
                for (array_counter1 = 0; array_counter1 < dtDataOutstanding.Rows.Count; array_counter1++)
                //for (array_counter1 = 0; array_counter1 < 20; array_counter1++)
                {
                    //var cellArray = temporary_list_1[array_counter1].Split(new[] { ',' });
                    ConnectionWithAccess.ms_a = dtDataOutstanding.Rows[array_counter1][2].ToString();
                    if (Convert.ToSingle(dtDataOutstanding.Rows[array_counter1][3].ToString()) > 0)
                    {
                        extract_outstanding_details_of_accounts(RepTo.Value.ToString());
                        if (array_counter1 == 31)
                            temp_word2 = "";
                    }
                }
                generate_outstanding_list_with_invoices(dtDataOutstanding);
            }
            else
                generate_outstanding_list_only(dtDataOutstanding);
            atbpreview_Click(sender, e);
            move_cursor_to_button_position("atbcancel");
            objPleaseWait.Close();
            btnGenerateOutstandingReport.Visible = true;

        }

        private void so_party_help_Click(object sender, EventArgs e)
        {
            PleaseWait objPleaseWait = new PleaseWait("Please wait Collecting Data");
            objPleaseWait.Show();
            Application.DoEvents();
            try
            {
                int selectedrowindex = so_party_help.SelectedCells[0].RowIndex;
                if (maintab.SelectedIndex == 1 && subtabDataEntry.SelectedIndex == 0 && subtabsale.SelectedIndex == 2)
                {
                    bsoPartyChangeIgnore = true;
                    sopartycode.Text = Convert.ToString(so_party_help.CurrentRow.Cells[0].Value);
                    socity.Text = Convert.ToString(so_party_help.CurrentRow.Cells[1].Value);
                    soa_n.Text = Convert.ToString(so_party_help.CurrentRow.Cells[2].Value);
                    sos_a.Text = Convert.ToString(so_party_help.CurrentRow.Cells[3].Value);
                    sod_y.Text = "@@@";
                    get_account_details_from_04(soa_n.Text, sos_a.Text);
                    //fill_transport(soa_n.Text, socity.Text, sotransport);
                    sotransport.Text = account_detail_from_04[30];
                }
                else if (maintab.SelectedIndex == 1 && subtabDataEntry.SelectedIndex == 0 && subtabsale.SelectedIndex == 1)
                {

                    sopartycode.Text = Convert.ToString(so_party_help.CurrentRow.Cells[0].Value);
                    //socity.Text = Convert.ToString(so_party_help.Rows[selectedrowindex].Cells[1].Value);
                    soa_n.Text = Convert.ToString(so_party_help.CurrentRow.Cells[2].Value);
                    sos_a.Text = Convert.ToString(so_party_help.CurrentRow.Cells[3].Value);
                }
                populate_screen();
                if (sotaxcode.Text != "")
                    get_tax_desc_from_dc("S", sodbc.SelectedValue.ToString(), Convert.ToInt32(sotaxcode.Text));
                show_images();
                so_party_help.Visible = false;
                soitemlist.Enabled = true;
            }
            catch (Exception ex)
            {

            }
            finally
            {
                bsoPartyChangeIgnore = false;
            }
            objPleaseWait.Close();
        }

        private void btnBankExcelClear_Click(object sender, EventArgs e)
        {
            dgvBankExcelUpload.DataSource = null;
            pnlBankExcel.Visible = false;
            gb_bank_details.Visible = false;
        }

        DataTable dtBankDataAll = null;

        private void btnBankExcelImport_Click(object sender, EventArgs e)
        {
            //btnBankExcelImport.Enabled = false;
            //DataTable dtBank = null;
            //pnlBankExcel.Visible = false;
            //string strBankExcelFileName = string.Empty;
            //OpenFileDialog openFileDialog = new OpenFileDialog();
            //PleaseWait objPleaseWait = new PleaseWait("Please wait Collecting Data..");
            //objPleaseWait.Show();
            //Application.DoEvents();
            ////openFileDialog.InitialDirectory = Environment.GetFolderPath(Environment.SpecialFolder.Personal);
            //openFileDialog.Filter = "Text Files (*.xls)|*.xls|All Files (*.*)|*.*";
            //if (openFileDialog.ShowDialog(this) == DialogResult.OK)
            //{
            //    strBankExcelFileName = openFileDialog.FileName;
            //}

            //if (!string.IsNullOrEmpty(strBankExcelFileName))
            //{
            //    dtBank = ExcelToDataTable(strBankExcelFileName);
            //    if (dtBank != null && dtBank.Rows.Count > 0)
            //    {
            //        //dgvBankExcelUpload.AutoGenerateColumns = true;
            //        dgvBankExcelUpload.AutoGenerateColumns = false;
            //        dgvBankExcelUpload.DataSource = dtBank;

            //        get_account_names_from_access_in_bank_dgv();
            //        dgvBankExcelUpload.Visible = true;
            //        pnlBankExcel.Visible = true;

            //    }
            //}
            //objPleaseWait.Close();
            gb_bank_details.Visible = false;
            dtBankDataAll = fGetExcelData_with_Account_names_colour();
            if (dtBankDataAll != null && dtBankDataAll.Rows.Count > 0)
            {
                dgvBankExcelUpload.AutoGenerateColumns = false;
                dgvBankExcelUpload.DataSource = dtBankDataAll;
                dgvBankExcelUpload.Visible = true;
                pnlBankExcel.Visible = true;

            }
        }

        private void dgvBankExcelAccName_Click(object sender, EventArgs e)
        {
            bea_n.Text = dgvBankExcelAccName.CurrentRow.Cells[2].Value.ToString();
            bes_a.Text = Convert.ToString(dgvBankExcelAccName.CurrentRow.Cells[3].Value);
            bed_y.Text = Convert.ToString(dgvBankExcelAccName.CurrentRow.Cells[5].Value);
            txtBankAccountName.Text = Convert.ToString(dgvBankExcelAccName.CurrentRow.Cells[0].Value);
            dgvBankExcelAccName.Visible = false;
            move_cursor_to_button_position("atbsave");
        }

        private void btn_internal_transfer_Click(object sender, EventArgs e)
        {
            try
            {
                string strPeriod = ConnectionWithAccess.mprd;
                string strd_c = cb_BU_from_dc.SelectedValue.ToString();
                string strTran_d_c = "0";
                if (cb_BU_from_dc.SelectedValue.ToString() != cb_BU_to_dc.SelectedValue.ToString())
                    strTran_d_c = cb_BU_to_dc.SelectedValue.ToString();
                string strr_p = "4"; //dgRow.Cells[2].Value.ToString();
                string strb_t = "3"; // dgRow.Cells[2].Value.ToString();
                string strd_n = string.Empty;// dgRow.Cells[2].Value.ToString();
                string strd_d = dgvBankExcelUpload.CurrentRow.Cells[1].Value.ToString();
                string stra_n = bank_from_a_n.Text;
                string strs_a = bank_from_s_a.Text;
                double bamt = 0;
                double debitAmount = Convert.ToDouble(dgvBankExcelUpload.CurrentRow.Cells["DebitAmt"].Value.ToString());
                double creditAmount = Convert.ToDouble(dgvBankExcelUpload.CurrentRow.Cells["CreditAmt"].Value.ToString());
                string strPassDate = dgvBankExcelUpload.CurrentRow.Cells["ValueDate"].Value.ToString();

                strd_d = strPassDate.Substring(0, strPassDate.IndexOf(" "));
                strPassDate = strPassDate.Substring(0, strPassDate.IndexOf(" "));

                if (debitAmount > 0)
                {
                    bamt = -debitAmount;
                    strr_p = "4";
                }
                else if (creditAmount > 0)
                {
                    bamt = -creditAmount;
                    //strr_p = "2";
                }
                ConnectionWithAccess.query = "select max(D_N) + 1 from " + ConnectionWithAccess.tablename[23] + " where prd = '" + ConnectionWithAccess.mprd + "' and d_c = " + cb_BU_from_dc.SelectedValue.ToString() + " and d_d = @d_d_date";
                search_on_particular_date_in_select_query("@d_d_date", Convert.ToDateTime(strPassDate));
                DataTable dtD_N = ConnectionCommand.fGetDataTable();
                if (dtD_N != null && dtD_N.Rows.Count > 0)
                {
                    strd_n = dtD_N.Rows[0][0].ToString();
                    if (strd_n.Trim() == "")
                        strd_n = "1";
                }
                if (debitAmount > 0)
                    ConnectionWithAccess.query = "select * from " + ConnectionWithAccess.tablename[23] + " where prd = '" + ConnectionWithAccess.mprd + "' and d_c = " + cb_BU_from_dc.SelectedValue.ToString() + " and tran_d_c = " + cb_BU_to_dc.SelectedValue.ToString() + " and bamt = " + bamt.ToString() + " and pass_date = @PassDate ";
                else if (creditAmount > 0)
                    ConnectionWithAccess.query = "select * from " + ConnectionWithAccess.tablename[23] + " where prd = '" + ConnectionWithAccess.mprd + "' and tran_d_c = " + cb_BU_from_dc.SelectedValue.ToString() + " and d_c = " + cb_BU_to_dc.SelectedValue.ToString() + " and bamt = " + bamt.ToString() + " and pass_date = @PassDate ";
                //ConnectionWithAccess.query = "select * from " + ConnectionWithAccess.tablename[23] + " where prd = '" + ConnectionWithAccess.mprd + "' and d_c = " + cb_BU_from_dc.SelectedValue.ToString() + " and tran_d_c = " + cb_BU_to_dc.SelectedValue.ToString() + " and bamt = " + bamt.ToString();
                List<ConnectionWithAccess.QueryParams> objParams = new List<ConnectionWithAccess.QueryParams>();
                ConnectionWithAccess.QueryParams ParamFrom = new ConnectionWithAccess.QueryParams();
                ParamFrom.paramName = "@PassDate";
                ParamFrom.paramValue = Convert.ToDateTime(strPassDate);
                objParams.Add(ParamFrom);
                ConnectionWithAccess.QueryParamList = objParams;
                DataTable dtBankData = ConnectionCommand.fGetDataTable();
                if (dtBankData == null || (dtBankData != null && dtBankData.Rows.Count == 0))
                {
                    //Insert only if data was not entered earlier
                    if (debitAmount > 0)
                    {
                        ConnectionWithAccess.query = "insert into " + ConnectionWithAccess.tablename[23] + " (prd, [d_c], [Tran_d_c],  [r_p], b_t, d_n, d_d, a_n,s_a,d_y,bamt, pass_date) " +
                            " values('" + strPeriod + "', '" + strd_c + "','" + strTran_d_c + "', '" + strr_p + "',  '" + strb_t + "', '" + strd_n + "', @d_d_date, '" + stra_n + "', '@@@', '@@@', " + bamt.ToString() + ", @PassDate )";
                    }
                    else if (creditAmount > 0)
                    {
                        ConnectionWithAccess.query = "insert into " + ConnectionWithAccess.tablename[23] + " (prd, [d_c], [Tran_d_c],  [r_p], b_t, d_n, d_d, a_n,s_a,d_y,bamt, pass_date) " +
                           " values('" + strPeriod + "', '" + strTran_d_c + "','" + strd_c + "', '" + strr_p + "',  '" + strb_t + "', '" + strd_n + "', @d_d_date, '" + stra_n + "', '@@@', '@@@', " + bamt.ToString() + ", @PassDate )";
                    }
                    List<ConnectionWithAccess.QueryParams> objParams1 = new List<ConnectionWithAccess.QueryParams>();
                    ConnectionWithAccess.QueryParams ParamFrom1 = new ConnectionWithAccess.QueryParams();
                    ParamFrom1.paramName = "@PassDate";
                    ParamFrom1.paramValue = Convert.ToDateTime(strPassDate);
                    objParams1.Add(ParamFrom1);
                    ConnectionWithAccess.QueryParams ParamFrom2 = new ConnectionWithAccess.QueryParams();
                    ParamFrom2.paramName = "@d_d_date";
                    ParamFrom2.paramValue = Convert.ToDateTime(strPassDate);
                    objParams1.Add(ParamFrom2);
                    ConnectionWithAccess.QueryParamList = objParams1;

                    ConnectionCommand.fUpdateInsertDeleteData();
                    get_account_details_from_01(stra_n, strs_a);
                    dgvBankExcelUpload.CurrentRow.Cells["a_n"].Value = stra_n;
                    dgvBankExcelUpload.CurrentRow.Cells["s_a"].Value = strs_a;
                    //dgvBankExcelUpload.CurrentRow.Cells["BANK_DESC"].Value = account_detail_from_01[4];
                    //dgvBankExcelUpload.CurrentRow.Cells["BANK_CITY"].Value = account_detail_from_01[8];
                    dgvBankExcelUpload.CurrentRow.Cells["bank_excel_d_c"].Value = Convert.ToInt32(strd_c);
                    dgvBankExcelUpload.CurrentRow.Cells["bank_excel_d_n"].Value = strd_n;
                    dgvBankExcelUpload.CurrentRow.Cells["bank_excel_r_p"].Value = strr_p;
                    get_account_details_from_01(bank_to_a_n.Text, bank_to_s_a.Text);
                    dgvBankExcelUpload.CurrentRow.Cells["BANK_DESC"].Value = account_detail_from_01[4];

                    dgvBankExcelUpload.CurrentRow.DefaultCellStyle.BackColor = Color.Green;
                    // dgvBankExcelUpload.CurrentRow.Cells[0].che
                }
                else
                {
                    dgvBankExcelUpload.CurrentRow.DefaultCellStyle.BackColor = Color.Blue;
                    //MessageBox.Show("Bank Record already exist!");
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        private void btn_add_delivery_account_Click(object sender, EventArgs e)
        {
            btn_add_delivery_account.Visible = false;
            tbdelivery.Enabled = true;
            tbdelivery_city.Enabled = true;
            clear_all_master_account_screen_fields();
        }

        private void sr_party_help_Click(object sender, EventArgs e)
        {
            PleaseWait objPleaseWait = new PleaseWait("Please wait Collecting Data");
            objPleaseWait.Show();
            Application.DoEvents();
            try
            {
                bsrPartyChangeIgnore = true;
                rowIndex = sr_party_help.CurrentCell.RowIndex;
                srpartycode.Text = Convert.ToString(sr_party_help.Rows[rowIndex].Cells[0].Value);
                srcity.Text = Convert.ToString(sr_party_help.Rows[rowIndex].Cells[1].Value);
                sra_n.Text = Convert.ToString(sr_party_help.Rows[rowIndex].Cells[2].Value);
                srs_a.Text = Convert.ToString(sr_party_help.Rows[rowIndex].Cells[3].Value);
                srd_y.Text = "@@@";
                get_account_details_from_04(sra_n.Text, srs_a.Text);
                //fill_transport(sra_n.Text, srcity.Text, srtransport);
                srtransport.Text = account_detail_from_04[30];
                populate_screen();
                show_images();
                sr_party_help.Visible = false;
                sritemlist.Enabled = true;
            }
            catch (Exception ex)
            {

            }
            finally
            {
                bsrPartyChangeIgnore = false;
            }
            objPleaseWait.Close();
            siitemlist.Enabled = true;
        }

        private void btn_delete_period_data_Click(object sender, EventArgs e)
        {
            ConnectionWithAccess.query = "delete from " + ConnectionWithAccess.tablename[03];
            ConnectionCommand.fUpdateInsertDeleteData();
            ConnectionWithAccess.query = "delete from " + ConnectionWithAccess.tablename[21] + " where d_n <> 999999";
            ConnectionCommand.fUpdateInsertDeleteData();
            ConnectionWithAccess.query = "delete from " + ConnectionWithAccess.tablename[22] + " where d_n <> 999999";
            ConnectionCommand.fUpdateInsertDeleteData();
            ConnectionWithAccess.query = "delete from " + ConnectionWithAccess.tablename[23] + " where d_n <> 999999";
            ConnectionCommand.fUpdateInsertDeleteData();
            ConnectionWithAccess.query = "delete from " + ConnectionWithAccess.tablename[24] + " where d_n <> 999999";
            ConnectionCommand.fUpdateInsertDeleteData();
            ConnectionWithAccess.query = "delete from " + ConnectionWithAccess.tablename[25] + " where d_n <> 999999";
            ConnectionCommand.fUpdateInsertDeleteData();
            ConnectionWithAccess.query = "delete from " + ConnectionWithAccess.tablename[30] + " where d_n <> 999999";
            ConnectionCommand.fUpdateInsertDeleteData();
            ConnectionWithAccess.query = "delete from " + ConnectionWithAccess.tablename[50] + " where prd > 'A'";
            ConnectionCommand.fUpdateInsertDeleteData();
            ConnectionWithAccess.query = "delete from " + ConnectionWithAccess.tablename[51] + " where prd <> '@'";
            ConnectionCommand.fUpdateInsertDeleteData();
        }

        private void btn_common_search_Click(object sender, EventArgs e)
        {
            if (!string.IsNullOrEmpty(tb_common_search.Text.Trim()))
            {
                DataSet dsResults = fSearchAll(tb_common_search.Text.Trim());
                if (dsResults != null && dsResults.Tables.Count > 0)
                {
                    this.Text = "Please wait exporting results to Excel...";
                    string strExcelFilePath = ConnectionCommand.ExportDataSetToExcel(dsResults);
                    text_to_display_on_top_function();
                    MessageBox.Show("Search Results exported to Excel file at " + strExcelFilePath);
                }
            }
        }

        private void btn_error_list_Click(object sender, EventArgs e)
        {
            gst_last_month_credit_debit_amount = 0;
            gst_debit_credit_amount = 0;
            gst_amount_list.Clear();
            for (row_counter = 0; row_counter <= 24; row_counter++)
            {
                gst_amount_list.Add("0.00");
            }
            temporary_list_array.Clear();
            actual_line_number_of_page = 0;
            report_filename = ConnectionWithAccess.data_drive + "acc\\" + ConnectionWithAccess.mNIK + "\\reports\\" + ConnectionWithAccess.mNIK + "_gst_" + ConnectionWithAccess.mprd + "_error_list_report";
            if (chb_add_datetime_in_output.Checked)
                report_filename += "_" + DateTime.Now.Day + "_" + DateTime.Now.Month + "_" + DateTime.Now.Year + "_" + DateTime.Now.TimeOfDay.Hours + "_" + DateTime.Now.TimeOfDay.Minutes;
            report_filename += ".pdf";
            //report_filename = ConnectionWithAccess.remove_filename_error(report_filename);
            ConnectionWithAccess.create_file_folder(report_filename);
            doc1 = new Document(PageSize.A4, 15, 10, 10, 20);

            FileStream FS1 = File.Create(report_filename);
            writer = PdfWriter.GetInstance(doc1, FS1);
            doc1.Open();
            current_pdf_page_number = 1;
            require_header_footer = false;
            Paragraph para = new Paragraph("");
            for (int i = 0; i < 2; i++)
            {
                temp_word = ConnectionWithAccess.company_details[i + 1];
                print_pdf_line_at_center(cour_9, temp_word, -5, "cour_9");
                actual_line_number_of_page++;
            }
            temp_word = "Period :" + dtp_rg_from_date.Text + "   -   " + dtp_rg_to_date.Text;
            print_pdf_line_at_center(cour_9_bold, temp_word, 0, "cour_9");
            add_error_gst_details_in_report_with_tax_details("S");
            print_pdf_line_at_center(cour_9_bold, temp_word, 0, "cour_9");
            add_error_gst_details_in_report_with_tax_details("P");
            check_gst_number_available();
            check_for_bank_pass_date();
            check_for_valid_cash_d_d_date();
            temp_word = "For " + ConnectionWithAccess.company_details[1];
            print_pdf_line(cour_9, temp_word, 366 - temp_word.Length, 0);
            temp_word = "Prop.";
            print_pdf_line(cour_9, temp_word, 520, 20);
            doc1.Close();
            require_header_footer = true;
            utilities_pdfviewer.Location = new System.Drawing.Point(6, 59);
            utilities_pdfviewer.Size = new System.Drawing.Size(1250, 418);
            utilities_pdfviewer.BringToFront();
            utilities_pdfviewer.LoadFile(report_filename);
            utilities_pdfviewer.Visible = true;

            // KUNAL DUPLICATE LIST
            ConnectionWithAccess.query = "Select a_n, s_a, count(0) from " + ConnectionWithAccess.tablename[1].ToString() +
                " GROUP By a_n, s_a having count(0) > 1";

            //Individual query
            ConnectionWithAccess.query = "Select a_n, s_a, count(0) from " + ConnectionWithAccess.tablename[1].ToString() +
                " where a_n = '2020' and s_a = 'BI5' ";

        }

        private void btn_send_own_bank_details_Click(object sender, EventArgs e)
        {
            if (tbMNo1.Text != "")
            {
                temp_word = "Company Bank Details";
                sendsms();
            }
            else
                MessageBox.Show("Sorry, Mobile Number is Blank / Invalid");
        }

        private void btnUpdateBalanceFromLedger_Click(object sender, EventArgs e)
        {
            try
            {
                ConnectionWithAccess.query = "select prd, [lock], [start], [end] from " + ConnectionWithAccess.tablename[50];
                dtPrdList = ConnectionCommand.fGetDataTable();
                DataRow[] drUnlockedRows = dtPrdList.Select("lock = 'N' ");

                string strFirstUnlockedRow = string.Empty;
                strFirstUnlockedRow = drUnlockedRows[0]["prd"].ToString();

                #region Processing accounts where a_n doesnot start with 1
                //Process account where a_n doesnot start with 1
                fProcess_Ledger_a_n_not_like_1(drUnlockedRows);
                #endregion Processing accounts where a_n doesnot start with 1

                #region Processing accounts starting with 1
                fProcess_Ledger_a_n_like_1(drUnlockedRows);
                #endregion Processing accounts starting with 1
                bIsPrdDataDeletd = false;
                this.Text = ConnectionWithAccess.company_details[1] + " " + version + "ver";
                MessageBox.Show("All Ledger balance updated in 51");

            }
            catch (Exception ex)
            {
                MessageBox.Show("Error in updating Ledger balances");
            }
        }

        private void btn_add_sub_account_Click(object sender, EventArgs e)
        {
            tbDesc.Text = "";
            tbDesc.ReadOnly = false;
        }

        private void btn_report_folder_Click(object sender, EventArgs e)
        {
            file_folder = ConnectionWithAccess.data_drive + "acc\\" + ConnectionWithAccess.mNIK + "\\reports";
            System.Diagnostics.Process.Start("explorer.exe", file_folder);

            //FolderBrowserDialog folderDlg = new FolderBrowserDialog();
            //folderDlg.ShowNewFolderButton = true;
            //// Show the FolderBrowserDialog.
            //DialogResult result = folderDlg.ShowDialog();
            //if (result == DialogResult.OK)
            //{
            //    //textBox1.Text = folderDlg.SelectedPath;
            //    Environment.SpecialFolder root = folderDlg.RootFolder;
            //}
        }


        #endregion

        #region add_dele_recordsm
        private void add_sale_invoice_record()
        {

            if (subtabsale.SelectedIndex == 0)
            {
                if (si_freight_amt.Text == "")
                    si_freight_amt.Text = "0.00";
                if (si_packing_amt.Text == "")
                    si_packing_amt.Text = "0.00";
                if (si_insurance_amt.Text == "")
                    si_insurance_amt.Text = "0.00";
                if (si_other_amt.Text == "")
                    si_other_amt.Text = "0.00";
                if (tb_si_kilometers.Text == "")
                    tb_si_kilometers.Text = "0";
                get_account_details_from_01(sia_n.Text, sis_a.Text);
                sale_invoice_saved = true;
                if (periodofgst)
                {
                    if (ConnectionWithAccess.company_details[5].Trim() != account_detail_from_01[12].Trim())
                        ConnectionWithAccess.query = "insert into " + ConnectionWithAccess.tablename[21] + " (prd, d_c, a_n,s_a,d_y,d_n,d_d, bamt,rund_amt,gamt, tx_code, tq_cs,woodcase,tpt,billx2,igst_amt,freight_AMT,packing_AMT,insurance_AMT,other_AMT,mess,tran_mode,tran_km, [user], insert_dt_tm) values('" + ConnectionWithAccess.mprd + "' , " + sidbc.SelectedValue.ToString() + " , '" + sia_n.Text + "', '" + sis_a.Text + "', '" + sid_y.Text + "', " + sidocno.Text + " , '" + sidatetime.Value.ToShortDateString() + "', " + sibasicamt.Text + " , " + siroundoffamt.Text + " , " + sigrossamt.Text + " , " + sitaxcode.Text + " , " + ConnectionWithAccess.mtq_cs + " , " + ConnectionWithAccess.mwoodcase + " , '" + sitransport.Text + "', '" + ConnectionWithAccess.mbillx2 + "', " + Convert.ToDouble(tb_si_igst_tax_amount.Text) + " ," + Convert.ToDouble(si_freight_amt.Text) + " ," + Convert.ToDouble(si_packing_amt.Text) + " ," + Convert.ToDouble(si_insurance_amt.Text) + " ," + Convert.ToDouble(si_other_amt.Text) + " , '" + sicomments.Text + "' , " + (cb_si_trans_mode.SelectedIndex + 1) + " , " + tb_si_kilometers.Text + " , '" + ConnectionWithAccess.muser + "', @currDate )";
                    else
                        ConnectionWithAccess.query = "insert into " + ConnectionWithAccess.tablename[21] + " (prd, d_c, a_n,s_a,d_y,d_n,d_d, bamt,rund_amt,gamt, tx_code, tq_cs,woodcase,tpt,billx2,CGST_AMT,SGST_AMT,freight_AMT,packing_AMT,insurance_AMT,other_AMT,mess,tran_mode,tran_km, [user], insert_dt_tm) values('" + ConnectionWithAccess.mprd + "' , " + sidbc.SelectedValue.ToString() + " , '" + sia_n.Text + "', '" + sis_a.Text + "', '" + sid_y.Text + "', " + sidocno.Text + " , '" + sidatetime.Value.ToShortDateString() + "', " + sibasicamt.Text + " , " + siroundoffamt.Text + " , " + sigrossamt.Text + " , " + sitaxcode.Text + " , " + ConnectionWithAccess.mtq_cs + " , " + ConnectionWithAccess.mwoodcase + " , '" + sitransport.Text + "', '" + ConnectionWithAccess.mbillx2 + "', " + (Convert.ToDouble(tb_si_igst_tax_amount.Text) / 2) + " ," + (Convert.ToDouble(tb_si_igst_tax_amount.Text) / 2) + " ," + Convert.ToDouble(si_freight_amt.Text) + " ," + Convert.ToDouble(si_packing_amt.Text) + " ," + Convert.ToDouble(si_insurance_amt.Text) + " ," + Convert.ToDouble(si_other_amt.Text) + " , '" + sicomments.Text + "' , " + (cb_si_trans_mode.SelectedIndex + 1) + " , " + tb_si_kilometers.Text + " , '" + ConnectionWithAccess.muser + "', @currDate )";
                    add_user_date_time_function_compulsory_program();
                    ConnectionCommand.fUpdateInsertDeleteData();
                }
                else
                {
                    ConnectionWithAccess.query = "insert into " + ConnectionWithAccess.tablename[21] + " (prd, d_c, a_n,s_a,d_y,d_n,d_d, bamt,tamt,rund_amt,gamt, tx_code, tq_cs,woodcase,tpt,billx2,lr_num,lr_date,freight_AMT,packing_AMT,insurance_AMT,other_AMT, [user], insert_dt_tm) values('" + ConnectionWithAccess.mprd + "' , " + sidbc.SelectedValue.ToString() + " , '" + sia_n.Text + "', '" + sis_a.Text + "', '" + sid_y.Text + "', " + sidocno.Text + " , '" + sidatetime.Value.ToShortDateString() + "', " + sibasicamt.Text + " , " + sitaxamt.Text + " , " + siroundoffamt.Text + " , " + sigrossamt.Text + " , " + sitaxcode.Text + " , " + ConnectionWithAccess.mtq_cs + " , " + ConnectionWithAccess.mwoodcase + " , '" + sitransport.Text + "', '" + ConnectionWithAccess.mbillx2 + "', '" + sisale_lr_no.Text + "', '" + dtp_sisale_lr_date.Value.ToShortDateString() + "'," + Convert.ToDouble(si_freight_amt.Text) + " ," + Convert.ToDouble(si_packing_amt.Text) + " ," + Convert.ToDouble(si_insurance_amt.Text) + " ," + Convert.ToDouble(si_other_amt.Text) + " ,'" + ConnectionWithAccess.muser + "', @currDate )";
                    add_user_date_time_function_compulsory_program();
                    ConnectionCommand.fUpdateInsertDeleteData();
                }
                ConnectionWithAccess.query = "update " + ConnectionWithAccess.tablename[21] + " set lr_num = '" + sisale_lr_no.Text + "', lr_date = '" + dtp_sisale_lr_date.Value.ToShortDateString() + "' , [user] = '" + ConnectionWithAccess.muser + "' ,insert_dt_tm = @currDate  where d_n  " + (sidocno.Text.Trim() == string.Empty ? "is null" : "= " + sidocno.Text.Trim()) + " and prd = '" + ConnectionWithAccess.mprd + "' and d_c = " + sidbc.SelectedValue.ToString();
                add_user_date_time_function_compulsory_program();
                ConnectionCommand.fUpdateInsertDeleteData();
                for (row_pointer = 0; row_pointer < siitemlist.Rows.Count - 1; row_pointer++)
                {
                    if (siitemlist.Rows[row_pointer].Cells[2].Value != null && siitemlist.Rows[row_pointer].Cells[7].Value != null && !string.IsNullOrEmpty(siitemlist.Rows[row_pointer].Cells[7].Value.ToString()))
                    {
                        if (siitemlist.Rows[row_pointer].Cells[3].Value == null || siitemlist.Rows[row_pointer].Cells[3].Value == System.DBNull.Value)
                            siitemlist.Rows[row_pointer].Cells[3].Value = "0";
                        if (siitemlist.Rows[row_pointer].Cells[4].Value == null || siitemlist.Rows[row_pointer].Cells[4].Value == System.DBNull.Value)
                            siitemlist.Rows[row_pointer].Cells[4].Value = "0";
                        if (siitemlist.Rows[row_pointer].Cells[8].Value == null || siitemlist.Rows[row_pointer].Cells[8].Value == System.DBNull.Value)
                            siitemlist.Rows[row_pointer].Cells[8].Value = "PCS";
                        else if (siitemlist.Rows[row_pointer].Cells[8].Value.ToString() == "")
                            siitemlist.Rows[row_pointer].Cells[8].Value = "PCS";
                        if (siitemlist.Rows[row_pointer].Cells[9].Value == null || siitemlist.Rows[row_pointer].Cells[9].Value == System.DBNull.Value)
                            siitemlist.Rows[row_pointer].Cells[9].Value = "0";
                        if (siitemlist.Rows[row_pointer].Cells[10].Value == null || siitemlist.Rows[row_pointer].Cells[10].Value == System.DBNull.Value)
                            siitemlist.Rows[row_pointer].Cells[10].Value = "0";
                        find_item_name_in_05(siitemlist.Rows[row_pointer].Cells[2].Value.ToString().Trim());
                        if (mfound != "Y")
                        {
                            find_new_item_code();
                            siitemlist.Rows[row_pointer].Cells[0].Value = tbItemType.Text;
                            siitemlist.Rows[row_pointer].Cells[1].Value = tbItemCode.Text;
                            ConnectionWithAccess.query = "insert into " + ConnectionWithAccess.tablename[05] + " ([type],item_code,[title],p_price,price,packing,box,cat,opn_stk,clo_stk,igst_per,hsn_code, [user], insert_dt_tm) values('" + tbItemType.Text + "','" + tbItemCode.Text + "','" + siitemlist.Rows[row_pointer].Cells[2].Value.ToString().Trim().ToUpper() + "', " + tb_purc_price.Text + " , " + siitemlist.Rows[row_pointer].Cells[6].Value.ToString().Trim() + " , " + siitemlist.Rows[row_pointer].Cells[4].Value.ToString().Trim() + " , " + siitemlist.Rows[row_pointer].Cells[5].Value.ToString().Trim() + " , '" + siitemlist.Rows[row_pointer].Cells[8].Value.ToString().Trim() + "' , 0 , 0 , " + siitemlist.Rows[row_pointer].Cells[9].Value.ToString().Trim() + " , " + siitemlist.Rows[row_pointer].Cells[10].Value.ToString().Trim() + ", '" + ConnectionWithAccess.muser + "', @currDate )";
                            add_user_date_time_function_compulsory_program();
                            ConnectionCommand.fUpdateInsertDeleteData();
                        }
                        mtype = siitemlist.Rows[row_pointer].Cells[0].Value.ToString();
                        mitem_code = siitemlist.Rows[row_pointer].Cells[1].Value.ToString();
                        mtitle = siitemlist.Rows[row_pointer].Cells[2].Value.ToString();
                        mqty = Convert.ToDouble(siitemlist.Rows[row_pointer].Cells[5].Value.ToString()) * -1;
                        update_item_stock(mtype, mitem_code, "", mqty);
                    }
                }
                for (row_pointer = 0; row_pointer < siitemlist.Rows.Count - 1; row_pointer++)
                {
                    if (siitemlist.Rows[row_pointer].Cells[2].Value != null && siitemlist.Rows[row_pointer].Cells[7].Value != null && !string.IsNullOrEmpty(siitemlist.Rows[row_pointer].Cells[7].Value.ToString()))
                    {
                        if (periodofgst)
                        {
                            if (siitemlist.Rows[row_pointer].Cells[9].Value != null && !string.IsNullOrEmpty(siitemlist.Rows[row_pointer].Cells[9].Value.ToString()))
                            {
                                si_igst_tax_per = Convert.ToDouble(siitemlist.Rows[row_pointer].Cells[9].Value.ToString());
                                si_cgst_tax_per = si_igst_tax_per / 2;
                                si_sgst_tax_per = si_igst_tax_per / 2;
                            }
                            if (siitemlist.Rows[row_pointer].Cells[7].Value != null && !string.IsNullOrEmpty(siitemlist.Rows[row_pointer].Cells[7].Value.ToString()))
                            {
                                si_cgst_tax_amount = Convert.ToDouble(siitemlist.Rows[row_pointer].Cells[7].Value.ToString()) * si_cgst_tax_per / 100;
                                si_sgst_tax_amount = Convert.ToDouble(siitemlist.Rows[row_pointer].Cells[7].Value.ToString()) * si_sgst_tax_per / 100;
                                si_igst_tax_amount = Convert.ToDouble(siitemlist.Rows[row_pointer].Cells[7].Value.ToString()) * si_igst_tax_per / 100;
                            }
                            int hsnCode = 0;
                            int.TryParse(siitemlist.Rows[row_pointer].Cells[10].Value.ToString(), out hsnCode);
                            ConnectionWithAccess.query = "insert into " + ConnectionWithAccess.tablename[03] + " (prd, d_c, a_n,s_a, d_n,d_d, [type], item_code,title,q_cs,box,qty,price, amount,cat,cgst_per,cgst_amt,sgst_per,sgst_amt,igst_per,igst_amt,hsn_code, [user], insert_dt_tm) values('" + ConnectionWithAccess.mprd + "' , " + sidbc.SelectedValue.ToString() + " , '" + sia_n.Text + "', '" + sis_a.Text + "', " + sidocno.Text + " , '" + sidatetime.Text + "', '" + siitemlist.Rows[row_pointer].Cells[0].Value.ToString() + "', '" + siitemlist.Rows[row_pointer].Cells[1].Value.ToString() + "', '" + siitemlist.Rows[row_pointer].Cells[2].Value.ToString() + "', " + siitemlist.Rows[row_pointer].Cells[3].Value.ToString() + " , " + siitemlist.Rows[row_pointer].Cells[4].Value.ToString() + " , " + siitemlist.Rows[row_pointer].Cells[5].Value.ToString() + " , " + siitemlist.Rows[row_pointer].Cells[6].Value.ToString() + " , " + Convert.ToDouble(siitemlist.Rows[row_pointer].Cells[7].Value.ToString()) + " , '" + siitemlist.Rows[row_pointer].Cells[8].Value.ToString() + "', " + si_cgst_tax_per + " , " + si_cgst_tax_amount + " , " + si_sgst_tax_per + " , " + si_sgst_tax_amount + " , " + si_igst_tax_per + " , " + si_igst_tax_amount + " , " + hsnCode + " , '" + ConnectionWithAccess.muser + "', @currDate )";
                        }
                        else
                        {
                            ConnectionWithAccess.query = "insert into " + ConnectionWithAccess.tablename[03] + " (prd, d_c, a_n,s_a, d_n,d_d, [type], item_code,title,q_cs,box,qty,price, amount,cat, [user], insert_dt_tm) values('" + ConnectionWithAccess.mprd + "' , " + sidbc.SelectedValue.ToString() + " , '" + sia_n.Text + "', '" + sis_a.Text + "', " + sidocno.Text + " , '" + sidatetime.Text + "', '" + siitemlist.Rows[row_pointer].Cells[0].Value.ToString() + "', '" + siitemlist.Rows[row_pointer].Cells[1].Value.ToString() + "', '" + siitemlist.Rows[row_pointer].Cells[2].Value.ToString() + "', " + siitemlist.Rows[row_pointer].Cells[3].Value.ToString() + " , " + siitemlist.Rows[row_pointer].Cells[4].Value.ToString() + " , " + siitemlist.Rows[row_pointer].Cells[5].Value.ToString() + " , " + siitemlist.Rows[row_pointer].Cells[6].Value.ToString() + " , " + siitemlist.Rows[row_pointer].Cells[7].Value.ToString() + " , '" + siitemlist.Rows[row_pointer].Cells[8].Value.ToString() + "', '" + ConnectionWithAccess.muser + "', @currDate )";
                        }
                        add_user_date_time_function_compulsory_program();
                        ConnectionCommand.fUpdateInsertDeleteData();
                    }
                }
            }
            else if (subtabsale.SelectedIndex == 1)
            {
                if (sr_freight_amt.Text == "")
                    sr_freight_amt.Text = "0.00";
                if (sr_packing_amt.Text == "")
                    sr_packing_amt.Text = "0.00";
                if (sr_insurance_amt.Text == "")
                    sr_insurance_amt.Text = "0.00";
                if (sr_other_amt.Text == "")
                    sr_other_amt.Text = "0.00";
                if (tb_sr_kilometers.Text == "")
                    tb_sr_kilometers.Text = "0";
                get_account_details_from_01(sra_n.Text, srs_a.Text);
                //sale_invoice_saved = true;
                if (periodofgst)
                {
                    if (ConnectionWithAccess.company_details[5].Trim() != account_detail_from_01[12].Trim())
                        ConnectionWithAccess.query = "insert into " + ConnectionWithAccess.tablename[30] + " (prd, d_c, a_n,s_a,d_y,d_n,d_d, bamt,rund_amt,gamt, tx_code, tq_cs,woodcase,tpt,billx2,igst_amt,freight_AMT,packing_AMT,insurance_AMT,other_AMT,mess,tran_mode,tran_km, [user], insert_dt_tm) values('" + ConnectionWithAccess.mprd + "' , " + srdbc.SelectedValue.ToString() + " , '" + sra_n.Text + "', '" + srs_a.Text + "', '" + srd_y.Text + "', " + srdocno.Text + " , '" + srdatetime.Value.ToShortDateString() + "', " + srbasicamt.Text + " , " + srroundoffamt.Text + " , " + srgrossamt.Text + " , " + srtaxcode.Text + " , " + ConnectionWithAccess.mtq_cs + " , " + ConnectionWithAccess.mwoodcase + " , '" + srtransport.Text + "', '" + ConnectionWithAccess.mbillx2 + "', " + Convert.ToDouble(tb_sr_igst_tax_amount.Text) + " ," + Convert.ToDouble(sr_freight_amt.Text) + " ," + Convert.ToDouble(sr_packing_amt.Text) + " ," + Convert.ToDouble(sr_insurance_amt.Text) + " ," + Convert.ToDouble(sr_other_amt.Text) + " , '" + srcomments.Text + "' , " + (cb_sr_trans_mode.SelectedIndex + 1) + " , " + tb_sr_kilometers.Text + " , '" + ConnectionWithAccess.muser + "', @currDate )";
                    else
                        ConnectionWithAccess.query = "insert into " + ConnectionWithAccess.tablename[30] + " (prd, d_c, a_n,s_a,d_y,d_n,d_d, bamt,rund_amt,gamt, tx_code, tq_cs,woodcase,tpt,billx2,CGST_AMT,SGST_AMT,freight_AMT,packing_AMT,insurance_AMT,other_AMT,mess,tran_mode,tran_km, [user], insert_dt_tm) values('" + ConnectionWithAccess.mprd + "' , " + srdbc.SelectedValue.ToString() + " , '" + sra_n.Text + "', '" + srs_a.Text + "', '" + srd_y.Text + "', " + srdocno.Text + " , '" + srdatetime.Value.ToShortDateString() + "', " + srbasicamt.Text + " , " + srroundoffamt.Text + " , " + srgrossamt.Text + " , " + srtaxcode.Text + " , " + ConnectionWithAccess.mtq_cs + " , " + ConnectionWithAccess.mwoodcase + " , '" + srtransport.Text + "', '" + ConnectionWithAccess.mbillx2 + "', " + (Convert.ToDouble(tb_sr_igst_tax_amount.Text) / 2) + " ," + (Convert.ToDouble(tb_sr_igst_tax_amount.Text) / 2) + " ," + Convert.ToDouble(sr_freight_amt.Text) + " ," + Convert.ToDouble(sr_packing_amt.Text) + " ," + Convert.ToDouble(sr_insurance_amt.Text) + " ," + Convert.ToDouble(sr_other_amt.Text) + " , '" + srcomments.Text + "' , " + (cb_sr_trans_mode.SelectedIndex + 1) + " , " + tb_sr_kilometers.Text + " , '" + ConnectionWithAccess.muser + "', @currDate )";
                    add_user_date_time_function_compulsory_program();
                    ConnectionCommand.fUpdateInsertDeleteData();
                }
                else
                {
                    ConnectionWithAccess.query = "insert into " + ConnectionWithAccess.tablename[30] + " (prd, d_c, a_n,s_a,d_y,d_n,d_d, bamt,tamt,rund_amt,gamt, tx_code, tq_cs,woodcase,tpt,billx2,lr_num,lr_date,freight_AMT,packing_AMT,insurance_AMT,other_AMT, [user], insert_dt_tm) values('" + ConnectionWithAccess.mprd + "' , " + srdbc.SelectedValue.ToString() + " , '" + sra_n.Text + "', '" + srs_a.Text + "', '" + srd_y.Text + "', " + srdocno.Text + " , '" + srdatetime.Value.ToShortDateString() + "', " + srbasicamt.Text + " , " + srtaxamt.Text + " , " + srroundoffamt.Text + " , " + srgrossamt.Text + " , " + srtaxcode.Text + " , " + ConnectionWithAccess.mtq_cs + " , " + ConnectionWithAccess.mwoodcase + " , '" + srtransport.Text + "', '" + ConnectionWithAccess.mbillx2 + "', '" + srsale_lr_no.Text + "', '" + dtp_srsale_lr_date.Value.ToShortDateString() + "'," + Convert.ToDouble(sr_freight_amt.Text) + " ," + Convert.ToDouble(sr_packing_amt.Text) + " ," + Convert.ToDouble(sr_insurance_amt.Text) + " ," + Convert.ToDouble(sr_other_amt.Text) + " ,'" + ConnectionWithAccess.muser + "', @currDate )";
                    add_user_date_time_function_compulsory_program();
                    ConnectionCommand.fUpdateInsertDeleteData();
                }
                ConnectionWithAccess.query = "update " + ConnectionWithAccess.tablename[30] + " set lr_num = '" + srsale_lr_no.Text + "', lr_date = '" + dtp_srsale_lr_date.Value.ToShortDateString() + "' , [user] = '" + ConnectionWithAccess.muser + "' ,insert_dt_tm = @currDate  where d_n  " + (srdocno.Text.Trim() == string.Empty ? "is null" : "= " + srdocno.Text.Trim()) + " and prd = '" + ConnectionWithAccess.mprd + "' and d_c = " + srdbc.SelectedValue.ToString();
                add_user_date_time_function_compulsory_program();
                ConnectionCommand.fUpdateInsertDeleteData();
                for (row_pointer = 0; row_pointer < sritemlist.Rows.Count - 1; row_pointer++)
                {
                    if (sritemlist.Rows[row_pointer].Cells[2].Value != null && sritemlist.Rows[row_pointer].Cells[7].Value != null && !string.IsNullOrEmpty(sritemlist.Rows[row_pointer].Cells[7].Value.ToString()))
                    {
                        if (sritemlist.Rows[row_pointer].Cells[3].Value == null || sritemlist.Rows[row_pointer].Cells[3].Value == System.DBNull.Value)
                            sritemlist.Rows[row_pointer].Cells[3].Value = "0";
                        if (sritemlist.Rows[row_pointer].Cells[4].Value == null || sritemlist.Rows[row_pointer].Cells[4].Value == System.DBNull.Value)
                            sritemlist.Rows[row_pointer].Cells[4].Value = "0";
                        if (sritemlist.Rows[row_pointer].Cells[8].Value == null || sritemlist.Rows[row_pointer].Cells[8].Value == System.DBNull.Value)
                            sritemlist.Rows[row_pointer].Cells[8].Value = "PCS";
                        else if (sritemlist.Rows[row_pointer].Cells[8].Value.ToString() == "")
                            sritemlist.Rows[row_pointer].Cells[8].Value = "PCS";
                        if (sritemlist.Rows[row_pointer].Cells[9].Value == null || sritemlist.Rows[row_pointer].Cells[9].Value == System.DBNull.Value)
                            sritemlist.Rows[row_pointer].Cells[9].Value = "0";
                        if (sritemlist.Rows[row_pointer].Cells[10].Value == null || sritemlist.Rows[row_pointer].Cells[10].Value == System.DBNull.Value)
                            sritemlist.Rows[row_pointer].Cells[10].Value = "0";
                        find_item_name_in_05(sritemlist.Rows[row_pointer].Cells[2].Value.ToString().Trim());
                        if (mfound != "Y")
                        {
                            find_new_item_code();
                            sritemlist.Rows[row_pointer].Cells[0].Value = tbItemType.Text;
                            sritemlist.Rows[row_pointer].Cells[1].Value = tbItemCode.Text;
                            ConnectionWithAccess.query = "insert into " + ConnectionWithAccess.tablename[05] + " ([type],item_code,[title],p_price,price,packing,box,cat,opn_stk,clo_stk,igst_per,hsn_code, [user], insert_dt_tm) values('" + tbItemType.Text + "','" + tbItemCode.Text + "','" + sritemlist.Rows[row_pointer].Cells[2].Value.ToString().Trim().ToUpper() + "', " + tb_purc_price.Text + " , " + sritemlist.Rows[row_pointer].Cells[6].Value.ToString().Trim() + " , " + sritemlist.Rows[row_pointer].Cells[4].Value.ToString().Trim() + " , " + sritemlist.Rows[row_pointer].Cells[5].Value.ToString().Trim() + " , '" + sritemlist.Rows[row_pointer].Cells[8].Value.ToString().Trim() + "' , 0 , 0 , " + sritemlist.Rows[row_pointer].Cells[9].Value.ToString().Trim() + " , " + sritemlist.Rows[row_pointer].Cells[10].Value.ToString().Trim() + ", '" + ConnectionWithAccess.muser + "', @currDate )";
                            add_user_date_time_function_compulsory_program();
                            ConnectionCommand.fUpdateInsertDeleteData();
                        }
                        mtype = sritemlist.Rows[row_pointer].Cells[0].Value.ToString();
                        mitem_code = sritemlist.Rows[row_pointer].Cells[1].Value.ToString();
                        mtitle = sritemlist.Rows[row_pointer].Cells[2].Value.ToString();
                        mqty = Convert.ToDouble(sritemlist.Rows[row_pointer].Cells[5].Value.ToString()) * -1;
                        update_item_stock(mtype, mitem_code, "", mqty);
                    }
                }
                for (row_pointer = 0; row_pointer < sritemlist.Rows.Count - 1; row_pointer++)
                {
                    if (sritemlist.Rows[row_pointer].Cells[2].Value != null && sritemlist.Rows[row_pointer].Cells[7].Value != null && !string.IsNullOrEmpty(sritemlist.Rows[row_pointer].Cells[7].Value.ToString()))
                    {
                        if (periodofgst)
                        {
                            if (sritemlist.Rows[row_pointer].Cells[9].Value != null && !string.IsNullOrEmpty(sritemlist.Rows[row_pointer].Cells[9].Value.ToString()))
                            {
                                sr_igst_tax_per = Convert.ToDouble(sritemlist.Rows[row_pointer].Cells[9].Value.ToString());
                                sr_cgst_tax_per = sr_igst_tax_per / 2;
                                sr_sgst_tax_per = sr_igst_tax_per / 2;
                            }
                            if (sritemlist.Rows[row_pointer].Cells[7].Value != null && !string.IsNullOrEmpty(sritemlist.Rows[row_pointer].Cells[7].Value.ToString()))
                            {
                                sr_cgst_tax_amount = Convert.ToDouble(sritemlist.Rows[row_pointer].Cells[7].Value.ToString()) * sr_cgst_tax_per / 100;
                                sr_sgst_tax_amount = Convert.ToDouble(sritemlist.Rows[row_pointer].Cells[7].Value.ToString()) * sr_sgst_tax_per / 100;
                                sr_igst_tax_amount = Convert.ToDouble(sritemlist.Rows[row_pointer].Cells[7].Value.ToString()) * sr_igst_tax_per / 100;
                            }
                            int hsnCode = 0;
                            int.TryParse(sritemlist.Rows[row_pointer].Cells[10].Value.ToString(), out hsnCode);
                            ConnectionWithAccess.query = "insert into " + ConnectionWithAccess.tablename[03] + " (prd, d_c, a_n,s_a, d_n,d_d, [type], item_code,title,q_cs,box,qty,price, amount,cat,cgst_per,cgst_amt,sgst_per,sgst_amt,igst_per,igst_amt,hsn_code, [user], insert_dt_tm) values('" + ConnectionWithAccess.mprd + "' , " + srdbc.SelectedValue.ToString() + " , '" + sra_n.Text + "', '" + srs_a.Text + "', " + srdocno.Text + " , '" + srdatetime.Text + "', '" + sritemlist.Rows[row_pointer].Cells[0].Value.ToString() + "', '" + sritemlist.Rows[row_pointer].Cells[1].Value.ToString() + "', '" + sritemlist.Rows[row_pointer].Cells[2].Value.ToString() + "', " + sritemlist.Rows[row_pointer].Cells[3].Value.ToString() + " , " + sritemlist.Rows[row_pointer].Cells[4].Value.ToString() + " , " + sritemlist.Rows[row_pointer].Cells[5].Value.ToString() + " , " + sritemlist.Rows[row_pointer].Cells[6].Value.ToString() + " , " + Convert.ToDouble(sritemlist.Rows[row_pointer].Cells[7].Value.ToString()) + " , '" + sritemlist.Rows[row_pointer].Cells[8].Value.ToString() + "', " + sr_cgst_tax_per + " , " + sr_cgst_tax_amount + " , " + sr_sgst_tax_per + " , " + sr_sgst_tax_amount + " , " + sr_igst_tax_per + " , " + sr_igst_tax_amount + " , " + hsnCode + " , '" + ConnectionWithAccess.muser + "', @currDate )";
                        }
                        else
                        {
                            ConnectionWithAccess.query = "insert into " + ConnectionWithAccess.tablename[03] + " (prd, d_c, a_n,s_a, d_n,d_d, [type], item_code,title,q_cs,box,qty,price, amount,cat, [user], insert_dt_tm) values('" + ConnectionWithAccess.mprd + "' , " + srdbc.SelectedValue.ToString() + " , '" + sra_n.Text + "', '" + srs_a.Text + "', " + srdocno.Text + " , '" + srdatetime.Text + "', '" + sritemlist.Rows[row_pointer].Cells[0].Value.ToString() + "', '" + sritemlist.Rows[row_pointer].Cells[1].Value.ToString() + "', '" + sritemlist.Rows[row_pointer].Cells[2].Value.ToString() + "', " + sritemlist.Rows[row_pointer].Cells[3].Value.ToString() + " , " + sritemlist.Rows[row_pointer].Cells[4].Value.ToString() + " , " + sritemlist.Rows[row_pointer].Cells[5].Value.ToString() + " , " + sritemlist.Rows[row_pointer].Cells[6].Value.ToString() + " , " + sritemlist.Rows[row_pointer].Cells[7].Value.ToString() + " , '" + sritemlist.Rows[row_pointer].Cells[8].Value.ToString() + "', '" + ConnectionWithAccess.muser + "', @currDate )";
                        }
                        add_user_date_time_function_compulsory_program();
                        ConnectionCommand.fUpdateInsertDeleteData();
                    }
                }
            }
            else if (subtabsale.SelectedIndex == 3)
            {
                if (si_freight_amt.Text == "")
                    si_freight_amt.Text = "0.00";
                if (si_packing_amt.Text == "")
                    si_packing_amt.Text = "0.00";
                if (si_insurance_amt.Text == "")
                    si_insurance_amt.Text = "0.00";
                if (si_other_amt.Text == "")
                    si_other_amt.Text = "0.00";
                if (tb_si_kilometers.Text == "")
                    tb_si_kilometers.Text = "0";
                get_account_details_from_01(sia_n.Text, sis_a.Text);
                sale_invoice_saved = true;
                ConnectionWithAccess.query = "insert into " + ConnectionWithAccess.tablename[21] + " (prd, d_c, a_n,s_a,d_y,d_n,d_d, bamt,tamt,rund_amt,gamt, tx_code, tq_cs,woodcase,tpt,billx2,lr_num,lr_date,freight_AMT,packing_AMT,insurance_AMT,other_AMT, [user], insert_dt_tm) values('" + ConnectionWithAccess.mprd + "' , 1 , '" + simple_a_n.Text + "', '" + simple_s_a.Text + "', '@@@', " + simple_docno.Text + " , '" + simple_date.Value.ToShortDateString() + "', " + simple_grossamt.Text + " , 0 , 0 , " + simple_grossamt.Text + " , 0 , " + ConnectionWithAccess.mtq_cs + " , " + ConnectionWithAccess.mwoodcase + " , '" + sitransport.Text + "', 'N', '" + sisale_lr_no.Text + "', '" + dtp_sisale_lr_date.Value.ToShortDateString() + "'," + Convert.ToDouble(si_freight_amt.Text) + " ," + Convert.ToDouble(si_packing_amt.Text) + " ," + Convert.ToDouble(si_insurance_amt.Text) + " ," + Convert.ToDouble(si_other_amt.Text) + " ,'" + ConnectionWithAccess.muser + "', @currDate )";
                add_user_date_time_function_compulsory_program();
                ConnectionCommand.fUpdateInsertDeleteData();
                for (row_pointer = 0; row_pointer < simple_itemsalelist.Rows.Count - 1; row_pointer++)
                {
                    if (simple_itemsalelist.Rows[row_pointer].Cells[7].Value != null && !string.IsNullOrEmpty(simple_itemsalelist.Rows[row_pointer].Cells[7].Value.ToString()))
                    {
                        if (simple_itemsalelist.Rows[row_pointer].Cells[3].Value == null || simple_itemsalelist.Rows[row_pointer].Cells[3].Value == System.DBNull.Value)
                            simple_itemsalelist.Rows[row_pointer].Cells[3].Value = "0";
                        if (simple_itemsalelist.Rows[row_pointer].Cells[4].Value == null || simple_itemsalelist.Rows[row_pointer].Cells[4].Value == System.DBNull.Value)
                            simple_itemsalelist.Rows[row_pointer].Cells[4].Value = "0";
                        ConnectionWithAccess.query = "insert into " + ConnectionWithAccess.tablename[03] + " (prd, d_c, a_n,s_a, d_n,d_d, [type], item_code,title,q_cs,box,qty,price, amount, [user], insert_dt_tm) values('" + ConnectionWithAccess.mprd + "' , 1 , '" + simple_a_n.Text + "', '" + simple_s_a.Text + "', " + simple_docno.Text + " , '" + sidatetime.Text + "', '" + simple_itemsalelist.Rows[row_pointer].Cells[0].Value.ToString() + "', '" + simple_itemsalelist.Rows[row_pointer].Cells[1].Value.ToString() + "', '" + simple_itemsalelist.Rows[row_pointer].Cells[2].Value.ToString() + "', " + simple_itemsalelist.Rows[row_pointer].Cells[3].Value.ToString() + " , " + simple_itemsalelist.Rows[row_pointer].Cells[4].Value.ToString() + " , " + simple_itemsalelist.Rows[row_pointer].Cells[5].Value.ToString() + " , " + simple_itemsalelist.Rows[row_pointer].Cells[6].Value.ToString() + " , " + simple_itemsalelist.Rows[row_pointer].Cells[7].Value.ToString() + " , '" + ConnectionWithAccess.muser + "', @currDate )";
                        add_user_date_time_function_compulsory_program();
                        ConnectionCommand.fUpdateInsertDeleteData();
                    }
                }
            }
            add_amount_in_51(ConnectionWithAccess.mprd, sia_n.Text, sis_a.Text, (Convert.ToDouble(sigrossamt.Text)));
            add_amount_in_51(ConnectionWithAccess.mprd, sia_n.Text, "@@@", (Convert.ToDouble(sigrossamt.Text)));
            get_a_n_from_d_c("S", Convert.ToInt32(sidbc.SelectedValue.ToString()));
            if (periodofgst)
                add_amount_in_51(ConnectionWithAccess.mprd, "6000", "@@@", (Convert.ToDouble(sigrossamt.Text) * -1));
            else
            {
                if (sitaxamt.Text != "" || si_igst_tax_amount != 0)
                    add_amount_in_51(ConnectionWithAccess.mprd, "6000", "@@@", (Convert.ToDouble(sigrossamt.Text) * -1));
                else
                    add_amount_in_51(ConnectionWithAccess.mprd, "6000R1", "@@@", (Convert.ToDouble(sigrossamt.Text) * -1));
            }
            add_amount_in_51(ConnectionWithAccess.mprd, "5000", "@@@", Convert.ToDouble(sigrossamt.Text));
            add_cash_received_in_sale_invoice();
            if (Convert.ToDouble(sigrossamt.Text) >= 100000 && tb_si_igst_tax_amount.Text != "0.00")
            {
                generate_eway_bill_json();
            }
        }

        private void generate_eway_bill_json()
        {
            if (tb_si_kilometers.Text == "")
                tb_si_kilometers.Text = "0";
            file_folder = ConnectionWithAccess.data_drive + "acc\\" + ConnectionWithAccess.mNIK + "\\eway_bill\\";
            eway_json_filename = file_folder + ConnectionWithAccess.mprd + "_" + sidocno.Text + "_" + account_detail_from_01[28].Trim();
            //if (chb_add_datetime_in_output.Checked)
            //eway_json_filename += "_" + DateTime.Now.Day + "_" + DateTime.Now.Month + "_" + DateTime.Now.Year + "_" + DateTime.Now.TimeOfDay.Hours + "_" + DateTime.Now.TimeOfDay.Minutes;
            eway_json_filename += ".json";
            ConnectionWithAccess.create_file_folder(eway_json_filename);
            if (File.Exists(eway_json_filename))
                File.Delete(eway_json_filename);
            temp_d_n = 0;
            StringBuilder sb = new StringBuilder();

            JsonModel objJsonModel = new JsonModel();
            objJsonModel.Version = "1.0.0918";
            List<JsonBillModel> objBillList = new List<JsonBillModel>();
            //Asssign all mandatory values to objJsonBillModel from screen or datatable
            JsonBillModel objJsonBillModel = new JsonBillModel();

            objJsonBillModel.UserGstin = ConnectionWithAccess.company_details[32].Trim();
            objJsonBillModel.SupplyType = "O";
            objJsonBillModel.SubSupplyType = 1;
            objJsonBillModel.DocType = "INV";
            objJsonBillModel.docNo = sidocno.Text;
            objJsonBillModel.docDate = sidatetime.Value.ToShortDateString();
            objJsonBillModel.fromGstin = ConnectionWithAccess.company_details[32].Trim();
            objJsonBillModel.fromTrdName = ConnectionWithAccess.company_details[1].Trim();
            objJsonBillModel.fromAddr1 = ConnectionWithAccess.company_details[2].Trim();
            objJsonBillModel.fromAddr2 = ConnectionWithAccess.company_details[3].Trim();
            objJsonBillModel.fromPlace = ConnectionWithAccess.company_details[4].Trim();
            objJsonBillModel.fromPincode = Convert.ToInt32(ConnectionWithAccess.company_details[6].Trim());
            objJsonBillModel.fromStateCode = Convert.ToInt32(ConnectionWithAccess.company_details[32].Trim().Substring(0, 2));
            objJsonBillModel.actualFromStateCode = Convert.ToInt32(ConnectionWithAccess.company_details[32].Trim().Substring(0, 2));
            objJsonBillModel.toGstin = account_detail_from_01[28].Trim();
            objJsonBillModel.toTrdName = account_detail_from_01[4].Trim();
            objJsonBillModel.toAddr1 = account_detail_from_04[4].Trim();
            objJsonBillModel.toAddr2 = account_detail_from_04[5].Trim();
            objJsonBillModel.toPlace = account_detail_from_01[8].Trim();
            objJsonBillModel.toPincode = Convert.ToInt32(account_detail_from_01[10].Trim());
            objJsonBillModel.toStateCode = Convert.ToInt32(account_detail_from_01[28].Trim().Substring(0, 2));
            objJsonBillModel.actualToStateCode = Convert.ToInt32(account_detail_from_01[28].Trim().Substring(0, 2));
            objJsonBillModel.totalValue = Convert.ToSingle(sibasicamt.Text);
            if (Convert.ToInt32(ConnectionWithAccess.company_details[32].Trim().Substring(0, 2)) != Convert.ToInt32(account_detail_from_01[28].Trim().Substring(0, 2)))
            {
                objJsonBillModel.cgstValue = 0;
                objJsonBillModel.sgstValue = 0;
                objJsonBillModel.igstValue = Convert.ToDouble(tb_si_igst_tax_amount.Text);
            }
            else
            {
                objJsonBillModel.cgstValue = Convert.ToDouble(tb_si_igst_tax_amount.Text) / 2;
                objJsonBillModel.sgstValue = Convert.ToDouble(tb_si_igst_tax_amount.Text) / 2;
                objJsonBillModel.igstValue = 0;
            }
            objJsonBillModel.cessValue = 0;
            objJsonBillModel.transMode = Convert.ToInt32(cb_si_trans_mode.SelectedIndex) + 1;
            objJsonBillModel.transDistance = Convert.ToInt32(tb_si_kilometers.Text);
            objJsonBillModel.transporterName = "-";
            objJsonBillModel.transporterId = "";
            objJsonBillModel.transDocNo = sidocno.Text;
            objJsonBillModel.transDocDate = sidatetime.Value.ToShortDateString();
            objJsonBillModel.vehicleNo = "-";
            objJsonBillModel.vehicleType = "R";
            objJsonBillModel.totInvValue = Convert.ToSingle(sigrossamt.Text);
            objJsonBillModel.mainHsnCode = Convert.ToInt32(siitemlist.Rows[0].Cells[10].Value);

            List<JsonItemList> objItemList = new List<JsonItemList>();
            //Loop through item list and assign values for JsonItemList class
            //loop start

            for (row_pointer = 0; row_pointer < siitemlist.Rows.Count - 1; row_pointer++)
            {
                JsonItemList objJsonItemList = new JsonItemList();
                objJsonItemList.itemNo = row_pointer + 1;
                objJsonItemList.productName = siitemlist.Rows[row_pointer].Cells["title"].Value.ToString();
                objJsonItemList.productDesc = siitemlist.Rows[row_pointer].Cells["title"].Value.ToString();
                objJsonItemList.hsnCode = Convert.ToInt32(siitemlist.Rows[row_pointer].Cells[10].Value);
                objJsonItemList.quantity = Convert.ToSingle(siitemlist.Rows[row_pointer].Cells["qty"].Value);
                objJsonItemList.qtyUnit = siitemlist.Rows[row_pointer].Cells["_cat"].Value.ToString();
                objJsonItemList.taxableAmount = Convert.ToSingle(siitemlist.Rows[row_pointer].Cells["Amount"].Value);
                if (Convert.ToInt32(ConnectionWithAccess.company_details[32].Trim().Substring(0, 2)) != Convert.ToInt32(account_detail_from_01[28].Trim().Substring(0, 2)))
                {
                    objJsonItemList.sgstRate = 0.00;
                    objJsonItemList.cgstRate = 0.00;
                    objJsonItemList.igstRate = Convert.ToDouble(siitemlist.Rows[row_pointer].Cells["IGST"].Value);
                }
                else
                {
                    objJsonItemList.sgstRate = Convert.ToDouble(siitemlist.Rows[row_pointer].Cells["IGST"].Value) / 2;
                    objJsonItemList.cgstRate = Convert.ToDouble(siitemlist.Rows[row_pointer].Cells["IGST"].Value) / 2;
                    objJsonItemList.igstRate = 0.00;
                }
                objJsonItemList.cessRate = 0.00;
                objItemList.Add(objJsonItemList);
            }
            objJsonBillModel.itemList = objItemList;

            objBillList.Add(objJsonBillModel);
            objJsonModel.BillLists = objBillList;

            temp_gst_json_full_details = Newtonsoft.Json.JsonConvert.SerializeObject(objJsonModel, Newtonsoft.Json.Formatting.Indented);
            sb.AppendLine(temp_gst_json_full_details);
            TextWriter writer = new StreamWriter(eway_json_filename);
            writer.WriteLine(sb);
            writer.Flush();
            writer.Close();
        }

        private void delete_old_sale_invoice_record()
        {
            if (old_sale_invoice_amount > 0)
            {
                ConnectionWithAccess.query = "select [type], item_code, [title], q_cs, [box], qty, price, amount,cat,igst_per,hsn_code,item_squ_id from " + ConnectionWithAccess.tablename[03] + " where prd= '" + ConnectionWithAccess.mprd + "' and d_c = " + sidbc.SelectedValue.ToString() + " and d_n " + (sidocno.Text.Trim() == string.Empty ? "is not null" : "= " + sidocno.Text.Trim()) + " and amount > 0 order by item_squ_id";
                DataTable dtData1 = ConnectionCommand.fGetDataTable();
                if (dtData1 != null && dtData1.Rows.Count > 0)
                {
                    for (int iRowCount = 0; iRowCount < dtData1.Rows.Count; iRowCount++)
                    {
                        mtype = dtData1.Rows[iRowCount][0].ToString();
                        mitem_code = dtData1.Rows[iRowCount][1].ToString();
                        mtitle = dtData1.Rows[iRowCount][2].ToString();
                        mqty = Convert.ToDouble(dtData1.Rows[iRowCount][5].ToString());
                        update_item_stock(mtype, mitem_code, "", mqty);
                    }
                }

                if (subtabsale.SelectedIndex == 0)
                {
                    ConnectionWithAccess.query = "delete from " + ConnectionWithAccess.tablename[21] + " where d_n  " + (sidocno.Text.Trim() == string.Empty ? "is null" : "= " + sidocno.Text.Trim()) + " and prd = '" + ConnectionWithAccess.mprd + "' and d_c = " + sidbc.SelectedValue.ToString();
                    ConnectionCommand.fUpdateInsertDeleteData();
                    isRecord = 0;
                    ConnectionWithAccess.query = "delete from " + ConnectionWithAccess.tablename[03] + " where d_n " + (sidocno.Text.Trim() == string.Empty ? "is null" : "= " + sidocno.Text.Trim()) + " and prd = '" + ConnectionWithAccess.mprd + "' and d_c = " + sidbc.SelectedValue.ToString();
                    ConnectionCommand.fUpdateInsertDeleteData();
                }
                else if (subtabsale.SelectedIndex == 3)
                {
                    ConnectionWithAccess.query = "delete from " + ConnectionWithAccess.tablename[21] + " where d_n  " + (simple_docno.Text.Trim() == string.Empty ? "is null" : "= " + simple_docno.Text.Trim()) + " and prd = '" + ConnectionWithAccess.mprd + "' and d_c = 1";
                    ConnectionCommand.fUpdateInsertDeleteData();
                    isRecord = 0;
                    ConnectionWithAccess.query = "delete from " + ConnectionWithAccess.tablename[03] + " where d_n " + (simple_docno.Text.Trim() == string.Empty ? "is null" : "= " + simple_docno.Text.Trim()) + " and prd = '" + ConnectionWithAccess.mprd + "' and d_c = 1";
                    ConnectionCommand.fUpdateInsertDeleteData();
                }
                add_amount_in_51(ConnectionWithAccess.mprd, sia_n.Text, sis_a.Text, (old_sale_invoice_amount * -1));
                add_amount_in_51(ConnectionWithAccess.mprd, sia_n.Text, "@@@", (old_sale_invoice_amount * -1));
                get_a_n_from_d_c("S", Convert.ToInt32(sidbc.SelectedValue.ToString()));
                if (periodofgst)
                    add_amount_in_51(ConnectionWithAccess.mprd, "6000", "@@@", (old_sale_invoice_amount * 1));
                else
                {
                    if (sitaxamt.Text != "" || si_igst_tax_amount != 0)
                        add_amount_in_51(ConnectionWithAccess.mprd, "6000", "@@@", (old_sale_invoice_amount * 1));
                    else
                        add_amount_in_51(ConnectionWithAccess.mprd, "6000R1", "@@@", (old_sale_invoice_amount * 1));
                }
                add_amount_in_51(ConnectionWithAccess.mprd, "5000", "@@@", old_sale_invoice_amount * -1);
            }
        }

        private void add_cash_received_in_sale_invoice()
        {
            ConnectionWithAccess.cash_a_n = get_a_n_from_d_c("C", 4);
            ConnectionWithAccess.query = "delete from " + ConnectionWithAccess.tablename[24] + " where d_n = " + sidocno.Text + " and prd = '" + ConnectionWithAccess.mprd + "' and d_c = 4 and r_p = '5'";
            ConnectionCommand.fUpdateInsertDeleteData();
            if (old_cash_received_against_sale_invoice > 0)
            {
                add_amount_in_51(ConnectionWithAccess.mprd, ConnectionWithAccess.cash_a_n, "@@@", Convert.ToDouble(old_cash_received_against_sale_invoice * -1));
                add_amount_in_51(ConnectionWithAccess.mprd, sia_n.Text, sis_a.Text, Convert.ToDouble(old_cash_received_against_sale_invoice * 1));
                add_amount_in_51(ConnectionWithAccess.mprd, sia_n.Text, "@@@", Convert.ToDouble(old_cash_received_against_sale_invoice * 1));
            }
            if (si_cash_received.Text != "0.00")
            {
                temp_double = Convert.ToDouble(si_cash_received.Text);
                ConnectionWithAccess.query = "insert into " + ConnectionWithAccess.tablename[24] + " (prd, d_c, a_n,s_a,d_y,d_n,d_d, camt, r_p, mess, b_t, [user], insert_dt_tm) values('" + ConnectionWithAccess.mprd + "' , 4 , '" + sia_n.Text + "', '" + sis_a.Text + "', '@@@', " + sidocno.Text + " , '" + sidatetime.Value.ToShortDateString() + "', " + si_cash_received.Text + " , '5', '', '3','" + ConnectionWithAccess.muser + "', @currDate )";
                add_user_date_time_function_compulsory_program();
                ConnectionCommand.fUpdateInsertDeleteData();
                add_amount_in_51(ConnectionWithAccess.mprd, ConnectionWithAccess.cash_a_n, "@@@", (temp_double * 1));
                add_amount_in_51(ConnectionWithAccess.mprd, sia_n.Text, sis_a.Text, (temp_double * -1));
                add_amount_in_51(ConnectionWithAccess.mprd, sia_n.Text, "@@@", (temp_double * -1));
            }
        }

        private double get_cash_received_amount_in_sale_invoice()
        {
            temp_double = 0;
            ConnectionWithAccess.cash_a_n = get_a_n_from_d_c("C", 4);
            ConnectionWithAccess.query = "select camt from " + ConnectionWithAccess.tablename[24] + " where d_n = " + sidocno.Text + " and prd = '" + ConnectionWithAccess.mprd + "' and d_c = 4 and r_p = '5'";
            //search_on_particular_date_in_select_query("@d_d_date", sidatetime.Value);
            DataTable dtData1 = ConnectionCommand.fGetDataTable();
            if (dtData1 != null && dtData1.Rows.Count > 0)
            {
                temp_double = Convert.ToDouble(dtData1.Rows[0][0]);
            }
            return temp_double;
        }

        private void add_sale_replacement_record_old()
        {
            ConnectionWithAccess.query = "select d_n from " + ConnectionWithAccess.tablename[30] + " f30 where d_n  " + (srdocno.Text.Trim() == string.Empty ? "is null" : "= " + srdocno.Text.Trim()) + " and prd = '" + ConnectionWithAccess.mprd + "' and d_c = " + srdbc.SelectedValue.ToString();
            DataTable dtData1 = ConnectionCommand.fGetDataTable();

            if (dtData1 != null && dtData1.Rows.Count > 0)
                ConnectionWithAccess.query = "update " + ConnectionWithAccess.tablename[30] + " set a_n = '" + sra_n.Text + "', s_a = '" + srs_a.Text + "', d_y = '" + srd_y.Text + "', d_d = " + srdatetime.Text + " , bamt = " + srbasicamt.Text + " ,tamt = " + srtaxamt.Text + " , gamt = " + srgrossamt.Text + " , tx_code = " + srtaxcode.Text + " , q_cs = " + ConnectionWithAccess.mtq_cs + " ,woodcase = " + ConnectionWithAccess.mwoodcase + " ,tpt = '" + srtransport.Text + "',billx2 = 0 where d_n  " + (srdocno.Text.Trim() == string.Empty ? "is null" : "= " + srdocno.Text.Trim()) + " and prd = '" + ConnectionWithAccess.mprd + "' and d_c = " + srdbc.SelectedValue.ToString();
            else
                ConnectionWithAccess.query = "insert into " + ConnectionWithAccess.tablename[30] + " (prd, d_c, a_n,s_a,d_y,d_n,d_d, bamt,tamt,gamt, tx_code, tq_cs,woodcase,tpt,billx2, [user], insert_dt_tm) values('" + ConnectionWithAccess.mprd + "' , " + srdbc.SelectedValue.ToString() + " , '" + sra_n.Text + "', '" + srs_a.Text + "', '" + srd_y.Text + "', " + srdocno.Text + " , '" + srdatetime.Text + "', " + srbasicamt.Text + " , " + srtaxamt.Text + " , " + srgrossamt.Text + " , " + srtaxcode.Text + " , " + ConnectionWithAccess.mtq_cs + " , " + ConnectionWithAccess.mwoodcase + " , '" + srtransport.Text + "', '" + ConnectionWithAccess.mbillx2 + "' , '" + ConnectionWithAccess.muser + "', @currDate )";
            add_user_date_time_function_compulsory_program();
            ConnectionCommand.fUpdateInsertDeleteData();
            isRecord = 0;
            ConnectionWithAccess.query = "select d_n from " + ConnectionWithAccess.tablename[03] + " f3 where d_n  " + (srdocno.Text.Trim() == string.Empty ? "is null" : "= " + srdocno.Text.Trim()) + " and prd = '" + ConnectionWithAccess.mprd + "' and d_c = " + srdbc.SelectedValue.ToString();
            dtData1 = ConnectionCommand.fGetDataTable();
            if (dtData1 != null && dtData1.Rows.Count > 0)
            {
                isRecord = 1;
            }
            if (isRecord == 0)
            {

                for (row_pointer = 0; row_pointer < sritemlist.Rows.Count - 1; row_pointer++)
                {
                    if (sritemlist.Rows[row_pointer].Cells[3].Value == null || sritemlist.Rows[row_pointer].Cells[3].Value == System.DBNull.Value)
                        sritemlist.Rows[row_pointer].Cells[3].Value = "0";
                    if (sritemlist.Rows[row_pointer].Cells[4].Value == null || sritemlist.Rows[row_pointer].Cells[4].Value == System.DBNull.Value)
                        sritemlist.Rows[row_pointer].Cells[4].Value = "0";
                    ConnectionWithAccess.query = "insert into " + ConnectionWithAccess.tablename[03] + " (prd, d_c, a_n,s_a, d_n,d_d, [type], item_code,title,q_cs,box,qty,price, amount, [user], insert_dt_tm) values('" + ConnectionWithAccess.mprd + "' , " + srdbc.SelectedValue.ToString() + " , '" + sra_n.Text + "', '" + srs_a.Text + "', " + srdocno.Text + " , '" + srdatetime.Text + "', '" + sritemlist.Rows[row_pointer].Cells[0].Value.ToString() + "', '" + sritemlist.Rows[row_pointer].Cells[1].Value.ToString() + "', '" + sritemlist.Rows[row_pointer].Cells[2].Value.ToString() + "', " + sritemlist.Rows[row_pointer].Cells[3].Value.ToString() + " , " + sritemlist.Rows[row_pointer].Cells[4].Value.ToString() + " , " + sritemlist.Rows[row_pointer].Cells[5].Value.ToString() + " , " + sritemlist.Rows[row_pointer].Cells[6].Value.ToString() + " , " + sritemlist.Rows[row_pointer].Cells[7].Value.ToString() + ",'" + ConnectionWithAccess.muser + "', @currDate )";
                    add_user_date_time_function_compulsory_program();
                    ConnectionCommand.fUpdateInsertDeleteData();
                }
            }
            add_amount_in_51(ConnectionWithAccess.mprd, sra_n.Text, srs_a.Text, (Convert.ToDouble(srgrossamt.Text) * -1));
            add_amount_in_51(ConnectionWithAccess.mprd, sra_n.Text, "@@@", (Convert.ToDouble(srgrossamt.Text) * -1));
            get_a_n_from_d_c("R", Convert.ToInt32(srdbc.SelectedValue.ToString()));
            if (Convert.ToDouble(srtaxamt.Text) != 0)
                add_amount_in_51(ConnectionWithAccess.mprd, "6000", "@@@", (Convert.ToDouble(srgrossamt.Text) * -1));
            else
                add_amount_in_51(ConnectionWithAccess.mprd, "6000R1", "@@@", (Convert.ToDouble(srgrossamt.Text) * -1));
        }

        private void delete_old_sale_replacement_record()
        {
            ConnectionWithAccess.query = "delete from " + ConnectionWithAccess.tablename[30] + " where d_n  " + (srdocno.Text.Trim() == string.Empty ? "is null" : "= " + srdocno.Text.Trim()) + " and prd = '" + ConnectionWithAccess.mprd + "' and d_c = " + srdbc.SelectedValue.ToString();
            ConnectionCommand.fUpdateInsertDeleteData();
            ConnectionWithAccess.query = "delete from " + ConnectionWithAccess.tablename[03] + " where d_n " + (srdocno.Text.Trim() == string.Empty ? "is null" : "= " + srdocno.Text.Trim()) + " and prd = '" + ConnectionWithAccess.mprd + "' and d_c = " + srdbc.SelectedValue.ToString();
            ConnectionCommand.fUpdateInsertDeleteData();
            add_amount_in_51(ConnectionWithAccess.mprd, sra_n.Text, srs_a.Text, old_sale_invoice_amount * -1);
            add_amount_in_51(ConnectionWithAccess.mprd, sra_n.Text, "@@@", old_sale_invoice_amount * -1);
            get_a_n_from_d_c("R", Convert.ToInt32(srdbc.SelectedValue.ToString()));
            if (old_sale_replace_amount > 0)
                add_amount_in_51(ConnectionWithAccess.mprd, "6000", "@@@", (Convert.ToDouble(srgrossamt.Text) * -1));
            else
                add_amount_in_51(ConnectionWithAccess.mprd, "6000R1", "@@@", (Convert.ToDouble(srgrossamt.Text) * -1));
        }

        private void add_sale_order_record()
        {
            isRecord = 0;
            ConnectionWithAccess.query = "select d_n from " + ConnectionWithAccess.tablename[7] + " f7 where d_n " + (sodocno.Text.Trim() == string.Empty ? "is null" : "= " + sodocno.Text.Trim()) + " and prd = '" + ConnectionWithAccess.mprd + "' and d_c = " + sodbc.SelectedValue.ToString();
            DataTable dtData1 = ConnectionCommand.fGetDataTable();
            if (dtData1 != null && dtData1.Rows.Count > 0)
            {
                isRecord = 0;
            }

            if (isRecord == 0)
            {
                ConnectionWithAccess.query = "insert into " + ConnectionWithAccess.tablename[7] + " (prd, d_c, a_n,s_a,d_y,d_n,d_d, gamt,tq_cs,tpt, [user], insert_dt_tm) values('" + ConnectionWithAccess.mprd + "' , " + sodbc.SelectedValue.ToString() + " , '" + soa_n.Text + "', '" + sos_a.Text + "', '" + sod_y.Text + "', " + sodocno.Text + " , '" + sodatetime.Value.ToShortDateString() + "' , " + sogrossamt.Text + " , " + ConnectionWithAccess.mtq_cs + " , '" + sotransport.Text + "', '" + ConnectionWithAccess.muser + "', @currDate )";
                add_user_date_time_function_compulsory_program();
                ConnectionCommand.fUpdateInsertDeleteData();
                for (row_pointer = 0; row_pointer < soitemlist.Rows.Count - 1; row_pointer++)
                {
                    if (soitemlist.Rows[row_pointer].Cells[7].Value != null && !string.IsNullOrEmpty(soitemlist.Rows[row_pointer].Cells[7].Value.ToString()))
                    {
                        if (soitemlist.Rows[row_pointer].Cells[3].Value == null || soitemlist.Rows[row_pointer].Cells[3].Value == System.DBNull.Value)
                            soitemlist.Rows[row_pointer].Cells[3].Value = "0";
                        if (soitemlist.Rows[row_pointer].Cells[4].Value == null || soitemlist.Rows[row_pointer].Cells[4].Value == System.DBNull.Value)
                            soitemlist.Rows[row_pointer].Cells[4].Value = "0";
                        ConnectionWithAccess.query = "insert into " + ConnectionWithAccess.tablename[03] + " (prd, d_c, a_n,s_a, d_n,d_d, [type], item_code,title,q_cs,box,qty,price, amount,cat, [user], insert_dt_tm) values('" + ConnectionWithAccess.mprd + "' , " + sodbc.SelectedValue.ToString() + " , '" + soa_n.Text + "', '" + sos_a.Text + "', " + sodocno.Text + " , '" + sodatetime.Text + "', '" + soitemlist.Rows[row_pointer].Cells[0].Value.ToString() + "', '" + soitemlist.Rows[row_pointer].Cells[1].Value.ToString() + "', '" + soitemlist.Rows[row_pointer].Cells[2].Value.ToString() + "', " + soitemlist.Rows[row_pointer].Cells[3].Value.ToString() + " , " + soitemlist.Rows[row_pointer].Cells[4].Value.ToString() + " , " + soitemlist.Rows[row_pointer].Cells[5].Value.ToString() + " , " + soitemlist.Rows[row_pointer].Cells[6].Value.ToString() + " , " + soitemlist.Rows[row_pointer].Cells[7].Value.ToString() + " , '" + soitemlist.Rows[row_pointer].Cells[8].Value.ToString() + "', '" + ConnectionWithAccess.muser + "', @currDate )";
                        add_user_date_time_function_compulsory_program();
                        ConnectionCommand.fUpdateInsertDeleteData();
                    }
                }
            }
        }

        private void delete_old_sale_order_record()
        {
            ConnectionWithAccess.query = "delete from " + ConnectionWithAccess.tablename[7] + " where d_n  " + (sodocno.Text.Trim() == string.Empty ? "is null" : "= " + sodocno.Text.Trim()) + " and prd = '" + ConnectionWithAccess.mprd + "' and d_c = " + sodbc.SelectedValue.ToString();
            ConnectionCommand.fUpdateInsertDeleteData();
        }

        private void delete_old_purc_record()
        {
            ConnectionWithAccess.query = "select [type], item_code, [title], q_cs, [box], qty, price, amount,cat,igst_per,hsn_code,item_squ_id from " + ConnectionWithAccess.tablename[03] + " f3 where d_n " + (pidocno.Text.Trim() == string.Empty ? "is null" : "= " + pidocno.Text.Trim()) + " and prd = '" + ConnectionWithAccess.mprd + "' and d_c = " + Convert.ToInt32(pidbc.SelectedValue.ToString()) + " and s_a = '" + pis_a.Text + "' order by item_squ_id";
            DataTable dtData1 = ConnectionCommand.fGetDataTable();
            if (dtData1 != null && dtData1.Rows.Count > 0)
            {
                for (int iRowCount = 0; iRowCount < dtData1.Rows.Count; iRowCount++)
                {
                    mtype = dtData1.Rows[iRowCount][0].ToString();
                    mitem_code = dtData1.Rows[iRowCount][1].ToString();
                    mtitle = dtData1.Rows[iRowCount][2].ToString();
                    mqty = Convert.ToDouble(dtData1.Rows[iRowCount][5].ToString()) * -1;
                    update_item_stock(mtype, mitem_code, "", mqty);
                }
            }

            ConnectionWithAccess.query = "delete from " + ConnectionWithAccess.tablename[22] + " where d_n " + (old_purchase_invoice_number.Trim() == string.Empty ? "is null" : "= " + old_purchase_invoice_number.Trim()) + " and prd = '" + ConnectionWithAccess.mprd + "' and d_c = " + Convert.ToInt32(pidbc.SelectedValue.ToString()) + " and a_n = '" + pia_n.Text + "' and s_a = '" + pis_a.Text + "'";
            ConnectionCommand.fUpdateInsertDeleteData();
            ConnectionWithAccess.query = "delete from " + ConnectionWithAccess.tablename[03] + " where d_n " + (old_purchase_invoice_number.Trim() == string.Empty ? "is null" : "= " + old_purchase_invoice_number.Trim()) + " and prd = '" + ConnectionWithAccess.mprd + "' and d_c = " + Convert.ToInt32(pidbc.SelectedValue.ToString()) + " and a_n = '" + pia_n.Text + "' and s_a = '" + pis_a.Text + "'";
            ConnectionCommand.fUpdateInsertDeleteData();
            add_amount_in_51(ConnectionWithAccess.mprd, pia_n.Text, pis_a.Text, old_purchase_invoice_amount);
            add_amount_in_51(ConnectionWithAccess.mprd, pia_n.Text, "@@@", old_purchase_invoice_amount);
            add_amount_in_51(ConnectionWithAccess.mprd, "7000", "@@@", old_purchase_invoice_amount * -1);
            add_amount_in_51(ConnectionWithAccess.mprd, "5000", "@@@", old_purchase_invoice_amount);
        }

        private void add_purc_record()
        {
            if (pi_freight_amt.Text == "")
                pi_freight_amt.Text = "0.00";
            if (pi_packing_amt.Text == "")
                pi_packing_amt.Text = "0.00";
            if (pi_insurance_amt.Text == "")
                pi_insurance_amt.Text = "0.00";
            if (pi_other_amt.Text == "")
                pi_other_amt.Text = "0.00";
            if (pitx_code.Text == "")
                pitx_code.Text = "0";
            get_account_details_from_01(pia_n.Text, pis_a.Text);
            ConnectionWithAccess.query = "select d_n from " + ConnectionWithAccess.tablename[22] + " f22 where d_n " + (pidocno.Text.Trim() == string.Empty ? "is null" : "= " + pidocno.Text.Trim()) + " and prd = '" + ConnectionWithAccess.mprd + "' and d_c = " + Convert.ToInt32(pidbc.SelectedValue.ToString()) + " and a_n = '" + pia_n.Text + "' and s_a = '" + pis_a.Text + "'";
            DataTable dtdata1 = ConnectionCommand.fGetDataTable();

            if (dtdata1 != null && dtdata1.Rows.Count > 0)
            {
                if (periodofgst)
                {
                    if (ConnectionWithAccess.company_details[5].Trim() != account_detail_from_01[12].Trim())
                        ConnectionWithAccess.query = "update " + ConnectionWithAccess.tablename[22] + " set a_n = '" + pia_n.Text + "', s_a = '" + pis_a.Text + "', d_d = " + pidatetime.Value.ToShortDateString() + " , bamt = " + pibasicamt.Text + " , gamt = " + pigrossamt.Text + " , tx_code = " + pitaxcode.Text + " , q_cs = " + ConnectionWithAccess.mtq_cs + " , tpt = '" + pitransport.Text + "', igst_amt = " + (Convert.ToInt32(tb_pi_igst_tax_amount.Text)) + ", [user] = '" + ConnectionWithAccess.muser + "', insert_dt_tm = @currDate, TO_A_N = '" + pi_To_a_n.Text + "', TO_S_A = '" + pi_To_s_a.Text + "' where d_n " + (pidocno.Text.Trim() == string.Empty ? "is null" : "= " + pidocno.Text.Trim()) + " and prd = '" + ConnectionWithAccess.mprd + "' and d_c = " + Convert.ToInt32(pidbc.SelectedValue.ToString()) + " and a_n = '" + pia_n.Text + "' and s_a = '" + pis_a.Text + "'";
                    else
                        ConnectionWithAccess.query = "update " + ConnectionWithAccess.tablename[22] + " set a_n = '" + pia_n.Text + "', s_a = '" + pis_a.Text + "', d_d = " + pidatetime.Value.ToShortDateString() + " , bamt = " + pibasicamt.Text + " , gamt = " + pigrossamt.Text + " , tx_code = " + pitaxcode.Text + " , q_cs = " + ConnectionWithAccess.mtq_cs + " , tpt = '" + pitransport.Text + "', CGST_AMT = " + (Convert.ToInt32(tb_pi_igst_tax_amount.Text) / 2) + " , SGST_AMT = " + (Convert.ToInt32(tb_pi_igst_tax_amount.Text) / 2) + ", [user] = '" + ConnectionWithAccess.muser + "', insert_dt_tm = @currDate, TO_A_N = '" + pi_To_a_n.Text + "', TO_S_A = '" + pi_To_s_a.Text + "' where d_n " + (pidocno.Text.Trim() == string.Empty ? "is null" : "= " + pidocno.Text.Trim()) + " and prd = '" + ConnectionWithAccess.mprd + "' and d_c = " + Convert.ToInt32(pidbc.SelectedValue.ToString()) + " and a_n = '" + pia_n.Text + "' and s_a = '" + pis_a.Text + "'";
                }
                else
                    ConnectionWithAccess.query = "update " + ConnectionWithAccess.tablename[22] + " set a_n = '" + pia_n.Text + "', s_a = '" + pis_a.Text + "', d_d = " + pidatetime.Value.ToShortDateString() + " , bamt = " + pibasicamt.Text + " ,tamt = " + pitaxamt.Text + " , gamt = " + pigrossamt.Text + " , tx_code = " + pitaxcode.Text + " , q_cs = " + ConnectionWithAccess.mtq_cs + " ,woodcase = " + ConnectionWithAccess.mwoodcase + " ,tpt = '" + pitransport.Text + "',billx2 = '0', [user] = '" + ConnectionWithAccess.muser + "', insert_dt_tm = @currDate, TO_A_N = '" + pi_To_a_n.Text + "', TO_S_A = '" + pi_To_s_a.Text + "' where d_n " + (pidocno.Text.Trim() == string.Empty ? "is null" : "= " + pidocno.Text.Trim()) + " and prd = '" + ConnectionWithAccess.mprd + "' and d_c = " + Convert.ToInt32(pidbc.SelectedValue.ToString()) + " and a_n = '" + pia_n.Text + "' and s_a = '" + pis_a.Text + "'";
            }
            else
            {
                if (periodofgst)
                {
                    if (ConnectionWithAccess.company_details[5].Trim() != account_detail_from_01[12].Trim())
                        ConnectionWithAccess.query = "insert into " + ConnectionWithAccess.tablename[22] + " (prd, d_c, a_n,s_a,d_y,d_n,d_d, bamt,tamt,rund_amt,gamt, tx_code, tq_cs,woodcase,tpt,b_t,igst_amt,freight_AMT,packing_AMT,insurance_AMT,other_AMT,IGST_PACK_PER, [user], insert_dt_tm, TO_A_N, TO_S_A) values('" + ConnectionWithAccess.mprd + "' , " + pidbc.SelectedValue.ToString() + " , '" + pia_n.Text + "', '" + pis_a.Text + "', '" + ConnectionWithAccess.md_y + "', " + pidocno.Text + " , '" + pidatetime.Value.ToShortDateString() + "', " + pibasicamt.Text + " , " + pitaxamt.Text + " , " + piroundoffamt.Text + " , " + pigrossamt.Text + " , " + pitx_code.Text + " , " + ConnectionWithAccess.mtq_cs + " , " + ConnectionWithAccess.mwoodcase + " , '" + pitransport.Text + "','1'," + Convert.ToDouble(tb_pi_igst_tax_amount.Text) + " ," + Convert.ToDouble(pi_freight_amt.Text) + " ," + Convert.ToDouble(pi_packing_amt.Text) + " ," + Convert.ToDouble(pi_insurance_amt.Text) + " ," + Convert.ToDouble(pi_other_amt.Text) + " ," + Convert.ToDouble(cb_pack_igst_per.Text) + ",'" + ConnectionWithAccess.muser + "', @currDate, '" + pi_To_a_n.Text + "', '" + pi_To_s_a.Text + "' )";
                    else
                        ConnectionWithAccess.query = "insert into " + ConnectionWithAccess.tablename[22] + " (prd, d_c, a_n,s_a,d_y,d_n,d_d, bamt,tamt,rund_amt,gamt, tx_code, tq_cs,woodcase,tpt,b_t,CGST_AMT,SGST_AMT,freight_AMT,packing_AMT,insurance_AMT,other_AMT,IGST_PACK_PER, [user], insert_dt_tm, TO_A_N, TO_S_A) values('" + ConnectionWithAccess.mprd + "' , " + pidbc.SelectedValue.ToString() + " , '" + pia_n.Text + "', '" + pis_a.Text + "', '" + ConnectionWithAccess.md_y + "', " + pidocno.Text + " , '" + pidatetime.Value.ToShortDateString() + "', " + pibasicamt.Text + " , " + pitaxamt.Text + " , " + piroundoffamt.Text + " , " + pigrossamt.Text + " , " + pitx_code.Text + " , " + ConnectionWithAccess.mtq_cs + " , " + ConnectionWithAccess.mwoodcase + " , '" + pitransport.Text + "','1'," + (Convert.ToDouble(tb_pi_igst_tax_amount.Text) / 2) + " ," + (Convert.ToDouble(tb_pi_igst_tax_amount.Text) / 2) + " ," + Convert.ToDouble(pi_freight_amt.Text) + " ," + Convert.ToDouble(pi_packing_amt.Text) + " ," + Convert.ToDouble(pi_insurance_amt.Text) + " ," + Convert.ToDouble(pi_other_amt.Text) + " ," + Convert.ToDouble(cb_pack_igst_per.Text) + ",'" + ConnectionWithAccess.muser + "', @currDate, '" + pi_To_a_n.Text + "', '" + pi_To_s_a.Text + "' )";
                }
                else
                    ConnectionWithAccess.query = "insert into " + ConnectionWithAccess.tablename[22] + " (prd, d_c, a_n,s_a,d_y,d_n,d_d, bamt,tamt,rund_amt,gamt, tx_code, tq_cs,woodcase,tpt,b_t,freight_AMT,packing_AMT,insurance_AMT,other_AMT, [user], insert_dt_tm, TO_A_N, TO_S_A) values('" + ConnectionWithAccess.mprd + "' , " + pidbc.SelectedValue.ToString() + " , '" + pia_n.Text + "', '" + pis_a.Text + "', '" + ConnectionWithAccess.md_y + "', " + pidocno.Text + " , '" + pidatetime.Value.ToShortDateString() + "', " + pibasicamt.Text + " , " + pitaxamt.Text + " , " + piroundoffamt.Text + " , " + pigrossamt.Text + " , " + pitx_code.Text + " , " + ConnectionWithAccess.mtq_cs + " , " + ConnectionWithAccess.mwoodcase + " , '" + pitransport.Text + "','1'" + " ," + Convert.ToDouble(pi_freight_amt.Text) + " ," + Convert.ToDouble(pi_packing_amt.Text) + " ," + Convert.ToDouble(pi_insurance_amt.Text) + " ," + Convert.ToDouble(pi_other_amt.Text) + ",'" + ConnectionWithAccess.muser + "', @currDate, '" + pi_To_a_n.Text + "', '" + pi_To_s_a.Text + "' )";
            }
            add_user_date_time_function_compulsory_program();
            ConnectionCommand.fUpdateInsertDeleteData();
            for (row_pointer = 0; row_pointer < piitemlist.Rows.Count - 1; row_pointer++)
            {
                if (piitemlist.Rows[row_pointer].Cells[7].Value != null && !string.IsNullOrEmpty(piitemlist.Rows[row_pointer].Cells[7].Value.ToString()))
                {
                    if (Convert.ToDouble(piitemlist.Rows[row_pointer].Cells[7].Value.ToString()) > 0)
                    {
                        if (piitemlist.Rows[row_pointer].Cells[3].Value == null || piitemlist.Rows[row_pointer].Cells[3].Value == System.DBNull.Value)
                            piitemlist.Rows[row_pointer].Cells[3].Value = "0";
                        if (piitemlist.Rows[row_pointer].Cells[4].Value == null || piitemlist.Rows[row_pointer].Cells[4].Value == System.DBNull.Value)
                            piitemlist.Rows[row_pointer].Cells[4].Value = "0";
                        if (piitemlist.Rows[row_pointer].Cells[8].Value == null || piitemlist.Rows[row_pointer].Cells[8].Value == System.DBNull.Value)
                            piitemlist.Rows[row_pointer].Cells[8].Value = "PCS";
                        else if (piitemlist.Rows[row_pointer].Cells[8].Value.ToString() == "")
                            piitemlist.Rows[row_pointer].Cells[8].Value = "PCS";
                        if (piitemlist.Rows[row_pointer].Cells[9].Value == null || piitemlist.Rows[row_pointer].Cells[9].Value == System.DBNull.Value)
                            piitemlist.Rows[row_pointer].Cells[9].Value = "0";
                        if (piitemlist.Rows[row_pointer].Cells[10].Value == null || piitemlist.Rows[row_pointer].Cells[10].Value == System.DBNull.Value)
                            piitemlist.Rows[row_pointer].Cells[10].Value = "0";
                        if (piitemlist.Rows[row_pointer].Cells[2].Value != null)
                        {
                            find_item_name_in_05(piitemlist.Rows[row_pointer].Cells[2].Value.ToString().Trim());
                            if (mfound != "Y")
                            {
                                find_new_item_code();
                                piitemlist.Rows[row_pointer].Cells[0].Value = tbItemType.Text;
                                piitemlist.Rows[row_pointer].Cells[1].Value = tbItemCode.Text;
                                ConnectionWithAccess.query = "insert into " + ConnectionWithAccess.tablename[05] + " ([type],item_code,[title],p_price,price,packing,box,cat,opn_stk,clo_stk,igst_per,hsn_code, [user], insert_dt_tm) values('" + piitemlist.Rows[row_pointer].Cells[0].Value.ToString().Trim() + "','" + piitemlist.Rows[row_pointer].Cells[1].Value.ToString().Trim() + "','" + piitemlist.Rows[row_pointer].Cells[2].Value.ToString().Trim().ToUpper() + "', " + tb_purc_price.Text + " , " + piitemlist.Rows[row_pointer].Cells[6].Value.ToString().Trim() + " , " + piitemlist.Rows[row_pointer].Cells[4].Value.ToString().Trim() + " , " + piitemlist.Rows[row_pointer].Cells[5].Value.ToString().Trim() + " , '" + piitemlist.Rows[row_pointer].Cells[8].Value.ToString().Trim() + "' , 0 , 0 , " + piitemlist.Rows[row_pointer].Cells[9].Value.ToString().Trim() + " , " + piitemlist.Rows[row_pointer].Cells[10].Value.ToString().Trim() + ",'" + ConnectionWithAccess.muser + "', @currDate )";
                                add_user_date_time_function_compulsory_program();
                                ConnectionCommand.fUpdateInsertDeleteData();
                            }
                            mtype = piitemlist.Rows[row_pointer].Cells[0].Value.ToString();
                            mitem_code = piitemlist.Rows[row_pointer].Cells[1].Value.ToString();
                            mtitle = piitemlist.Rows[row_pointer].Cells[2].Value.ToString();
                            mqty = Convert.ToDouble(piitemlist.Rows[row_pointer].Cells[5].Value.ToString());
                            update_item_stock(mtype, mitem_code, "", mqty);
                        }
                    }
                }
            }
            for (row_pointer = 0; row_pointer < piitemlist.Rows.Count - 1; row_pointer++)
            {
                if (piitemlist.Rows[row_pointer].Cells[7].Value != null && !string.IsNullOrEmpty(piitemlist.Rows[row_pointer].Cells[7].Value.ToString()))
                {
                    if (Convert.ToDouble(piitemlist.Rows[row_pointer].Cells[7].Value.ToString()) > 0)
                    {
                        //if (piitemlist.Rows[row_pointer].Cells[3].Value == null || piitemlist.Rows[row_pointer].Cells[3].Value == System.DBNull.Value)
                        //    piitemlist.Rows[row_pointer].Cells[3].Value = "0";
                        //if (piitemlist.Rows[row_pointer].Cells[4].Value == null || piitemlist.Rows[row_pointer].Cells[4].Value == System.DBNull.Value)
                        //    piitemlist.Rows[row_pointer].Cells[4].Value = "0";
                        if (periodofgst)
                        {
                            pi_igst_tax_per = Convert.ToDouble(piitemlist.Rows[row_pointer].Cells[9].Value.ToString());
                            pi_cgst_tax_per = pi_igst_tax_per / 2;
                            pi_sgst_tax_per = pi_igst_tax_per / 2;
                            pi_cgst_tax_amount = Convert.ToDouble(piitemlist.Rows[row_pointer].Cells[7].Value.ToString()) * pi_cgst_tax_per / 100;
                            pi_sgst_tax_amount = Convert.ToDouble(piitemlist.Rows[row_pointer].Cells[7].Value.ToString()) * pi_sgst_tax_per / 100;
                            pi_igst_tax_amount = Convert.ToDouble(piitemlist.Rows[row_pointer].Cells[7].Value.ToString()) * pi_igst_tax_per / 100;
                            ConnectionWithAccess.query = "insert into " + ConnectionWithAccess.tablename[03] + " (prd, d_c, a_n,s_a, d_n,d_d, [type], item_code,title,q_cs,box,qty,price, amount,cat,cgst_per,cgst_amt,sgst_per,sgst_amt,igst_per,igst_amt,hsn_code, [user], insert_dt_tm) values('" + ConnectionWithAccess.mprd + "' , " + pidbc.SelectedValue.ToString() + " , '" + pia_n.Text + "', '" + pis_a.Text + "', " + pidocno.Text + " , '" + pidatetime.Text + "', '" + piitemlist.Rows[row_pointer].Cells[0].Value.ToString() + "', '" + piitemlist.Rows[row_pointer].Cells[1].Value.ToString() + "', '" + piitemlist.Rows[row_pointer].Cells[2].Value.ToString() + "', " + piitemlist.Rows[row_pointer].Cells[3].Value.ToString() + " , " + piitemlist.Rows[row_pointer].Cells[4].Value.ToString() + " , " + piitemlist.Rows[row_pointer].Cells[5].Value.ToString() + " , " + piitemlist.Rows[row_pointer].Cells[6].Value.ToString() + " , " + Convert.ToDouble(piitemlist.Rows[row_pointer].Cells[7].Value.ToString()) + ", '" + piitemlist.Rows[row_pointer].Cells[8].Value.ToString() + "', " + pi_cgst_tax_per + " , " + pi_cgst_tax_amount + " , " + pi_sgst_tax_per + " , " + pi_sgst_tax_amount + " , " + pi_igst_tax_per + " , " + pi_igst_tax_amount + " , " + piitemlist.Rows[row_pointer].Cells[10].Value.ToString() + " ,'" + ConnectionWithAccess.muser + "', @currDate )";
                        }
                        else
                            ConnectionWithAccess.query = "insert into " + ConnectionWithAccess.tablename[03] + " (prd, d_c, a_n,s_a, d_n,d_d, [type], item_code,title,q_cs,box,qty,price, amount,cat, [user], insert_dt_tm) values('" + ConnectionWithAccess.mprd + "' , " + pidbc.SelectedValue.ToString() + " , '" + pia_n.Text + "', '" + pis_a.Text + "', " + pidocno.Text + " , '" + pidatetime.Text + "', '" + piitemlist.Rows[row_pointer].Cells[0].Value.ToString() + "', '" + piitemlist.Rows[row_pointer].Cells[1].Value.ToString() + "', '" + piitemlist.Rows[row_pointer].Cells[2].Value.ToString() + "', " + piitemlist.Rows[row_pointer].Cells[3].Value.ToString() + " , " + piitemlist.Rows[row_pointer].Cells[4].Value.ToString() + " , " + piitemlist.Rows[row_pointer].Cells[5].Value.ToString() + " , " + piitemlist.Rows[row_pointer].Cells[6].Value.ToString() + " , " + piitemlist.Rows[row_pointer].Cells[7].Value.ToString() + " , '" + piitemlist.Rows[row_pointer].Cells[8].Value.ToString() + "','" + ConnectionWithAccess.muser + "', @currDate )";
                        add_user_date_time_function_compulsory_program();
                        ConnectionCommand.fUpdateInsertDeleteData();
                    }
                }
            }
            add_amount_in_51(ConnectionWithAccess.mprd, pia_n.Text, pis_a.Text, Convert.ToDouble(pigrossamt.Text) * -1);
            add_amount_in_51(ConnectionWithAccess.mprd, pia_n.Text, "@@@", Convert.ToDouble(pigrossamt.Text) * -1);
            add_amount_in_51(ConnectionWithAccess.mprd, "7000", "@@@", Convert.ToDouble(pigrossamt.Text));
            add_amount_in_51(ConnectionWithAccess.mprd, "5000", "@@@", (Convert.ToDouble(pigrossamt.Text) * -1));
            add_cash_payment_in_purchase_invoice();
        }

        private void add_cash_payment_in_purchase_invoice()
        {
            ConnectionWithAccess.cash_a_n = get_a_n_from_d_c("C", 4);
            ConnectionWithAccess.query = "delete from " + ConnectionWithAccess.tablename[24] + " where d_n = " + pidocno.Text + " and prd = '" + ConnectionWithAccess.mprd + "' and d_c = 4 and r_p = '6'";
            ConnectionCommand.fUpdateInsertDeleteData();
            if (old_cash_payment_against_purchase_invoice > 0)
            {
                add_amount_in_51(ConnectionWithAccess.mprd, ConnectionWithAccess.cash_a_n, "@@@", Convert.ToDouble(old_cash_payment_against_purchase_invoice * 1));
                add_amount_in_51(ConnectionWithAccess.mprd, pia_n.Text, pis_a.Text, Convert.ToDouble(old_cash_payment_against_purchase_invoice * -1));
                add_amount_in_51(ConnectionWithAccess.mprd, pia_n.Text, "@@@", Convert.ToDouble(old_cash_payment_against_purchase_invoice * -1));
            }
            if (pi_cash_paid.Text != "0.00" && pi_cash_paid.Text != "0")
            {
                temp_double = Convert.ToDouble(pi_cash_paid.Text) * -1;
                ConnectionWithAccess.query = "insert into " + ConnectionWithAccess.tablename[24] + " (prd, d_c, a_n,s_a,d_y,d_n,d_d, camt, r_p, mess, b_t, [user], insert_dt_tm) values('" + ConnectionWithAccess.mprd + "' , 4 , '" + pia_n.Text + "', '" + pis_a.Text + "', '@@@', " + pidocno.Text + " , '" + pidatetime.Value.ToShortDateString() + "', " + temp_double + " , '6', '', '3','" + ConnectionWithAccess.muser + "', @currDate )";
                add_user_date_time_function_compulsory_program();
                ConnectionCommand.fUpdateInsertDeleteData();
                add_amount_in_51(ConnectionWithAccess.mprd, ConnectionWithAccess.cash_a_n, "@@@", (temp_double * 1));
                add_amount_in_51(ConnectionWithAccess.mprd, pia_n.Text, pis_a.Text, (temp_double * -1));
                add_amount_in_51(ConnectionWithAccess.mprd, pia_n.Text, "@@@", (temp_double * -1));
            }
        }

        private double get_cash_payment_amount_in_purchase_invoice()
        {
            temp_double = 0;
            ConnectionWithAccess.cash_a_n = get_a_n_from_d_c("C", 4);
            ConnectionWithAccess.query = "select camt from " + ConnectionWithAccess.tablename[24] + " where d_n = " + pidocno.Text + " and prd = '" + ConnectionWithAccess.mprd + "' and d_c = 4 and r_p = '6' and a_n = '" + pia_n.Text + "' and s_a = '" + pis_a.Text + "'  and d_d = @d_d_date";
            search_on_particular_date_in_select_query("@d_d_date", pidatetime.Value);
            DataTable dtData1 = ConnectionCommand.fGetDataTable();
            if (dtData1 != null && dtData1.Rows.Count > 0)
            {
                temp_double = Convert.ToDouble(dtData1.Rows[0][0]) * -1;
            }
            return temp_double;
        }

        private void add_user_date_time_function_compulsory_program()
        {
            List<ConnectionWithAccess.QueryParams> objParams = new List<ConnectionWithAccess.QueryParams>();
            ConnectionWithAccess.QueryParams ParamFrom = new ConnectionWithAccess.QueryParams();
            ParamFrom.paramName = "@currDate";
            ParamFrom.paramValue = DateTime.Today;
            objParams.Add(ParamFrom);

            ConnectionWithAccess.QueryParamList = objParams;
        }

        private void add_bank_record()
        {
            // r_p - 1 "Cash Deposit"
            //r_p = 2 Receipt
            //r_p = 3 cash withdrawal
            // r_p = 4 payment
            // b_t = 2 for balance, b_t = 3 for passed, b_t = 4 for failed.
            //temp_word = bddatetime.Value.Year.ToString();
            //temp_word += bddatetime.Value.Month.ToString();
            //temp_word += bddatetime.Value.Date.ToString();
            //temp_word += bddocno.Text.Trim();
            //bddocno.Text = temp_word;
            isRecord = 0;
            if (brchkno.Text == "")
                brchkno.Text = "0";
            if (isRecord == 0)
            {
                if (subtabbank.SelectedIndex == 0)
                {
                    if (cbchqbank.Text != "")
                        update_bank_name(bra_n.Text, brs_a.Text, cbchqbank.Text);
                    if (brchkstatus.SelectedIndex == 1)
                    {
                        ConnectionWithAccess.query = "insert into " + ConnectionWithAccess.tablename[23] + " (prd, d_c, a_n,s_a,d_y,d_n,d_d, bamt, r_p, mess, bank, ck_no, ck_dt, b_T, pass_date,tran_d_c, [user], insert_dt_tm) values('" + ConnectionWithAccess.mprd + "' , " + Convert.ToInt32(brdbc.SelectedValue.ToString()) + " , '" + bra_n.Text + "', '" + brs_a.Text + "', '@@@', " + brdocno.Text + " , '" + brdatetime.Text + "', " + bramt.Text + " , '2', '" + brcomm.Text + "', '" + cbchqbank.Text + "', " + brchkno.Text + " , " + brchkdate.Text + " , '3', '" + brpassdate.Text + "',0, '" + ConnectionWithAccess.muser + "', @currDate )";
                        add_user_date_time_function_compulsory_program();
                        ConnectionCommand.fUpdateInsertDeleteData();
                        add_amount_in_51(ConnectionWithAccess.mprd, ConnectionWithAccess.bank_a_n, "@@@", (Convert.ToDouble(bramt.Text) * 1));
                        if (brs_a.Text != null)
                            add_amount_in_51(ConnectionWithAccess.mprd, bra_n.Text, brs_a.Text, (Convert.ToDouble(bramt.Text) * -1));
                        add_amount_in_51(ConnectionWithAccess.mprd, bra_n.Text, "@@@", (Convert.ToDouble(bramt.Text) * -1));
                    }
                    else if (brchkstatus.SelectedIndex == 0)
                    {
                        ConnectionWithAccess.query = "insert into " + ConnectionWithAccess.tablename[23] + " (prd, d_c, a_n,s_a,d_y,d_n,d_d, bamt, r_p, mess, bank, ck_no, ck_dt, b_t,tran_d_c, [user], insert_dt_tm) values('" + ConnectionWithAccess.mprd + "' , " + Convert.ToInt32(brdbc.SelectedValue.ToString()) + " , '" + bra_n.Text + "', '" + brs_a.Text + "', '@@@', " + brdocno.Text + " , '" + brdatetime.Text + "', " + bramt.Text + " , '2', '" + brcomm.Text + "', '" + cbchqbank.Text + "', " + brchkno.Text + " , '" + brchkdate.Text + "', '2',0, '" + ConnectionWithAccess.muser + "', @currDate )";
                        add_user_date_time_function_compulsory_program();
                        ConnectionCommand.fUpdateInsertDeleteData();
                    }
                    else if (brchkstatus.SelectedIndex == 2)
                    {
                        ConnectionWithAccess.query = "insert into " + ConnectionWithAccess.tablename[23] + " (prd, d_c, a_n,s_a,d_y,d_n,d_d, bamt, r_p, mess, bank, ck_no, ck_dt, b_t,tran_d_c, [user], insert_dt_tm) values('" + ConnectionWithAccess.mprd + "' , " + Convert.ToInt32(brdbc.SelectedValue.ToString()) + " , '" + bra_n.Text + "', '" + brs_a.Text + "', '@@@', " + brdocno.Text + " , '" + brdatetime.Text + "', " + bramt.Text + " , '2', '" + brcomm.Text + "', '" + cbchqbank.Text + "', " + brchkno.Text + " , '" + brchkdate.Text + "', '4',0, '" + ConnectionWithAccess.muser + "', @currDate )";
                        add_user_date_time_function_compulsory_program();
                        ConnectionCommand.fUpdateInsertDeleteData();
                    }
                    brcurbankbal.Text = Convert.ToString(get_bank_balance(ConnectionWithAccess.bank_a_n, "@@@", DateTime.Today.ToShortDateString()));
                }
                else if (subtabbank.SelectedIndex == 1)
                {
                    temp_double = 0;
                    if (cbchqbank.Text != "")
                        update_bank_name(bpa_n.Text, bps_a.Text, cbchqbank.Text);
                    add_bank_gst_taxes();
                    if (bp_dgv_gst_tax_brief.Rows.Count < 2)
                    {
                        if (bpchkno.Text == "")
                            bpchkno.Text = "0";
                        if (bpchkstatus.SelectedIndex == 1)
                        {
                            ConnectionWithAccess.query = "insert into " + ConnectionWithAccess.tablename[23] + " (prd, d_c, a_n,s_a,d_y,d_n,d_d, bamt, r_p, mess, bank, ck_no, ck_dt, b_T, pass_date,tran_d_c, [user], insert_dt_tm) values('" + ConnectionWithAccess.mprd + "' , " + Convert.ToInt32(bpdbc.SelectedValue.ToString()) + " , '" + bpa_n.Text + "', '" + bps_a.Text + "', '@@@', " + bpdocno.Text + " , '" + bpdatetime.Text + "', " + (Convert.ToDouble(bpamt.Text) * -1) + " , '4', '" + bpcomm.Text + "', '" + cbchqbank.Text + "', " + bpchkno.Text + " , '" + bpchkdate.Text + "', '3', '" + bppassdate.Text + "',0, '" + ConnectionWithAccess.muser + "', @currDate )";
                            add_user_date_time_function_compulsory_program();
                            ConnectionCommand.fUpdateInsertDeleteData();
                            add_amount_in_51(ConnectionWithAccess.mprd, ConnectionWithAccess.bank_a_n, "@@@", (Convert.ToDouble(bpamt.Text) * -1));
                            if (bps_a.Text != null)
                                add_amount_in_51(ConnectionWithAccess.mprd, bpa_n.Text, bps_a.Text, (Convert.ToDouble(bpamt.Text) * 1));
                            add_amount_in_51(ConnectionWithAccess.mprd, bpa_n.Text, "@@@", (Convert.ToDouble(bpamt.Text) * 1));
                        }
                        else if (bpchkstatus.SelectedIndex == 0)
                        {
                            ConnectionWithAccess.query = "insert into " + ConnectionWithAccess.tablename[23] + " (prd, d_c, a_n,s_a,d_y,d_n,d_d, bamt, r_p, mess, bank, ck_no, ck_dt, b_t, pass_date,tran_d_c, [user], insert_dt_tm) values('" + ConnectionWithAccess.mprd + "' , " + Convert.ToInt32(bpdbc.SelectedValue.ToString()) + " , '" + bpa_n.Text + "', '" + bps_a.Text + "', '@@@', " + bpdocno.Text + " , '" + bpdatetime.Text + "', " + (Convert.ToDouble(bpamt.Text) * -1) + " , '4', '" + bpcomm.Text + "', '" + cbchqbank.Text + "', " + bpchkno.Text + " , '" + bpchkdate.Text + "', '2', '" + bppassdate.Text + "',0, '" + ConnectionWithAccess.muser + "', @currDate )";
                            add_user_date_time_function_compulsory_program();
                            ConnectionCommand.fUpdateInsertDeleteData();
                        }
                        else if (bpchkstatus.SelectedIndex == 2)
                        {
                            ConnectionWithAccess.query = "insert into " + ConnectionWithAccess.tablename[23] + " (prd, d_c, a_n,s_a,d_y,d_n,d_d, bamt, r_p, mess, bank, ck_no, ck_dt, b_t, pass_date,tran_d_c, [user], insert_dt_tm) values('" + ConnectionWithAccess.mprd + "' , " + Convert.ToInt32(bpdbc.SelectedValue.ToString()) + " , '" + bpa_n.Text + "', '" + bps_a.Text + "', '@@@', " + bpdocno.Text + " , '" + bpdatetime.Text + "', " + (Convert.ToDouble(bpamt.Text) * -1) + " , '4', '" + bpcomm.Text + "', '" + cbchqbank.Text + "', " + bpchkno.Text + " , '" + bpchkdate.Text + "', '4', '" + bppassdate.Text + "',0, '" + ConnectionWithAccess.muser + "', @currDate )";
                            add_user_date_time_function_compulsory_program();
                            ConnectionCommand.fUpdateInsertDeleteData();
                        }
                    }
                    else
                    {
                        if (cbchqbank.Text == "")
                            cbchqbank.Text = "0";
                        if (bpchkno.Text == "")
                            bpchkno.Text = "0";

                        if (bpchkstatus.SelectedIndex == 1)
                        {
                            ConnectionWithAccess.query = "insert into " + ConnectionWithAccess.tablename[23] + " (prd, d_c, a_n,s_a,d_y,d_n,d_d, bamt, r_p, mess, bank, ck_no, ck_dt, b_T, pass_date,igst_amt,tran_d_c, [user], insert_dt_tm) values('" + ConnectionWithAccess.mprd + "' , " + Convert.ToInt32(bpdbc.SelectedValue.ToString()) + " , '" + bpa_n.Text + "', '" + bps_a.Text + "', '@@@', " + bpdocno.Text + " , '" + bpdatetime.Text + "', " + (Convert.ToDouble(bpamt.Text) * -1) + " , '4', '" + bpcomm.Text + "', '" + cbchqbank.Text + "', " + bpchkno.Text + " , '" + bpchkdate.Text + "', '3', '" + bppassdate.Text + "', " + temp_double + " ,0, '" + ConnectionWithAccess.muser + "', @currDate )";
                            add_user_date_time_function_compulsory_program();
                            ConnectionCommand.fUpdateInsertDeleteData();
                            add_amount_in_51(ConnectionWithAccess.mprd, ConnectionWithAccess.bank_a_n, "@@@", (Convert.ToDouble(bramt.Text) * -1));
                            if (bps_a.Text != null)
                                add_amount_in_51(ConnectionWithAccess.mprd, bpa_n.Text, bps_a.Text, (Convert.ToDouble(bramt.Text) * 1));
                            add_amount_in_51(ConnectionWithAccess.mprd, bpa_n.Text, "@@@", (Convert.ToDouble(bramt.Text) * 1));
                        }
                        else if (bpchkstatus.SelectedIndex == 0)
                        {
                            ConnectionWithAccess.query = "insert into " + ConnectionWithAccess.tablename[23] + " (prd, d_c, a_n,s_a,d_y,d_n,d_d, bamt, r_p, mess, bank, ck_no, ck_dt, b_t, pass_date,igst_amt,basic_amt,tran_d_c, [user], insert_dt_tm) values('" + ConnectionWithAccess.mprd + "' , " + Convert.ToInt32(bpdbc.SelectedValue.ToString()) + " , '" + bpa_n.Text + "', '" + bps_a.Text + "', '@@@', " + bpdocno.Text + " , '" + bpdatetime.Text + "', " + (Convert.ToDouble(bpamt.Text) * -1) + " , '4', '" + bpcomm.Text + "', '" + cbchqbank.Text + "', " + bpchkno.Text + " , '" + bpchkdate.Text + "', '2', '" + bppassdate.Text + "', " + temp_double + " , " + bp_basicamt.Text + " ,0, '" + ConnectionWithAccess.muser + "', @currDate )";
                            add_user_date_time_function_compulsory_program();
                            ConnectionCommand.fUpdateInsertDeleteData();
                        }
                        else if (bpchkstatus.SelectedIndex == 2)
                        {
                            ConnectionWithAccess.query = "insert into " + ConnectionWithAccess.tablename[23] + " (prd, d_c, a_n,s_a,d_y,d_n,d_d, bamt, r_p, mess, bank, ck_no, ck_dt, b_t, pass_date,igst_amt,basic_amt,tran_d_c, [user], insert_dt_tm) values('" + ConnectionWithAccess.mprd + "' , " + Convert.ToInt32(bpdbc.SelectedValue.ToString()) + " , '" + bpa_n.Text + "', '" + bps_a.Text + "', '@@@', " + bpdocno.Text + " , '" + bpdatetime.Text + "', " + (Convert.ToDouble(bpamt.Text) * -1) + " , '4', '" + bpcomm.Text + "', '" + cbchqbank.Text + "', " + bpchkno.Text + " , '" + bpchkdate.Text + "', '4', '" + bppassdate.Text + "', " + temp_double + " , " + bp_basicamt.Text + " ,0, '" + ConnectionWithAccess.muser + "', @currDate )";
                            add_user_date_time_function_compulsory_program();
                            ConnectionCommand.fUpdateInsertDeleteData();
                        }
                    }
                    bpcurbankbal.Text = Convert.ToString(get_bank_balance(ConnectionWithAccess.bank_a_n, "@@@", DateTime.Today.ToShortDateString()));
                }
                else if (subtabbank.SelectedIndex == 2)
                {
                    ConnectionWithAccess.query = "insert into " + ConnectionWithAccess.tablename[23] + " (prd, d_c, a_n,s_a,d_y,d_n,d_d, bamt, r_p, mess, b_T, pass_date,tran_d_c, [user], insert_dt_tm) values('" + ConnectionWithAccess.mprd + "' , " + Convert.ToInt32(bddbc.SelectedValue.ToString()) + " , '7999', 'DEP', '@@@', " + bddocno.Text + " , '" + bddatetime.Text + "', " + bdamt.Text + " , '1', '" + bdcomm.Text + "', '3', '" + bddatetime.Text + "',0, '" + ConnectionWithAccess.muser + "', @currDate )";
                    add_user_date_time_function_compulsory_program();
                    ConnectionCommand.fUpdateInsertDeleteData();
                    add_amount_in_51(ConnectionWithAccess.mprd, ConnectionWithAccess.bank_a_n, "@@@", (Convert.ToDouble(bdamt.Text) * 1));
                    add_amount_in_51(ConnectionWithAccess.mprd, ConnectionWithAccess.cash_a_n, "@@@", (Convert.ToDouble(bdamt.Text) * -1));
                    bdcurbankbal.Text = Convert.ToString(get_bank_balance(ConnectionWithAccess.bank_a_n, "@@@", DateTime.Today.ToShortDateString()));
                    bdcurcashbal.Text = Convert.ToString(get_cash_balance(ConnectionWithAccess.cash_a_n, "@@@", DateTime.Today.ToShortDateString()));
                }
                else if (subtabbank.SelectedIndex == 3)
                {
                    ConnectionWithAccess.query = "insert into " + ConnectionWithAccess.tablename[23] + " (prd, d_c, a_n,s_a,d_y,d_n,d_d, bamt, r_p, mess, b_T, pass_date,tran_d_c, [user], insert_dt_tm) values('" + ConnectionWithAccess.mprd + "' , " + Convert.ToInt32(bwdbc.SelectedValue.ToString()) + " , '7999', 'WIT', '@@@', " + bwdocno.Text + " , '" + bwdatetime.Text + "', " + (Convert.ToDouble(bwamt.Text) * -1) + " , '3', '" + bwcomm.Text + "', '3', '" + bwdatetime.Text + "',0, '" + ConnectionWithAccess.muser + "', @currDate )";
                    add_user_date_time_function_compulsory_program();
                    ConnectionCommand.fUpdateInsertDeleteData();
                    add_amount_in_51(ConnectionWithAccess.mprd, ConnectionWithAccess.bank_a_n, "@@@", (Convert.ToDouble(bwamt.Text) * -1));
                    add_amount_in_51(ConnectionWithAccess.mprd, ConnectionWithAccess.cash_a_n, "@@@", (Convert.ToDouble(bwamt.Text) * 1));
                    bdcurbankbal.Text = Convert.ToString(get_bank_balance(ConnectionWithAccess.bank_a_n, "@@@", DateTime.Today.ToShortDateString()));
                    bdcurcashbal.Text = Convert.ToString(get_cash_balance(ConnectionWithAccess.cash_a_n, "@@@", DateTime.Today.ToShortDateString()));
                }
                else if (subtabbank.SelectedIndex == 4)
                {
                    ConnectionWithAccess.query = "insert into " + ConnectionWithAccess.tablename[23] + " (prd, d_c, a_n,s_a,d_y,d_n,d_d, bamt, r_p, mess, b_T, pass_date, tran_d_c, [user], insert_dt_tm) values('" + ConnectionWithAccess.mprd + "' , " + cb_tr_from_dc.SelectedValue.ToString() + " , '" + btfroma_n.Text + "', '@@@', '@@@', " + tr_docno.Text + " , '" + tr_datetime.Text + "', " + (Convert.ToDouble(tr_amt.Text) * -1) + " , '4', '" + tr_comm.Text + "', '3', '" + tr_datetime.Text + "', " + cb_tr_to_dc.SelectedValue.ToString() + " , '" + ConnectionWithAccess.muser + "', @currDate )";
                    add_user_date_time_function_compulsory_program();
                    ConnectionCommand.fUpdateInsertDeleteData();
                }
            }
            if (subtabbank.SelectedIndex == 2 || subtabbank.SelectedIndex == 3)
            {
                isRecord = 0;
                if (subtabbank.SelectedIndex == 2)
                    ConnectionWithAccess.query = "select d_n from " + ConnectionWithAccess.tablename[24] + " where d_n " + (bddocno.Text.Trim() == string.Empty ? "is null" : "= " + bddocno.Text.Trim()) + " and prd = '" + ConnectionWithAccess.mprd + "' and d_c = " + Convert.ToInt32(bddbc.SelectedValue.ToString()) + " and r_p = '1' and a_n = '7999' and s_a = 'DEP'";
                else if (subtabbank.SelectedIndex == 3)
                    ConnectionWithAccess.query = "select d_n from " + ConnectionWithAccess.tablename[24] + " where d_n " + (bwdocno.Text.Trim() == string.Empty ? "is null" : "= " + bwdocno.Text.Trim()) + " and prd = '" + ConnectionWithAccess.mprd + "' and d_c = " + Convert.ToInt32(bwdbc.SelectedValue.ToString()) + " and r_p = '3' and a_n = '7999' and s_a = 'WIT'";
                DataTable dtData1 = ConnectionCommand.fGetDataTable();
                if (dtData1 != null && dtData1.Rows.Count > 0)
                {
                    isRecord = 1;
                }
                if (isRecord == 0)
                {
                    if (subtabbank.SelectedIndex == 2)
                        ConnectionWithAccess.query = "insert into " + ConnectionWithAccess.tablename[24] + " (prd, d_c, a_n,s_a,d_y,d_n,d_d, camt, r_p, mess, b_T, [user], insert_dt_tm) values('" + ConnectionWithAccess.mprd + "' , 4, '7999', 'WIT', '@@@', " + bddocno.Text + " , '" + bddatetime.Text + "', " + (Convert.ToDouble(bdamt.Text) * -1) + " , '3', '" + bdcomm.Text + "', '3', '" + ConnectionWithAccess.muser + "', @currDate )";
                    else if (subtabbank.SelectedIndex == 3)
                        ConnectionWithAccess.query = "insert into " + ConnectionWithAccess.tablename[24] + " (prd, d_c, a_n,s_a,d_y,d_n,d_d, camt, r_p, mess, b_T, [user], insert_dt_tm) values('" + ConnectionWithAccess.mprd + "' , 4, '7999', 'DEP', '@@@', " + bwdocno.Text + " , '" + bwdatetime.Text + "', " + bwamt.Text + " , '1', '" + bwcomm.Text + "', '3', '" + ConnectionWithAccess.muser + "', @currDate )";
                    add_user_date_time_function_compulsory_program();
                    ConnectionCommand.fUpdateInsertDeleteData();
                }
            }
        }

        private void add_bank_gst_taxes()
        {
            temp_double = 0;
            for (row_counter = 0; row_counter < bp_dgv_gst_tax_brief.Rows.Count - 1; row_counter++)
            {
                if (bp_dgv_gst_tax_brief.Rows[row_counter].Cells[2].Value != null && bp_dgv_gst_tax_brief.Rows[row_counter].Cells[2].Value.ToString() != "0.00" && bp_dgv_gst_tax_brief.Rows[row_counter].Cells[3].Value != null && bp_dgv_gst_tax_brief.Rows[row_counter].Cells[3].Value.ToString() != "0.00")
                {
                    temp_double += Convert.ToSingle(bp_dgv_gst_tax_brief.Rows[row_counter].Cells[2].Value.ToString());
                    ConnectionWithAccess.query = "insert into " + ConnectionWithAccess.tablename[8] + " (book,prd,d_c,d_n,d_d,a_n,s_a,r_p,bamt,IGST_PER,IGST_AMT,GAMT,[user],insert_dt_tm) values('B','" + ConnectionWithAccess.mprd + "'," + bpdbc.SelectedValue.ToString() + " ,'" + bpdocno.Text + "', '" + bpdatetime.Value.ToShortDateString() + "' ,'" + bpa_n.Text + "', '" + bps_a.Text + "','4', " + bp_dgv_gst_tax_brief.Rows[row_counter].Cells[0].Value + " ," + bp_dgv_gst_tax_brief.Rows[row_counter].Cells[1].Value + " ," + bp_dgv_gst_tax_brief.Rows[row_counter].Cells[2].Value + " ," + bp_dgv_gst_tax_brief.Rows[row_counter].Cells[3].Value + " ,'" + ConnectionWithAccess.muser + "', @currDate )";
                    add_user_date_time_function_compulsory_program();
                    ConnectionCommand.fUpdateInsertDeleteData();
                }
            }
            if (temp_double > 0)
                bp_igstamt.Text = temp_double.ToString();
        }

        private void update_bank_name(string ma_n, string ms_a, string mbankname)
        {
            get_account_details_from_04(ma_n, ms_a);
            if (account_detail_from_04[9] == "")
            {
                ConnectionWithAccess.query = "update " + ConnectionWithAccess.tablename[4] + " set BANK_NAM = '" + mbankname + "' where a_n = '" + ma_n + "' and s_a = '" + ms_a + "'";
                ConnectionCommand.fUpdateInsertDeleteData();
            }
        }

        private void delete_old_bank_record()
        {
            //r_p = 1 "Cash Deposit"
            //r_p = 2 Receipt
            //r_p = 3 cash withdrawal
            //r_p = 4 payment
            if (subtabbank.SelectedIndex == 0 && old_bank_receipt_amount != 0)
            {
                ConnectionWithAccess.query = "delete from " + ConnectionWithAccess.tablename[23] + " where d_n  " + (brdocno.Text.Trim() == string.Empty ? "is null" : "= " + brdocno.Text.Trim()) + " and prd = '" + ConnectionWithAccess.mprd + "' and d_c = " + Convert.ToInt32(brdbc.SelectedValue.ToString()) + " and r_p = '2'";
                ConnectionCommand.fUpdateInsertDeleteData();
                add_amount_in_51(ConnectionWithAccess.mprd, ConnectionWithAccess.bank_a_n, "@@@", (old_bank_receipt_amount * -1));
                if (brs_a.Text != null)
                    add_amount_in_51(ConnectionWithAccess.mprd, bra_n.Text, brs_a.Text, (old_bank_receipt_amount * 1));
                add_amount_in_51(ConnectionWithAccess.mprd, bra_n.Text, "@@@", (old_bank_receipt_amount * 1));
            }
            else if (subtabbank.SelectedIndex == 1 && old_bank_payment_amount != 0)
            {
                ConnectionWithAccess.query = "delete from " + ConnectionWithAccess.tablename[23] + " where d_n  " + (bpdocno.Text.Trim() == string.Empty ? "is null" : "= " + bpdocno.Text.Trim()) + " and prd = '" + ConnectionWithAccess.mprd + "' and d_c = " + Convert.ToInt32(bpdbc.SelectedValue.ToString()) + " and r_p = '4' and d_d = @d_d_date";
                search_on_particular_date_in_select_query("@d_d_date", bpdatetime.Value);
                ConnectionCommand.fUpdateInsertDeleteData();
                add_amount_in_51(ConnectionWithAccess.mprd, ConnectionWithAccess.bank_a_n, "@@@", (old_bank_payment_amount * 1));
                if (bps_a.Text != null)
                    add_amount_in_51(ConnectionWithAccess.mprd, bpa_n.Text, bps_a.Text, (old_bank_payment_amount * -1));
                add_amount_in_51(ConnectionWithAccess.mprd, bpa_n.Text, "@@@", (old_bank_payment_amount * -1));
                ConnectionWithAccess.query = "delete from " + ConnectionWithAccess.tablename[8] + " where book = 'B' and prd = '" + ConnectionWithAccess.mprd + "' and d_n  " + (bpdocno.Text.Trim() == string.Empty ? "is null" : "= " + bpdocno.Text.Trim()) + " and d_c = " + Convert.ToInt32(bpdbc.SelectedValue.ToString()) + " and r_p = '4' and d_d = @d_d_date";
                search_on_particular_date_in_select_query("@d_d_date", bpdatetime.Value);
                ConnectionCommand.fUpdateInsertDeleteData();
            }
            else if (subtabbank.SelectedIndex == 2 && old_bank_deposit_amount != 0)
            {
                ConnectionWithAccess.query = "delete from " + ConnectionWithAccess.tablename[23] + " where d_n  " + (bddocno.Text.Trim() == string.Empty ? "is null" : "= " + bddocno.Text.Trim()) + " and prd = '" + ConnectionWithAccess.mprd + "' and d_c = " + Convert.ToInt32(bddbc.SelectedValue.ToString()) + " and r_p = '1' and d_d = @d_d_date";
                search_on_particular_date_in_select_query("@d_d_date", bddatetime.Value);
                ConnectionCommand.fUpdateInsertDeleteData();
                get_account_name_from_d_c("B", Convert.ToInt32(bddbc.SelectedValue.ToString()));
                ConnectionWithAccess.query = "delete from " + ConnectionWithAccess.tablename[24] + " where d_n  " + (ConnectionWithAccess.md_n.Trim() == string.Empty ? "is null" : "= " + ConnectionWithAccess.md_n.Trim()) + " and d_d = #" + bddatetime.Text + "# and prd = '" + ConnectionWithAccess.mprd + "' and d_c = 4 and r_p = '3' and a_n = '7999' and s_a = 'WIT'";
                get_account_name_from_d_c("B", Convert.ToInt32(bddbc.SelectedValue.ToString()));
                add_amount_in_51(ConnectionWithAccess.mprd, ConnectionWithAccess.bank_a_n, "@@@", (Convert.ToDouble(old_bank_deposit_amount) * -1));
                add_amount_in_51(ConnectionWithAccess.mprd, ConnectionWithAccess.cash_a_n, "@@@", (Convert.ToDouble(old_bank_deposit_amount) * 1));
                bdcurbankbal.Text = Convert.ToString(get_bank_balance(ConnectionWithAccess.bank_a_n, "@@@", DateTime.Today.ToShortDateString()));
                bdcurcashbal.Text = Convert.ToString(get_cash_balance(ConnectionWithAccess.cash_a_n, "@@@", DateTime.Today.ToShortDateString()));
            }
            else if (subtabbank.SelectedIndex == 3 && old_bank_withdrawal_amount != 0)
            {
                ConnectionWithAccess.query = "delete from " + ConnectionWithAccess.tablename[23] + " where d_n  " + (bwdocno.Text.Trim() == string.Empty ? "is null" : "= " + bwdocno.Text.Trim()) + " and prd = '" + ConnectionWithAccess.mprd + "' and d_c = " + Convert.ToInt32(bwdbc.SelectedValue.ToString()) + " and r_p = '3' and d_d = @d_d_date";
                search_on_particular_date_in_select_query("@d_d_date", bwdatetime.Value);
                ConnectionCommand.fUpdateInsertDeleteData();
                get_account_name_from_d_c("B", Convert.ToInt32(bwdbc.SelectedValue.ToString()));
                ConnectionWithAccess.query = "delete from " + ConnectionWithAccess.tablename[24] + " where d_n  " + (ConnectionWithAccess.md_n.Trim() == string.Empty ? "is null" : "= " + ConnectionWithAccess.md_n.Trim()) + " and d_d = #" + bwdatetime.Text + "# and prd = '" + ConnectionWithAccess.mprd + "' and d_c = 4 and r_p = '1' and a_n = '7999' and s_a = 'DEP'";
                ConnectionCommand.fUpdateInsertDeleteData();
                get_account_name_from_d_c("B", Convert.ToInt32(bwdbc.SelectedValue.ToString()));
                add_amount_in_51(ConnectionWithAccess.mprd, ConnectionWithAccess.bank_a_n, "@@@", (Convert.ToDouble(old_bank_withdrawal_amount) * 1));
                add_amount_in_51(ConnectionWithAccess.mprd, ConnectionWithAccess.cash_a_n, "@@@", (Convert.ToDouble(old_bank_withdrawal_amount) * -1));
                bwcurbankbal.Text = Convert.ToString(get_bank_balance(ConnectionWithAccess.bank_a_n, "@@@", DateTime.Today.ToShortDateString()));
                bwcurcashbal.Text = Convert.ToString(get_cash_balance(ConnectionWithAccess.cash_a_n, "@@@", DateTime.Today.ToShortDateString()));
            }
            else if (subtabbank.SelectedIndex == 4 && old_bank_transfer_amount != 0)
            {
                ConnectionWithAccess.query = "delete from " + ConnectionWithAccess.tablename[23] + " where d_n  " + (tr_docno.Text.Trim() == string.Empty ? "is null" : "= " + tr_docno.Text.Trim()) + " and prd = '" + ConnectionWithAccess.mprd + "' and d_c = " + cb_tr_from_dc.SelectedValue.ToString() + " and tran_d_c = " + cb_tr_to_dc.SelectedValue.ToString() + " and d_d = @d_d_date";
                search_on_particular_date_in_select_query("@d_d_date", tr_datetime.Value);
                ConnectionCommand.fUpdateInsertDeleteData();
            }
        }

        private void add_cash_record()
        {
            // r_p - 1 "Cash Deposit"
            //r_p = 2 Receipt
            //r_p = 3 cash withdrawal
            // r_p = 4 payment
            // b_t = 2 for balance, b_t = 3 for passed, b_t = 4 for failed.
            if (subtabcash.SelectedIndex == 0 && cramt.Text != "")
            {
                if (cramt.Text != "0.00" || cramt.Text != "0")
                {
                    ConnectionWithAccess.query = "insert into " + ConnectionWithAccess.tablename[24] + " (prd, d_c, a_n,s_a,d_y,d_n,d_d, camt, r_p, mess, b_t, [user], insert_dt_tm) values('" + ConnectionWithAccess.mprd + "' , " + crdbc.SelectedValue.ToString() + " , '" + cra_n.Text + "', '" + crs_a.Text + "', '@@@', " + crdocno.Text + " , '" + crdatetime.Text + "', " + cramt.Text + " , '2', '" + crcomm.Text + "', '3','" + ConnectionWithAccess.muser + "', @currDate )";
                    add_user_date_time_function_compulsory_program();
                    ConnectionCommand.fUpdateInsertDeleteData();
                    add_amount_in_51(ConnectionWithAccess.mprd, ConnectionWithAccess.cash_a_n, "@@@", (Convert.ToDouble(cramt.Text) * 1));
                    if (crs_a.Text != null)
                        add_amount_in_51(ConnectionWithAccess.mprd, cra_n.Text, crs_a.Text, (Convert.ToDouble(cramt.Text) * -1));
                    add_amount_in_51(ConnectionWithAccess.mprd, cra_n.Text, "@@@", (Convert.ToDouble(cramt.Text) * -1));
                    crcurcashbal.Text = Convert.ToString(get_cash_balance(ConnectionWithAccess.cash_a_n, "@@@", DateTime.Today.ToShortDateString()));
                }
            }
            else if (subtabcash.SelectedIndex == 1 && cpamt.Text != "")
            {
                add_cash_gst_taxes();
                ConnectionWithAccess.query = "insert into " + ConnectionWithAccess.tablename[24] + " (prd, d_c, a_n,s_a,d_y,d_n,d_d, camt, r_p, mess, b_t,BASIC_AMT,IGST_PER,IGST_AMT, [user], insert_dt_tm) values('" + ConnectionWithAccess.mprd + "' , " + cpdbc.SelectedValue.ToString() + " , '" + cpa_n.Text + "', '" + cps_a.Text + "', '" + cpd_y.Text + "', " + cpdocno.Text + " , '" + cpdatetime.Text + "', " + (Convert.ToDouble(cpamt.Text) * -1) + " , '4', '" + cpcomm.Text + "', '3'," + cp_basicamt.Text + " , " + cp_igst_per.Text + " , " + cp_igstamt.Text + ",'" + ConnectionWithAccess.muser + "', @currDate )";
                add_user_date_time_function_compulsory_program();
                ConnectionCommand.fUpdateInsertDeleteData();
                add_amount_in_51(ConnectionWithAccess.mprd, ConnectionWithAccess.cash_a_n, "@@@", (Convert.ToDouble(cpamt.Text) * -1));
                if (cps_a.Text != null)
                    add_amount_in_51(ConnectionWithAccess.mprd, cpa_n.Text, cps_a.Text, (Convert.ToDouble(cpamt.Text) * 1));
                add_amount_in_51(ConnectionWithAccess.mprd, cpa_n.Text, "@@@", (Convert.ToDouble(cpamt.Text) * 1));
                cpcurcashbal.Text = Convert.ToString(get_cash_balance(ConnectionWithAccess.cash_a_n, "@@@", DateTime.Today.ToShortDateString()));
            }
        }

        private void add_cash_gst_taxes()
        {
            temp_double = 0;
            for (row_counter = 0; row_counter < cp_dgv_gst_tax_brief.Rows.Count - 1; row_counter++)
            {
                if (cp_dgv_gst_tax_brief.Rows[row_counter].Cells[3].Value != null && cp_dgv_gst_tax_brief.Rows[row_counter].Cells[3].Value.ToString() != "0.00")
                {
                    temp_double += Convert.ToSingle(cp_dgv_gst_tax_brief.Rows[row_counter].Cells[2].Value.ToString());
                    ConnectionWithAccess.query = "insert into " + ConnectionWithAccess.tablename[8] + " (book,prd,d_c,d_n,d_d,a_n,s_a,r_p,bamt,IGST_PER,IGST_AMT,GAMT,[user],insert_dt_tm) values('C','" + ConnectionWithAccess.mprd + "'," + cpdbc.SelectedValue.ToString() + " ,'" + cpdocno.Text + "'," + cpdatetime.Value.ToShortDateString() + " ,'" + cpa_n.Text + "', '" + cps_a.Text + "','4', " + cp_dgv_gst_tax_brief.Rows[row_counter].Cells[0].Value + " ," + cp_dgv_gst_tax_brief.Rows[row_counter].Cells[1].Value + " ," + cp_dgv_gst_tax_brief.Rows[row_counter].Cells[2].Value + " ," + cp_dgv_gst_tax_brief.Rows[row_counter].Cells[3].Value + " ,'" + ConnectionWithAccess.muser + "', @currDate )";
                    add_user_date_time_function_compulsory_program();
                    ConnectionCommand.fUpdateInsertDeleteData();
                }
            }
            if (temp_double > 0)
                cp_igstamt.Text = temp_double.ToString();
        }

        private void delete_old_cash_record()
        {
            // r_p = 1 "Cash Deposit"
            //r_p = 2 Receipt
            //r_p = 3 cash withdrawal
            // r_p = 4 payment
            if (subtabcash.SelectedIndex == 0)
            {
                ConnectionWithAccess.query = "delete from " + ConnectionWithAccess.tablename[24] + " where d_n  " + (crdocno.Text.Trim() == string.Empty ? "is null" : "= " + crdocno.Text.Trim()) + " and prd = '" + ConnectionWithAccess.mprd + "' and d_c = " + crdbc.SelectedValue.ToString() + " and r_p = '2' and d_d = @d_d_date";
                search_on_particular_date_in_select_query("@d_d_date", crdatetime.Value);
                ConnectionCommand.fUpdateInsertDeleteData();
                add_amount_in_51(ConnectionWithAccess.mprd, ConnectionWithAccess.cash_a_n, "@@@", Convert.ToDouble(old_cash_receipt_amount * -1));
                if (crs_a.Text != null)
                    add_amount_in_51(ConnectionWithAccess.mprd, cra_n.Text, crs_a.Text, Convert.ToDouble(old_cash_receipt_amount * 1));
                add_amount_in_51(ConnectionWithAccess.mprd, cra_n.Text, "@@@", Convert.ToDouble(old_cash_receipt_amount * 1));
            }
            else if (subtabcash.SelectedIndex == 1)
            {
                ConnectionWithAccess.query = "delete from " + ConnectionWithAccess.tablename[24] + " F24 where f24.d_n " + (cpdocno.Text.Trim() == string.Empty ? "is null" : "= " + cpdocno.Text.Trim()) + " and f24.prd = '" + ConnectionWithAccess.mprd + "' and f24.d_c = " + cpdbc.SelectedValue.ToString() + " and f24.r_p = '4' and F24.d_d = @d_d_date";
                search_on_particular_date_in_select_query("@d_d_date", cpdatetime.Value);
                ConnectionCommand.fUpdateInsertDeleteData();
                add_amount_in_51(ConnectionWithAccess.mprd, ConnectionWithAccess.cash_a_n, "@@@", (Convert.ToDouble(old_cash_payment_amount)));
                if (cpa_n.Text != null)
                    add_amount_in_51(ConnectionWithAccess.mprd, cpa_n.Text, cps_a.Text, Convert.ToDouble(old_cash_payment_amount * -1));
                add_amount_in_51(ConnectionWithAccess.mprd, cpa_n.Text, "@@@", Convert.ToDouble(old_cash_payment_amount * -1));
                ConnectionWithAccess.query = "delete from " + ConnectionWithAccess.tablename[8] + " where book = 'C' and prd = '" + ConnectionWithAccess.mprd + "' and d_n  " + (cpdocno.Text.Trim() == string.Empty ? "is null" : "= " + cpdocno.Text.Trim()) + " and d_c = " + Convert.ToInt32(cpdbc.SelectedValue.ToString()) + " and r_p = '4'";
                ConnectionCommand.fUpdateInsertDeleteData();
            }
            //r_p = '1' and a_n = '7999' and s_a = 'DEP'";
        }

        private double get_bank_balance_old(string prd, string a_n)
        {
            old_bank_balance = 0;
            ConnectionWithAccess.query = "select amt from " + ConnectionWithAccess.tablename[51] + " where prd = '" + prd + "' and a_n = '" + a_n + "'";
            DataTable dtData1 = ConnectionCommand.fGetDataTable();
            if (dtData1 != null && dtData1.Rows.Count > 0)
            {
                if (dtData1.Rows[0][0] != null)
                {
                    old_bank_balance = Convert.ToDouble(dtData1.Rows[0][0].ToString());
                }
            }
            return old_bank_balance;
        }

        private double get_bank_balance(string ma_n, string ms_a, string menddateitme)
        {
            //if (Convert.ToDateTime(menddateitme) != DateTime.Today)
            //{
            temp_double = 0;
            if (ma_n != "" && ms_a != "" && menddateitme != "")
            {
                temp_word = "";
                ConnectionWithAccess.query = query_contains_for_bank_balance_union(ma_n, ms_a, menddateitme);
                DataTable dtNewTable = ConnectionCommand.fGetDataTable();

                if (dtNewTable != null)
                {
                    if (dtNewTable.Rows.Count == 1)
                    {
                        if (dtNewTable.Rows[0][4].ToString() != "0.0")
                            temp_double = Convert.ToDouble(dtNewTable.Rows[0][4].ToString());
                        else if (dtNewTable.Rows[0][5].ToString() != "0.0")
                            temp_double = Convert.ToDouble(dtNewTable.Rows[0][5].ToString());
                        else if (dtNewTable.Rows[0][6].ToString() != "0.0")
                            temp_double = Convert.ToDouble(dtNewTable.Rows[0][6].ToString());
                    }
                    else if (dtNewTable.Rows.Count > 1)
                    {
                        DataView view = new DataView(dtNewTable);
                        view.Sort = "[d_d] asc";
                        DataTable dtNewTable1 = view.ToTable();

                        DataTable sortedTable = update_datatable_balances(dtNewTable1, 4, 5, 6);

                        string strTotalCol1 = getTotal_Datatable(sortedTable, 4);
                        string strTotalCol2 = getTotal_Datatable(sortedTable, 5);

                        if (!string.IsNullOrEmpty(strTotalCol1) && !string.IsNullOrEmpty(strTotalCol2))
                        {
                            DataRow drTotalRow = sortedTable.NewRow();
                            drTotalRow[4] = strTotalCol1;
                            drTotalRow[5] = strTotalCol2;
                            sortedTable.Rows.Add(drTotalRow);
                        }

                        if (sortedTable.Rows.Count > 2)
                        {
                            temp_double = Convert.ToDouble(sortedTable.Rows[sortedTable.Rows.Count - 2][6].ToString());
                        }
                    }
                }
            }
            //}
            //else
            //{
            //    ConnectionWithAccess.query = "select amt from " + ConnectionWithAccess.tablename[51] + " where prd = '" + ConnectionWithAccess.mprd + "' and a_n = '" + ma_n + "' and s_a = '" + ms_a + "'";
            //    double.TryParse(ConnectionCommand.fGetExecuteScalar(), out temp_double);
            //}
            return temp_double;
        }

        private string query_contains_for_bank_balance_union(string ma_n, string ms_a, string end_date)
        {
            ConnectionWithAccess.md_c = get_d_c_from_a_n("B", ma_n);
            StringBuilder strQuery = new StringBuilder();
            strQuery.Append(" select #" + ConnectionWithAccess.msdate + "# as [d_d],0 as [d_n], 'Opening Balance' as [desc], '' as [city], f51.amt as [bamt], 0 as [bamt * -1], 0 as [balance_amt] from " + ConnectionWithAccess.tablename[51] + " f51 where f51.prd = '" + ConnectionWithAccess.moprd + "' and f51.a_n = '" + ma_n + "' and d_d = #01-01-1901# and f51.s_a = '@@@' UNION ALL");
            strQuery.Append(" select f23.D_D, f23.D_N, f1.[desc] as [Desc], f1.city, f23.bamt, 0, 0 as [balance_amt]  from " + ConnectionWithAccess.tablename[1] + " f1, " + ConnectionWithAccess.tablename[23] + " f23 where f1.a_n = f23.a_n and f1.s_a = f23.s_a and f23.prd = '" + ConnectionWithAccess.mprd + "' and f23.d_d >= @From and f23.d_d <= @To and f23.bamt > 0 and f23.d_c = " + ConnectionWithAccess.md_c + " and f23.a_n <> '7999' UNION ALL");
            strQuery.Append(" select f23.D_D, f23.D_N, f1.[desc] as [Desc], f1.city,  0, (f23.bamt * -1), 0 as [balance_amt] from " + ConnectionWithAccess.tablename[1] + " f1, " + ConnectionWithAccess.tablename[23] + " f23 where f1.a_n = f23.a_n and f1.s_a = f23.s_a and f23.prd = '" + ConnectionWithAccess.mprd + "' and f23.d_d >= @From and f23.d_d <= @To and f23.bamt < 0 and f23.d_c = " + ConnectionWithAccess.md_c + " and f23.a_n <> '7999' UNION ALL");
            strQuery.Append(" select f23.D_D, f23.D_N, 'CASH WITHDRAWN FROM BANK' as [Desc], f1.city, 0, (f23.bamt * -1), 0 as [balance_amt] from " + ConnectionWithAccess.tablename[1] + " f1, " + ConnectionWithAccess.tablename[23] + " f23 where f1.a_n = f23.a_n and f1.s_a = f23.s_a and f23.prd = '" + ConnectionWithAccess.mprd + "' and f23.d_d >= @From and f23.d_d <= @To and f23.bamt < 0 and f23.d_c = " + ConnectionWithAccess.md_c + " and f23.a_n = '7999' and f23.s_a = 'WIT' UNION ALL");
            strQuery.Append(" select f23.D_D, f23.D_N, 'CASH DEPOSITED IN BANK' as [Desc], f1.city, f23.bamt, 0, 0 as [balance_amt] from " + ConnectionWithAccess.tablename[1] + " f1, " + ConnectionWithAccess.tablename[23] + " f23 where f1.a_n = f23.a_n and f1.s_a = f23.s_a and f23.prd = '" + ConnectionWithAccess.mprd + "' and f23.d_d >= @From and f23.d_d <= @To and f23.bamt > 0 and f23.d_c = " + ConnectionWithAccess.md_c + " and f23.a_n = '7999' and f23.s_a = 'DEP'");
            parameters_for_date_range(ConnectionWithAccess.msdate, end_date);
            //add_user_date_time_function_compulsory_program();
            return strQuery.ToString();
        }

        private double get_cash_balance_old(string prd, string a_n)
        {
            old_cash_balance = 0;
            if (a_n != "" && a_n != null)
            {
                ConnectionWithAccess.query = "select amt from " + ConnectionWithAccess.tablename[51] + " where prd = '" + prd + "' and a_n = '" + a_n + "'";
                DataTable dtData1 = ConnectionCommand.fGetDataTable();
                if (dtData1 != null && dtData1.Rows.Count > 0)
                {
                    if (dtData1.Rows[0][0] != null)
                    {
                        old_cash_balance = Convert.ToDouble(dtData1.Rows[0][0].ToString());
                    }
                }
            }
            return old_cash_balance;
        }

        private double get_cash_balance(string ma_n, string ms_a, string menddateitme)
        {
            if (ma_n != "" && ms_a != "" && menddateitme != "")
            {
                temp_word = "";
                ConnectionWithAccess.query = query_contains_for_cash_balance_union(ma_n, ms_a, menddateitme);
                DataTable dtNewTable = ConnectionCommand.fGetDataTable();

                if (dtNewTable != null)
                {
                    if (dtNewTable.Rows.Count == 1)
                    {
                        if (dtNewTable.Rows[0][6].ToString() != "0.00")
                            temp_double = Convert.ToDouble(dtNewTable.Rows[0][6].ToString());
                        else if (dtNewTable.Rows[0][7].ToString() != "0.00")
                            temp_double = Convert.ToDouble(dtNewTable.Rows[0][7].ToString());
                        else if (dtNewTable.Rows[0][8].ToString() != "0.00")
                            temp_double = Convert.ToDouble(dtNewTable.Rows[0][8].ToString());
                    }
                    else if (dtNewTable.Rows.Count > 1)
                    {
                        DataView view = new DataView(dtNewTable);
                        view.Sort = "[d_d] asc";
                        DataTable dtNewTable1 = view.ToTable();

                        DataTable sortedTable = update_datatable_balances(dtNewTable1, 4, 5, 6);

                        string strTotalCol1 = getTotal_Datatable(sortedTable, 4);
                        string strTotalCol2 = getTotal_Datatable(sortedTable, 5);

                        if (!string.IsNullOrEmpty(strTotalCol1) && !string.IsNullOrEmpty(strTotalCol2))
                        {
                            DataRow drTotalRow = sortedTable.NewRow();
                            drTotalRow[4] = strTotalCol1;
                            drTotalRow[5] = strTotalCol2;
                            sortedTable.Rows.Add(drTotalRow);
                        }

                        if (sortedTable.Rows.Count > 2)
                        {
                            temp_double = Convert.ToDouble(sortedTable.Rows[sortedTable.Rows.Count - 2][6].ToString());
                        }
                    }
                }
            }
            return temp_double;
        }

        private string query_contains_for_cash_balance_union(string ma_n, string ms_a, string end_date)
        {
            ConnectionWithAccess.md_c = 4;
            StringBuilder strQuery = new StringBuilder();
            //strQuery.Append(" select #" + ConnectionWithAccess.msdate + "# as [d_d],0 as [d_n], 'Opening Balance' as [desc], '' as [city], f51.amt as [camt], 0 as [camt * -1], 0 as [balance_amt] from " + ConnectionWithAccess.tablename[51] + " f51 where f51.prd = '" + ConnectionWithAccess.moprd + "' and f51.a_n = '" + raa_n.Text + "' and d_d = #01-01-1901# and f51.s_a = '@@@' ");
            strQuery.Append(" select #" + ConnectionWithAccess.msdate + "# as [d_d],0 as [d_n], 'Opening Balance' as [desc], '' as [city], f51.amt as [camt], 0 as [camt * -1], 0 as [balance_amt] from " + ConnectionWithAccess.tablename[51] + " f51 where f51.prd = '" + ConnectionWithAccess.moprd + "' and f51.a_n = '" + ma_n + "' and d_d = #01-01-1901# and f51.s_a = '@@@' UNION ALL");
            strQuery.Append(" select f24.D_D, f24.D_N, f1.[desc] as [Desc], f1.city, f24.camt, '', 0 as [balance_amt]  from " + ConnectionWithAccess.tablename[1] + " f1, " + ConnectionWithAccess.tablename[24] + " f24 where f1.a_n = f24.a_n and f1.s_a = f24.s_a and f24.prd = '" + ConnectionWithAccess.mprd + "' and f24.d_d >= @From and f24.d_d <= @To and f24.camt > 0 and f24.d_c = " + ConnectionWithAccess.md_c + " and f24.a_n <> '7999' UNION ALL");
            strQuery.Append(" select f24.D_D, f24.D_N, f1.[desc] as [Desc], f1.city,  '', (f24.camt * -1), 0 as [balance_amt] from " + ConnectionWithAccess.tablename[1] + " f1, " + ConnectionWithAccess.tablename[24] + " f24 where f1.a_n = f24.a_n and f1.s_a = f24.s_a and f24.prd = '" + ConnectionWithAccess.mprd + "' and f24.d_d >= @From and f24.d_d <= @To and f24.camt < 0 and f24.d_c = " + ConnectionWithAccess.md_c + " and f24.a_n <> '7999' UNION ALL");
            strQuery.Append(" select f23.D_D, f23.D_N, 'CASH WITHDRAWN FROM BANK' as [Desc], f1.city, (f23.bamt * -1), '', 0 as [balance_amt] from " + ConnectionWithAccess.tablename[1] + " f1, " + ConnectionWithAccess.tablename[23] + " f23 where f1.a_n = f23.a_n and f1.s_a = f23.s_a and f23.prd = '" + ConnectionWithAccess.mprd + "' and f23.d_d >= @From and f23.d_d <= @To and f23.bamt < 0 and f23.a_n = '7999' and f23.s_a = 'WIT' UNION ALL");
            strQuery.Append(" select f23.D_D, f23.D_N, 'CASH DEPOSITED IN BANK' as [Desc], f1.city, '', f23.bamt, 0 as [balance_amt] from " + ConnectionWithAccess.tablename[1] + " f1, " + ConnectionWithAccess.tablename[23] + " f23 where f1.a_n = f23.a_n and f1.s_a = f23.s_a and f23.prd = '" + ConnectionWithAccess.mprd + "' and f23.d_d >= @From and f23.d_d <= @To and f23.bamt > 0 and f23.a_n = '7999' and f23.s_a = 'DEP'");
            parameters_for_date_range(ConnectionWithAccess.msdate, end_date);
            //add_user_date_time_function_compulsory_program();
            return strQuery.ToString();
        }

        private void add_journal_record()
        {
            temp_double = 0;
            add_jour_gst_taxes();
            ConnectionWithAccess.query = "insert into " + ConnectionWithAccess.tablename[25] + " (prd,d_c,d_n,d_d,a_n,s_a,na_n,ns_a,jamt,mess,igst_amt, [user], insert_dt_tm) values('" + ConnectionWithAccess.mprd + "', " + jjdbc.Text + " , " + jjdocno.Text + " , '" + jjdatetime.Value + "', '" + ja_n.Text + "', '" + js_a.Text + "', '" + jna_n.Text + "', '" + jns_a.Text + "', " + jjamt.Text + " , '" + jjcomm.Text + "', " + temp_double + ",'" + ConnectionWithAccess.muser + "', @currDate )";
            add_user_date_time_function_compulsory_program();
            ConnectionCommand.fUpdateInsertDeleteData();
            add_amount_in_51(ConnectionWithAccess.mprd, ja_n.Text, js_a.Text, (Convert.ToDouble(jjamt.Text) * 1));
            if (js_a.Text != "@@@")
                add_amount_in_51(ConnectionWithAccess.mprd, ja_n.Text, "@@@", (Convert.ToDouble(jjamt.Text) * 1));
            add_amount_in_51(ConnectionWithAccess.mprd, jna_n.Text, jns_a.Text, (Convert.ToDouble(jjamt.Text) * -1));
            if (jns_a.Text != "@@@")
                add_amount_in_51(ConnectionWithAccess.mprd, jna_n.Text, "@@@", (Convert.ToDouble(jjamt.Text) * -1));
            if (ja_n.Text != "")
            {
                temp_word = ja_n.Text.Substring(0, 2);
                check_data_type(temp_word);
                if (data_type == "Numeric")
                {
                    if (Convert.ToInt32(temp_word) >= 60 && Convert.ToInt32(temp_word) <= 70)
                    {
                        add_amount_in_51(ConnectionWithAccess.mprd, "719999", "@@@", (Convert.ToDouble(jjamt.Text) * -1));
                        add_amount_in_51(ConnectionWithAccess.mprd, "7998", "@@@", (Convert.ToDouble(jjamt.Text) * -1));
                        add_amount_in_51(ConnectionWithAccess.mprd, "3001", "@@@", (Convert.ToDouble(jjamt.Text) * -1));
                    }
                    else if (Convert.ToInt32(temp_word) > 70 && Convert.ToInt32(temp_word) <= 77)
                    {
                        add_amount_in_51(ConnectionWithAccess.mprd, "7998", "@@@", (Convert.ToDouble(jjamt.Text) * -1));
                        add_amount_in_51(ConnectionWithAccess.mprd, "3001", "@@@", (Convert.ToDouble(jjamt.Text) * -1));
                    }
                }
            }
            if (jna_n.Text != "")
            {
                temp_word = jna_n.Text.Substring(0, 2);
                check_data_type(temp_word);
                if (data_type == "Numeric")
                {
                    if (Convert.ToInt32(temp_word) >= 60 && Convert.ToInt32(temp_word) <= 70)
                    {
                        add_amount_in_51(ConnectionWithAccess.mprd, "719999", "@@@", (Convert.ToDouble(jjamt.Text) * 1));
                        add_amount_in_51(ConnectionWithAccess.mprd, "7998", "@@@", (Convert.ToDouble(jjamt.Text) * 1));
                        add_amount_in_51(ConnectionWithAccess.mprd, "3001", "@@@", (Convert.ToDouble(jjamt.Text) * 1));
                    }
                    else if (Convert.ToInt32(temp_word) > 70 && Convert.ToInt32(temp_word) <= 77)
                    {
                        add_amount_in_51(ConnectionWithAccess.mprd, "7998", "@@@", (Convert.ToDouble(jjamt.Text) * 1));
                        add_amount_in_51(ConnectionWithAccess.mprd, "3001", "@@@", (Convert.ToDouble(jjamt.Text) * 1));
                    }
                }
            }
        }

        private void add_jour_gst_taxes()
        {
            for (row_counter = 0; row_counter < jj_dgv_gst_tax_brief.Rows.Count - 1; row_counter++)
            {
                if (jj_dgv_gst_tax_brief.Rows[row_counter].Cells[2].Value != null && Convert.ToSingle(jj_dgv_gst_tax_brief.Rows[row_counter].Cells[2].Value.ToString()) != 0.0)
                {
                    temp_double += Convert.ToDouble(jj_dgv_gst_tax_brief.Rows[row_counter].Cells[2].Value.ToString());
                    ConnectionWithAccess.query = "insert into " + ConnectionWithAccess.tablename[8] + " (book,prd,d_c,d_n,d_d,a_n,s_a,r_p,bamt,IGST_PER,IGST_AMT,GAMT,[user],insert_dt_tm) values('J','" + ConnectionWithAccess.mprd + "'," + jjdbc.Text + " ,'" + jjdocno.Text + "'," + jjdatetime.Value.ToShortDateString() + " ,'" + ja_n.Text + "', '" + js_a.Text + "','4', " + jj_dgv_gst_tax_brief.Rows[row_counter].Cells[0].Value + " ," + jj_dgv_gst_tax_brief.Rows[row_counter].Cells[1].Value + " ," + jj_dgv_gst_tax_brief.Rows[row_counter].Cells[2].Value + " ," + jj_dgv_gst_tax_brief.Rows[row_counter].Cells[3].Value + " ,'" + ConnectionWithAccess.muser + "', @currDate )";
                    add_user_date_time_function_compulsory_program();
                    ConnectionCommand.fUpdateInsertDeleteData();
                }
            }
        }

        private void delete_old_journal_record()
        {
            ConnectionWithAccess.query = "delete from " + ConnectionWithAccess.tablename[25] + " where d_n  " + (jjdocno.Text.Trim() == string.Empty ? "is null" : "= " + jjdocno.Text.Trim()) + " and prd = '" + ConnectionWithAccess.mprd + "' and d_c = " + jjdbc.Text;
            ConnectionCommand.fUpdateInsertDeleteData();
            ConnectionWithAccess.query = "delete from " + ConnectionWithAccess.tablename[8] + " where book = 'J' and prd = '" + ConnectionWithAccess.mprd + "' and d_n  " + (jjdocno.Text.Trim() == string.Empty ? "is null" : "= " + jjdocno.Text.Trim()) + " and d_c = " + Convert.ToInt32(jjdbc.Text) + " and r_p = '4'";
            ConnectionCommand.fUpdateInsertDeleteData();
            add_amount_in_51(ConnectionWithAccess.mprd, ja_n.Text, js_a.Text, (old_journal_amount * -1));
            if (js_a.Text != "@@@")
                add_amount_in_51(ConnectionWithAccess.mprd, ja_n.Text, "@@@", (old_journal_amount * -1));
            add_amount_in_51(ConnectionWithAccess.mprd, jna_n.Text, jns_a.Text, (old_journal_amount * 1));
            if (jns_a.Text != "@@@")
                add_amount_in_51(ConnectionWithAccess.mprd, jna_n.Text, "@@@", (old_journal_amount * 1));
            if (ja_n.Text != "")
            {
                temp_word = ja_n.Text.Substring(0, 2);
                check_data_type(temp_word);
                if (data_type == "Numeric")
                {
                    if (Convert.ToInt32(temp_word) >= 60 && Convert.ToInt32(temp_word) <= 70)
                    {
                        add_amount_in_51(ConnectionWithAccess.mprd, "719999", "@@@", (old_journal_amount * 1));
                        add_amount_in_51(ConnectionWithAccess.mprd, "7998", "@@@", (old_journal_amount * 1));
                        add_amount_in_51(ConnectionWithAccess.mprd, "3001", "@@@", (old_journal_amount * 1));
                    }
                    else if (Convert.ToInt32(temp_word) > 70 && Convert.ToInt32(temp_word) <= 77)
                    {
                        add_amount_in_51(ConnectionWithAccess.mprd, "7998", "@@@", (old_journal_amount * 1));
                        add_amount_in_51(ConnectionWithAccess.mprd, "3001", "@@@", (old_journal_amount * 1));
                    }
                }
            }
            if (jna_n.Text != "")
            {
                temp_word = jna_n.Text.Substring(0, 2);
                check_data_type(temp_word);
                if (data_type == "Numeric")
                {
                    if (Convert.ToInt32(temp_word) >= 60 && Convert.ToInt32(temp_word) <= 70)
                    {
                        add_amount_in_51(ConnectionWithAccess.mprd, "719999", "@@@", (old_journal_amount * -1));
                        add_amount_in_51(ConnectionWithAccess.mprd, "7998", "@@@", (old_journal_amount * -1));
                        add_amount_in_51(ConnectionWithAccess.mprd, "3001", "@@@", (old_journal_amount * -1));
                    }
                    else if (Convert.ToInt32(temp_word) > 70 && Convert.ToInt32(temp_word) <= 77)
                    {
                        add_amount_in_51(ConnectionWithAccess.mprd, "7998", "@@@", (old_journal_amount * -1));
                        add_amount_in_51(ConnectionWithAccess.mprd, "3001", "@@@", (old_journal_amount * -1));
                    }
                }
            }
        }

        private void save_qr_code(string qr_image_details)
        {
            if (qr_image_details.Length > 120)
                qr_image_details = qr_image_details.Substring(0, 120);
            if (backup == true)
            {
                qr_filename = ConnectionWithAccess.data_drive + "backup\\" + ConnectionWithAccess.mNIK + "\\images\\temp_qr.jpg";
                //ConnectionWithAccess.mtextfilename = ConnectionWithAccess.data_drive + "backup\\" + ConnectionWithAccess.mNIK + ".txt";
            }
            else
                qr_filename = ConnectionWithAccess.data_drive + "acc\\" + ConnectionWithAccess.mNIK + "\\images\\temp_qr.jpg";
            //ConnectionWithAccess.mtextfilename = ConnectionWithAccess.data_drive + "acc\\" + ConnectionWithAccess.mNIK + ".txt";



            CodeQrBarcodeDraw qrCode = BarcodeDrawFactory.CodeQr;
            pb_barcode.Size = new System.Drawing.Size(188, 188);
            pb_barcode.Image = qrCode.Draw(qr_image_details, 80);
            Bitmap bmp = new Bitmap(188, 188);
            pb_barcode.DrawToBitmap(bmp, new System.Drawing.Rectangle(0, 0, 188, 188));
            ConnectionWithAccess.create_file_folder(qr_filename);
            bmp.Save(qr_filename);
        }

        private void save_data_entry()
        {
            if (subtabDataEntry.SelectedIndex == 0 && subtabsale.SelectedIndex == 0)
            {
                delete_old_sale_invoice_record();
                if (Convert.ToSingle(sigrossamt.Text) > 0)
                    add_sale_invoice_record();
                sisalelistdg.DataSource = null;
                fill_si_sale_list();
                itemlistmastertab();
                //if (Convert.ToSingle(sigrossamt.Text) <= 0)
                refresh_data_entry_sale_for_new_record();
                fill_sale_list_array_for_items_list_stock_adding();
                ConnectionWithAccess.query = "SELECT max(d_n) +1 from " + ConnectionWithAccess.tablename[21] + " where prd = '" + ConnectionWithAccess.mprd + "' and d_n <> 999999 and d_c = " + Convert.ToInt32(sidbc.SelectedValue.ToString());
                ConnectionCommand.ExportToText(sidbc, sidocno);
            }
            else if (subtabDataEntry.SelectedIndex == 0 && subtabsale.SelectedIndex == 1)
            {
                delete_old_sale_replacement_record();
                if (Convert.ToSingle(srgrossamt.Text) > 0)
                    add_sale_invoice_record();
                //add_sale_replacement_record();
                fillsrreplamentlist();
                refresh_data_entry_sale_replacement_for_new_record();
            }
            else if (subtabDataEntry.SelectedIndex == 0 && subtabsale.SelectedIndex == 2)
            {
                delete_old_sale_order_record();
                if (Convert.ToSingle(sogrossamt.Text) > 0)
                    add_sale_order_record();
                fillsosalelist();
                refresh_data_entry_sale_order_for_new_record();
            }
            else if (subtabDataEntry.SelectedIndex == 0 && subtabsale.SelectedIndex == 3)
            {
                delete_old_sale_invoice_record();
                if (Convert.ToSingle(simple_grossamt.Text) > 0)
                    add_sale_invoice_record();
                sisalelistdg.DataSource = null;
                fill_si_sale_list();
                itemlistmastertab();
                //if (Convert.ToSingle(sigrossamt.Text) <= 0)
                refresh_data_entry_sale_for_new_record();
                fill_sale_list_array_for_items_list_stock_adding();
                ConnectionWithAccess.query = "SELECT max(d_n) +1 from " + ConnectionWithAccess.tablename[21] + " where prd = '" + ConnectionWithAccess.mprd + "' and d_n <> 999999 and d_c = " + Convert.ToInt32(sidbc.SelectedValue.ToString());
                ConnectionCommand.ExportToText(sidbc, sidocno);
            }
            else if (subtabDataEntry.SelectedIndex == 1 && subtabpurchase.SelectedIndex == 0)
            {
                delete_old_purc_record();
                if (Convert.ToSingle(pigrossamt.Text) > 0)
                    add_purc_record();
                pipurchaselist.DataSource = null;
                fillpipurclist();
                itemlistmastertab();
                refresh_data_entry_purc_for_new_record();
            }
            else if (subtabDataEntry.SelectedIndex == 2)
            {
                // BANK
                // r_p = 1 "Cash Deposit"
                //r_p = 2 Receipt
                //r_p = 3 cash withdrawal
                // r_p = 4 payment
                // b_t = 2 for balance, b_t = 3 for passed, b_t = 4 for failed.
                if (subtabbank.SelectedIndex == 0)
                {
                    //r_p = 2 Receipt
                    ConnectionWithAccess.md_n = brdocno.Text;
                    delete_old_bank_record();
                    if (bramt.Text != "0" && bramt.Text != null)
                    {
                        if (Convert.ToSingle(bramt.Text) > 0)
                            add_bank_record();
                    }
                    refresh_data_entry_bank_for_new_record();
                }
                else if (subtabbank.SelectedIndex == 1)
                {
                    // r_p = 4 payment
                    ConnectionWithAccess.md_n = brdocno.Text;
                    delete_old_bank_record();
                    if (bpamt.Text != "0" && bpamt.Text != null)
                    {
                        if (Convert.ToSingle(bpamt.Text) > 0)
                            add_bank_record();
                    }
                    refresh_data_entry_bank_for_new_record();
                }
                else if (subtabbank.SelectedIndex == 2)
                {
                    // r_p = 1 "Cash Deposit"
                    //temp_word = bddatetime.Value.Year.ToString();
                    //temp_word += bddatetime.Value.Month.ToString();
                    //temp_word += bddatetime.Value.Date.ToString();
                    //temp_word += bddocno.Text.Trim();
                    //bddocno.Text = temp_word;
                    ConnectionWithAccess.md_n = bddocno.Text;
                    delete_old_bank_record();
                    if (bdamt.Text != "0" && bdamt.Text != null)
                    {
                        if (Convert.ToSingle(bdamt.Text) > 0)
                            add_bank_record();
                    }
                    refresh_data_entry_bank_for_new_record();
                }
                else if (subtabbank.SelectedIndex == 3)
                {
                    //r_p = 3 cash withdrawal
                    ConnectionWithAccess.md_n = bwdocno.Text;
                    delete_old_bank_record();
                    if (bwamt.Text != "0" && bwamt.Text != null)
                    {
                        if (Convert.ToSingle(bwamt.Text) > 0)
                            add_bank_record();
                    }
                    refresh_data_entry_bank_for_new_record();
                }
                else if (subtabbank.SelectedIndex == 4)
                {
                    //r_p = 3 cash withdrawal
                    ConnectionWithAccess.md_n = tr_docno.Text;
                    delete_old_bank_record();
                    if (tr_amt.Text != "0" && tr_amt.Text != null)
                    {
                        if (Convert.ToSingle(tr_amt.Text) > 0)
                            add_bank_record();
                    }
                    refresh_data_entry_bank_for_new_record();
                }
            }
            else if (subtabDataEntry.SelectedIndex == 3)
            {
                // CASH
                // r_p = 1 "Cash Deposit"
                //r_p = 2 Receipt
                //r_p = 3 cash withdrawal
                // r_p = 4 payment
                // b_t = 2 for balance, b_t = 3 for passed, b_t = 4 for failed.
                if (subtabcash.SelectedIndex == 0)
                {
                    //r_p = 2 Receipt
                    //temp_word = crdatetime.Value.Year.ToString();
                    //temp_word += crdatetime.Value.Month.ToString();
                    //temp_word += Convert.ToString(crdatetime.Value.Date.ToString().Substring(0, crdatetime.Value.ToString().IndexOf("/")));
                    //temp_word += crdocno.Text.Trim();
                    //crdocno.Text = temp_word;
                    ConnectionWithAccess.md_n = crdocno.Text;
                    //if (old_cash_receipt_amount != 0)
                    delete_old_cash_record();
                    if (cramt.Text != "0.00" && cramt.Text != null)
                        add_cash_record();
                    crtranlist.DataSource = null;
                    refresh_data_entry_cash_for_new_record();
                }
                else if (subtabcash.SelectedIndex == 1)
                {
                    // r_p = 4 payment
                    //temp_word = cpdatetime.Value.Year.ToString();
                    //temp_word += cpdatetime.Value.Month.ToString();
                    //temp_word += cpdatetime.Value.Date.ToString();
                    //temp_word += cpdocno.Text.Trim();
                    //cpdocno.Text = temp_word;
                    ConnectionWithAccess.md_n = cpdocno.Text;
                    if (old_cash_payment_amount != 0)
                        delete_old_cash_record();
                    if (cpamt.Text != "0" && cpamt.Text != null)
                    {
                        //if (Convert.ToSingle(cpamt.Text) > 0)
                        add_cash_record();
                    }
                    //fill_cash_trans_list();
                    refresh_data_entry_cash_for_new_record();
                }
            }
            else if (subtabDataEntry.SelectedIndex == 4)
            {
                ConnectionWithAccess.md_n = jjdocno.Text;
                delete_old_journal_record();
                if (jjamt.Text != "" && jjamt.Text != null)
                {
                    if (Convert.ToSingle(jjamt.Text) > 0)
                        add_journal_record();
                }
                refresh_data_entry_journal_for_new_record();
            }
            else if (maintab.SelectedIndex == 1 && subtabDataEntry.SelectedIndex == 5 && tc_dataentry_additional.SelectedIndex == 0)
            {
                save_item_current_stock();

            }
            else if (subtabDataEntry.SelectedIndex == 5 && tc_dataentry_additional.SelectedIndex == 2)
            {
                save_bank_excel_record();
            }

        }

        #endregion

        # region text_changed

        private void sipartycode_TextChanged(object sender, EventArgs e)
        {
            ConnectionWithAccess.data_entry_working = "Sale Party";
            if (!bsiPartyChangeIgnore && si_party_help.Visible == true)
            {
                string stra_n = get_a_n_from_d_c("S", Convert.ToInt32(sidbc.SelectedValue.ToString()));
                vFilterDataTableAndFillGrid(si_party_help, dt_Account_Master_List, "a_n = '" + stra_n + "' and d_y = '@@@'  and [desc] like '%" + sipartycode.Text + "%' ");
                if (si_party_help.Rows.Count == 1)
                {
                    vFilterDataTableAndFillGrid(si_party_help, dt_Account_Master_List, "a_n = '" + stra_n + "' and d_y = '@@@' and [city] like '%" + sipartycode.Text + "%' ");
                    if (si_party_help.Rows.Count == 1)
                    {
                        if (sipartycode.TextLength > 1)
                            sipartycode.Text = sipartycode.Text.Substring(0, sipartycode.Text.Length - 1);
                        sipartycode.SelectionStart = sipartycode.Text.Length;
                    }
                }
            }
            move_cursor_to_button_position("si_party_help");
            //generate_barcode(sipartycode.Text);
        }

        private void textBox_TextChanged(object sender, EventArgs e)
        {
            try
            {
                if (subtabDataEntry.SelectedIndex == 0)
                {
                    if (subtabsale.SelectedIndex == 0)
                    {
                        if (cntObject.Text != string.Empty)
                        {
                            columnIndex = siitemlist.CurrentCell.ColumnIndex;
                            rowIndex = siitemlist.CurrentCell.RowIndex;
                            string tempword = cntObject.Text;
                            if (rowIndex > -1)
                            {
                                siitemlistrowindex = siitemlist.CurrentCell.RowIndex;
                                if (columnIndex == 1)
                                {
                                    mitem_code = cntObject.Text;
                                    si_item_help.BringToFront();
                                    si_item_help.Visible = true;
                                    vFilterDataTableAndFillGrid(si_item_help, dt_Item_Master_List, "item_code like '%" + mitem_code + "%'");
                                    //ConnectionWithAccess.query = "select [type], item_code, [title],packing,box,price,clo_stk,cat,igst_per,hsn_code from " + ConnectionWithAccess.tablename[05] + " where item_code like '%" + mitem_code + "%' order by [title]";
                                    //ConnectionCommand.accountHelp_datatable_Seperate(si_item_help, "si_item_help");
                                    if (si_item_help.CurrentRow == null)
                                    {
                                        si_item_help.Visible = false;
                                    }
                                    move_cursor_to_button_position("si_item_help");
                                }
                                else if (columnIndex == 2)
                                {
                                    //mtitle = siitemlist.Rows[rowIndex].Cells[1].Value.ToString();
                                    mtitle = cntObject.Text;
                                    si_item_help.BringToFront();
                                    si_item_help.Visible = true;
                                    si_item_help.DataSource = null;
                                    //ConnectionWithAccess.query = "select f3.[type], f3.item_code, f3.[title],f3.price,f3.cat,f3.igst_per,f3.hsn_code,f3.a_n,f3.s_a, f5.clos_stk from " + ConnectionWithAccess.tablename[03] + " f3 inner join " + ConnectionWithAccess.tablename[05] + " f5 on f5.[type] = f3.[type] and f5.[item_code] = f3.item_code";
                                    //ConnectionCommand.accountHelp_datatable_Seperate(si_item_help, "si_item_help");
                                    //vFilterDataTableAndFillGrid(si_item_help, dt_item_sale_purchase_master, " a_n = '" + sia_n.Text + "' and s_a = '" + sis_a.Text + "' and [title] like '%" + mtitle + "%' ");
                                    vFilterDataTableAndFillGrid(si_item_help, dt_Item_Master_List, " [title] like '%" + mtitle + "%' ");
                                    if (si_item_help.CurrentRow == null)
                                    {
                                        vFilterDataTableAndFillGrid(si_item_help, dt_Item_Master_List, " [title] like '%" + mtitle + "%' ");
                                        if (si_item_help.CurrentRow == null)
                                        {
                                            ConnectionWithAccess.query = "select [type], item_code, [title],packing,box,price,clo_stk,cat,igst_per,hsn_code from " + ConnectionWithAccess.tablename[05] + " where item_code like '%" + mtitle + "%' order by [title]";
                                            ConnectionCommand.accountHelp_datatable_Seperate(si_item_help, "si_item_help");
                                            if (si_item_help.CurrentRow == null)
                                            {
                                                si_item_help.Visible = false;
                                                siitemlist.Rows[rowIndex].DefaultCellStyle.BackColor = Color.Red;
                                            }
                                        }
                                    }
                                    else
                                        siitemlist.Rows[rowIndex].DefaultCellStyle.BackColor = Color.Lavender;
                                    move_cursor_to_button_position("si_item_help");
                                }
                                else if (columnIndex == 3)
                                {
                                    mcase = Convert.ToInt32(cntObject.Text);
                                    mtitle = siitemlist.Rows[siitemlistrowindex].Cells[2].Value.ToString();
                                    get_item_details_from_05_using_title(mtitle);
                                    if (item_details_from_05.Count() > 3)
                                    {
                                        //mcase = 1;
                                        mbox = Convert.ToDouble(item_details_from_05[3]);
                                        mqty = Convert.ToDouble(item_details_from_05[4]);
                                        siitemlist.Rows[siitemlistrowindex].Cells[4].Value = mcase * mbox;
                                        siitemlist.Rows[siitemlistrowindex].Cells[5].Value = mcase * mqty;
                                        mamount = Convert.ToInt32(siitemlist.Rows[siitemlistrowindex].Cells[5].Value) * Convert.ToInt32(siitemlist.Rows[siitemlistrowindex].Cells[6].Value);
                                        siitemlist.Rows[siitemlistrowindex].Cells[7].Value = Convert.ToString(mamount);
                                    }
                                }

                            }
                        }
                    }
                    else if (subtabsale.SelectedIndex == 1)
                    {
                        if (cntObject.Text != string.Empty)
                        {
                            int sr_item_helprowindex;
                            columnIndex = sritemlist.CurrentCell.ColumnIndex;
                            rowIndex = sritemlist.CurrentCell.RowIndex;
                            string tempword = cntObject.Text;
                            if (rowIndex > -1)
                            {
                                sr_item_helprowindex = sritemlist.CurrentCell.RowIndex;
                                if (columnIndex == 1)
                                {
                                    mitem_code = cntObject.Text;
                                    sr_item_help.BringToFront();
                                    sr_item_help.Visible = true;
                                    vFilterDataTableAndFillGrid(sr_item_help, dt_Item_Master_List, "item_code like '%" + mitem_code + "%'");
                                    //ConnectionWithAccess.query = "select [type], item_code, [title],packing,box,price,clo_stk,cat,igst_per,hsn_code from " + ConnectionWithAccess.tablename[05] + " where item_code like '%" + mitem_code + "%' order by [title]";
                                    //ConnectionCommand.accountHelp_datatable_Seperate(sr_item_help, "sr_item_help");
                                    if (sr_item_help.CurrentRow == null)
                                    {
                                        sr_item_help.Visible = false;
                                    }
                                }
                                else if (columnIndex == 2)
                                {
                                    mtitle = cntObject.Text;
                                    sr_item_help.BringToFront();
                                    sr_item_help.Visible = true;
                                    vFilterDataTableAndFillGrid(sr_item_help, dt_Item_Master_List, "title like '%" + mtitle + "%'");
                                    //ConnectionWithAccess.query = "select [type], item_code, [title],packing,box,price,clo_stk,cat,igst_per,hsn_code from " + ConnectionWithAccess.tablename[05] + " where title like '%" + mtitle + "%' order by [title]";
                                    //ConnectionCommand.accountHelp_datatable_Seperate(sr_item_help, "sr_item_help");
                                    if (sr_item_help.CurrentRow == null)
                                    {
                                        vFilterDataTableAndFillGrid(sr_item_help, dt_Item_Master_List, "item_code like '%" + mtitle + "%'");
                                        //ConnectionWithAccess.query = "select [type], item_code, [title],packing,box,price,clo_stk,cat,igst_per,hsn_code from " + ConnectionWithAccess.tablename[05] + " where item_code like '%" + mtitle + "%' order by [title]";
                                        //ConnectionCommand.accountHelp_datatable_Seperate(sr_item_help, "sr_item_help");
                                        if (sr_item_help.CurrentRow == null)
                                            sr_item_help.Visible = false;
                                    }
                                }
                            }
                        }
                    }
                    else if (subtabsale.SelectedIndex == 2)
                    {
                        if (cntObject.Text != string.Empty)
                        {
                            columnIndex = soitemlist.CurrentCell.ColumnIndex;
                            rowIndex = soitemlist.CurrentCell.RowIndex;
                            string tempword = cntObject.Text;
                            if (rowIndex > -1)
                            {
                                soitemlistrowindex = soitemlist.CurrentCell.RowIndex;
                                if (columnIndex == 0)
                                {
                                    mtype = cntObject.Text;
                                    so_item_help.BringToFront();
                                    so_item_help.Visible = true;
                                    ConnectionWithAccess.query = "select [type], item_code, [title],packing,box,price,clo_stk,cat,igst_per,hsn_code from " + ConnectionWithAccess.tablename[05] + " where [type] =  '" + tempword + "'";
                                    ConnectionCommand.accountHelp_datatable_Seperate(so_item_help, "si_item_help");
                                    so_item_help.Sort(so_item_help.Columns[2], ListSortDirection.Ascending);
                                }
                                else if (columnIndex == 1)
                                {
                                    mitem_code = cntObject.Text;
                                    so_item_help.BringToFront();
                                    so_item_help.Visible = true;
                                    ConnectionWithAccess.query = "select [type], item_code, [title],packing,box,price,clo_stk,cat,igst_per,hsn_code from " + ConnectionWithAccess.tablename[05] + " where [item_code] like '" + tempword + "%'";
                                    ConnectionCommand.accountHelp_datatable_Seperate(so_item_help, "si_item_help");
                                    so_item_help.Sort(so_item_help.Columns[1], ListSortDirection.Ascending);
                                }
                                else if (columnIndex == 2)
                                {
                                    mtitle = cntObject.Text;
                                    so_item_help.BringToFront();
                                    so_item_help.Visible = true;
                                    ConnectionWithAccess.query = "select [type], item_code, [title],packing,box,price,clo_stk,cat,igst_per,hsn_code from " + ConnectionWithAccess.tablename[05] + " where title like '%" + mtitle + "%' order by [title]";
                                    ConnectionCommand.accountHelp_datatable_Seperate(so_item_help, "so_item_help");
                                    //so_item_help.Sort(so_item_help.Columns[2], ListSortDirection.Ascending);
                                }
                            }
                        }
                    }
                    else if (subtabsale.SelectedIndex == 3)
                    {
                        if (cntObject.Text != string.Empty)
                        {
                            columnIndex = simple_itemsalelist.CurrentCell.ColumnIndex;
                            rowIndex = simple_itemsalelist.CurrentCell.RowIndex;
                            string tempword = cntObject.Text;
                            if (rowIndex > -1)
                            {
                                //siitemlistrowindex = siitemlist.CurrentCell.RowIndex;
                                if (columnIndex == 1)
                                {
                                    mitem_code = cntObject.Text;
                                    simple_item_help.BringToFront();
                                    simple_item_help.Visible = true;
                                    ConnectionWithAccess.query = "select [type], item_code, [title],packing,box,price,clo_stk,cat,igst_per,hsn_code from " + ConnectionWithAccess.tablename[05] + " where item_code like '%" + mitem_code + "%'";
                                    ConnectionCommand.accountHelp_datatable_Seperate(simple_item_help, "simple_item_help");
                                    if (simple_item_help.CurrentRow == null)
                                    {
                                        simple_item_help.Visible = false;
                                    }
                                }
                                else if (columnIndex == 2)
                                {
                                    mtitle = cntObject.Text;
                                    simple_item_help.BringToFront();
                                    simple_item_help.Visible = true;
                                    ConnectionWithAccess.query = "select [type], item_code, [title],packing,box,price,clo_stk,cat,igst_per,hsn_code from " + ConnectionWithAccess.tablename[05] + " where title like '%" + mtitle + "%' order by [title]";
                                    ConnectionCommand.accountHelp_datatable_Seperate(simple_item_help, "simple_item_help");
                                    if (simple_item_help.CurrentRow == null)
                                    {
                                        ConnectionWithAccess.query = "select [type], item_code, [title],packing,box,price,clo_stk,cat,igst_per,hsn_code from " + ConnectionWithAccess.tablename[05] + " where item_code like '%" + mtitle + "%' order by [title]";
                                        ConnectionCommand.accountHelp_datatable_Seperate(simple_item_help, "simple_item_help");
                                        if (simple_item_help.CurrentRow == null)
                                            simple_item_help.Visible = false;
                                    }
                                }
                                else if (columnIndex == 7)
                                {
                                    mamount = Convert.ToSingle(simple_itemsalelist.Rows[rowIndex].Cells[7].Value.ToString());
                                    mbox = Convert.ToDouble(item_details_from_05[3]);
                                    mqty = Convert.ToDouble(item_details_from_05[4]);
                                    mprice = mamount / (mcase * mbox * mqty);
                                    simple_itemsalelist.Rows[rowIndex].Cells[6].Value = mprice;
                                    calculate_simple_SaleItemTotal();
                                }
                            }
                        }
                    }
                }
                else if (subtabDataEntry.SelectedIndex == 1)
                {
                    if (cntObject.Text != string.Empty)
                    {
                        columnIndex = piitemlist.CurrentCell.ColumnIndex;
                        rowIndex = piitemlist.CurrentCell.RowIndex;
                        string tempword = cntObject.Text;
                        if (rowIndex > -1)
                        {
                            piitemlistrowindex = piitemlist.CurrentCell.RowIndex;
                            if (columnIndex == 2)
                            {
                                mtitle = cntObject.Text;

                                //ConnectionWithAccess.query = "select [type], item_code, [title],packing,box,price,clo_stk,cat,igst_per,hsn_code from " + ConnectionWithAccess.tablename[05] + " where title like '%" + mtitle.Trim() + "%' order by [title]";
                                //ConnectionCommand.accountHelp_datatable_Seperate(pi_item_help, "pi_item_help");
                                vFilterDataTableAndFillGrid(pi_item_help, dt_Item_Master_List, "title like '%" + mtitle.Trim() + "%' ");
                                if (pi_item_help.RowCount <= 1)
                                {
                                    //ConnectionWithAccess.query = "select [type], item_code, [title],packing,box,price,clo_stk,cat,igst_per,hsn_code from " + ConnectionWithAccess.tablename[05] + " where item_code like '%" + mtitle + "%' order by [title]";
                                    //ConnectionCommand.accountHelp_datatable_Seperate(pi_item_help, "pi_item_help");
                                    //if (pi_item_help.CurrentRow == null)
                                    //{
                                    piitemlist.Rows[rowIndex].DefaultCellStyle.BackColor = Color.Red;
                                    pi_item_help.Visible = false;
                                    //}
                                }
                                else
                                {
                                    pi_item_help.Visible = true;
                                    piitemlist.Rows[rowIndex].DefaultCellStyle.BackColor = Color.Lavender;
                                    move_cursor_to_button_position("pi_item_help");
                                }
                            }
                            else if (columnIndex == 3)
                            {
                                mcase = Convert.ToInt32(cntObject.Text);
                                mtitle = piitemlist.Rows[rowIndex].Cells[2].Value.ToString();
                                get_item_details_from_05_using_title(mtitle);
                                if (item_details_from_05.Count() > 3)
                                {
                                    //mcase = 1;
                                    mbox = Convert.ToDouble(item_details_from_05[3]);
                                    mqty = Convert.ToDouble(item_details_from_05[4]);
                                    piitemlist.Rows[rowIndex].Cells[4].Value = mcase * mbox;
                                    piitemlist.Rows[rowIndex].Cells[5].Value = mcase * mqty;
                                    mamount = Convert.ToInt32(piitemlist.Rows[rowIndex].Cells[5].Value) * Convert.ToInt32(piitemlist.Rows[siitemlistrowindex].Cells[6].Value);
                                    piitemlist.Rows[rowIndex].Cells[7].Value = Convert.ToString(mamount);
                                }
                            }
                            else if (columnIndex == 4)
                            {
                                mtitle = piitemlist.Rows[rowIndex].Cells[2].Value.ToString();
                                get_item_details_from_05_using_title(mtitle);
                                if (item_details_from_05.Count() > 3)
                                {
                                    //mcase = 1;
                                    //mbox = Convert.ToDouble(item_details_from_05[4]);
                                    mcase = Convert.ToDouble(piitemlist.Rows[rowIndex].Cells[4].Value.ToString());
                                    mqty = Convert.ToDouble(item_details_from_05[4]);
                                    piitemlist.Rows[rowIndex].Cells[5].Value = mcase * mqty;
                                    mamount = Convert.ToInt32(piitemlist.Rows[rowIndex].Cells[5].Value) * Convert.ToInt32(piitemlist.Rows[rowIndex].Cells[6].Value);
                                    piitemlist.Rows[siitemlistrowindex].Cells[7].Value = Convert.ToString(mamount);
                                }
                            }
                            else if (columnIndex == 5)
                            {
                                //mtype = piitemlist.Rows[rowIndex].Cells[0].ToString();
                                //mitem_code = piitemlist.Rows[rowIndex].Cells[1].ToString();
                                //mtitle = cntObject.Text;
                            }

                        }
                    }
                }
                else if (subtabDataEntry.SelectedIndex == 2)
                {
                    if (cntObject.Text != string.Empty)
                    {
                        rowIndex = bp_dgv_gst_tax_brief.CurrentCell.RowIndex;
                        columnIndex = bp_dgv_gst_tax_brief.CurrentCell.ColumnIndex;
                        if (columnIndex == 0)
                        {
                            if (bp_dgv_gst_tax_brief.Rows[rowIndex].Cells[1].Value != System.DBNull.Value)
                            {
                                bp_dgv_gst_tax_brief.Rows[rowIndex].Cells[2].Value = Convert.ToDouble(cntObject.Text) * Convert.ToDouble(bp_dgv_gst_tax_brief.Rows[rowIndex].Cells[1].Value) / 100;
                                bp_dgv_gst_tax_brief.Rows[rowIndex].Cells[3].Value = Convert.ToDouble(cntObject.Text) + Convert.ToDouble(bp_dgv_gst_tax_brief.Rows[rowIndex].Cells[2].Value);
                            }
                        }
                        else if (columnIndex == 1 && bp_dgv_gst_tax_brief.Rows[rowIndex].Cells[0].Value != null)
                        {
                            bp_dgv_gst_tax_brief.Rows[rowIndex].Cells[2].Value = Convert.ToDouble(bp_dgv_gst_tax_brief.Rows[rowIndex].Cells[0].Value) * Convert.ToDouble(cntObject.Text) / 100;
                            bp_dgv_gst_tax_brief.Rows[rowIndex].Cells[3].Value = (Convert.ToDouble(bp_dgv_gst_tax_brief.Rows[rowIndex].Cells[0].Value) * Convert.ToDouble(cntObject.Text) / 100) + Convert.ToDouble(bp_dgv_gst_tax_brief.Rows[rowIndex].Cells[0].Value);
                        }
                        else if (columnIndex == 2 && bp_dgv_gst_tax_brief.Rows[rowIndex].Cells[0].Value != null)
                        {
                            bp_dgv_gst_tax_brief.Rows[rowIndex].Cells[0].Value = Convert.ToDouble(bp_dgv_gst_tax_brief.Rows[rowIndex].Cells[2].Value) / Convert.ToDouble(bp_dgv_gst_tax_brief.Rows[rowIndex].Cells[1].Value) * 100;
                            bp_dgv_gst_tax_brief.Rows[rowIndex].Cells[3].Value = (Convert.ToDouble(bp_dgv_gst_tax_brief.Rows[rowIndex].Cells[0].Value) * Convert.ToDouble(bp_dgv_gst_tax_brief.Rows[rowIndex].Cells[1].Value) / 100) + Convert.ToDouble(bp_dgv_gst_tax_brief.Rows[rowIndex].Cells[0].Value);
                        }
                    }
                }
                else if (subtabDataEntry.SelectedIndex == 3)
                {
                    if (cntObject.Text != string.Empty)
                    {
                        rowIndex = cp_dgv_gst_tax_brief.CurrentCell.RowIndex;
                        columnIndex = cp_dgv_gst_tax_brief.CurrentCell.ColumnIndex;
                        if (columnIndex == 0)
                        {
                            if (cp_dgv_gst_tax_brief.Rows[rowIndex].Cells[1].Value != System.DBNull.Value)
                            {
                                cp_dgv_gst_tax_brief.Rows[rowIndex].Cells[2].Value = Convert.ToDouble(cntObject.Text) * Convert.ToDouble(cp_dgv_gst_tax_brief.Rows[rowIndex].Cells[1].Value) / 100;
                                cp_dgv_gst_tax_brief.Rows[rowIndex].Cells[3].Value = Convert.ToDouble(cntObject.Text) + Convert.ToDouble(cp_dgv_gst_tax_brief.Rows[rowIndex].Cells[2].Value);
                            }
                        }
                        else if (columnIndex == 1 && cp_dgv_gst_tax_brief.Rows[rowIndex].Cells[0].Value != null)
                        {
                            cp_dgv_gst_tax_brief.Rows[rowIndex].Cells[2].Value = Convert.ToDouble(cp_dgv_gst_tax_brief.Rows[rowIndex].Cells[0].Value) * Convert.ToDouble(cntObject.Text) / 100;
                            cp_dgv_gst_tax_brief.Rows[rowIndex].Cells[3].Value = (Convert.ToDouble(cp_dgv_gst_tax_brief.Rows[rowIndex].Cells[0].Value) * Convert.ToDouble(cntObject.Text) / 100) + Convert.ToDouble(cp_dgv_gst_tax_brief.Rows[rowIndex].Cells[0].Value);
                        }
                        else if (columnIndex == 2 && cp_dgv_gst_tax_brief.Rows[rowIndex].Cells[0].Value != null)
                        {
                            cp_dgv_gst_tax_brief.Rows[rowIndex].Cells[0].Value = Convert.ToDouble(cp_dgv_gst_tax_brief.Rows[rowIndex].Cells[2].Value) / Convert.ToDouble(cp_dgv_gst_tax_brief.Rows[rowIndex].Cells[1].Value) * 100;
                            cp_dgv_gst_tax_brief.Rows[rowIndex].Cells[3].Value = (Convert.ToDouble(cp_dgv_gst_tax_brief.Rows[rowIndex].Cells[0].Value) * Convert.ToDouble(cp_dgv_gst_tax_brief.Rows[rowIndex].Cells[1].Value) / 100) + Convert.ToDouble(cp_dgv_gst_tax_brief.Rows[rowIndex].Cells[0].Value);
                        }
                    }
                }
                else if (subtabDataEntry.SelectedIndex == 4)
                {
                    if (cntObject.Text != string.Empty)
                    {
                        rowIndex = jj_dgv_gst_tax_brief.CurrentCell.RowIndex;
                        columnIndex = jj_dgv_gst_tax_brief.CurrentCell.ColumnIndex;
                        if (columnIndex == 0)
                        {
                            if (jj_dgv_gst_tax_brief.Rows[rowIndex].Cells[1].Value != System.DBNull.Value)
                            {
                                jj_dgv_gst_tax_brief.Rows[rowIndex].Cells[2].Value = Convert.ToDouble(cntObject.Text) * Convert.ToDouble(jj_dgv_gst_tax_brief.Rows[rowIndex].Cells[1].Value) / 100;
                                jj_dgv_gst_tax_brief.Rows[rowIndex].Cells[3].Value = Convert.ToDouble(cntObject.Text) + Convert.ToDouble(jj_dgv_gst_tax_brief.Rows[rowIndex].Cells[2].Value);
                            }
                        }
                        else if (columnIndex == 1 && jj_dgv_gst_tax_brief.Rows[rowIndex].Cells[0].Value != null)
                        {
                            jj_dgv_gst_tax_brief.Rows[rowIndex].Cells[2].Value = Convert.ToDouble(jj_dgv_gst_tax_brief.Rows[rowIndex].Cells[0].Value) * Convert.ToDouble(cntObject.Text) / 100;
                            jj_dgv_gst_tax_brief.Rows[rowIndex].Cells[3].Value = (Convert.ToDouble(jj_dgv_gst_tax_brief.Rows[rowIndex].Cells[0].Value) * Convert.ToDouble(cntObject.Text) / 100) + Convert.ToDouble(jj_dgv_gst_tax_brief.Rows[rowIndex].Cells[0].Value);
                        }
                    }
                }

            }
            catch (Exception ex)
            { }
        }

        private void tbDesc_TextChanged(object sender, EventArgs e)
        {
            lbl_master_master_account_name.Visible = true;
            if (cbParent.SelectedItem != null)
            {
                if (cbParent.SelectedItem.Equals("Unknown"))
                {
                    //ConnectionWithAccess.query = "select [desc], city, a_n, s_a from " + ConnectionWithAccess.tablename[1] + " where d_y = '@@@' and [desc] like '%" + tbDesc.Text + "%'";
                    //ConnectionCommand.accountHelp_datatable_Seperate(master_account_help_dg, "master_account_help_dg");
                    vFilterDataTableAndFillGrid(master_account_help_dg, dt_Account_Master_List, "d_y = '@@@' and [desc] like '%" + tbDesc.Text + "%'");
                    if (master_account_help_dg.CurrentRow != null)
                        lbl_master_master_account_name.Text = common_account_head(master_account_help_dg.CurrentRow.Cells[2].Value.ToString());
                    else
                    {
                        MessageBox.Show("Account Cannot be saved with Unknown Parent Account");
                        lbl_master_master_account_name.Text = null;
                    }
                }
                else
                {
                    if (!cb_change_master_account_name.Checked)
                    {
                        temp_word = cbParent.Text;
                        if (cbParent.SelectedItem.Equals("SUNDRY CREDITORS") || cbParent.SelectedItem.Equals("SUNDRY DEBTORS"))
                        {
                            //dt_Party_Master_List ,master_account_help_dg
                            //ConnectionWithAccess.query = "select [desc], city, a_n, s_a from " + ConnectionWithAccess.tablename[1] + " where a_n = '" + tbA_N.Text.Trim() + "' and d_y = '@@@' and [desc] like '" + tbDesc.Text + "%'";
                            //ConnectionCommand.accountHelp_datatable_Seperate(master_account_help_dg, "master_account_help_dg");
                            vFilterDataTableAndFillGrid(master_account_help_dg, dt_Party_Master_List, "a_n = '" + tbA_N.Text.Trim() + "' and d_y = '@@@' and [desc] like '" + tbDesc.Text + "%'");
                        }
                        else if (cbParent.SelectedItem.Equals("LOANS TAKEN") || cbParent.SelectedItem.Equals("CAPITAL ACCOUNT") || cbParent.SelectedItem.Equals("LOANS GIVEN") || cbParent.SelectedItem.Equals("INVESTMENTS") || cbParent.SelectedItem.Equals("INCOMES/EXPENSES(TRADING A/c.)") || cbParent.SelectedItem.Equals("FIXED ASSETS") || cbParent.SelectedItem.Equals("LOANS") || cbParent.SelectedItem.Equals("Job Work"))
                        {
                            //ConnectionWithAccess.query = "select [desc], city, a_n, s_a from " + ConnectionWithAccess.tablename[1] + " where a_n like '" + tbA_N.Text + "%' and [desc] like '" + tbDesc.Text + "%'";
                            //ConnectionCommand.accountHelp_datatable_Seperate(master_account_help_dg, "master_account_help_dg");
                            vFilterDataTableAndFillGrid(master_account_help_dg, dt_Account_Master_List, "a_n like '" + tbA_N.Text + "%' and [desc] like '" + tbDesc.Text + "%'");
                        }
                        else if (cbParent.SelectedItem.Equals("UNKNOWN"))
                        {
                            //ConnectionWithAccess.query = "select [desc], city, a_n, s_a from " + ConnectionWithAccess.tablename[1] + " where [desc] like '" + tbDesc.Text + "%'";
                            //ConnectionCommand.accountHelp_datatable_Seperate(master_account_help_dg, "master_account_help_dg");
                            vFilterDataTableAndFillGrid(master_account_help_dg, dt_Account_Master_List, "[desc] like '" + tbDesc.Text + "%'");
                        }
                        else
                        {
                            //ConnectionWithAccess.query = "select [desc], city, a_n, s_a from " + ConnectionWithAccess.tablename[1] + " where s_a = '@@@' and a_n like '" + tbA_N.Text + "%' and [desc] like '" + tbDesc.Text + "%'";
                            //ConnectionCommand.accountHelp_datatable_Seperate(master_account_help_dg, "master_account_help_dg");
                            vFilterDataTableAndFillGrid(master_account_help_dg, dt_Account_Master_List, "a_n like '" + tbA_N.Text + "%' and [desc] like '" + tbDesc.Text + "%'");
                            //vFilterDataTableAndFillGrid(master_account_help_dg, dt_Account_Master_List, "s_a = '@@@' and a_n like '" + tbA_N.Text + "%' and [desc] like '" + tbDesc.Text + "%'");
                        }
                        if (master_account_help_dg.CurrentRow != null)
                            lbl_master_master_account_name.Text = common_account_head(master_account_help_dg.CurrentRow.Cells[2].Value.ToString());
                        else
                        {
                            //ConnectionWithAccess.query = "select [desc], city, a_n, s_a from " + ConnectionWithAccess.tablename[1] + " where a_n like '" + tbA_N.Text + "%' and [city] like '" + tbDesc.Text + "%'";
                            //ConnectionCommand.accountHelp_datatable_Seperate(master_account_help_dg, "master_account_help_dg");
                            vFilterDataTableAndFillGrid(master_account_help_dg, dt_Account_Master_List, "a_n like '" + tbA_N.Text + "%' and [city] like '" + tbDesc.Text + "%'");
                            if (master_account_help_dg.CurrentRow == null)
                            {
                                master_account_help_dg.Visible = false;
                                tbopenbalance.Text = "0.00";
                                //tbS_A.Text = "@@@";
                                //tbd_y.Text = "@@@";
                            }
                        }
                        move_cursor_to_button_position("master_account_help_dg");
                    }
                    else
                    {
                        temp_a_n = tbA_N.Text;
                        temp_s_a = tbS_A.Text;
                    }
                }
            }
            else
            {
                //ConnectionWithAccess.query = "select [desc], city, a_n, s_a from " + ConnectionWithAccess.tablename[1] + " where a_n like '" + tbA_N.Text + "%' and s_a <> '@@@' and [desc] like '%" + tbDesc.Text + "%'";
                //ConnectionCommand.accountHelp_datatable_Seperate(master_account_help_dg, "master_account_help_dg");
                vFilterDataTableAndFillGrid(master_account_help_dg, dt_Account_Master_List, "a_n like '" + tbA_N.Text + "%' and s_a <> '@@@' and [desc] like '%" + tbDesc.Text + "%'");
                if (master_account_help_dg.CurrentRow != null)
                    lbl_master_master_account_name.Text = common_account_head(master_account_help_dg.CurrentRow.Cells[2].Value.ToString());
                else
                {
                    MessageBox.Show("Account Cannot be saved with Unknown Parent Account");
                    lbl_master_master_account_name.Text = null;
                }
            }
        }

        private void sitaxcode_TextChanged(object sender, EventArgs e)
        {
            ConnectionWithAccess.query = "select tx_code,tax_rate, [desc] from " + ConnectionWithAccess.tablename[6] + " where d_c = " + Convert.ToInt32(sidbc.SelectedValue.ToString()) + " and tx_code like '" + sitaxcode.Text + "%'";
            ConnectionCommand.accountHelp_datatable_Seperate(sitaxlist, "sitaxlist", "tx_code ASC");
            //if (sitaxlist.Rows.Count > 0)
            //{
            //    sitaxlist.Visible = true;
            //    sitaxlist.BringToFront();
            //}
        }

        private void brpartycode_TextChanged(object sender, EventArgs e)
        {
            if (braccountdg.Visible == true)
            {
                ConnectionWithAccess.data_entry_working = "Bank Receipt";
                //ConnectionWithAccess.query = "select f1.[desc], f1.city, f1.a_n, f1.s_a , f2.[desc] as [Master Account] from " + ConnectionWithAccess.tablename[1] + " f1 left outer join " + ConnectionWithAccess.tablename[1] + " f2 on f2.a_n = f1.a_n and f2.s_a = f1.s_a and f2.d_y = f1.d_y where f1.d_y = '@@@' and f1.[desc] like '%" + brpartycode.Text + "%' order by f1.[desc], f1.city";
                //ConnectionCommand.accountHelp_datatable_Seperate(braccountdg, "braccountdg");
                vFilterDataTableAndFillGrid(braccountdg, dt_Account_Master_List, "[desc] like '%" + brpartycode.Text + "%' ");
                if (braccountdg.Rows.Count == 1)
                {
                    //ConnectionWithAccess.query = "select f1.[desc], f1.city, f1.a_n, f1.s_a , f2.[desc] as [Master Account] from " + ConnectionWithAccess.tablename[1] + " f1 left outer join " + ConnectionWithAccess.tablename[1] + " f2 on f2.a_n = f1.a_n and f2.s_a = f1.s_a and f2.d_y = f1.d_y where f1.d_y = '@@@' and f1.[city] like '%" + brpartycode.Text + "%' order by f1.city";
                    //ConnectionCommand.accountHelp_datatable(braccountdg, "braccountdg");
                    vFilterDataTableAndFillGrid(braccountdg, dt_Account_Master_List, "[city] like '%" + brpartycode.Text + "%' ");
                }
                if (braccountdg.Rows.Count > 1)
                {
                    br_master_acc_name.Text = common_account_head(braccountdg.CurrentRow.Cells[2].Value.ToString());
                    move_cursor_to_button_position("braccountdg");
                }
            }
        }

        private void pipartycode_TextChanged(object sender, EventArgs e)
        {

        }

        private void pitx_code_TextChanged(object sender, EventArgs e)
        {
            if (pibasicamt.Text != "0")
            {
                ConnectionWithAccess.query = "select tx_code,tax_rate, [desc] from " + ConnectionWithAccess.tablename[6] + " where d_c = " + Convert.ToInt32(pidbc.SelectedValue.ToString()) + " and tx_code like '" + pitx_code.Text + "%'";
                ConnectionCommand.accountHelp(pitaxlist_dgv, "pitaxlist_dgv");
                pitaxlist_dgv.Sort(pitaxlist_dgv.Columns[0], ListSortDirection.Ascending);
            }
        }

        private void bppartycode_TextChanged(object sender, EventArgs e)
        {
            ConnectionWithAccess.data_entry_working = "Bank Payment";
            //ConnectionWithAccess.query = "select [desc], city, a_n, s_a from " + ConnectionWithAccess.tablename[1] + " where (d_y is null or d_y ='') and [desc] like '%" + bppartycode.Text + "%'";
            //ConnectionWithAccess.query = "select f1.[desc], f1.city, f1.a_n, f1.s_a , f2.[desc] as [Master Account] from " + ConnectionWithAccess.tablename[1] + " f1 left outer join " + ConnectionWithAccess.tablename[1] + " f2 on f2.a_n = f1.a_n and f2.s_a = f1.s_a and f2.d_y = f1.d_y where f1.d_y = '@@@' and f1.[desc] like '%" + bppartycode.Text + "%' order by f1.[desc], f1.city";
            //ConnectionCommand.accountHelp_datatable(bp_datagridview, "bp_datagridview");
            vFilterDataTableAndFillGrid(bp_datagridview, dt_Account_Master_List, "[desc] like '%" + bppartycode.Text + "%' ");
            if (bp_datagridview.Rows.Count == 1)
            {
                //ConnectionWithAccess.query = "select f1.[desc], f1.city, f1.a_n, f1.s_a , f2.[desc] as [Master Account] from " + ConnectionWithAccess.tablename[1] + " f1 left outer join " + ConnectionWithAccess.tablename[1] + " f2 on f2.a_n = f1.a_n where f2.s_a = '@@@' and f1.[city] like '%" + bppartycode.Text + "%' order by f1.[desc], f1.city";
                //ConnectionCommand.accountHelp_datatable(bp_datagridview, "bp_datagridview");
                vFilterDataTableAndFillGrid(bp_datagridview, dt_Account_Master_List, "[city] like '%" + bppartycode.Text + "%' ");
            }
            if (bp_datagridview.CurrentRow != null)
            {
                bp_master_acc_name.Text = common_account_head(bp_datagridview.CurrentRow.Cells[2].Value.ToString());
                move_cursor_to_button_position("bp_datagridview");
            }
        }

        private void crpartycode_TextChanged(object sender, EventArgs e)
        {
            //ConnectionWithAccess.data_entry_working = "Cash Receipt";
            ////ConnectionWithAccess.query = "select f1.[desc], f1.city, f1.a_n, f1.s_a , f2.[desc] as [Master Account] from " + ConnectionWithAccess.tablename[1] + " f1 left outer join " + ConnectionWithAccess.tablename[1] + " f2 on f2.a_n = f1.a_n where f1.a_n = '" + cr_book_a_n.Text + "' and f2.s_a = '@@@' and f1.[desc] like '%" + crpartycode.Text + "%'  order by f1.[desc], f1.city";
            //if (ConnectionWithAccess.cash_a_n == "2010  ")
            //    ConnectionWithAccess.query = "select f1.[desc], f1.city, f1.a_n, f1.s_a , f2.[desc] as [Master Account] from " + ConnectionWithAccess.tablename[1] + " f1 left outer join " + ConnectionWithAccess.tablename[1] + " f2 on f2.a_n = f1.a_n where f2.s_a = '@@@' and f1.[desc] like '%" + crpartycode.Text + "%' order by f1.[desc], f1.city";
            //else
            //    ConnectionWithAccess.query = "select [desc], city, a_n,s_a,d_y,(select [desc] from " + ConnectionWithAccess.tablename[1] + " where a_n = (select distinct a_n from " + ConnectionWithAccess.tablename[24] + " where d_c = " + Convert.ToInt32(crdbc.SelectedValue.ToString()) + " and d_n = 999999) and s_a ='@@@')  from " + ConnectionWithAccess.tablename[1] + " where a_n = (select distinct a_n from " + ConnectionWithAccess.tablename[24] + " where d_c = " + Convert.ToInt32(crdbc.SelectedValue.ToString()) + " and d_n = 999999) and s_a <> '@@@' and (d_y is null or d_y ='' or d_y = '@@@') and [desc] like '%" + crpartycode.Text + "%' order by [desc], city";
            //    //ConnectionWithAccess.query = "select f1.[desc], f1.city, f1.a_n, f1.s_a , f2.[desc] as [Master Account] from " + ConnectionWithAccess.tablename[1] + " f1 left outer join " + ConnectionWithAccess.tablename[1] + " f2 on f2.a_n = f1.a_n where f2.s_a = '@@@' and f1.[desc] like '%" + crpartycode.Text + "%' order by f1.[desc], f1.city";
            //ConnectionCommand.accountHelp_datatable(cr_datagridview, "cr_datagridview");
            //if (cr_datagridview.Rows.Count == 1)
            //{
            //    ConnectionWithAccess.query = "select f1.[desc], f1.city, f1.a_n, f1.s_a , f2.[desc] as [Master Account] from " + ConnectionWithAccess.tablename[1] + " f1 left outer join " + ConnectionWithAccess.tablename[1] + " f2 on f2.a_n = f1.a_n where f2.s_a = '@@@' and f1.[city] like '%" + crpartycode.Text + "%' order by f1.[desc], f1.city";
            //    ConnectionCommand.accountHelp_datatable(cr_datagridview, "cr_datagridview");
            //}
            //move_cursor_to_button_position("cr_datagridview");
        }

        private void cppartycode_TextChanged(object sender, EventArgs e)
        {
            //ConnectionWithAccess.data_entry_working = "Cash Payment";
            //ConnectionWithAccess.query = "select f1.[desc], f1.city, f1.a_n, f1.s_a , f2.[desc] as [Master Account] from " + ConnectionWithAccess.tablename[1] + " f1 left outer join " + ConnectionWithAccess.tablename[1] + " f2 on f2.a_n = f1.a_n where f2.s_a = '@@@' and f1.[desc] like '%" + cppartycode.Text + "%' order by f1.[desc], f1.city";
            //ConnectionCommand.accountHelp_datatable_Seperate(cp_datagridview, "cp_datagridview");
            //if (cp_datagridview.Rows.Count == 1)
            //{
            //    ConnectionWithAccess.query = "select f1.[desc], f1.city, f1.a_n, f1.s_a , f2.[desc] as [Master Account] from " + ConnectionWithAccess.tablename[1] + " f1 left outer join " + ConnectionWithAccess.tablename[1] + " f2 on f2.a_n = f1.a_n where f2.s_a = '@@@' and f1.[city] like '%" + cppartycode.Text + "%' order by f1.[desc], f1.city";
            //    ConnectionCommand.accountHelp_datatable(cp_datagridview, "cp_datagridview");
            //}
            //else
            //    move_cursor_to_button_position("cp_datagridview");
        }

        private void jjpartycode1_TextChanged(object sender, EventArgs e)
        {
            jour_datagridview.BringToFront();
            //ConnectionWithAccess.query = "select [desc], city, a_n, s_a from " + ConnectionWithAccess.tablename[1] + " where s_a <> '@@@' and (d_y is null or d_y ='') and [desc] like '%" + jjpartycode1.Text + "%'";
            //ConnectionWithAccess.query = "select [desc], city, a_n, s_a from " + ConnectionWithAccess.tablename[1] + " where [desc] like '%" + jjpartycode1.Text + "%'";
            vFilterDataTableAndFillGrid(jour_datagridview, dt_Account_Master_List, "[desc] like '" + jjpartycode1.Text + "%'");
            //ConnectionWithAccess.query = "select f1.[desc], f1.city, f1.a_n, f1.s_a , f2.[desc] as [Master Account] from " + ConnectionWithAccess.tablename[1] + " f1 left outer join " + ConnectionWithAccess.tablename[1] + " f2 on f2.a_n = f1.a_n where f2.s_a = '@@@' and f1.[desc] like '%" + jjpartycode1.Text + "%'";
            //ConnectionCommand.accountHelp_datatable(jour_datagridview, "jour_datagridview");
            if (jour_datagridview.CurrentRow != null)
            {
                common_account_head(jour_datagridview.CurrentRow.Cells[2].Value.ToString());
            }
            move_cursor_to_button_position("jjpartycode1");
        }

        private void jjpartycode2_TextChanged(object sender, EventArgs e)
        {
            jour_datagridview.BringToFront();
            vFilterDataTableAndFillGrid(jour_datagridview, dt_Account_Master_List, "[desc] like '" + jjpartycode2.Text + "%'");
            //ConnectionWithAccess.query = "select f1.[desc], f1.city, f1.a_n, f1.s_a , f2.[desc] as [Master Account] from " + ConnectionWithAccess.tablename[1] + " f1 left outer join " + ConnectionWithAccess.tablename[1] + " f2 on f2.a_n = f1.a_n where f2.s_a = '@@@' and f1.[desc] like '%" + jjpartycode2.Text + "%'";
            //ConnectionCommand.accountHelp_datatable(jour_datagridview, "jour_datagridview");
            if (jour_datagridview.CurrentRow != null)
            {
                lbl_jour_payer_acc_head.Visible = true;
                lbl_jour_payer_acc_head.Text = common_account_head(jour_datagridview.CurrentRow.Cells[2].Value.ToString());
            }
            move_cursor_to_button_position("jjpartycode2");
        }

        private void pibasicamt_TextChanged(object sender, EventArgs e)
        {
            try
            {
                pi_freight_amt.ReadOnly = false;
                pi_packing_amt.ReadOnly = false;
                pi_insurance_amt.ReadOnly = false;
                pi_other_amt.ReadOnly = false;
            }
            catch (Exception ex)
            { }
            //if (piitemlist.Rows.Count <= 1)
            //{
            //    purchase_invoice_amount = Convert.ToDouble(pibasicamt.Text);
            //    if (pitaxrate.Text != "")
            //    {
            //        pitaxamt.Text = Convert.ToString(Convert.ToDouble(pibasicamt.Text) * Convert.ToDouble(pitaxrate.Text) / 100);
            //        purchase_invoice_amount += Convert.ToDouble(pitaxamt.Text);
            //    }
            //    else
            //        pitaxamt.Text = "0.00";
            //    if (tb_pi_igst_tax_amount.Text != "" && tb_pi_igst_tax_amount.Text != "0.00")
            //        purchase_invoice_amount += Convert.ToDouble(tb_pi_igst_tax_amount.Text);
            //    if (pi_freight_amt.Text != "" && pi_freight_amt.Text != "0.00")
            //        purchase_invoice_amount += Convert.ToDouble(pi_freight_amt.Text);
            //    if (pi_packing_amt.Text != "" && pi_packing_amt.Text != "0.00")
            //        purchase_invoice_amount += Convert.ToDouble(pi_packing_amt.Text);
            //    if (pi_insurance_amt.Text != "" && pi_insurance_amt.Text != "0.00")
            //        purchase_invoice_amount += Convert.ToDouble(pi_insurance_amt.Text);
            //    if (pi_other_amt.Text != "" && pi_other_amt.Text != "0.00")
            //        purchase_invoice_amount += Convert.ToDouble(pi_other_amt.Text);
            //    calculate_roundoff();
            //    if (piroundoffamt.Text != "" && piroundoffamt.Text != "0.00")
            //        purchase_invoice_amount += Convert.ToDouble(piroundoffamt.Text);
            //    purchase_invoice_amount = Math.Round(purchase_invoice_amount, 2);
            //    pigrossamt.Text = Convert.ToString(purchase_invoice_amount);
            //}
            //if (pibasicamt.Text != "0.00")
            //{
            //    pi_freight_amt.ReadOnly = false;
            //    pi_packing_amt.ReadOnly = false;
            //    pi_insurance_amt.ReadOnly = false;
            //    pi_other_amt.ReadOnly = false;
            //    if (periodofgst)
            //    {
            //        //tb_pi_igst_tax_amount.Text = "0.00";
            //        //pi_invoice_tax_amount = 0;
            //        //int totalrowcount = piitemlist.Rows.Count;
            //        //purchase_invoice_amount = 0;
            //        //for (int i = 0; i < totalrowcount; i++)
            //        //{
            //        //    if (piitemlist.Rows[i].Cells[7].Value != System.DBNull.Value && piitemlist.Rows[i].Cells[7].Value != null)
            //        //        purchase_invoice_amount = purchase_invoice_amount + Convert.ToDouble(piitemlist.Rows[i].Cells[7].Value);
            //        //    if (piitemlist.Rows[i].Cells[9].Value != System.DBNull.Value && piitemlist.Rows[i].Cells[9].Value != null)
            //        //        pi_invoice_tax_amount += (Convert.ToDouble(piitemlist.Rows[i].Cells[7].Value) * Convert.ToDouble(piitemlist.Rows[i].Cells[9].Value) / 100);
            //        //}
            //        //if (purchase_invoice_amount == 0 && pibasicamt.Text != "" && pibasicamt.Text != "0.00")
            //        purchase_invoice_amount = Convert.ToDouble(pibasicamt.Text);
            //        tb_pi_igst_tax_amount.Text = Convert.ToString(pi_invoice_tax_amount);
            //        purchase_invoice_amount += Convert.ToDouble(tb_pi_igst_tax_amount.Text);
            //        if (pi_freight_amt.Text != "")
            //            purchase_invoice_amount += Convert.ToDouble(pi_freight_amt.Text);
            //        if (pi_packing_amt.Text != "")
            //            purchase_invoice_amount += Convert.ToDouble(pi_packing_amt.Text);
            //        if (pi_insurance_amt.Text != "")
            //            purchase_invoice_amount += Convert.ToDouble(pi_insurance_amt.Text);
            //        if (pi_other_amt.Text != "")
            //            purchase_invoice_amount += Convert.ToDouble(pi_other_amt.Text);
            //        calculate_roundoff();
            //        if (piroundoffamt.Text != "" && piroundoffamt.Text != "0.00")
            //            purchase_invoice_amount += Convert.ToDouble(piroundoffamt.Text);
            //        purchase_invoice_amount = Math.Round(purchase_invoice_amount, 2);
            //        pigrossamt.Text = Convert.ToString(purchase_invoice_amount);
            //    }
            //    else
            //    {
            //        purchase_invoice_amount = Convert.ToDouble(pibasicamt.Text);
            //        if (pitaxrate.Text != "")
            //        {
            //            pitaxamt.Text = Convert.ToString(Convert.ToDouble(pibasicamt.Text) * Convert.ToDouble(pitaxrate.Text) / 100);
            //            purchase_invoice_amount += Convert.ToDouble(pitaxamt.Text);
            //        }
            //        else
            //            pitaxamt.Text = "";
            //        if (tb_pi_igst_tax_amount.Text != "" && tb_pi_igst_tax_amount.Text != "0.00")
            //            purchase_invoice_amount += Convert.ToDouble(tb_pi_igst_tax_amount.Text);
            //        if (pi_freight_amt.Text != "" && pi_freight_amt.Text != "0.00")
            //            purchase_invoice_amount += Convert.ToDouble(pi_freight_amt.Text);
            //        if (pi_packing_amt.Text != "" && pi_packing_amt.Text != "0.00")
            //            purchase_invoice_amount += Convert.ToDouble(pi_packing_amt.Text);
            //        if (pi_insurance_amt.Text != "" && pi_insurance_amt.Text != "0.00")
            //            purchase_invoice_amount += Convert.ToDouble(pi_insurance_amt.Text);
            //        if (pi_other_amt.Text != "" && pi_other_amt.Text != "0.00")
            //            purchase_invoice_amount += Convert.ToDouble(pi_other_amt.Text);
            //        calculate_roundoff();
            //        if (piroundoffamt.Text != "" && piroundoffamt.Text != "0.00")
            //            purchase_invoice_amount += Convert.ToDouble(piroundoffamt.Text);
            //        purchase_invoice_amount = Math.Round(purchase_invoice_amount, 2);
            //        pigrossamt.Text = Convert.ToString(purchase_invoice_amount);
            //    }
            //}
            //else
            //{
            //    pi_freight_amt.Text = "0.00";
            //    pi_packing_amt.Text = "0.00";
            //    pi_insurance_amt.Text = "0.00";
            //    pi_other_amt.Text = "0.00";
            //    pigrossamt.Text = "0.00";
            //    pi_freight_amt.ReadOnly = true;
            //    pi_packing_amt.ReadOnly = true;
            //    pi_insurance_amt.ReadOnly = true;
            //    pi_other_amt.ReadOnly = true;
            //}
        }

        private void sibasicamt_TextChanged(object sender, EventArgs e)
        {
            if (sibasicamt.Text != "0")
            {
                si_cash_received.Visible = true;
                lbl_si_cash_received.Visible = true;
                si_freight_amt.ReadOnly = false;
                si_packing_amt.ReadOnly = false;
                si_insurance_amt.ReadOnly = false;
                si_other_amt.ReadOnly = false;
                if (periodofgst)
                {
                    tb_si_igst_tax_amount.Text = "0.00";
                    si_invoice_tax_amount = 0;
                    int totalrowcount = siitemlist.Rows.Count;
                    sale_invoice_amount = 0;
                    for (int i = 0; i < totalrowcount; i++)
                    {
                        if (siitemlist.Rows[i].Cells[7].Value != System.DBNull.Value)
                            sale_invoice_amount = sale_invoice_amount + Convert.ToDouble(siitemlist.Rows[i].Cells[7].Value);
                        if (siitemlist.Rows[i].Cells[9].Value != System.DBNull.Value && siitemlist.Rows[i].Cells[9].Value != null && siitemlist.Rows[i].Cells[9].Value.ToString() != "" && siitemlist.Rows[i].Cells[9].Value != System.DBNull.Value && siitemlist.Rows[i].Cells[9].Value != "")
                            si_invoice_tax_amount += (Convert.ToDouble(siitemlist.Rows[i].Cells[7].Value) * Convert.ToDouble(siitemlist.Rows[i].Cells[9].Value) / 100);
                    }
                    tb_si_igst_tax_amount.Text = string.Format("{0:0.00}", Convert.ToDouble(si_invoice_tax_amount));
                    sale_invoice_amount += Convert.ToDouble(tb_si_igst_tax_amount.Text);
                    if (si_freight_amt.Text != "" && si_freight_amt.Text != "0.00")
                        sale_invoice_amount += Convert.ToDouble(si_freight_amt.Text);
                    if (si_packing_amt.Text != "" && si_packing_amt.Text != "0.00")
                        sale_invoice_amount += Convert.ToDouble(si_packing_amt.Text);
                    if (si_insurance_amt.Text != "" && si_insurance_amt.Text != "0.00")
                        sale_invoice_amount += Convert.ToDouble(si_insurance_amt.Text);
                    if (si_other_amt.Text != "" && si_other_amt.Text != "0.00")
                        sale_invoice_amount += Convert.ToDouble(si_other_amt.Text);
                    calculate_roundoff();
                    if (siroundoffamt.Text != "" && siroundoffamt.Text != "0.00")
                        sale_invoice_amount += Convert.ToDouble(siroundoffamt.Text);
                    sale_invoice_amount = Math.Round(sale_invoice_amount, 2);
                    sigrossamt.Text = string.Format("{0:0.00}", Convert.ToDouble(sale_invoice_amount));
                }
                else
                {
                    sale_invoice_amount = Convert.ToSingle(sibasicamt.Text);
                    sitaxamt.Text = Convert.ToString(Convert.ToDouble(sibasicamt.Text) * Convert.ToDouble(sitaxrate.Text) / 100);
                    sale_invoice_amount += Convert.ToDouble(sitaxamt.Text);
                    if (si_freight_amt.Text != "" && si_freight_amt.Text != "0.00")
                        sale_invoice_amount += Convert.ToDouble(si_freight_amt.Text);
                    if (si_packing_amt.Text != "" && si_packing_amt.Text != "0.00")
                        sale_invoice_amount += Convert.ToDouble(si_packing_amt.Text);
                    if (si_insurance_amt.Text != "" && si_insurance_amt.Text != "0.00")
                        sale_invoice_amount += Convert.ToDouble(si_insurance_amt.Text);
                    if (si_other_amt.Text != "" && si_other_amt.Text != "0.00")
                        sale_invoice_amount += Convert.ToDouble(si_other_amt.Text);
                    calculate_roundoff();
                    if (siroundoffamt.Text != "" && siroundoffamt.Text != "0.00")
                        sale_invoice_amount += Convert.ToDouble(siroundoffamt.Text);
                    sale_invoice_amount = Math.Round(sale_invoice_amount, 2);
                    sigrossamt.Text = Convert.ToString(sale_invoice_amount);
                }
            }
            else
            {
                tb_si_igst_tax_amount.Text = "0.00";
                si_freight_amt.Text = "0.00";
                si_packing_amt.Text = "0.00";
                si_insurance_amt.Text = "0.00";
                si_other_amt.Text = "0.00";
                siroundoffamt.Text = "0.00";
                sigrossamt.Text = "0.00";
                si_freight_amt.ReadOnly = true;
                si_packing_amt.ReadOnly = true;
                si_insurance_amt.ReadOnly = true;
                si_other_amt.ReadOnly = true;
            }
        }

        private void sidocno_TextChanged(object sender, EventArgs e)
        {
            if (sidocno.Text.Trim() == "")
                sidocno.Text = "1";
            if (ConnectionWithAccess.company_details[31] == "1")
            {
                cb_print_Tpt_copy.Visible = true;
                cb_print_chit_copy.Visible = true;
            }
            oldsaleinvoicedetails();
            sale_invoice_item_filling();
            set_invoice_date(21, sidocno.Text, Convert.ToInt32(sidbc.SelectedValue.ToString()));
            move_cursor_to_button_position("atbpreview");
        }

        private void pidocno_TextChanged(object sender, EventArgs e)
        {
            if (pidocno.Text != "")
            {
                oldpurcinvoicedetails();
                populate_screen();
                pipartycode.Enabled = false;
                picity.Enabled = false;
            }
        }

        private void blstgp_per_TextChanged(object sender, EventArgs e)
        {
            if (blstgp_per.Text != "")
            {
                try
                {
                    if (blstgp_per.Text != "-")
                    {
                        ConnectionWithAccess.gp_percent = Convert.ToDouble(blstgp_per.Text);
                        //if (cb_emerg_full_period.Checked = false && gp_percentage_change == true)
                        if (maintab.SelectedIndex == 3 && gp_percentage_change == true)
                            calculate_gross_profit_using_gp_per(cbBalShPer.Text);
                    }
                }
                catch (Exception ex)
                { }
            }
        }

        private void srdocno_TextChanged(object sender, EventArgs e)
        {
            if (ConnectionWithAccess.company_details[31] == "1")
            {
                cb_print_Tpt_copy.Visible = true;
                cb_print_chit_copy.Visible = true;
            }
            oldsalereplacementdetails();
            sale_replacement_item_filling();
            srpartybalance.Text = Convert.ToString(get_account_balance(sra_n.Text, srs_a.Text, Convert.ToString(srdatetime.Text)));
        }

        private void srpartycode_TextChanged(object sender, EventArgs e)
        {
            ConnectionWithAccess.data_entry_working = "Sale Replacement Party";
            if (!bsrPartyChangeIgnore && sr_party_help.Visible == true)
            {
                string stra_n = get_a_n_from_d_c("R", Convert.ToInt32(srdbc.SelectedValue.ToString()));
                vFilterDataTableAndFillGrid(sr_party_help, dt_Party_Master_List, "a_n = '" + stra_n + "' and [desc] like '%" + srpartycode.Text + "%' ");
                if (sr_party_help.Rows.Count == 1)
                {
                    vFilterDataTableAndFillGrid(sr_party_help, dt_Party_Master_List, "a_n = '" + stra_n + "' and [city] like '%" + srpartycode.Text + "%' ");
                    if (sr_party_help.Rows.Count == 1)
                    {
                        if (srpartycode.TextLength > 1)
                            srpartycode.Text = srpartycode.Text.Substring(0, srpartycode.Text.Length - 1);
                        srpartycode.SelectionStart = srpartycode.Text.Length;
                    }
                }
            }
            move_cursor_to_button_position("sr_party_help");
        }

        private void sideliverycode_TextChanged(object sender, EventArgs e)
        {
            ConnectionWithAccess.query = "select [desc], city, a_n,s_a,d_y from " + ConnectionWithAccess.tablename[1] + " where a_n = (select distinct a_n from " + ConnectionWithAccess.tablename[21] + " where d_c = " + Convert.ToInt32(srdbc.SelectedValue.ToString()) + " and d_n = 999999) and s_a = '" + ConnectionWithAccess.ms_a + "' and [desc] like '%" + sideliverycode.Text + "%'";
            ConnectionCommand.accountHelp(si_party_help, "replacement_party_code");
        }

        private void tbdelivery_TextChanged(object sender, EventArgs e)
        {
            lbl_master_master_account_name.Visible = true;
            if (cbParent.SelectedItem != null)
            {
                if (cbParent.SelectedItem.Equals("Unknown"))
                {
                    //ConnectionWithAccess.query = "select [desc], city, a_n, s_a ,d_y from " + ConnectionWithAccess.tablename[1] + " where a_n = '" + ConnectionWithAccess.ms_a + " , and [desc] like '%" + tbdelivery.Text + "%'";
                    //ConnectionCommand.accountHelp(master_account_help_dg, "master_account_help_dg");
                    vFilterDataTableAndFillGrid(master_account_help_dg, dt_Account_Master_List, "a_n = '" + ConnectionWithAccess.ms_a + " , and [desc] like '%" + tbdelivery.Text + "%'");
                    if (master_account_help_dg.CurrentRow != null)
                        lbl_master_master_account_name.Text = common_account_head(master_account_help_dg.CurrentRow.Cells[2].Value.ToString());
                    else
                    {
                        MessageBox.Show("Account Cannot be saved with Unknown Parent Account");
                        lbl_master_master_account_name.Text = null;
                    }
                }
                else
                {
                    //ConnectionWithAccess.query = "select [desc], city, a_n, s_a ,d_y from " + ConnectionWithAccess.tablename[1] + " where a_n = '" + tbA_N.Text + "' and s_a = '" + tbS_A.Text + "' and d_y is not null and [desc] like '%" + tbdelivery.Text + "%'";
                    //ConnectionCommand.accountHelp(master_account_help_dg, "master_account_help_dg");
                    vFilterDataTableAndFillGrid(master_account_help_dg, dt_Account_Master_List, "a_n = '" + tbA_N.Text + "' and s_a = '" + tbS_A.Text + "' and d_y is not null and [desc] like '%" + tbdelivery.Text + "%'");
                    if (master_account_help_dg.CurrentRow != null)
                        lbl_master_master_account_name.Text = common_account_head(master_account_help_dg.CurrentRow.Cells[2].Value.ToString());
                }
            }
            else
            {
                //ConnectionWithAccess.query = "select [desc], city, a_n, s_a ,d_y from " + ConnectionWithAccess.tablename[1] + " where a_n = '" + tbA_N.Text + "' and s_a = '" + tbS_A.Text + "' and [desc] like '%" + tbdelivery.Text + "%'";
                //ConnectionCommand.accountHelp(master_account_help_dg, "master_account_help_dg");
                vFilterDataTableAndFillGrid(master_account_help_dg, dt_Account_Master_List, "a_n = '" + tbA_N.Text + "' and s_a = '" + tbS_A.Text + "' and [desc] like '%" + tbdelivery.Text + "%'");
                if (master_account_help_dg.CurrentRow != null)
                    lbl_master_master_account_name.Text = common_account_head(master_account_help_dg.CurrentRow.Cells[2].Value.ToString());
                else
                {
                    MessageBox.Show("Account Cannot be saved with Unknown Parent Account");
                    lbl_master_master_account_name.Text = null;
                }
            }
        }

        private void srbasicamt_TextChanged(object sender, EventArgs e)
        {
            //if (srbasicamt.Text != "")
            //{
            //    srgrossamt.Text = Convert.ToString(Convert.ToDouble(srbasicamt.Text) + Convert.ToDouble(srtaxamt.Text));
            //}
            if (srbasicamt.Text != "0")
            {
                //sr_cash_received.Visible = true;
                //lbl_sr_cash_received.Visible = true;
                sr_freight_amt.ReadOnly = false;
                sr_packing_amt.ReadOnly = false;
                sr_insurance_amt.ReadOnly = false;
                sr_other_amt.ReadOnly = false;
                if (periodofgst)
                {
                    tb_sr_igst_tax_amount.Text = "0.00";
                    sr_invoice_tax_amount = 0;
                    int totalrowcount = sritemlist.Rows.Count;
                    sale_invoice_amount = 0;
                    for (int i = 0; i < totalrowcount; i++)
                    {
                        if (sritemlist.Rows[i].Cells[7].Value != System.DBNull.Value)
                            sale_invoice_amount = sale_invoice_amount + Convert.ToDouble(sritemlist.Rows[i].Cells[7].Value);
                        //if (sritemlist.Rows[i].Cells[9].Value != System.DBNull.Value && sritemlist.Rows[i].Cells[9].Value != "" && sritemlist.Rows[i].Cells[9].Value != System.DBNull.Value && sritemlist.Rows[i].Cells[9].Value != "")
                        //    sr_invoice_tax_amount += (Convert.ToDouble(sritemlist.Rows[i].Cells[7].Value) * Convert.ToDouble(sritemlist.Rows[i].Cells[9].Value) / 100);
                    }
                    tb_sr_igst_tax_amount.Text = string.Format("{0:0.00}", Convert.ToDouble(sr_invoice_tax_amount));
                    sale_invoice_amount += Convert.ToDouble(tb_sr_igst_tax_amount.Text);
                    if (sr_freight_amt.Text != "" && sr_freight_amt.Text != "0.00")
                        sale_invoice_amount += Convert.ToDouble(sr_freight_amt.Text);
                    if (sr_packing_amt.Text != "" && sr_packing_amt.Text != "0.00")
                        sale_invoice_amount += Convert.ToDouble(sr_packing_amt.Text);
                    if (sr_insurance_amt.Text != "" && sr_insurance_amt.Text != "0.00")
                        sale_invoice_amount += Convert.ToDouble(sr_insurance_amt.Text);
                    if (sr_other_amt.Text != "" && sr_other_amt.Text != "0.00")
                        sale_invoice_amount += Convert.ToDouble(sr_other_amt.Text);
                    calculate_roundoff();
                    if (srroundoffamt.Text != "" && srroundoffamt.Text != "0.00")
                        sale_invoice_amount += Convert.ToDouble(srroundoffamt.Text);
                    sale_invoice_amount = Math.Round(sale_invoice_amount, 2);
                    srgrossamt.Text = string.Format("{0:0.00}", Convert.ToDouble(sale_invoice_amount));
                }
                else
                {
                    srtaxamt.Text = Convert.ToString(Convert.ToDouble(srbasicamt.Text) * Convert.ToDouble(srtaxrate.Text) / 100);
                    sale_invoice_amount += Convert.ToDouble(srtaxamt.Text);
                    if (sr_freight_amt.Text != "" && sr_freight_amt.Text != "0.00")
                        sale_invoice_amount += Convert.ToDouble(sr_freight_amt.Text);
                    if (sr_packing_amt.Text != "" && sr_packing_amt.Text != "0.00")
                        sale_invoice_amount += Convert.ToDouble(sr_packing_amt.Text);
                    if (sr_insurance_amt.Text != "" && sr_insurance_amt.Text != "0.00")
                        sale_invoice_amount += Convert.ToDouble(sr_insurance_amt.Text);
                    if (sr_other_amt.Text != "" && sr_other_amt.Text != "0.00")
                        sale_invoice_amount += Convert.ToDouble(sr_other_amt.Text);
                    calculate_roundoff();
                    if (srroundoffamt.Text != "" && srroundoffamt.Text != "0.00")
                        sale_invoice_amount += Convert.ToDouble(srroundoffamt.Text);
                    sale_invoice_amount = Math.Round(sale_invoice_amount, 2);
                    srgrossamt.Text = Convert.ToString(sale_invoice_amount);
                }
            }
            else
            {
                tb_sr_igst_tax_amount.Text = "0.00";
                sr_freight_amt.Text = "0.00";
                sr_packing_amt.Text = "0.00";
                sr_insurance_amt.Text = "0.00";
                sr_other_amt.Text = "0.00";
                srroundoffamt.Text = "0.00";
                srgrossamt.Text = "0.00";
                sr_freight_amt.ReadOnly = true;
                sr_packing_amt.ReadOnly = true;
                sr_insurance_amt.ReadOnly = true;
                sr_other_amt.ReadOnly = true;
            }

        }

        private void tb_dataentry_stock_item_name_TextChanged(object sender, EventArgs e)
        {
            ConnectionWithAccess.query = "select [type], item_code, [title] from " + ConnectionWithAccess.tablename[05] + " where title like '" + tb_dataentry_stock_item_name.Text + "%'";
            //ConnectionCommand.accountHelp(dgv_dataentry_additional_item, "dgv_dataentry_additional_item");
            //if (dgv_dataentry_additional_item.CurrentRow != null)
            //{
            //    tb_dataentry_stock_item_type.Text = Convert.ToString(dgv_dataentry_additional_item.CurrentRow.Cells[0].Value);
            //    tb_dataentry_stock_item_code.Text = Convert.ToString(dgv_dataentry_additional_item.CurrentRow.Cells[1].Value);
            //}
            //else
            //{
            //    tb_dataentry_stock_item_name.Text = null;
            //    tb_dataentry_stock_item_code.Text = null;
            //}
            tb_dataentry_stock_item_date_ValueChanged(sender, e);
        }

        private void sopartycode_TextChanged(object sender, EventArgs e)
        {
            ConnectionWithAccess.data_entry_working = "Sale Order";
            if (!bsoPartyChangeIgnore && so_party_help.Visible == true)
            {
                string stra_n = get_a_n_from_d_c("S", Convert.ToInt32(sodbc.SelectedValue.ToString()));
                vFilterDataTableAndFillGrid(so_party_help, dt_Party_Master_List, "a_n = '" + stra_n + "' and [desc] like '%" + sopartycode.Text + "%' ");
                if (so_party_help.Rows.Count == 1)
                {
                    stra_n = get_a_n_from_d_c("S", Convert.ToInt32(sodbc.SelectedValue.ToString()));
                    vFilterDataTableAndFillGrid(so_party_help, dt_Party_Master_List, "a_n = '" + stra_n + "' and [desc] like '%" + sopartycode.Text + "%' ");
                    if (so_party_help.Rows.Count == 1)
                    {
                        sopartycode.Text = sopartycode.Text.Substring(0, sopartycode.Text.Length - 1);
                        sopartycode.SelectionStart = sopartycode.Text.Length;
                    }
                }
            }
        }

        private void sodeliverycode_TextChanged(object sender, EventArgs e)
        {
            ConnectionWithAccess.query = "select [desc], city, a_n,s_a,d_y from " + ConnectionWithAccess.tablename[1] + " where a_n = (select distinct a_n from " + ConnectionWithAccess.tablename[21] + " where d_c = " + Convert.ToInt32(sodbc.SelectedValue.ToString()) + " and d_n = 999999) and s_a = '" + sos_a.Text + "' and [desc] like '%" + sodeliverycode.Text + "%'";
            ConnectionCommand.accountHelp(so_party_help, "so_party_help");
        }

        private void sobasicamt_TextChanged(object sender, EventArgs e)
        {
            if (sobasicamt.Text != "")
            {
                sotaxamt.Text = Convert.ToString(Convert.ToDouble(sobasicamt.Text) * Convert.ToDouble(sotaxrate.Text) / 100);
                //soroundoffamt.Text = 
                sogrossamt.Text = Convert.ToString(Convert.ToDouble(sobasicamt.Text) + Convert.ToDouble(sotaxamt.Text));
            }
        }

        private void tbStd_TextChanged(object sender, EventArgs e)
        {
            if (bstdcode && tbStd.Text != "")
            {
                if (dtStdCodes.Rows.Count == 0)
                    load_std_code_in_datatable();
                dgvStdCodeHelp.DataSource = null;

                DataTable dtFilter = dtStdCodes.Clone();
                dtStdCodes.Select("STD_CODE like '" + tbStd.Text.Trim() + "%' ").CopyToDataTable(dtFilter, LoadOption.OverwriteChanges);

                dgvStdCodeHelp.DataSource = dtFilter;
                dgvStdCodeHelp.Columns[0].Visible = false;
                dgvStdCodeHelp.Columns[1].Width = 120;
                dgvStdCodeHelp.Columns[2].Width = 120;
                dgvStdCodeHelp.Columns[3].Width = 120;
                //dgvStdCodeHelp.Visible = true;
            }
        }

        private void tbCity_TextChanged(object sender, EventArgs e)
        {
            //if (master_account_help_dg.Visible == true)
            //    master_account_help_dg.Visible = false;
            //if (tbCity.Text != "" && tbstate.Text != "")
            //{
            //    dgvStdCodeHelp.DataSource = null;
            //    DataTable dtFilter = dtStdCodes.Clone();
            //    if (dtFilter.Rows.Count > 1)
            //    {
            //        dtStdCodes.Select("STATION like '%" + tbCity.Text.Trim() + "%' ").CopyToDataTable(dtFilter, LoadOption.OverwriteChanges);
            //        dgvStdCodeHelp.DataSource = dtFilter;
            //        if (dgvStdCodeHelp.Rows.Count > 1)
            //        {
            //            if (dgvStdCodeHelp.Rows[0].Cells[3].Value.ToString() != tbstate.Text)
            //            {
            //                dgvStdCodeHelp.Visible = true;
            //                tbstate.BackColor = Color.Red;
            //            }
            //        }
            //        if (bstdcode && tbCity.Text != "" && dgvStdCodeHelp.Visible == true)
            //        {
            //            dgvStdCodeHelp.Columns[0].Visible = false;
            //            dgvStdCodeHelp.Columns[1].Width = 120;
            //            dgvStdCodeHelp.Columns[2].Width = 120;
            //            dgvStdCodeHelp.Columns[3].Width = 120;
            //        }
            //    }
            //}
        }

        private void DispEmail_TextChanged(object sender, EventArgs e)
        {
            if (DispEmail.Text.Contains("@") && ConnectionWithAccess.mUserFeatures.Substring(37, 1) == "Y")
            {
                DispEmail.Visible = true;
                //btnsendemail.Visible = true;
            }
            else
            {
                DispEmail.Visible = false;
                //btnsendemail.Visible = false;
            }
        }

        private void tbItemCode_TextChanged(object sender, EventArgs e)
        {

        }

        private void tbA_N_TextChanged(object sender, EventArgs e)
        {
            temp_a_n = tbA_N.Text;
            temp_s_a = tbS_A.Text;
            get_account_details_from_01(tbA_N.Text, "@@@");
            lbl_account_name.Text = account_detail_from_01[4];
        }

        private void prpartycode_TextChanged(object sender, EventArgs e)
        {
            ConnectionWithAccess.data_entry_working = "Purchase Replacement";
            if (!bsrPartyChangeIgnore)
            {
                ConnectionWithAccess.query = "select [desc], city, a_n,s_a,(select [desc] from " + ConnectionWithAccess.tablename[1] + " where a_n = (select distinct a_n from " + ConnectionWithAccess.tablename[22] + " where d_c = " + Convert.ToInt32(prdbc.SelectedValue.ToString()) + " and d_n = 999999) and s_a ='@@@')  from " + ConnectionWithAccess.tablename[1] + " where a_n = (select distinct a_n from " + ConnectionWithAccess.tablename[22] + " where d_c = " + Convert.ToInt32(prdbc.SelectedValue.ToString()) + " and d_n = 999999) and s_a <> '@@@' and (d_y is null or d_y ='@@@') and [desc] like '%" + prpartycode.Text + "%' order by [desc], city";
                ConnectionCommand.accountHelp_datatable(pr_acc_help_dgv, "pr_acc_help_dgv");
                if (pr_acc_help_dgv.Rows.Count == 1)
                {
                    ConnectionWithAccess.query = "select [desc], city, a_n,s_a,(select [desc] from " + ConnectionWithAccess.tablename[1] + " where a_n = (select distinct a_n from " + ConnectionWithAccess.tablename[22] + " where d_c = " + Convert.ToInt32(prdbc.SelectedValue.ToString()) + " and d_n = 999999) and s_a ='@@@')  from " + ConnectionWithAccess.tablename[1] + " where a_n = (select distinct a_n from " + ConnectionWithAccess.tablename[22] + " where d_c = " + Convert.ToInt32(prdbc.SelectedValue.ToString()) + " and d_n = 999999) and s_a <> '@@@' and (d_y is null or d_y ='@@@') and [city] like '%" + prpartycode.Text + "%' order by [desc], city";
                    ConnectionCommand.accountHelp_datatable(pr_acc_help_dgv, "pr_acc_help_dgv");
                }
            }
        }

        private void tb_si_mobilenumber_TextChanged(object sender, EventArgs e)
        {
            if (maintab.SelectedIndex == 1)
            {
                if (subtabDataEntry.SelectedIndex == 0)
                {
                    if (tb_si_mobilenumber.Text.Length == 10 && sale_invoice_saved == true && Convert.ToDouble(sigrossamt.Text) > 0)
                    {
                        tb_si_mobilenumber.Visible = true;
                        pb_si_sendsms.Visible = true;
                    }
                    else
                    {
                        tb_si_mobilenumber.Visible = false;
                        pb_si_sendsms.Visible = false;
                    }
                }
                else if (subtabDataEntry.SelectedIndex == 1)
                {
                    if (tb_pi_mobilenumber.Text.Length == 10 && Convert.ToDouble(pigrossamt.Text) > 0)
                    {
                        tb_pi_mobilenumber.Visible = true;
                        pb_pi_sendsms.Visible = true;
                    }
                    else
                    {
                        tb_pi_mobilenumber.Visible = false;
                        pb_pi_sendsms.Visible = false;
                    }
                }
                else if (subtabDataEntry.SelectedIndex == 2)
                {
                    if (tb_br_mobilenumber.Text.Length == 10 && Convert.ToDouble(bramt.Text) > 0)
                    {
                        tb_br_mobilenumber.Visible = true;
                        pb_br_sendsms.Visible = true;
                    }
                    else
                    {
                        tb_br_mobilenumber.Visible = false;
                        pb_br_sendsms.Visible = false;
                    }
                    if (tb_bp_mobilenumber.Text.Length == 10 && Convert.ToDouble(bpamt.Text) > 0)
                    {
                        tb_bp_mobilenumber.Visible = true;
                        pb_bp_sendsms.Visible = true;
                    }
                    else
                    {
                        tb_bp_mobilenumber.Visible = false;
                        pb_bp_sendsms.Visible = false;
                    }
                    if (tb_bd_mobilenumber.Text.Length == 10 && Convert.ToDouble(bdamt.Text) > 0)
                    {
                        tb_bd_mobilenumber.Visible = true;
                        pb_bd_sendsms.Visible = true;
                    }
                    else
                    {
                        tb_bd_mobilenumber.Visible = false;
                        pb_bd_sendsms.Visible = false;
                    }
                    if (tb_bw_mobilenumber.Text.Length == 10 && Convert.ToDouble(bwamt.Text) > 0)
                    {
                        tb_bw_mobilenumber.Visible = true;
                        pb_bw_sendsms.Visible = true;
                    }
                    else
                    {
                        tb_bw_mobilenumber.Visible = false;
                        pb_bw_sendsms.Visible = false;
                    }
                }
                else if (subtabDataEntry.SelectedIndex == 3)
                {
                    if (tb_cr_mobilenumber.Text.Length == 10 && Convert.ToDouble(cramt.Text) > 0)
                    {
                        tb_cr_mobilenumber.Visible = true;
                        pb_cr_sendsms.Visible = true;
                    }
                    else
                    {
                        tb_cr_mobilenumber.Visible = false;
                        pb_cr_sendsms.Visible = false;
                    }
                    if (tb_cp_mobilenumber.Text.Length == 10 && Convert.ToDouble(cpamt.Text) > 0)
                    {
                        tb_cp_mobilenumber.Visible = true;
                        pb_cp_sendsms.Visible = true;
                    }
                    else
                    {
                        tb_cp_mobilenumber.Visible = false;
                        pb_cp_sendsms.Visible = false;
                    }
                }
            }
        }

        private void crdocno_TextChanged(object sender, EventArgs e)
        {
            if (crdocno.Text != "")
                oldcashreceiptentry();
        }

        private void brdocno_TextChanged(object sender, EventArgs e)
        {
            if (brdocno.Text != "")
                oldbankreceiptentry();
        }

        private void bpdocno_TextChanged(object sender, EventArgs e)
        {
            if (bpdocno.Text != "")
            {
                ConnectionWithAccess.query = "select f23.D_D, f23.D_N, f1.[desc] as [Desc], f1.city as [city], f23.bamt, f23.ck_no,f23.ck_dt,f23.bank,f23.pass_date,f23.mess,f23.a_n,f23.s_a, f23.b_t, f23.r_p,f23.IGST_PER,f23.IGST_AMT,f23.BASIC_AMT from " + ConnectionWithAccess.tablename[23] + " f23 inner join " + ConnectionWithAccess.tablename[1] + " f1 on f1.a_n = f23.a_n and f1.s_a = f23.s_a  where f23.prd = '" + ConnectionWithAccess.mprd + "' and d_c = " + bpdbc.SelectedValue.ToString() + " and F23.d_d = @D_D_Date and f23.r_p = '4' and f23.d_n = " + bpdocno.Text;
                search_on_particular_date_in_select_query("@d_d_date", bpdatetime.Value);
                DataTable dtData1 = ConnectionCommand.fGetDataTable();
                if (dtData1 != null && dtData1.Rows.Count > 0)
                {
                    if (dtData1.Rows[0][0] != null)
                    {
                        bppartycode.Text = dtData1.Rows[0][2].ToString();
                        bppartyname.Text = dtData1.Rows[0][2].ToString();
                        bppartycity.Text = dtData1.Rows[0][3].ToString();
                        bpamt.Text = Convert.ToString(Convert.ToDouble(dtData1.Rows[0]["BAMT"].ToString()) * -1);
                        bpchkno.Text = dtData1.Rows[0][5].ToString();
                        //bpchkdate.MinDate = Convert.ToDateTime(ConnectionWithAccess.msdate);
                        //bpchkdate.MaxDate = Convert.ToDateTime(ConnectionWithAccess.medate);
                        if (dtData1.Rows[0][6].ToString() != "")
                            bpchkdate.Value = Convert.ToDateTime(dtData1.Rows[0][6].ToString());
                        if (dtData1.Rows[0][8].ToString() != "")
                            bppassdate.Value = Convert.ToDateTime(dtData1.Rows[0][8].ToString());
                        bpcomm.Text = dtData1.Rows[0][9].ToString();
                        bpa_n.Text = dtData1.Rows[0][10].ToString();
                        bps_a.Text = dtData1.Rows[0][11].ToString();
                        bp_igst_per.Text = dtData1.Rows[0][14].ToString();
                        bp_igstamt.Text = dtData1.Rows[0][15].ToString();
                        bp_basicamt.Text = dtData1.Rows[0][16].ToString();
                        get_account_details_from_01(bpa_n.Text, bps_a.Text);
                        get_account_details_from_04(bpa_n.Text, bps_a.Text);
                        bppartycontact.Text = account_detail_from_04[17] + " ," + account_detail_from_04[18] + " ," + account_detail_from_04[19] + " ," + account_detail_from_04[20];
                        bppartyaddress.Text = account_detail_from_04[4] + " ," + account_detail_from_04[5] + " ," + account_detail_from_04[6] + " ," + account_detail_from_04[7];
                        bp_master_acc_name.Text = common_account_head(bpa_n.Text);
                        bppartyoverallbalance.Text = Convert.ToString(get_account_balance(bpa_n.Text, bps_a.Text, Convert.ToString(bpdatetime.Text)));
                        //b_t = 2 for balance, b_t = 3 for passed, b_t = 4 for failed.
                        if (dtData1.Rows[0][12].ToString() == "2")
                            bpchkstatus.SelectedIndex = 0;
                        else if (dtData1.Rows[0][12].ToString() == "3")
                        {
                            bpchkstatus.SelectedIndex = 1;
                            old_bank_payment_amount = Convert.ToDouble(bpamt.Text);
                        }
                        else if (dtData1.Rows[0][12].ToString() == "4")
                            bpchkstatus.SelectedIndex = 2;
                        tb_bp_mobilenumber.Text = account_detail_from_04[17];
                        bp_basicamt.ReadOnly = false;
                        bp_igst_per.ReadOnly = false;
                        bpamt.ReadOnly = false;
                        bp_dgv_gst_tax_brief.Visible = true;
                        btn_cheque_print.Visible = true;
                        temp_double = 0;
                        bp_dgv_gst_tax_brief.DataSource = null;
                        ConnectionWithAccess.query = "select f8.bamt, f8.igst_per, f8.igst_amt, f8.gamt from " + ConnectionWithAccess.tablename[8] + " f8 where f8.book = 'b' and f8.prd = '" + ConnectionWithAccess.mprd + "' and f8.d_c = " + bpdbc.SelectedValue.ToString() + " and f8.r_p = '4' and F8.d_n = " + bpdocno.Text + " and F8.d_d = @D_D_Date";
                        search_on_particular_date_in_select_query("@d_d_date", bpdatetime.Value);
                        ConnectionCommand.accountHelp_datatable_Seperate(bp_dgv_gst_tax_brief, "bp_dgv_gst_tax_brief");
                        if (bp_dgv_gst_tax_brief.Rows.Count > 1)
                        {
                            for (row_counter = 0; row_counter < bp_dgv_gst_tax_brief.Rows.Count; row_counter++)
                            {
                                temp_double += Convert.ToSingle(bp_dgv_gst_tax_brief.Rows[row_counter].Cells[2].Value);
                            }
                            //bpamt.Text = temp_double.ToString();
                        }
                    }
                    bpamt.Focus();
                    move_cursor_to_button_position("atbnew");
                }
            }
        }

        private void cpdocno_TextChanged(object sender, EventArgs e)
        {
            if (cpdbc.SelectedValue.ToString() != "" && cpdocno.Text != "")
            {
                ConnectionWithAccess.query = "select f24.D_D, f24.D_N, f1.[desc] as [Desc], f1.city as [city], f24.camt, f24.mess,f24.a_n,f24.s_a,f24.IGST_PER,f24.IGST_AMT,f24.BASIC_AMT from " + ConnectionWithAccess.tablename[24] + " f24 inner join " + ConnectionWithAccess.tablename[1] + " f1 on f1.a_n = f24.a_n and f1.s_a = f24.s_a  where f24.prd = '" + ConnectionWithAccess.mprd + "' and d_c = " + cpdbc.SelectedValue.ToString() + " and F24.d_d = @D_D_Date and f24.r_p = '4' and f24.d_n = " + cpdocno.Text;
                search_on_particular_date_in_select_query("@d_d_date", cpdatetime.Value);
                DataTable dtData1 = ConnectionCommand.fGetDataTable();
                if (dtData1 != null && dtData1.Rows.Count > 0)
                {
                    if (dtData1.Rows[0][0] != null)
                    {
                        cppartycode.Text = dtData1.Rows[0][2].ToString();
                        cppartyname.Text = dtData1.Rows[0][2].ToString();
                        cppartycity.Text = dtData1.Rows[0][3].ToString();
                        cpamt.Text = Convert.ToString(Convert.ToDouble(dtData1.Rows[0][4].ToString()) * -1);
                        old_cash_payment_amount = Convert.ToDouble(dtData1.Rows[0][4].ToString()) * -1;
                        cpcomm.Text = dtData1.Rows[0][5].ToString();
                        cpa_n.Text = dtData1.Rows[0][6].ToString();
                        cps_a.Text = dtData1.Rows[0][7].ToString();
                        cp_igst_per.Text = dtData1.Rows[0][8].ToString();
                        cp_igstamt.Text = dtData1.Rows[0][9].ToString();
                        cp_basicamt.Text = dtData1.Rows[0][10].ToString();
                        get_account_details_from_01(cpa_n.Text, cps_a.Text);
                        get_account_details_from_04(cpa_n.Text, cps_a.Text);
                        cppartycontact.Text = account_detail_from_04[17] + " ," + account_detail_from_04[18] + " ," + account_detail_from_04[19] + " ," + account_detail_from_04[20];
                        cppartyaddress.Text = account_detail_from_04[4] + " ," + account_detail_from_04[5] + " ," + account_detail_from_04[6] + " ," + account_detail_from_04[7];
                        cp_master_acc_name.Text = common_account_head(cpa_n.Text);
                        cppartyoverallbalance.Text = Convert.ToString(get_account_balance(cpa_n.Text, cps_a.Text, Convert.ToString(cpdatetime.Text)));

                        cp_dgv_gst_tax_brief.DataSource = null;
                        cp_dgv_gst_tax_brief.Visible = true;
                        ConnectionWithAccess.query = "select f8.bamt, f8.igst_per, f8.igst_amt, f8.gamt from " + ConnectionWithAccess.tablename[8] + " f8 where f8.book = 'C' and f8.prd = '" + ConnectionWithAccess.mprd + "' and f8.d_c = " + cpdbc.SelectedValue.ToString() + " and f8.r_p = '4' and F8.d_n = " + cpdocno.Text;
                        ConnectionCommand.accountHelp_datatable_Seperate(cp_dgv_gst_tax_brief, "cp_dgv_gst_tax_brief");
                        if (cp_dgv_gst_tax_brief.Rows.Count > 1)
                        {
                            for (row_counter = 0; row_counter < cp_dgv_gst_tax_brief.Rows.Count; row_counter++)
                            {
                                temp_double += Convert.ToSingle(cp_dgv_gst_tax_brief.Rows[row_counter].Cells[2].Value);
                            }
                            //cpamt.Text = temp_double.ToString();
                        }



                        //b_t = 2 for balance, b_t = 3 for passed, b_t = 4 for failed.
                        tb_cp_mobilenumber.Text = account_detail_from_04[17];
                        cp_basicamt.ReadOnly = false;
                        cp_igst_per.ReadOnly = false;
                        cpamt.ReadOnly = false;



                        cpamt.Focus();
                        move_cursor_to_button_position("atbnew");
                    }
                }
                else
                {
                    cppartycode.Text = null;
                    cppartycity.Text = null;
                }
            }
            else
            {
                cppartycode.Text = null;
                cppartycity.Text = null;
            }
        }

        private void jjdocno_TextChanged(object sender, EventArgs e)
        {
            if (jjdocno.Text != "")
            {
                ConnectionWithAccess.query = "select a_n,s_a, na_n, ns_a, d_d, d_n, jamt, mess from " + ConnectionWithAccess.tablename[25] + " f25 where d_n " + (jjdocno.Text.Trim() == string.Empty ? "is null" : "= " + jjdocno.Text.Trim()) + " and prd = '" + ConnectionWithAccess.mprd + "'";
                //ConnectionWithAccess.query = "select a_n,s_a, na_n, ns_a, d_d, d_n, jamt, mess from " + ConnectionWithAccess.tablename[25] + " f25 where d_n " + (jjdocno.Text.Trim() == string.Empty ? "is null" : "= " + jjdocno.Text.Trim()) + " and prd = '" + ConnectionWithAccess.mprd + "' and d_c = " + Convert.ToInt32(jjdbc.Text);
                DataTable dtData1 = ConnectionCommand.fGetDataTable();
                if (dtData1 != null && dtData1.Rows.Count > 0)
                {
                    if (dtData1.Rows[0][0] != null)
                    {
                        ja_n.Text = dtData1.Rows[0][0].ToString();
                        js_a.Text = dtData1.Rows[0][1].ToString();
                        jna_n.Text = dtData1.Rows[0][2].ToString();
                        jns_a.Text = dtData1.Rows[0][3].ToString();
                        jjdatetime.Value = Convert.ToDateTime(dtData1.Rows[0][4].ToString());
                        jjamt.Text = dtData1.Rows[0][6].ToString();
                        jjcomm.Text = dtData1.Rows[0][7].ToString();
                        old_journal_amount = Convert.ToDouble(dtData1.Rows[0][6].ToString());
                        temp_double = 0;
                        jj_dgv_gst_tax_brief.DataSource = null;
                        ConnectionWithAccess.query = "select f8.bamt, f8.igst_per, f8.igst_amt, f8.gamt from " + ConnectionWithAccess.tablename[8] + " f8 where f8.book = 'j' and f8.prd = '" + ConnectionWithAccess.mprd + "' and f8.d_c = " + jjdbc.Text + " and f8.r_p = '4' and F8.d_n = " + jjdocno.Text;
                        ConnectionCommand.accountHelp_datatable_Seperate(jj_dgv_gst_tax_brief, "jj_dgv_gst_tax_brief");
                        if (jj_dgv_gst_tax_brief.Rows.Count > 1)
                        {
                            for (row_counter = 0; row_counter < jj_dgv_gst_tax_brief.Rows.Count; row_counter++)
                            {
                                temp_double += Convert.ToSingle(jj_dgv_gst_tax_brief.Rows[row_counter].Cells[2].Value);
                            }
                            //bpamt.Text = temp_double.ToString();
                        }
                        populate_screen();
                    }
                }
                else
                {
                    ja_n.Clear();
                    js_a.Clear();
                    jna_n.Clear();
                    jns_a.Clear();
                    old_journal_amount = 0;
                    jjcomm.Text = null;
                    jjamt.Text = "0.00";
                    jjbamt.Text = "0.00";
                    jjigst_per.Text = "0.00";
                    jjigst_amt.Text = "0.00";
                    jjpartycode1.Text = null;
                    jjpartycode2.Text = null;
                    lbl_jour_payer_acc_head.Visible = false;
                }
            }
        }

        private void blstclosingstock_TextChanged(object sender, EventArgs e)
        {
            if (blstclosingstock.Text != "" && blstclosingstock.Text != "-")
            {
                check_data_type(blstclosingstock.Text);
                if (data_type == "Numeric")
                {
                    if (Convert.ToDouble(blstclosingstock.Text) < 0)
                    {
                        blstclosingstock.BackColor = Color.Red;
                    }
                    else
                        blstclosingstock.BackColor = Color.Green;
                }
                ConnectionWithAccess.closing_stock = Convert.ToDouble(blstclosingstock.Text);
            }
        }

        private void blstgp_TextChanged(object sender, EventArgs e)
        {
            if (blstgp.Text != "" && blstgp.Text != "-")
            {
                check_data_type(blstgp.Text);
                if (data_type == "Numeric")
                {
                    if (Convert.ToDouble(blstgp.Text) < 0)
                    {
                        blstgp.BackColor = Color.Red;
                    }
                    else
                        blstgp.BackColor = Color.Green;
                }
            }
        }

        private void txtBankAccountName_TextChanged(object sender, EventArgs e)
        {
            ConnectionWithAccess.data_entry_working = "Bank Payment";
            //ConnectionWithAccess.query = "select [desc], city, a_n, s_a from " + ConnectionWithAccess.tablename[1] + " where (d_y is null or d_y ='') and [desc] like '%" + bppartycode.Text + "%'";
            ConnectionWithAccess.query = "select f1.[desc], f1.city, f1.a_n, f1.s_a, f2.[desc] as [Master Account], f1.d_y  from " + ConnectionWithAccess.tablename[1] + " f1 left outer join " + ConnectionWithAccess.tablename[1] + " f2 on f2.a_n = f1.a_n where f2.s_a = '@@@' and f1.[desc] like '%" + txtBankAccountName.Text + "%'";
            ConnectionCommand.accountHelp_datatable(dgvBankExcelAccName, "bp_datagridview");
            if (dgvBankExcelAccName.Rows.Count == 1)
            {
                ConnectionWithAccess.query = "select f1.[desc], f1.city, f1.a_n, f1.s_a  , f2.[desc] as [Master Account] ,f1.d_y from " + ConnectionWithAccess.tablename[1] + " f1 left outer join " + ConnectionWithAccess.tablename[1] + " f2 on f2.a_n = f1.a_n where f2.s_a = '@@@' and f1.[city] like '%" + txtBankAccountName.Text + "%'";
                ConnectionCommand.accountHelp_datatable(dgvBankExcelAccName, "bp_datagridview");
            }
            else
                move_cursor_to_button_position("dgvBankExcelAccName");
            if (dgvBankExcelAccName.CurrentRow != null)
                bp_master_acc_name.Text = common_account_head(dgvBankExcelAccName.CurrentRow.Cells[2].Value.ToString());
        }


        private void sodocno_TextChanged(object sender, EventArgs e)
        {
            oldsaleinvoicedetails();
            sale_invoice_item_filling();
            set_invoice_date(21, sidocno.Text, Convert.ToInt32(sidbc.SelectedValue.ToString()));
        }

        private void simple_docno_TextChanged(object sender, EventArgs e)
        {
            if (ConnectionWithAccess.company_details[31] == "1")
            {
                cb_print_Tpt_copy.Visible = true;
                cb_print_chit_copy.Visible = true;
            }
            oldsaleinvoicedetails();
            sale_invoice_item_filling();
            set_invoice_date(21, simple_docno.Text, Convert.ToInt32(sidbc.SelectedValue.ToString()));
        }

        private void cb_pack_igst_per_TextChanged(object sender, EventArgs e)
        {
            calculatepurcItemTotal();
        }

        #endregion

        private void sidocno_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                ConnectionWithAccess.md_n = sidocno.Text.Trim();
                if (!new_sale_invoice)
                {
                    oldsaleinvoicedetails();
                    sale_invoice_item_filling();
                    sipartycode.ReadOnly = true;
                }
            }
        }

        private void set_invoice_date(int table_number, string docno, int md_c)
        {
            if (docno != "")
            {
                if (maintab.SelectedIndex == 1)
                {
                    DataTable dtDateData = null;
                    if (subtabsale.SelectedIndex == 0)
                    {
                        if (sidbc.Text == "JOB WORK")
                        {
                            sidatetime.MinDate = Convert.ToDateTime(ConnectionWithAccess.msdate);
                            sidatetime.MaxDate = Convert.ToDateTime(ConnectionWithAccess.medate);
                        }
                        else
                        {
                            sidatetime.MinDate = Convert.ToDateTime(ConnectionWithAccess.com_start_date);
                            sidatetime.MaxDate = Convert.ToDateTime(ConnectionWithAccess.medate);
                            if (docno == "1")
                            {
                                ConnectionWithAccess.query = "select min(d_d) from " + ConnectionWithAccess.tablename[table_number] + " f21 where d_n " + (docno.Trim() == string.Empty ? "is null" : " > " + docno.Trim()) + " and prd = '" + ConnectionWithAccess.mprd + "' and d_c = " + md_c + " and d_n <> 999999";
                                dtDateData = ConnectionCommand.fGetDataTable();

                                if (dtDateData != null && dtDateData.Rows.Count > 0)
                                {
                                    if (dtDateData.Rows[0][0] != null && !string.IsNullOrEmpty(dtDateData.Rows[0][0].ToString()))
                                    {
                                        temp_datetime = Convert.ToDateTime(dtDateData.Rows[0][0].ToString());
                                        if (temp_datetime >= sidatetime.MinDate)
                                            sidatetime.MaxDate = temp_datetime;
                                    }
                                }
                            }
                            else
                            {
                                ConnectionWithAccess.query = "select max(d_d) from " + ConnectionWithAccess.tablename[table_number] + " f21 where d_n " + (docno.Trim() == string.Empty ? "is not null" : "< " + docno.Trim()) + " and prd = '" + ConnectionWithAccess.mprd + "' and d_c = " + md_c;
                                dtDateData = ConnectionCommand.fGetDataTable();
                                if (dtDateData != null && dtDateData.Rows.Count > 0)
                                {
                                    if (dtDateData.Rows[0][0] != null && !string.IsNullOrEmpty(dtDateData.Rows[0][0].ToString()))
                                    {
                                        sidatetime.MaxDate = DateTime.Today;
                                        sidatetime.MinDate = Convert.ToDateTime(dtDateData.Rows[0][0]);
                                    }
                                }
                                ConnectionWithAccess.query = "select max(d_n) from " + ConnectionWithAccess.tablename[table_number] + " where prd = '" + ConnectionWithAccess.mprd + "' and d_c = " + md_c + " and d_n <> 999999";
                                DataTable dtDateData1 = ConnectionCommand.fGetDataTable();
                                if (dtDateData1 != null && dtDateData1.Rows.Count > 0)
                                {
                                    if (dtDateData1.Rows[0][0] != null && !string.IsNullOrEmpty(dtDateData1.Rows[0][0].ToString()))
                                        temp_int = Convert.ToInt32(dtDateData1.Rows[0][0].ToString());
                                }
                                if (Convert.ToInt32(docno) >= temp_int)
                                {
                                    if (Convert.ToDateTime(ConnectionWithAccess.medate) < DateTime.Now)
                                    {
                                        //sidatetime.MinDate = Convert.ToDateTime(ConnectionWithAccess.msdate);
                                        sidatetime.MaxDate = Convert.ToDateTime(ConnectionWithAccess.medate);
                                        //if (sidatetime.MaxDate >= DateTime.Now)
                                        //    sidatetime.Value = DateTime.Today;
                                        //else
                                        //    sidatetime.Value = Convert.ToDateTime(ConnectionWithAccess.medate);
                                    }
                                    else
                                        sidatetime.MaxDate = DateTime.Now;

                                }
                                else
                                {
                                    ConnectionWithAccess.query = "select min(d_n) from " + ConnectionWithAccess.tablename[table_number] + " where d_n " + (docno.Trim() == string.Empty ? "is not null" : "> " + docno.Trim()) + " and prd = '" + ConnectionWithAccess.mprd + "' and d_c = " + md_c + " and d_n <> 999999";
                                    DataTable dtDateData2 = ConnectionCommand.fGetDataTable();
                                    if (dtDateData2 != null && dtDateData2.Rows.Count > 0)
                                    {
                                        if (dtDateData2.Rows[0][0] != null && !string.IsNullOrEmpty(dtDateData2.Rows[0][0].ToString()))
                                            temp_int = Convert.ToInt32(dtDateData2.Rows[0][0].ToString());
                                    }
                                    ConnectionWithAccess.query = "select d_d from " + ConnectionWithAccess.tablename[table_number] + " where d_n = " + temp_int + " and prd = '" + ConnectionWithAccess.mprd + "' and d_c = " + md_c + "and d_n <> 999999";
                                    DataTable dtDateData3 = ConnectionCommand.fGetDataTable();
                                    if (dtDateData3 != null && dtDateData3.Rows.Count > 0)
                                    {
                                        sidatetime.MaxDate = DateTime.Now;
                                        if (dtDateData3.Rows[0][0] != null && !string.IsNullOrEmpty(dtDateData3.Rows[0][0].ToString()))
                                            temp_datetime = Convert.ToDateTime(dtDateData3.Rows[0][0].ToString());
                                        if (temp_datetime >= sidatetime.MinDate)
                                            sidatetime.MaxDate = temp_datetime;
                                    }
                                }
                            }
                        }
                    }
                    else if (subtabsale.SelectedIndex == 3)
                    {
                        simple_date.MinDate = Convert.ToDateTime(ConnectionWithAccess.com_start_date);
                        simple_date.MaxDate = Convert.ToDateTime(ConnectionWithAccess.medate);
                        if (docno == "1")
                        {
                            ConnectionWithAccess.query = "select min(d_d) from " + ConnectionWithAccess.tablename[table_number] + " f21 where d_n " + (docno.Trim() == string.Empty ? "is null" : " > " + docno.Trim()) + " and prd = '" + ConnectionWithAccess.mprd + "' and d_c = " + md_c + " and d_n <> 999999";
                            dtDateData = ConnectionCommand.fGetDataTable();

                            if (dtDateData != null && dtDateData.Rows.Count > 0)
                            {
                                if (dtDateData.Rows[0][0] != null && !string.IsNullOrEmpty(dtDateData.Rows[0][0].ToString()))
                                    temp_datetime = Convert.ToDateTime(dtDateData.Rows[0][0].ToString());
                                if (temp_datetime >= simple_date.MinDate)
                                    simple_date.MaxDate = temp_datetime;
                            }
                        }
                        else
                        {
                            ConnectionWithAccess.query = "select max(d_d) from " + ConnectionWithAccess.tablename[table_number] + " f21 where d_n " + (docno.Trim() == string.Empty ? "is not null" : "< " + docno.Trim()) + " and prd = '" + ConnectionWithAccess.mprd + "' and d_c = " + md_c;
                            dtDateData = ConnectionCommand.fGetDataTable();
                            if (dtDateData != null && dtDateData.Rows.Count > 0)
                            {
                                if (dtDateData.Rows[0][0] != null && !string.IsNullOrEmpty(dtDateData.Rows[0][0].ToString()))
                                    simple_date.MinDate = Convert.ToDateTime(dtDateData.Rows[0][0]);
                            }
                            ConnectionWithAccess.query = "select max(d_n) from " + ConnectionWithAccess.tablename[table_number] + " where prd = '" + ConnectionWithAccess.mprd + "' and d_c = " + md_c + " and d_n <> 999999";
                            DataTable dtDateData1 = ConnectionCommand.fGetDataTable();
                            if (dtDateData1 != null && dtDateData1.Rows.Count > 0)
                            {
                                if (dtDateData1.Rows[0][0] != null && !string.IsNullOrEmpty(dtDateData1.Rows[0][0].ToString()))
                                    temp_int = Convert.ToInt32(dtDateData1.Rows[0][0].ToString());
                            }
                            if (Convert.ToInt32(docno) >= temp_int)
                            {
                                simple_date.MaxDate = DateTime.Now;
                            }
                            else
                            {
                                ConnectionWithAccess.query = "select min(d_n) from " + ConnectionWithAccess.tablename[table_number] + " where d_n " + (docno.Trim() == string.Empty ? "is not null" : "> " + docno.Trim()) + " and prd = '" + ConnectionWithAccess.mprd + "' and d_c = " + md_c + " and d_n <> 999999";
                                DataTable dtDateData2 = ConnectionCommand.fGetDataTable();
                                if (dtDateData2 != null && dtDateData2.Rows.Count > 0)
                                {
                                    if (dtDateData2.Rows[0][0] != null && !string.IsNullOrEmpty(dtDateData2.Rows[0][0].ToString()))
                                        temp_int = Convert.ToInt32(dtDateData2.Rows[0][0].ToString());
                                }
                                ConnectionWithAccess.query = "select d_d from " + ConnectionWithAccess.tablename[table_number] + " where d_n = " + temp_int + " and prd = '" + ConnectionWithAccess.mprd + "' and d_c = " + md_c + "and d_n <> 999999";
                                DataTable dtDateData3 = ConnectionCommand.fGetDataTable();
                                if (dtDateData3 != null && dtDateData3.Rows.Count > 0)
                                {
                                    simple_date.MaxDate = DateTime.Now;
                                    if (dtDateData3.Rows[0][0] != null && !string.IsNullOrEmpty(dtDateData3.Rows[0][0].ToString()))
                                        temp_datetime = Convert.ToDateTime(dtDateData3.Rows[0][0].ToString());
                                    if (temp_datetime >= simple_date.MinDate)
                                        simple_date.MaxDate = temp_datetime;
                                }
                            }
                        }
                    }
                }
            }
        }

        private void oldsaleinvoicedetails()
        {
            if (maintab.SelectedIndex == 1 || (maintab.SelectedIndex == 3 && subtabreports.SelectedIndex == 0) || (maintab.SelectedIndex == 3 && subtabreports.SelectedIndex == 1))
            {
                if (subtabsale.SelectedIndex == 0)
                {
                    si_party_help.Visible = false;
                    ConnectionWithAccess.query = "select a_n,s_a,d_y,tpt, bamt, tamt, rund_amt, gamt, tx_code,d_d,freight_AMT,packing_AMT,insurance_AMT,other_AMT,lr_num,lr_date,mess,tran_mode,tran_km from " + ConnectionWithAccess.tablename[21] + " f21 where d_n " + (sidocno.Text.Trim() == string.Empty ? "is null" : "= " + sidocno.Text.Trim()) + " and prd = '" + ConnectionWithAccess.mprd + "' and d_c = " + Convert.ToInt32(sidbc.SelectedValue.ToString());
                    DataTable dtData1 = ConnectionCommand.fGetDataTable();
                    if (dtData1 != null && dtData1.Rows.Count > 0)
                    {
                        if (dtData1.Rows[0][0] != null)
                        {
                            fill_transport(sia_n.Text, sicity.Text, sitransport);
                            tb_si_igst_tax_amount.Text = "0.00";
                            new_sale_invoice = false;
                            sidatetime.MinDate = Convert.ToDateTime(ConnectionWithAccess.com_start_date);
                            sidatetime.MaxDate = Convert.ToDateTime(ConnectionWithAccess.medate);
                            sidatetime.Value = Convert.ToDateTime(dtData1.Rows[0][9].ToString());
                            sia_n.Text = dtData1.Rows[0][0].ToString();
                            sis_a.Text = dtData1.Rows[0][1].ToString();
                            sid_y.Text = dtData1.Rows[0][2].ToString();
                            sitransport.Text = dtData1.Rows[0][3].ToString();
                            //sibasicamt.Text = dtData1.Rows[0][4].ToString();
                            //old_sale_basic_amount = (dtData1.Rows[0][4].ToString());
                            double.TryParse(dtData1.Rows[0][4].ToString(), out old_sale_basic_amount);
                            sitaxamt.Text = dtData1.Rows[0][5].ToString();
                            siroundoffamt.Text = dtData1.Rows[0][6].ToString();
                            sigrossamt.Text = dtData1.Rows[0][7].ToString();
                            old_sale_invoice_amount = Convert.ToDouble(dtData1.Rows[0][7].ToString());
                            sitaxcode.Text = dtData1.Rows[0][8].ToString();
                            si_freight_amt.Text = dtData1.Rows[0][10].ToString();
                            si_packing_amt.Text = dtData1.Rows[0][11].ToString();
                            si_insurance_amt.Text = dtData1.Rows[0][12].ToString();
                            si_other_amt.Text = dtData1.Rows[0][13].ToString();
                            sisale_lr_no.Text = dtData1.Rows[0][14].ToString();
                            dtp_sisale_lr_date.Text = dtData1.Rows[0][15].ToString();
                            sicomments.Text = dtData1.Rows[0][16].ToString();
                            if (dtData1.Rows[0]["tran_mode"].ToString() != "")
                                cb_si_trans_mode.SelectedIndex = Convert.ToInt32(dtData1.Rows[0]["tran_mode"].ToString()) - 1;
                            tb_si_kilometers.Text = dtData1.Rows[0]["tran_km"].ToString();
                            if (si_freight_amt.Text == "")
                                si_freight_amt.Text = "0.00";
                            if (si_packing_amt.Text == "")
                                si_packing_amt.Text = "0.00";
                            if (si_insurance_amt.Text == "")
                                si_insurance_amt.Text = "0.00";
                            if (si_other_amt.Text == "")
                                si_other_amt.Text = "0.00";
                            if (siroundoffamt.Text == "")
                                siroundoffamt.Text = "0.00";
                            ConnectionWithAccess.query = "select [desc], tax_rate from " + ConnectionWithAccess.tablename[6] + " f6 where d_c = " + Convert.ToInt32(sidbc.SelectedValue.ToString()) + " and tx_code = " + sitaxcode.Text;
                            DataTable dtSaleData = ConnectionCommand.fGetDataTable();
                            if (dtSaleData != null && dtSaleData.Rows.Count > 0)
                            {
                                sitaxdesc.Text = Convert.ToString(dtSaleData.Rows[0][0]);
                                sitaxrate.Text = Convert.ToString(dtSaleData.Rows[0][1]);
                            }
                            old_cash_received_against_sale_invoice = get_cash_received_amount_in_sale_invoice();
                            si_cash_received.Text = string.Format("{0:0.00}", old_cash_received_against_sale_invoice);
                            populate_screen();
                            fill_sale_invoice_dg();
                            check_if_have_delivery_account(sia_n.Text, sis_a.Text);
                            check_for_eway_bill();
                        }
                        check_for_permission_and_sale_invoice_printed();
                    }
                    else
                    {
                        sideliverycode.Visible = false;
                        sideliverycity.Visible = false;
                        sideliverycode.Clear();
                        sideliverycity.Clear();
                        sid_y.Text = "@@@";
                        siitemlist.DataSource = null;
                        siitemlist.Rows.Clear();
                        old_sale_invoice_amount = 0;
                        sisalelistdg.Visible = true;
                        sitaxlist.Visible = false;
                        DispEmail.Clear();
                        sipartyname.Clear();
                        sipartyaddress.Clear();
                        sicontactdetails.Clear();
                        sitransport.Text = null;
                        sibasicamt.Text = "0.00";
                        si_freight_amt.Text = "0.00";
                        si_packing_amt.Text = "0.00";
                        si_insurance_amt.Text = "0.00";
                        si_other_amt.Text = "0.00";
                        sitaxamt.Text = "0.00";
                        siroundoffamt.Text = "0.00";
                        sigrossamt.Text = "0.00";
                        sitaxcode.Text = "0";
                        sitaxdesc.Text = "";
                        sitaxrate.Text = "0.00";
                        sipartybalance.Text = "0.00";
                        sipartycode.ReadOnly = false;
                        ConnectionWithAccess.ms_a = null;
                        sipartycode.Text = "";
                        sicity.Text = "";
                    }
                }
                else if (subtabsale.SelectedIndex == 2)
                {
                    ConnectionWithAccess.query = "select a_n,s_a,d_y,tpt, bamt, tamt, rund_amt, gamt, tx_code,d_d,freight_AMT,packing_AMT,insurance_AMT,other_AMT from " + ConnectionWithAccess.tablename[7] + " f7 where d_n " + (sodocno.Text.Trim() == string.Empty ? "is null" : "= " + sodocno.Text.Trim()) + " and prd = '" + ConnectionWithAccess.mprd + "' and d_c = " + Convert.ToInt32(sodbc.SelectedValue.ToString());
                    DataTable dtData1 = ConnectionCommand.fGetDataTable();
                    if (dtData1 != null && dtData1.Rows.Count > 0)
                    {
                        if (dtData1.Rows[0][0] != null)
                        {
                            sodatetime.MinDate = Convert.ToDateTime(ConnectionWithAccess.com_start_date);
                            sodatetime.MaxDate = Convert.ToDateTime(ConnectionWithAccess.medate);
                            sodatetime.Value = Convert.ToDateTime(dtData1.Rows[0][9].ToString());
                            soa_n.Text = dtData1.Rows[0][0].ToString();
                            sos_a.Text = dtData1.Rows[0][1].ToString();
                            sod_y.Text = dtData1.Rows[0][2].ToString();
                            sotransport.Text = dtData1.Rows[0][3].ToString();
                            //sobasocamt.Text = dtData1.Rows[0][4].ToString();
                            sotaxamt.Text = dtData1.Rows[0][5].ToString();
                            soroundoffamt.Text = dtData1.Rows[0][6].ToString();
                            sogrossamt.Text = dtData1.Rows[0][7].ToString();
                            sotaxcode.Text = dtData1.Rows[0][8].ToString();
                            //ConnectionWithAccess.query = "select [desc], tax_rate from " + ConnectionWithAccess.tablename[6] + " f6 where d_c = " + Convert.ToInt32(sodbc.SelectedValue.ToString()) + " and tx_code = " + sotaxcode.Text;
                            //DataTable dtSaleData = ConnectionCommand.fGetDataTable();
                            //if (dtSaleData != null && dtSaleData.Rows.Count > 0)
                            //{
                            //    sotaxdesc.Text = Convert.ToString(dtSaleData.Rows[0][0]);
                            //    sotaxrate.Text = Convert.ToString(dtSaleData.Rows[0][1]);
                            //}
                            socity.Enabled = false;
                            populate_screen();
                            fill_sale_invoice_dg();
                        }
                    }
                    else
                    {
                        soitemlist.DataSource = null;
                        soitemlist.Rows.Clear();
                        sotransport.Text = null;
                        sotaxamt.Text = "0.00";
                        soroundoffamt.Text = "0.00";
                        sogrossamt.Text = "0.00";
                        sotaxcode.Text = "0";
                        sotaxdesc.Text = "";
                        sotaxrate.Text = "0.00";
                        sopartybalance.Text = "0.00";
                        sopartycode.Enabled = true;
                        socity.Enabled = true;
                        sopartycode.Text = "";
                        socity.Text = "";
                    }
                }
                else if (subtabsale.SelectedIndex == 3)
                {
                    ConnectionWithAccess.query = "select a_n,s_a,d_y,tpt, bamt, tamt, rund_amt, gamt, tx_code,d_d,freight_AMT,packing_AMT,insurance_AMT,other_AMT,lr_num,lr_date,mess from " + ConnectionWithAccess.tablename[21] + " f21 where d_n " + (simple_docno.Text.Trim() == string.Empty ? "is null" : "= " + simple_docno.Text.Trim()) + " and prd = '" + ConnectionWithAccess.mprd + "' and d_c = " + Convert.ToInt32(sidbc.SelectedValue.ToString());
                    DataTable dtData1 = ConnectionCommand.fGetDataTable();
                    if (dtData1 != null && dtData1.Rows.Count > 0)
                    {
                        if (dtData1.Rows[0][0] != null)
                        {
                            //fill_transport(sia_n.Text, sicity.Text, sitransport);
                            //tb_si_igst_tax_amount.Text = "0.00";
                            new_sale_invoice = false;
                            simple_date.MinDate = Convert.ToDateTime(ConnectionWithAccess.com_start_date);
                            simple_date.MaxDate = Convert.ToDateTime(ConnectionWithAccess.medate);
                            simple_date.Value = Convert.ToDateTime(dtData1.Rows[0][9].ToString());
                            simple_a_n.Text = dtData1.Rows[0][0].ToString();
                            simple_s_a.Text = dtData1.Rows[0][1].ToString();
                            //sid_y.Text = dtData1.Rows[0][2].ToString();
                            //sitransport.Text = dtData1.Rows[0][3].ToString();
                            ////sibasicamt.Text = dtData1.Rows[0][4].ToString();
                            //sitaxamt.Text = dtData1.Rows[0][5].ToString();
                            //siroundoffamt.Text = dtData1.Rows[0][6].ToString();
                            simple_salelist.Text = dtData1.Rows[0][7].ToString();
                            old_sale_invoice_amount = Convert.ToDouble(dtData1.Rows[0][7].ToString());
                            //sitaxcode.Text = dtData1.Rows[0][8].ToString();
                            //si_freight_amt.Text = dtData1.Rows[0][10].ToString();
                            //si_packing_amt.Text = dtData1.Rows[0][11].ToString();
                            //si_insurance_amt.Text = dtData1.Rows[0][12].ToString();
                            //si_other_amt.Text = dtData1.Rows[0][13].ToString();
                            //sisale_lr_no.Text = dtData1.Rows[0][14].ToString();
                            //dtp_sisale_lr_date.Text = dtData1.Rows[0][15].ToString();
                            simple_comments.Text = dtData1.Rows[0][16].ToString();
                            //if (si_freight_amt.Text == "")
                            //    si_freight_amt.Text = "0.00";
                            //if (si_packing_amt.Text == "")
                            //    si_packing_amt.Text = "0.00";
                            //if (si_insurance_amt.Text == "")
                            //    si_insurance_amt.Text = "0.00";
                            //if (si_other_amt.Text == "")
                            //    si_other_amt.Text = "0.00";
                            //if (siroundoffamt.Text == "")
                            //    siroundoffamt.Text = "0.00";
                            //ConnectionWithAccess.query = "select [desc], tax_rate from " + ConnectionWithAccess.tablename[6] + " f6 where d_c = " + Convert.ToInt32(sidbc.SelectedValue.ToString()) + " and tx_code = " + sitaxcode.Text;
                            //DataTable dtSaleData = ConnectionCommand.fGetDataTable();
                            //if (dtSaleData != null && dtSaleData.Rows.Count > 0)
                            //{
                            //    sitaxdesc.Text = Convert.ToString(dtSaleData.Rows[0][0]);
                            //    sitaxrate.Text = Convert.ToString(dtSaleData.Rows[0][1]);
                            //}
                            old_cash_received_against_sale_invoice = get_cash_received_amount_in_sale_invoice();
                            si_cash_received.Text = string.Format("{0:0.00}", old_cash_received_against_sale_invoice);
                            simple_partycity.Enabled = false;
                            populate_screen();
                            //fill_sale_invoice_dg();
                            //if (sid_y.Text != "@@@")
                            //{
                            //    sipartycode.ReadOnly = true;
                            //    sideliverycode.Visible = true;
                            //    sideliverycity.Visible = true;
                            //    lbl_sideliver.Visible = true;
                            //    get_account_details_with_d_y_from_01(sia_n.Text, sis_a.Text, sid_y.Text);
                            //    sideliverycode.Text = account_detail_from_01[4];
                            //    sideliverycity.Text = account_detail_from_01[8];
                            //    get_account_details_from_01(sia_n.Text, sis_a.Text);
                            //}
                            //else
                            //{
                            //    sideliverycode.Visible = false;
                            //    sideliverycity.Visible = false;
                            //    lbl_sideliver.Visible = false;
                            //}
                        }
                        //check_for_permission_and_sale_invoice_printed();
                    }
                    else
                    {
                        simple_itemsalelist.DataSource = null;
                        old_sale_invoice_amount = 0;
                        sisalelistdg.Visible = true;
                        simple_detail_partyname.Clear();
                        simple_detail_party_address.Clear();
                        simple_detail_party_contact.Clear();
                        simple_salelist.Text = "0.00";
                        sipartybalance.Text = "0.00";
                        simple_partyname.Enabled = true;
                        simple_partycity.Enabled = true;
                    }
                }
            }
        }

        private void oldsalereplacementdetails()
        {
            if (srdocno.Text != null && srdocno.Text != "")
            {
                ConnectionWithAccess.query = "select a_n,s_a,d_y,tpt, bamt, tamt, rund_amt, gamt, tx_code, d_d from " + ConnectionWithAccess.tablename[30] + " f30 where d_n  " + (srdocno.Text.Trim() == string.Empty ? "is null" : "= " + srdocno.Text.Trim()) + " and prd = '" + ConnectionWithAccess.mprd + "' and d_c = " + srdbc.SelectedValue.ToString();
                DataTable dtData1 = ConnectionCommand.fGetDataTable();
                if (dtData1 != null && dtData1.Rows.Count > 0)
                {
                    if (dtData1.Rows[0][0] != null)
                    {
                        sra_n.Text = dtData1.Rows[0][0].ToString();
                        srs_a.Text = dtData1.Rows[0][1].ToString();
                        srd_y.Text = dtData1.Rows[0]["d_y"].ToString();
                        srtransport.Text = dtData1.Rows[0][3].ToString();
                        srbasicamt.Text = dtData1.Rows[0][4].ToString();
                        srtaxamt.Text = dtData1.Rows[0][5].ToString();
                        srgrossamt.Text = dtData1.Rows[0][7].ToString();
                        old_sale_replace_amount = Convert.ToDouble(dtData1.Rows[0][7].ToString());
                        srtaxcode.Text = dtData1.Rows[0][8].ToString();
                        srpartycode.Enabled = false;
                        sritemlist.Enabled = true;
                        sritemlist.ReadOnly = false;
                    }
                }
                if (srs_a.Text != null && srs_a.Text != "")
                {
                    get_account_details_from_01(sra_n.Text, srs_a.Text);
                    get_account_details_from_04(sra_n.Text, srs_a.Text);
                    srpartycode.Text = account_detail_from_01[4];
                    srpartyname.Text = srpartycode.Text;
                    srpartyaddress.Text = account_detail_from_04[4] + " ," + account_detail_from_04[5] + " ," + account_detail_from_04[6] + " ," + account_detail_from_04[7];
                    srcontactdetails.Text = account_detail_from_04[17] + " ," + account_detail_from_04[18] + " ," + account_detail_from_04[19] + " ," + account_detail_from_04[20];
                    srpartybalance.Text = Convert.ToString(get_account_balance(sra_n.Text, srs_a.Text, Convert.ToString(srdatetime.Text)));
                }
            }
        }

        private void oldpurcreplacementdetails()
        {
            if (prdocno.Text != null && prdocno.Text != "")
            {
                ConnectionWithAccess.command.CommandText = "select a_n,s_a, tpt, bamt, tamt, gamt, tx_code, d_d from " + ConnectionWithAccess.tablename[30] + " f30 where d_n  " + (prdocno.Text.Trim() == string.Empty ? "is null" : "= " + prdocno.Text.Trim()) + " and prd = '" + ConnectionWithAccess.mprd + "' and d_c = " + prdbc.SelectedValue.ToString();
                DataTable dtData1 = ConnectionCommand.fGetDataTable();
                if (dtData1 != null && dtData1.Rows.Count > 0)
                {
                    if (dtData1.Rows[0][0] != null)
                    {
                        pra_n.Text = dtData1.Rows[0][0].ToString();
                        prs_a.Text = dtData1.Rows[0][1].ToString();
                        prtransport.Text = dtData1.Rows[0][2].ToString();
                        prbasicamt.Text = dtData1.Rows[0][3].ToString();
                        prtaxamt.Text = dtData1.Rows[0][4].ToString();
                        prgrossamt.Text = dtData1.Rows[0][5].ToString();
                        old_sale_replace_amount = Convert.ToDouble(dtData1.Rows[0][5].ToString());
                        prtaxcode.Text = dtData1.Rows[0][6].ToString();
                        prpartycode.Enabled = false;

                        old_cash_payment_against_purchase_invoice = get_cash_payment_amount_in_purchase_invoice();
                        pi_cash_paid.Text = string.Format("{0:0.00}", old_cash_payment_against_purchase_invoice);
                    }
                }
                if (prs_a.Text != null && prs_a.Text != "")
                {
                    get_account_details_from_01(pra_n.Text, prs_a.Text);
                    get_account_details_from_04(pra_n.Text, prs_a.Text);
                    prpartycode.Text = account_detail_from_01[4];
                }
            }
        }

        public void sale_invoice_item_filling()
        {
            if (subtabsale.SelectedIndex == 0)
            {
                if (!new_sale_invoice && sidocno.Text != "")
                {
                    ConnectionWithAccess.query = "select [type], item_code, [title], q_cs, [box], qty, price, amount,cat,igst_per,hsn_code,item_squ_id from " + ConnectionWithAccess.tablename[03] + " where prd= '" + ConnectionWithAccess.mprd + "' and d_c = " + sidbc.SelectedValue.ToString() + " and d_n " + (sidocno.Text.Trim() == string.Empty ? "is not null" : "= " + sidocno.Text.Trim()) + " and amount > 0 order by item_squ_id";
                    ConnectionCommand.accountHelp_datatable_Seperate(siitemlist, "siitemlist1", "");
                    //ConnectionWithAccess.query = "select [type], item_code, [title], q_cs, [box], qty, price, amount,cat,igst_per,hsn_code from " + ConnectionWithAccess.tablename[03] + " where prd= '" + ConnectionWithAccess.mprd + "' and d_c = " + sidbc.SelectedValue.ToString() + " and d_n " + (sidocno.Text.Trim() == string.Empty ? "is not null" : "= " + sidocno.Text.Trim()) + " and amount > 0";
                    //ConnectionCommand.accountHelp_datatable_Seperate(siitemlist, "siitemlist1", "", true);
                    if (siitemlist.Rows.Count <= 1)
                    {
                        sibasicamt.ReadOnly = false;
                        sibasicamt.Enabled = true;
                        sibasicamt.Text = old_sale_basic_amount.ToString();
                    }
                    else
                    {
                        sibasicamt.ReadOnly = true;
                        sale_invoice_amount = 0;
                        calculateSaleItemTotal();
                    }
                    fill_sale_list_array_for_items_list_stock_adding();
                }
            }
            else if (subtabsale.SelectedIndex == 2)
            {
                if (sodocno.Text != "")
                {
                    ConnectionWithAccess.query = "select [type], item_code, [title], q_cs, [box], qty, price, amount,cat,igst_per,hsn_code,item_squ_id from " + ConnectionWithAccess.tablename[03] + " where prd = '" + ConnectionWithAccess.mprd + "' and d_c = " + sodbc.SelectedValue.ToString() + " and d_n " + (sodocno.Text.Trim() == string.Empty ? "is not null" : "= " + sodocno.Text.Trim()) + " and amount > 0 order by item_squ_id";
                    ConnectionCommand.accountHelp_datatable_Seperate(soitemlist, "siitemlist1");
                    if (soitemlist.Rows.Count <= 1)
                    {
                        sobasicamt.ReadOnly = false;
                        sobasicamt.Enabled = true;
                    }
                    else
                    {
                        sobasicamt.ReadOnly = true;
                        calculateSaleorderItemTotal();
                    }
                }
            }
            else if (subtabsale.SelectedIndex == 3)
            {
                if (!new_sale_invoice && simple_docno.Text != "")
                {
                    ConnectionWithAccess.query = "select [type], item_code, [title], q_cs, [box], qty, price, amount,cat,igst_per,hsn_code,item_squ_id from " + ConnectionWithAccess.tablename[03] + " where prd= '" + ConnectionWithAccess.mprd + "' and d_c = 1 and d_n " + (simple_docno.Text.Trim() == string.Empty ? "is not null" : "= " + simple_docno.Text.Trim()) + " and amount > 0 order by item_squ_id";
                    ConnectionCommand.accountHelp_datatable_Seperate(simple_itemsalelist, "simple_itemsalelist");
                    if (simple_itemsalelist.Rows.Count <= 1)
                    {
                        sibasicamt.ReadOnly = false;
                        sibasicamt.Enabled = true;
                    }
                    else
                    {
                        sibasicamt.ReadOnly = true;
                        sale_invoice_amount = 0;
                        calculateSaleItemTotal();
                    }
                    fill_sale_list_array_for_items_list_stock_adding();
                    calculate_simple_SaleItemTotal();
                }
                simple_itemsalelist.Enabled = true;
            }
        }

        private void fill_sale_list_array_for_items_list_stock_adding()
        {
            item_sale_list.Clear();

            ConnectionWithAccess.query = "select [type], item_code, qty from " + ConnectionWithAccess.tablename[03] + " where prd= '" + ConnectionWithAccess.mprd + "' and d_c = " + sidbc.SelectedValue.ToString() + " and d_n " + (sidocno.Text.Trim() == string.Empty ? "is not null" : "= " + sidocno.Text.Trim()) + " and amount > 0";
            DataTable dtSaleListData = ConnectionCommand.fGetDataTable();

            if (dtSaleListData != null && dtSaleListData.Rows.Count > 0)
            {
                int mcolumncount = dtSaleListData.Columns.Count;
                for (int irowCount = 0; irowCount < dtSaleListData.Rows.Count; irowCount++)
                {
                    temp_word = "";
                    for (int i = 0; i <= mcolumncount - 1; i++)
                    {
                        temp_word += (dtSaleListData.Rows[irowCount][i].ToString().Trim()) + ",";
                    }
                    temp_word = temp_word.Substring(0, temp_word.Length - 1);
                    item_sale_list.Add(temp_word);
                }
            }
        }

        public void purchase_invoice_item_filling()
        {
            piitemlist.DataSource = null;
            piitemlist.Rows.Clear();
            ConnectionWithAccess.query = "select [type], item_code, [title], q_cs, [box], qty, price, amount,cat,igst_per,hsn_code,item_squ_id from " + ConnectionWithAccess.tablename[03] + " f3 where d_n " + (pidocno.Text.Trim() == string.Empty ? "is null" : "= " + pidocno.Text.Trim()) + " and prd = '" + ConnectionWithAccess.mprd + "' and d_c = " + Convert.ToInt32(pidbc.SelectedValue.ToString()) + " and s_a = '" + pis_a.Text + "' order by item_squ_id";
            ConnectionCommand.accountHelp_datatable_Seperate(piitemlist, "piitemlist");
            if (piitemlist.Rows.Count <= 1)
            {
                pibasicamt.ReadOnly = false;
                pibasicamt.Enabled = true;
            }
            else
            {
                piitemlist.Enabled = true;
                pibasicamt.ReadOnly = true;
                calculatepurcItemTotal();
            }
            fill_purchase_list_array_for_items_list_stock_deleting();
        }

        private void fill_purchase_list_array_for_items_list_stock_deleting()
        {
            item_purchase_list.Clear();
            ConnectionWithAccess.query = "select [type], item_code, qty from " + ConnectionWithAccess.tablename[03] + " f3 where d_n " + (pidocno.Text.Trim() == string.Empty ? "is null" : "= " + pidocno.Text.Trim()) + " and prd = '" + ConnectionWithAccess.mprd + "' and d_c = " + Convert.ToInt32(pidbc.SelectedValue.ToString()) + " and s_a = '" + pis_a.Text + "'";
            DataTable dtData1 = ConnectionCommand.fGetDataTable();

            if (dtData1 != null && dtData1.Rows.Count > 0)
            {
                int mcolumncount = dtData1.Columns.Count;
                for (int iRowCount = 0; iRowCount < dtData1.Rows.Count; iRowCount++)
                {
                    temp_word = "";
                    for (int i = 0; i <= mcolumncount - 1; i++)
                    {
                        temp_word += dtData1.Rows[iRowCount][i].ToString();
                        account_detail_from_01.Add(temp_word);
                    }
                    temp_word = temp_word.Substring(0, temp_word.Length - 1);
                    item_purchase_list.Add(temp_word);
                }
            }
        }

        public void sale_replacement_item_filling()
        {
            sritemlist.DataSource = null;
            ConnectionWithAccess.query = "select [type], item_code, [title], q_cs, [box], qty, price, amount,cat,item_squ_id from " + ConnectionWithAccess.tablename[03] + " where prd= '" + ConnectionWithAccess.mprd + "' and d_c = " + srdbc.SelectedValue.ToString() + " and d_n  " + (srdocno.Text.Trim() == string.Empty ? "is null" : "= " + srdocno.Text.Trim()) + " order by item_squ_id";
            ConnectionCommand.accountHelp_datatable_Seperate(sritemlist, "sritemlist");
            if (sritemlist.Rows.Count <= 1)
            {
                srbasicamt.ReadOnly = false;
                srbasicamt.Enabled = true;
            }
            else
            {
                sritemlist.Enabled = true;
                srbasicamt.ReadOnly = true;
                sale_replacement_amount = 0;
                for (int i = 0; i < sritemlist.Rows.Count; i++)
                {
                    sale_replacement_amount = sale_replacement_amount + Convert.ToDouble(sritemlist.Rows[i].Cells[7].Value);
                }
                srbasicamt.Text = Convert.ToString(sale_replacement_amount);
            }
        }

        private void load_all_period_values()
        {
            try
            {
                //DateTime start_date, last_date;
                sidatetime.MinDate = Convert.ToDateTime(ConnectionWithAccess.com_start_date);
                srdatetime.MinDate = Convert.ToDateTime(ConnectionWithAccess.com_start_date);
                pidatetime.MinDate = Convert.ToDateTime(ConnectionWithAccess.com_start_date);
                brdatetime.MinDate = Convert.ToDateTime(ConnectionWithAccess.com_start_date);
                bpdatetime.MinDate = Convert.ToDateTime(ConnectionWithAccess.com_start_date);
                bddatetime.MinDate = Convert.ToDateTime(ConnectionWithAccess.com_start_date);
                bwdatetime.MinDate = Convert.ToDateTime(ConnectionWithAccess.com_start_date);
                crdatetime.MinDate = Convert.ToDateTime(ConnectionWithAccess.com_start_date);
                cpdatetime.MinDate = Convert.ToDateTime(ConnectionWithAccess.com_start_date);
                jjdatetime.MinDate = Convert.ToDateTime(ConnectionWithAccess.com_start_date);
                tr_datetime.MinDate = Convert.ToDateTime(ConnectionWithAccess.com_start_date);
                mix_dt_from.MinDate = Convert.ToDateTime(ConnectionWithAccess.com_start_date);
                mix_dt_to.MinDate = Convert.ToDateTime(ConnectionWithAccess.com_start_date);
                RepFrom.MinDate = Convert.ToDateTime(ConnectionWithAccess.com_start_date);
                RepTo.MinDate = Convert.ToDateTime(ConnectionWithAccess.com_start_date);
                Ledfrom.MinDate = Convert.ToDateTime(ConnectionWithAccess.com_start_date);
                LedTo.MinDate = Convert.ToDateTime(ConnectionWithAccess.com_start_date);
                tr_datetime.MinDate = Convert.ToDateTime(ConnectionWithAccess.com_start_date);
                //dtp_rg_from_date.MinDate = Convert.ToDateTime("01/07/2017");
                dtp_rg_from_date.MinDate = Convert.ToDateTime(ConnectionWithAccess.com_start_date);
                dtp_rg_to_date.MinDate = Convert.ToDateTime(ConnectionWithAccess.com_start_date);
                temp_word = DateTime.Today.ToShortDateString();
                if (Convert.ToDateTime(ConnectionWithAccess.com_end_date) > Convert.ToDateTime(temp_word))
                    ConnectionWithAccess.com_end_date = DateTime.Today.ToShortDateString(); ;

                sidatetime.MaxDate = Convert.ToDateTime(ConnectionWithAccess.com_end_date);
                srdatetime.MaxDate = Convert.ToDateTime(ConnectionWithAccess.com_end_date);
                pidatetime.MaxDate = Convert.ToDateTime(ConnectionWithAccess.com_end_date);
                brdatetime.MaxDate = Convert.ToDateTime(ConnectionWithAccess.com_end_date);
                bpdatetime.MaxDate = Convert.ToDateTime(ConnectionWithAccess.com_end_date);
                bddatetime.MaxDate = Convert.ToDateTime(ConnectionWithAccess.com_end_date);
                bwdatetime.MaxDate = Convert.ToDateTime(ConnectionWithAccess.com_end_date);
                crdatetime.MaxDate = Convert.ToDateTime(ConnectionWithAccess.com_end_date);
                cpdatetime.MaxDate = Convert.ToDateTime(ConnectionWithAccess.com_end_date);
                jjdatetime.MaxDate = Convert.ToDateTime(ConnectionWithAccess.com_end_date);
                tr_datetime.MaxDate = Convert.ToDateTime(ConnectionWithAccess.com_end_date);
                mix_dt_from.MaxDate = Convert.ToDateTime(ConnectionWithAccess.com_end_date);
                mix_dt_to.MaxDate = Convert.ToDateTime(ConnectionWithAccess.com_end_date);
                RepFrom.MaxDate = Convert.ToDateTime(ConnectionWithAccess.com_end_date);
                RepTo.MaxDate = Convert.ToDateTime(ConnectionWithAccess.com_end_date);
                Ledfrom.MaxDate = Convert.ToDateTime(ConnectionWithAccess.com_end_date);
                LedTo.MaxDate = Convert.ToDateTime(ConnectionWithAccess.com_end_date);
                dtp_rg_from_date.MaxDate = Convert.ToDateTime(ConnectionWithAccess.com_end_date);
                dtp_rg_to_date.MaxDate = Convert.ToDateTime(ConnectionWithAccess.com_end_date);
                tr_datetime.MaxDate = Convert.ToDateTime(ConnectionWithAccess.com_end_date);
                if (ConnectionWithAccess.msdate == null)
                    ConnectionWithAccess.msdate = ConnectionWithAccess.com_start_date;
                if (ConnectionWithAccess.medate == null)
                    ConnectionWithAccess.medate = ConnectionWithAccess.com_end_date;
                if (ConnectionWithAccess.mprd == null)
                    ConnectionWithAccess.mprd = "A";
                if (Convert.ToDateTime(ConnectionWithAccess.medate) >= DateTime.Today)
                {
                    last_date = DateTime.Today;
                    //if (Convert.ToDateTime(ConnectionWithAccess.medate) > Convert.ToDateTime(ConnectionWithAccess.msdate))
                    //    first_date = Convert.ToDateTime(ConnectionWithAccess.msdate);
                    //else
                    first_date = Convert.ToDateTime(ConnectionWithAccess.msdate);
                }
                else
                {
                    if (Convert.ToDateTime(ConnectionWithAccess.medate) >= DateTime.Today)
                        last_date = Convert.ToDateTime(ConnectionWithAccess.medate);
                    else
                        if (DateTime.Today > Convert.ToDateTime(ConnectionWithAccess.medate))
                        last_date = Convert.ToDateTime(ConnectionWithAccess.medate);
                    else
                        last_date = DateTime.Today;
                    if (ConnectionWithAccess.msdate == null)
                        first_date = Convert.ToDateTime(ConnectionWithAccess.com_start_date);
                    else
                        first_date = Convert.ToDateTime(ConnectionWithAccess.msdate);
                }
                //sidatetime.Value = last_date;
                //srdatetime.Value = last_date;
                //pidatetime.Value = last_date;
                //brdatetime.Value = last_date;
                //bpdatetime.Value = last_date;
                //bddatetime.Value = last_date;
                //bwdatetime.Value = last_date;
                //crdatetime.Value = last_date;
                //cpdatetime.Value = last_date;
                //jjdatetime.Value = last_date;
                //tr_datetime.Value = last_date;
                mix_dt_to.Value = last_date;
                RepTo.Value = last_date;
                LedTo.Value = last_date;
                dtp_rg_to_date.Value = last_date;
                RepFrom.Value = Convert.ToDateTime(first_date);
                Ledfrom.Value = Convert.ToDateTime(ConnectionWithAccess.com_start_date);
                mix_dt_from.Value = Convert.ToDateTime(first_date);
                //dtp_rg_from_date.Value = Convert.ToDateTime("01/07/2017");

                sidatetime.MinDate = Convert.ToDateTime(first_date);
                srdatetime.MinDate = Convert.ToDateTime(first_date);
                pidatetime.MinDate = Convert.ToDateTime(first_date);
                brdatetime.MinDate = Convert.ToDateTime(first_date);
                bpdatetime.MinDate = Convert.ToDateTime(first_date);
                bddatetime.MinDate = Convert.ToDateTime(first_date);
                bwdatetime.MinDate = Convert.ToDateTime(first_date);

                crdatetime.MinDate = Convert.ToDateTime(first_date);
                cpdatetime.MinDate = Convert.ToDateTime(first_date);
                jjdatetime.MinDate = Convert.ToDateTime(first_date);
                tr_datetime.MinDate = Convert.ToDateTime(first_date);
                RepFrom.MinDate = Convert.ToDateTime(first_date);
                RepTo.MinDate = Convert.ToDateTime(first_date);
                Ledfrom.MinDate = Convert.ToDateTime(ConnectionWithAccess.com_start_date);
                LedTo.MinDate = Convert.ToDateTime(ConnectionWithAccess.com_start_date);
                tr_datetime.MinDate = Convert.ToDateTime(first_date);
                //dtp_rg_from_date.MinDate = Convert.ToDateTime("01/07/2017");
                dtp_rg_from_date.MinDate = Convert.ToDateTime(first_date);
                dtp_rg_to_date.MinDate = Convert.ToDateTime(first_date);

                sidatetime.MaxDate = Convert.ToDateTime(last_date);
                srdatetime.MaxDate = Convert.ToDateTime(last_date);
                pidatetime.MaxDate = Convert.ToDateTime(last_date);
                brdatetime.MaxDate = Convert.ToDateTime(last_date);
                bpdatetime.MaxDate = Convert.ToDateTime(last_date);
                bddatetime.MaxDate = Convert.ToDateTime(last_date);
                bwdatetime.MaxDate = Convert.ToDateTime(last_date);
                crdatetime.MaxDate = Convert.ToDateTime(last_date);
                cpdatetime.MaxDate = Convert.ToDateTime(last_date);
                jjdatetime.MaxDate = Convert.ToDateTime(last_date);
                tr_datetime.MaxDate = Convert.ToDateTime(last_date);
                RepFrom.MaxDate = Convert.ToDateTime(last_date);
                RepTo.MaxDate = Convert.ToDateTime(last_date);
                Ledfrom.MaxDate = Convert.ToDateTime(last_date);
                LedTo.MaxDate = Convert.ToDateTime(last_date);
                tr_datetime.MaxDate = Convert.ToDateTime(last_date);
                if (Convert.ToDateTime(last_date) >= Convert.ToDateTime("01/07/2017"))
                {
                    dtp_rg_from_date.MaxDate = Convert.ToDateTime(last_date);
                    dtp_rg_to_date.MaxDate = Convert.ToDateTime(last_date);
                }
                fPopulatecmbDateRange(cmbDateRangeLedger);
            }
            catch (Exception ex)
            {
                //message_box.Text = Convert.ToString(ex);
            }
            check_save_button();
        }

        private void fill_chkpartylist()
        {
            cbRepType.SelectedIndex = 0;
            cbRepSubType.SelectedIndex = 0;
            ConnectionWithAccess.query = "select [desc],city,a_n,s_a from " + ConnectionWithAccess.tablename[1] + " f1 where f1.a_n = '2002' and f1.s_a <> '@@@'";
            ConnectionWithAccess.fillCheckListBox(chkpartyList);
            ConnectionWithAccess.query = "select distinct [city] from " + ConnectionWithAccess.tablename[1] + " f1 where f1.a_n = '2002' and f1.s_a <> '@@@'";
            ConnectionWithAccess.fillCheckListBox(chkcityList);
        }

        #region find_data
        private void find_new_name_a_n(string ma_n, string mdesc)
        {
            temp_word2 = "0";
            isRecord = 0;
            temp_count = 0;
            temporary_list_array.Clear();
            if (cbParent.SelectedItem.Equals("SUNDRY CREDITORS") || cbParent.SelectedItem.Equals("SUNDRY DEBTORS"))
                ConnectionWithAccess.query = "select a_n from " + ConnectionWithAccess.tablename[1] + " f1 where a_n like '" + tbA_N.Text + "%' and s_a = '" + tbS_A.Text + "'";
            else
                ConnectionWithAccess.query = "select a_n from " + ConnectionWithAccess.tablename[1] + " f1 where a_n like '" + tbA_N.Text + "%' and s_a = '" + tbS_A.Text + "'";
            DataTable dtData1 = ConnectionCommand.fGetDataTable();
            if (dtData1 != null && dtData1.Rows.Count > 0)
            {
                for (int iRowCount = 0; iRowCount < dtData1.Rows.Count; iRowCount++)
                {
                    check_data_type(dtData1.Rows[iRowCount][0].ToString());
                    if (data_type == "Numeric")
                    {
                        temporary_list_array.Add(dtData1.Rows[iRowCount][0].ToString());
                        temp_count++;
                    }
                }
            }
            if (temporary_list_array.Count() >= 1)
            {
                temporary_list_array.Sort();
                temp_count = temporary_list_array.Count() - 1;
                temp_word = temporary_list_array[temp_count];
                check_data_type(temp_word);
                if (data_type == "Numeric")
                {
                    if (temp_word.Length > 4)
                    {
                        temp_word2 = temp_word.Substring(4, temp_word.Length - 4);
                        temp_word = temp_word.Substring(0, 4);
                    }
                    else
                        temp_word2 = temp_count.ToString();
                }
                else
                {

                }
                //temp_word2 = temporary_array[temp_count].Substring(temp_word.Length, (temporary_array[temp_count].Length - temp_word.Length));
                temp_word2 = Convert.ToString(Convert.ToInt32(temp_word2) + 1);
                if (temp_word2.Length == 1)
                    temp_word2 = "0" + temp_word2;
                tbA_N.Text = temp_word + temp_word2;
            }
            else
            {
                if (tbA_N.Text.Length == 4)
                    tbA_N.Text = tbA_N.Text + "01";
                else if (tbA_N.Text.Length == 5)
                    tbA_N.Text = tbA_N.Text + "1";
            }
        }

        private string find_new_name_s_a(string ma_n, string mdesc)
        {
            temp_int2 = 0;
            temp_s_a = "";
            if (mdesc != "")
            {
                if (mdesc.Contains(" "))
                {
                    int aaa = mdesc.IndexOf(" ");
                    temp_s_a = (mdesc.Substring(0, 1) + mdesc.Substring(aaa - 1, 1)).ToUpper();
                }
                else
                    temp_s_a = (mdesc.Substring(0, 1) + mdesc.Substring(mdesc.Length - 1, 1)).ToUpper();
                isRecord = 0;
                temporary_list_array.Clear();
                ConnectionWithAccess.query = "select s_a from " + ConnectionWithAccess.tablename[1] + " f1 where a_n = '" + tbA_N.Text + "' and s_a like '" + temp_s_a + "%' order by s_a";
                DataTable dtData1 = ConnectionCommand.fGetDataTable();
                if (dtData1 != null && dtData1.Rows.Count > 0)
                {
                    for (int iRowCount = 0; iRowCount < dtData1.Rows.Count; iRowCount++)
                    {
                        if (dtData1.Rows[iRowCount][0].ToString().Length > 2)
                        {
                            temp_word = dtData1.Rows[iRowCount][0].ToString();
                            temp_word = temp_word.Substring(2, temp_word.Length - 2);
                            //if (temp_int2 != 0)
                            int.TryParse(temp_word, out temp_int);
                            if (temp_int > temp_int2)
                                temp_int2 = temp_int;
                        }
                        else
                            temp_word = "0";

                    }
                    //if (temporary_list_array.Count() >= 1)
                    //{
                    //temporary_list_array.Sort();
                    //temp_count = temporary_list_array.Count() - 1;
                    //temp_int = Convert.ToInt32(temporary_list_array[temp_count].ToString());
                    temp_int = temp_int2;
                    temp_int = temp_int + 1;
                    //char c = Convert.ToChar(asc_value);
                    //temp_word2 = c.ToString();
                    if (temp_int < 10)
                        temp_s_a = temp_s_a + "00" + temp_int.ToString();
                    else if (temp_int >= 10 && temp_int < 100)
                        temp_s_a = temp_s_a + "0" + temp_int.ToString();
                    else
                        temp_s_a = temp_s_a + temp_int.ToString();
                    tbS_A.Text = temp_s_a;
                    //}
                    //else
                    //    temp_s_a = temp_s_a + "1";
                }
                else
                    temp_s_a = temp_s_a + "001";
            }
            return temp_s_a;
        }

        private void find_new_name_s_a_old(string ma_n, string mdesc)
        {
            if (mdesc != "")
            {
                if (mdesc.Contains(" "))
                {
                    int aaa = mdesc.IndexOf(" ");
                    tbS_A.Text = (mdesc.Substring(0, 1) + mdesc.Substring(aaa - 1, 1)).ToUpper();
                }
                else
                    tbS_A.Text = (mdesc.Substring(0, 1) + mdesc.Substring(mdesc.Length - 1, 1)).ToUpper();
                isRecord = 0;
                temporary_list_array.Clear();
                ConnectionWithAccess.query = "select s_a from " + ConnectionWithAccess.tablename[1] + " f1 where a_n = '" + tbA_N.Text + "' and s_a like '" + tbS_A.Text + "%' order by s_a";
                DataTable dtData1 = ConnectionCommand.fGetDataTable();
                if (dtData1 != null && dtData1.Rows.Count > 0)
                {
                    for (int iRowCount = 0; iRowCount < dtData1.Rows.Count; iRowCount++)
                    {
                        temporary_list_array.Add(dtData1.Rows[iRowCount][0].ToString().Substring(2, 1));
                    }
                }
                if (temporary_list_array.Count() >= 1)
                {
                    temporary_list_array.Sort();
                    temp_count = temporary_list_array.Count() - 1;
                    temp_word = temporary_list_array[temp_count];
                    temp_word = temp_word.Substring(0, temp_word.Length - 1);
                    temp_word2 = temporary_list_array[temp_count].Substring(temp_word.Length, (temporary_list_array[temp_count].Length - temp_word.Length));
                    if (temp_word2 == "9")
                        temp_word2 = "@";
                    char c = Convert.ToChar(temp_word2);
                    asc_value = Convert.ToInt32(c);
                    c = Convert.ToChar(asc_value + 1);
                    temp_word2 = c.ToString();
                    tbS_A.Text = temp_word + temp_word2;
                }
                else
                    tbS_A.Text = tbS_A.Text + "1";
            }
        }

        private void find_new_delivery_s_a(string ma_n, string ms_a, string tbdelivery)
        {
            if (tbdelivery.Contains(" "))
            {
                int aaa = tbdelivery.IndexOf(" ");
                tbd_y.Text = (tbdelivery.Substring(0, 1) + tbdelivery.Substring(aaa - 1, 1)).ToUpper();
            }
            else
                tbd_y.Text = (tbdelivery.Substring(0, 1) + tbdelivery.Substring(tbdelivery.Length - 1, 1)).ToUpper();
            isRecord = 0;
            ConnectionWithAccess.query = "select d_y from " + ConnectionWithAccess.tablename[1] + " f1 where a_n = '" + tbA_N.Text + "' and s_a = '" + tbS_A.Text + "' and d_y like '" + tbd_y.Text + "%'";
            DataTable dtData1 = ConnectionCommand.fGetDataTable();
            if (dtData1 != null && dtData1.Rows.Count > 0)
            {
                for (int iRowCount = 0; iRowCount < dtData1.Rows.Count; iRowCount++)
                {
                    temporary_list_array.Add(dtData1.Rows[iRowCount][0].ToString());
                }
            }
            if (temporary_list_array.Count() >= 1)
            {
                temporary_list_array.Sort();
                temp_count = temporary_list_array.Count() - 1;
                temp_word = temporary_list_array[temp_count];
                temp_word = temp_word.Substring(0, temp_word.Length - 1);
                temp_word2 = temporary_list_array[temp_count].Substring(temp_word.Length, (temporary_list_array[temp_count].Length - temp_word.Length));
                if (temp_word2 == "9")
                    temp_word2 = "@";
                char c = Convert.ToChar(temp_word2);
                asc_value = Convert.ToInt32(c);
                c = Convert.ToChar(asc_value + 1);
                temp_word2 = c.ToString();
                tbd_y.Text = temp_word + temp_word2;
            }
            else
                tbd_y.Text = tbd_y.Text + "1";
        }

        private void find_new_item_code()
        {
            master_item_help.Visible = false;
            temporary_list_array.Clear();
            ConnectionWithAccess.query = "select item_code from " + ConnectionWithAccess.tablename[05];
            DataTable dtData1 = ConnectionCommand.fGetDataTable();
            if (dtData1 != null && dtData1.Rows.Count > 0)
            {
                for (int iRowCount = 0; iRowCount < dtData1.Rows.Count; iRowCount++)
                {
                    temporary_list_array.Add(dtData1.Rows[iRowCount][0].ToString());
                }
                for (int i = 0; i < temporary_list_array.Count; i++)
                {
                    check_data_type(temporary_list_array[i].Trim());
                    if (data_type == "Numeric")
                    {
                        if (Convert.ToInt32(temporary_list_array[i].Trim()) > temp_int)
                            temp_int = Convert.ToInt32(temporary_list_array[i].Trim());
                    }
                }
                tbItemCode.Text = Convert.ToString(temp_int + 1);
            }
            else
                tbItemCode.Text = "1";
        }

        private void find_new_additional_a_n(string ma_n)
        {
            isRecord = 0;
            temporary_list_array.Clear();
            ConnectionWithAccess.query = "select a_n from " + ConnectionWithAccess.tablename[1] + " where a_n like '" + ConnectionWithAccess.fix_account_a_n + "%' and s_a ='@@@'";
            DataTable dtData1 = ConnectionCommand.fGetDataTable();
            if (dtData1 != null && dtData1.Rows.Count > 0)
                isRecord = 1;
            if (isRecord == 1)
            {
                for (int iRowCount = 0; iRowCount < dtData1.Rows.Count; iRowCount++)
                {
                    temporary_list_array.Add(dtData1.Rows[iRowCount][0].ToString());
                }
                for (int i = 0; i < temporary_list_array.Count; i++)
                {
                    check_data_type(temporary_list_array[i].Trim());
                    if (data_type == "Numeric")
                    {
                        if (Convert.ToInt32(temporary_list_array[i].Trim()) > temp_int)
                            temp_int = Convert.ToInt32(temporary_list_array[i].Trim());
                    }
                }
                ConnectionWithAccess.new_additional_a_n = ConnectionWithAccess.fix_account_a_n + Convert.ToString(temp_int + 1);
            }
            else
                ConnectionWithAccess.new_additional_a_n = ConnectionWithAccess.fix_account_a_n + "1";
        }

        private void find_new_tax_code()
        {
            master_item_help.Visible = false;
            temporary_list_array.Clear();
            ConnectionWithAccess.query = "select tx_code from " + ConnectionWithAccess.tablename[6] + " where d_c = " + cb_tax_d_c.Text;
            DataTable dtData1 = ConnectionCommand.fGetDataTable();
            if (dtData1 != null && dtData1.Rows.Count > 0)
                isRecord = 1;
            temp_int = 0;
            if (isRecord == 1)
            {
                for (int iRowCount = 0; iRowCount < dtData1.Rows.Count; iRowCount++)
                {
                    temporary_list_array.Add(dtData1.Rows[iRowCount][0].ToString());
                }
                for (int i = 0; i < temporary_list_array.Count; i++)
                {
                    check_data_type(temporary_list_array[i].Trim());
                    if (data_type == "Numeric")
                    {
                        if (Convert.ToInt32(temporary_list_array[i].Trim()) > temp_int)
                            temp_int = Convert.ToInt32(temporary_list_array[i].Trim());
                    }
                }
                tbTaxCode.Text = Convert.ToString(temp_int + 1);
            }
            else
                tbTaxCode.Text = "1";
        }

        private int find_new_d_c(string book)
        {
            isRecord = 0;
            temporary_list_array.Clear();
            if (book == "S")
                ConnectionWithAccess.query = "select d_c from " + ConnectionWithAccess.tablename[21] + " f1 where d_n = 999999";
            else if (book == "P")
                ConnectionWithAccess.query = "select d_c from " + ConnectionWithAccess.tablename[22] + " f1 where d_n = 999999";
            else if (book == "B")
                ConnectionWithAccess.query = "select d_c from " + ConnectionWithAccess.tablename[23] + " f1 where d_n = 999999";
            else if (book == "C")
                ConnectionWithAccess.query = "select d_c from " + ConnectionWithAccess.tablename[24] + " f1 where d_n = 999999";
            DataTable dtData1 = ConnectionCommand.fGetDataTable();
            if (dtData1 != null && dtData1.Rows.Count > 0)
            {
                for (int iRowCount = 0; iRowCount < dtData1.Rows.Count; iRowCount++)
                {
                    temporary_list_array.Add(dtData1.Rows[iRowCount][0].ToString());
                }
            }
            if (temporary_list_array.Count() >= 1)
            {
                temporary_list_array.Sort();
                temp_count = temporary_list_array.Count() - 1;
                temp_int = Convert.ToInt32(temporary_list_array[temp_count]);
                if (book == "S")
                {
                    if (temp_int < 10)
                        temp_int += 10;
                    else
                        temp_int++;
                }
                else if (book == "P")
                {
                    if (temp_int < 20)
                        temp_int += 20;
                    else
                        temp_int++;
                }
                else if (book == "B")
                {
                    if (temp_int < 30)
                        temp_int += 30;
                    else
                        temp_int++;
                }
                else if (book == "C")
                {
                    if (temp_int < 40)
                        temp_int += 40;
                    else
                        temp_int++;
                }
            }
            return temp_int;
        }

        private void find_item_name_in_05(string mtitle)
        {
            mfound = "N";
            ConnectionWithAccess.query = "select item_code from " + ConnectionWithAccess.tablename[05] + " where [title] = '" + mtitle.Trim() + "'";
            DataTable dtData1 = ConnectionCommand.fGetDataTable();
            if (dtData1 != null && dtData1.Rows.Count > 0)
            {
                mfound = "Y";
            }
        }
        #endregion

        # region insert_data
        private void add_update_user()
        {
            if (tbUserName != null)
            {
                isRecord = 0;
                ConnectionWithAccess.query = "select f1 from " + ConnectionWithAccess.tablename[52] + " f52 where f1 = '" + tbUserName.Text + "'";
                DataTable dtData1 = ConnectionCommand.fGetDataTable();
                if (dtData1 != null && dtData1.Rows.Count > 0)
                    isRecord = 1;

                if (isRecord == 1)
                {
                    readusersettingsfromscreen();
                    if (tbnewPassword.Text != "")
                        ConnectionWithAccess.query = "update " + ConnectionWithAccess.tablename[52] + " set f2 = '" + tbnewPassword.Text + "', f3 = '" + ConnectionWithAccess.mUserFeatures + "' where f1 = '" + tbUserName.Text + "'";
                    else
                        ConnectionWithAccess.query = "update " + ConnectionWithAccess.tablename[52] + " set f2 = '" + tbPassword.Text + "', f3 = '" + ConnectionWithAccess.mUserFeatures + "' where f1 = '" + tbUserName.Text + "'";
                    ConnectionCommand.fUpdateInsertDeleteData();
                }
                else
                {
                    readusersettingsfromscreen();
                    ConnectionWithAccess.query = "insert into " + ConnectionWithAccess.tablename[52] + " (f1,f2,f3) values ('" + tbUserName.Text + "', '" + tbPassword.Text + "','" + ConnectionWithAccess.mUserFeatures + "')";
                    ConnectionCommand.fUpdateInsertDeleteData();
                }
                ClearAllUserSettings();
                refresh_UserListDG();
                tbUserName.Text = "";
                tbPassword.Text = "";
            }
        }

        private void save_master_item()
        {
            if (string.IsNullOrEmpty(tbItemCode.Text.Trim()) && !string.IsNullOrEmpty(tbTitle.Text.Trim()))
                find_new_item_code();

            if (!string.IsNullOrEmpty(tbItemCode.Text.Trim()) && !string.IsNullOrEmpty(tbTitle.Text.Trim()))
            {
                if (cb_item_in_use.SelectedIndex == -1)
                    cb_item_in_use.SelectedIndex = 0;
                if (tbItemType.Text == "")
                    tbItemType.Text = "F";
                if (tb_igst_tax_rate.Text == "")
                    tb_igst_tax_rate.Text = "0.00";
                if (tb_hsn_code.Text == "")
                    tb_hsn_code.Text = "0";
                if (tb_item_open_stock.Text == "")
                    tb_item_open_stock.Text = "0";
                if (tb_purc_price.Text == "")
                    tb_purc_price.Text = "0";
                if (tbCB.Text == "0")
                    tbCB.Text = "1";
                if (tbBQ.Text == "0")
                    tbBQ.Text = "1";
                if (tbMinStock.Text == "")
                    tbMinStock.Text = "0";
                if (tb_item_moq.Text == "")
                    tb_item_moq.Text = "0";
                if (tb_item_pitch.Text == "")
                    tb_item_pitch.Text = "0";

                if (!cb_change_item_name.Checked)
                {
                    isRecord = 0;
                    ConnectionWithAccess.query = "select [type],item_code from " + ConnectionWithAccess.tablename[05] + " where [title] = '" + tbTitle.Text + "'";
                    DataTable dtData1 = ConnectionCommand.fGetDataTable();
                    if (dtData1 != null && dtData1.Rows.Count > 0)
                        isRecord = 1;

                    if (isRecord == 0)
                    {
                        find_new_item_code();
                        tbTitle.Text = tbTitle.Text.Trim();
                        ConnectionWithAccess.query = "insert into " + ConnectionWithAccess.tablename[05] + " ([type],item_code,[title],p_price,price,packing,box,cat,opn_stk,clo_stk,igst_per,hsn_code, [unused],printed,pitch,length_size,breadth_size,RORD_QTY,location, [user], insert_dt_tm) values('" + tbItemType.Text + "','" + tbItemCode.Text + "','" + tbTitle.Text.ToUpper() + "', " + tb_purc_price.Text + " , " + tbItemRate.Text + " , " + tbCB.Text + " , " + tbBQ.Text + " , '" + cbItemUnit.Text + "', " + tb_item_open_stock.Text + " , " + tbCurStock.Text + " , " + tb_igst_tax_rate.Text + " , " + tb_hsn_code.Text + ", '" + cb_item_in_use.SelectedIndex.ToString() + "', '" + tb_item_printed.Text + "', '" + tb_item_pitch.Text + "', '" + tb_item_length.Text + "', '" + tb_item_breadth.Text + "', '" + tb_item_moq.Text + "', '" + cb_item_location.Text + "', '" + ConnectionWithAccess.muser + "', @currDate )";
                        add_user_date_time_function_compulsory_program();
                        ConnectionCommand.fUpdateInsertDeleteData();
                        fLoad_Item_Master_List();
                    }
                    else
                    {
                        ConnectionWithAccess.query = "update " + ConnectionWithAccess.tablename[05] + " set [type] = '" + tbItemType.Text + "', item_code = '" + tbItemCode.Text + "', price = " + tbItemRate.Text + " , packing = " + tbCB.Text + " , box = " + tbBQ.Text + " , cat = '" + cbItemUnit.Text + "' , opn_stk = " + tb_item_open_stock.Text + " , clo_stk = " + (Convert.ToDouble(tbCurStock.Text) - temp_double + Convert.ToDouble(tb_item_open_stock.Text)).ToString() + " , igst_per = " + tb_igst_tax_rate.Text + " , hsn_code = " + tb_hsn_code.Text + " , p_price = " + tb_purc_price.Text + ", [unused] = " + cb_item_in_use.SelectedIndex.ToString() + ", printed = '" + tb_item_printed.Text + "', pitch = " + tb_item_pitch.Text + ", length_size = " + tb_item_length.Text + ", breadth_size = " + tb_item_breadth.Text + ", RORD_QTY = " + tb_item_moq.Text + ", RORD_LVL = " + tbMinStock.Text + ", location = '" + cb_item_location.Text + "', [user] = '" + ConnectionWithAccess.muser + "', insert_dt_tm = @currDate where [title] = '" + tbTitle.Text + "'";
                        add_user_date_time_function_compulsory_program();
                        ConnectionCommand.fUpdateInsertDeleteData();
                        fLoad_Item_Master_List();
                    }
                }
                else
                {
                    isRecord = 0;
                    ConnectionWithAccess.query = "select 1 from " + ConnectionWithAccess.tablename[05] + " where [title] = '" + tbTitle.Text + "'";
                    DataTable dtData1 = ConnectionCommand.fGetDataTable();
                    if (dtData1 != null && dtData1.Rows.Count > 0)
                        isRecord = 1;

                    if (isRecord == 0)
                    {
                        ConnectionWithAccess.query = "update " + ConnectionWithAccess.tablename[05] + " set [title] = '" + tbTitle.Text + "' where [type] = '" + tbItemType.Text + "' and [item_code] = '" + tbItemCode.Text + "'";
                        ConnectionCommand.fUpdateInsertDeleteData();
                        ConnectionWithAccess.query = "update " + ConnectionWithAccess.tablename[03] + " set [title] = '" + tbTitle.Text + "' where [type] = '" + tbItemType.Text + "' and [item_code] = '" + tbItemCode.Text + "'";
                        ConnectionCommand.fUpdateInsertDeleteData();
                        ConnectionWithAccess.query = "update " + ConnectionWithAccess.tablename[16] + " set [title] = '" + tbTitle.Text + "' where [type] = '" + tbItemType.Text + "' and [item_code] = '" + tbItemCode.Text + "'";
                        ConnectionCommand.fUpdateInsertDeleteData();
                        ConnectionWithAccess.query = "update " + ConnectionWithAccess.tablename[18] + " set [title] = '" + tbTitle.Text + "' where [type] = '" + tbItemType.Text + "' and [item_code] = '" + tbItemCode.Text + "'";
                        ConnectionCommand.fUpdateInsertDeleteData();
                        fLoad_Item_Master_List();
                    }
                    else
                        MessageBox.Show("Sorry, Item Name already Exists");
                }
            }
            cb_change_item_name.Checked = false;
        }

        private void insert_master_tax()
        {
            isRecord = 0;
            ConnectionWithAccess.query = "select tax_rate,[desc] from " + ConnectionWithAccess.tablename[6] + " where d_c = " + cb_tax_d_c.Text + " and tx_code = " + tbTaxCode.Text;
            DataTable dtData1 = ConnectionCommand.fGetDataTable();
            if (dtData1 != null && dtData1.Rows.Count > 0)
                isRecord = 1;

            if (isRecord == 0)
            {
                find_new_tax_code();
                ConnectionWithAccess.query = "insert into " + ConnectionWithAccess.tablename[6] + " (d_c,tx_code,[desc],tax_rate, [user], insert_dt_tm) values(" + cb_tax_d_c.Text + " , " + tbTaxCode.Text + " ,'" + tbTaxDesc.Text + "'," + tbTaxRate.Text + ",'" + ConnectionWithAccess.muser + "', @currDate )";
                add_user_date_time_function_compulsory_program();
                ConnectionCommand.fUpdateInsertDeleteData();
            }
            else
            {
                ConnectionWithAccess.query = "update " + ConnectionWithAccess.tablename[6] + " set [desc] = '" + tbTaxDesc.Text + "', tax_rate = " + tbTaxRate.Text + " , a_n = '" + cb_tax_transfer_account.Text + "' where d_c = " + cb_tax_d_c.Text + " and tx_code = " + tbTaxCode.Text;
                ConnectionCommand.fUpdateInsertDeleteData();
            }
        }

        private void insert_master_daybook_code()
        {
            if (cbAction.SelectedIndex == 0)
            {
                isRecord = 0;
                ConnectionWithAccess.query = "select d_c,a_n from " + ConnectionWithAccess.tablename[21] + " where d_c = " + tbDBC.Text + " and d_n = 999999";
                DataTable dtData1 = ConnectionCommand.fGetDataTable();
                if (dtData1 != null && dtData1.Rows.Count > 0)
                    isRecord = 1;

                if (isRecord == 0)
                {
                    ConnectionWithAccess.query = "insert into " + ConnectionWithAccess.tablename[21] + " (d_c,a_n,s_a,d_y,d_n,d_d,b_t, [user], insert_dt_tm) values(" + tbDBC.Text + " , '" + cb_transfer_account.Text + "', '@@@','@@@', 999999, '01/01/1901', '1'" + ",'" + ConnectionWithAccess.muser + "', @currDate )";
                    add_user_date_time_function_compulsory_program();
                    ConnectionCommand.fUpdateInsertDeleteData();
                }
                else
                {
                    ConnectionWithAccess.query = "update " + ConnectionWithAccess.tablename[21] + " set a_n = '" + cb_transfer_account.Text + "', s_a = '@@@', d_y = '@@@', d_d = '01/01/1901',  b_t = '1' where d_c = " + tbDBC.Text + " and d_n = 999999";
                    ConnectionCommand.fUpdateInsertDeleteData();
                }
            }
            else if (cbAction.SelectedIndex == 1)
            {
                isRecord = 0;
                ConnectionWithAccess.query = "select d_c,a_n from " + ConnectionWithAccess.tablename[22] + " where d_c = " + tbDBC.Text + " and d_n = 999999";
                DataTable dtData1 = ConnectionCommand.fGetDataTable();
                if (dtData1 != null && dtData1.Rows.Count > 0)
                    isRecord = 1;

                if (isRecord == 0)
                {
                    ConnectionWithAccess.query = "insert into " + ConnectionWithAccess.tablename[22] + " (d_c,a_n,s_a,d_n,d_d,b_t, [user], insert_dt_tm) values(" + tbDBC.Text + " , '" + cb_transfer_account.Text + "', '@@@', 999999, '01/01/1901', '1'" + ",'" + ConnectionWithAccess.muser + "', @currDate )";
                    add_user_date_time_function_compulsory_program();
                    ConnectionCommand.fUpdateInsertDeleteData();
                }
                else
                {
                    ConnectionWithAccess.query = "update " + ConnectionWithAccess.tablename[22] + " set a_n = '" + cb_transfer_account.Text + "', s_a = '@@@', d_y = '@@@', d_d = '01/01/1901',  b_t = '1' where d_c = " + tbDBC.Text + " and d_n = 999999";
                    ConnectionCommand.fUpdateInsertDeleteData();
                }
            }
            else if (cbAction.SelectedIndex == 2)
            {
                isRecord = 0;
                ConnectionWithAccess.query = "select d_c,a_n from " + ConnectionWithAccess.tablename[23] + " where d_c = " + tbDBC.Text + " and d_n = 999999";
                DataTable dtData1 = ConnectionCommand.fGetDataTable();
                if (dtData1 != null && dtData1.Rows.Count > 0)
                    isRecord = 1;

                if (isRecord == 0)
                {
                    ConnectionWithAccess.query = "insert into " + ConnectionWithAccess.tablename[23] + " (d_c,a_n,s_a,d_n,d_d,b_t,mess, [user], insert_dt_tm) values(" + tbDBC.Text + " , '" + cb_transfer_account.Text + "', '@@@', 999999, '01/01/1901', '1', '" + tbbank_accnumber.Text.Trim() + "'" + ",'" + ConnectionWithAccess.muser + "', @currDate )";
                    add_user_date_time_function_compulsory_program();
                    ConnectionCommand.fUpdateInsertDeleteData();
                }
                else
                {
                    ConnectionWithAccess.query = "update " + ConnectionWithAccess.tablename[23] + " set a_n = '" + cb_transfer_account.Text + "', s_a = '@@@', d_y = '@@@', d_d = '01/01/1901',  b_t = '1', mess = '" + tbbank_accnumber.Text.Trim() + "' where d_c = " + tbDBC.Text + " and d_n = 999999";
                    ConnectionCommand.fUpdateInsertDeleteData();
                }
            }
            else if (cbAction.SelectedIndex == 3)
            {
                isRecord = 0;
                ConnectionWithAccess.query = "select d_c,a_n from " + ConnectionWithAccess.tablename[24] + " where d_c = " + tbDBC.Text + " and d_n = 999999";
                DataTable dtData1 = ConnectionCommand.fGetDataTable();
                if (dtData1 != null && dtData1.Rows.Count > 0)
                    isRecord = 1;
                if (isRecord == 0)
                {
                    ConnectionWithAccess.query = "insert into " + ConnectionWithAccess.tablename[24] + " (d_c,a_n,s_a,d_n,d_d,b_t) values(" + tbDBC.Text + " , '" + cb_transfer_account.Text + "', '@@@', 999999, '01/01/1901', '1')";
                    ConnectionCommand.fUpdateInsertDeleteData();
                }
                else
                {
                    ConnectionWithAccess.query = "update " + ConnectionWithAccess.tablename[24] + " set a_n = '" + cb_transfer_account.Text + "', s_a = '@@@', d_y = '@@@', d_d = '01/01/1901',  b_t = '1' where d_c = " + tbDBC.Text + " and d_n = 999999";
                    ConnectionCommand.fUpdateInsertDeleteData();
                }
            }
            else if (cbAction.SelectedIndex == 4)
            {
                isRecord = 0;
                ConnectionWithAccess.query = "select d_c,a_n from " + ConnectionWithAccess.tablename[25] + " where d_c = " + tbDBC.Text + " and d_n = 999999";
                DataTable dtData1 = ConnectionCommand.fGetDataTable();
                if (dtData1 != null && dtData1.Rows.Count > 0)
                    isRecord = 1;
                if (isRecord == 0)
                {
                    ConnectionWithAccess.query = "insert into " + ConnectionWithAccess.tablename[25] + " (d_c,a_n,s_a,d_n,d_d,b_t) values(" + tbDBC.Text + " , '', '@@@', 999999, '01/01/1901', '1')";
                    ConnectionCommand.fUpdateInsertDeleteData();
                }
                //else
                //{
                //    ConnectionWithAccess.query = "update " + ConnectionWithAccess.tablename[25] + " set a_n = '" + cb_transfer_account.Text + "', s_a = '@@@', d_y = '@@@', d_d = '01/01/1901',  b_t = '1' where d_c = " + tbDBC.Text + " and d_n = 999999";
                //    ConnectionCommand.fUpdateInsertDeleteData();
                //}
            }
            else if (cbAction.SelectedIndex == 5)
            {
                isRecord = 0;
                ConnectionWithAccess.query = "select d_c,a_n from " + ConnectionWithAccess.tablename[30] + " where d_c = " + tbDBC.Text + " and d_n = 999999";
                DataTable dtData1 = ConnectionCommand.fGetDataTable();
                if (dtData1 != null && dtData1.Rows.Count > 0)
                    isRecord = 1;
                if (isRecord == 0)
                {
                    ConnectionWithAccess.query = "insert into " + ConnectionWithAccess.tablename[30] + " (d_c,a_n,s_a,d_n,d_d,b_t, [user], insert_dt_tm) values(" + tbDBC.Text + " , '" + cb_transfer_account.Text + "', '@@@', 999999, '01/01/1901', '1'" + ",'" + ConnectionWithAccess.muser + "', @currDate )";
                    add_user_date_time_function_compulsory_program();
                    ConnectionCommand.fUpdateInsertDeleteData();
                }
                else
                {
                    ConnectionWithAccess.query = "update " + ConnectionWithAccess.tablename[30] + " set a_n = '" + cb_transfer_account.Text + "', s_a = '@@@', d_d = '01/01/1901',  b_t = '1' where d_c = " + tbDBC.Text + " and d_n = 999999";
                    ConnectionCommand.fUpdateInsertDeleteData();
                }
            }
            else if (cbAction.SelectedIndex == 6)
            {
                isRecord = 0;
                ConnectionWithAccess.query = "select d_c,a_n from " + ConnectionWithAccess.tablename[7] + " where d_c = " + tbDBC.Text + " and d_n = 999999";
                DataTable dtData1 = ConnectionCommand.fGetDataTable();
                if (dtData1 != null && dtData1.Rows.Count > 0)
                    isRecord = 1;

                if (isRecord == 0)
                {
                    ConnectionWithAccess.query = "insert into " + ConnectionWithAccess.tablename[7] + " (d_c,a_n,s_a,d_n,d_d,b_t, [user], insert_dt_tm) values(" + tbDBC.Text + " , '" + cb_transfer_account.Text + "', '', 999999, '01/01/1901', '1'" + ",'" + ConnectionWithAccess.muser + "', @currDate )";
                    add_user_date_time_function_compulsory_program();
                    ConnectionCommand.fUpdateInsertDeleteData();
                }
                else
                {
                    ConnectionWithAccess.query = "update " + ConnectionWithAccess.tablename[7] + " set a_n = '" + cb_transfer_account.Text + "', d_d = '01/01/1901',  b_t = '1' where d_c = " + tbDBC.Text + " and d_n = 999999";
                    ConnectionCommand.fUpdateInsertDeleteData();
                }
            }
            else if (cbAction.SelectedIndex == 7)
            {
                isRecord = 0;
                ConnectionWithAccess.query = "select d_c,a_n from " + ConnectionWithAccess.tablename[22] + " where d_c = " + tbDBC.Text + " and d_n = 9999999999";
                DataTable dtData1 = ConnectionCommand.fGetDataTable();
                if (dtData1 != null && dtData1.Rows.Count > 0)
                    isRecord = 1;

                if (isRecord == 0)
                {
                    ConnectionWithAccess.query = "insert into " + ConnectionWithAccess.tablename[22] + " (d_c,a_n,s_a,d_n,d_d,b_t, [user], insert_dt_tm) values(" + tbDBC.Text + " , '" + cb_transfer_account.Text + "', '@@@', 99999999, '01/01/1901', '1'" + ",'" + ConnectionWithAccess.muser + "', @currDate )";
                    add_user_date_time_function_compulsory_program();
                    ConnectionCommand.fUpdateInsertDeleteData();
                }
                else
                {
                    ConnectionWithAccess.query = "update " + ConnectionWithAccess.tablename[22] + " set a_n = '" + cb_transfer_account.Text + "', s_a = '@@@', d_y = '@@@', d_d = '01/01/1901',  b_t = '1' where d_c = " + tbDBC.Text + " and d_n = 999999999";
                    ConnectionCommand.fUpdateInsertDeleteData();
                }
            }
        }

        private void add_new_book(string book, string ma_n, string ms_a, string mdesc, string mcity)
        {
            ConnectionWithAccess.md_c = 0;
            ConnectionWithAccess.query = "insert into " + ConnectionWithAccess.tablename[1] + " (r_c, a_n,s_a,d_y,[desc], city,country,pin,bst,aadhar_card,dist,gst_number,state) values('3','" + tbA_N.Text + "', '" + tbS_A.Text + "' , '" + tbd_y.Text + "' , '" + tbDesc.Text + "', '" + tbCity.Text + "', '" + tbcountry.Text + "', '" + tbPincode.Text + "' ,'','" + tbadharcard.Text + "','" + tbdistrict.Text + "', '" + tbgst_number.Text + "', '" + tbstate.Text + "')";
            ConnectionCommand.fUpdateInsertDeleteData();
            ConnectionWithAccess.md_c = find_new_d_c(book);
            if (book == "S")
            {
                ConnectionWithAccess.query = "insert into " + ConnectionWithAccess.tablename[21] + " (d_c,a_n,s_a,d_n,d_d,b_t, [user], insert_dt_tm) values(" + ConnectionWithAccess.md_c + " , '" + ma_n + "', '" + ms_a + "', 999999, '01/01/1901', '1'" + ",'" + ConnectionWithAccess.muser + "', @currDate )";
            }
            else if (book == "P")
            {
                ConnectionWithAccess.query = "insert into " + ConnectionWithAccess.tablename[22] + " (d_c,a_n,s_a,d_n,d_d,b_t, [user], insert_dt_tm) values(" + ConnectionWithAccess.md_c + " , '" + ma_n + "', '" + ms_a + "', 999999, '01/01/1901', '1'" + ",'" + ConnectionWithAccess.muser + "', @currDate )";
            }
            else if (book == "B")
            {
                ConnectionWithAccess.query = "insert into " + ConnectionWithAccess.tablename[23] + " (d_c,a_n,s_a,d_n,d_d,b_t, [user], insert_dt_tm) values(" + ConnectionWithAccess.md_c + " , '" + ma_n + "', '" + ms_a + "', 999999, '01/01/1901', '1'" + ",'" + ConnectionWithAccess.muser + "', @currDate )";
            }
            else if (book == "C")
            {
                ConnectionWithAccess.query = "insert into " + ConnectionWithAccess.tablename[24] + " (d_c,a_n,s_a,d_n,d_d,b_t, [user], insert_dt_tm) values(" + ConnectionWithAccess.md_c + " , '" + ma_n + "', '" + ms_a + "', 999999, '01/01/1901', '1'" + ",'" + ConnectionWithAccess.muser + "', @currDate )";
            }
            add_user_date_time_function_compulsory_program();
            ConnectionCommand.fUpdateInsertDeleteData();
        }

        private void add_update_record_in_01_and_04(string ma_n, string ms_a, string md_y, string mdesc, string mcity)
        {
            if (cb_account_inactive.SelectedIndex == -1)
                cb_account_inactive.SelectedIndex = 0;
            if (ma_n != "" && mdesc != "")
            {
                mvalid = true;
                if (tbgst_number.Text.Trim().Length > 3)
                {
                    if (!fValidateGSTNumberFormat(tbgst_number.Text.Trim()))
                    {
                        tbgst_number.BackColor = Color.Red;
                        //MessageBox.Show("Invalid GST Number");
                        //e.Cancel = true;
                        mvalid = false;
                    }
                }
                if (mvalid == true)
                {
                    if (ms_a == null || ms_a == "" || ms_a == "''")
                        ms_a = "@@@";
                    if (md_y == null || md_y == "" || md_y == "''")
                        md_y = "@@@";
                    if (md_y == "@@@")
                    {
                        isRecord = 0;
                        if (cb_change_master_account_name.Checked)
                            ConnectionWithAccess.query = "select s_a from " + ConnectionWithAccess.tablename[1] + " where a_n = '" + ma_n + "' and s_a = '" + ms_a + "'";
                        else
                        {
                            if (mcity == "")
                                ConnectionWithAccess.query = "select s_a from " + ConnectionWithAccess.tablename[1] + " where a_n = '" + ma_n + "' and [DESC] = '" + mdesc + "' and s_a = '" + ms_a + "'";
                            else
                                ConnectionWithAccess.query = "select s_a from " + ConnectionWithAccess.tablename[1] + " where a_n = '" + ma_n + "' and [desc] = '" + mdesc + "' and city = '" + mcity + "'";
                        }
                        DataTable dtData1 = ConnectionCommand.fGetDataTable();
                        if (dtData1 != null && dtData1.Rows.Count > 0)
                        {
                            if (dtData1.Rows[0][0] != null)
                                isRecord = 1;
                        }
                        if (isRecord == 0)
                        {
                            //if (ma_n.Substring(0, 1) == "6" || ma_n.Substring(0, 1) == "7")
                            //{
                            //    //find_new_name_s_a(ma_n, mdesc);
                            //    //ma_n = ma_n.Trim() + ms_a.Trim();
                            //    ms_a = "@@@";
                            //    md_y = "@@@";
                            //}
                            if (cbParent.Text == "FIXED ASSETS" || cbParent.Text == "INVESTMENTS" || cbParent.Text == "CURRENT ASSETS" || cbParent.Text == "CURRENT LIABIALITIES")
                            {
                                //find_new_name_a_n(ma_n, mdesc);
                                ms_a = "@@@";
                                md_y = "@@@";
                            }
                            else if (cbParent.Text == "INCOMES/EXPENSES(P&L A/c.)" || cbParent.Text == "INCOMES/EXPENSES(TRADING A/c.)")
                            {
                                if (tbdelivery.Text == "")
                                {
                                    find_new_name_a_n(ma_n, mdesc);
                                    ma_n = tbA_N.Text;
                                    ms_a = "@@@";
                                    md_y = "@@@";
                                }
                                else
                                {
                                    ms_a = find_new_name_s_a(ma_n, mdesc);
                                    md_y = "@@@";
                                }
                            }
                            else if (ma_n.Length >= 4)
                            {
                                if (ma_n.Substring(0, 4) == "2002" || ma_n.Substring(0, 4) == "4002" || ma_n == "3555")
                                {
                                    ms_a = find_new_name_s_a(ma_n, mdesc);
                                    md_y = "@@@";
                                }
                            }
                            else
                            {

                                if (ms_a == "" || ms_a == "@@@")
                                    ms_a = find_new_name_s_a(ma_n, mdesc);
                                md_y = "@@@";
                            }
                            tbS_A.Text = ms_a;
                            tbd_y.Text = md_y;
                            if (ms_a != "")
                            {
                                ConnectionWithAccess.query = "insert into " + ConnectionWithAccess.tablename[1] + " (r_c, a_n,s_a,d_y,[desc], city,country,pin,bst,aadhar_card,dist,gst_number,state,prop,un_used, [user], insert_dt_tm) values('3','" + ma_n + "', '" + ms_a + "' , '" + md_y + "' , '" + ConnectionWithAccess.remove_filename_error(mdesc) + "', '" + mcity + "', '" + tbcountry.Text + "', '" + tbPincode.Text + "' ,'','" + tbadharcard.Text + "','" + tbdistrict.Text + "', '" + tbgst_number.Text + "', '" + tbstate.Text + "', '" + tb_prop.Text + "', '" + cb_account_inactive.SelectedIndex.ToString() + "','" + ConnectionWithAccess.muser + "', @currDate )";
                                add_user_date_time_function_compulsory_program();
                                ConnectionCommand.fUpdateInsertDeleteData();
                            }
                        }
                        else
                        {
                            if (cb_change_master_account_name.Checked == true)
                                ConnectionWithAccess.query = "update " + ConnectionWithAccess.tablename[1] + " set [desc] = '" + ConnectionWithAccess.remove_filename_error(mdesc) + "', city = '" + mcity + "', country = '" + tbcountry.Text + "', pin = '" + tbPincode.Text + "' , aadhar_card = '" + tbadharcard.Text + "' , dist = '" + tbdistrict.Text + "' , gst_number = '" + tbgst_number.Text + "', pan = '" + tbpan.Text + "', state = '" + tbstate.Text + "', prop = '" + tb_prop.Text + "', un_used = '" + cb_account_inactive.SelectedIndex.ToString() + "' where a_n = '" + ma_n + "' and s_a = '" + ms_a + "'";
                            else
                            {
                                if (cb_add_new_account.Checked == false)
                                    ConnectionWithAccess.query = "update " + ConnectionWithAccess.tablename[1] + " set city = '" + mcity + "', country = '" + tbcountry.Text + "', pin = '" + tbPincode.Text + "' , aadhar_card = '" + tbadharcard.Text + "' , dist = '" + tbdistrict.Text + "' , gst_number = '" + tbgst_number.Text + "', pan = '" + tbpan.Text + "', state = '" + tbstate.Text + "', prop = '" + tb_prop.Text + "', un_used = '" + cb_account_inactive.SelectedIndex.ToString() + "' where a_n = '" + ma_n + "' and s_a = '" + ms_a + "'";
                                else
                                    ConnectionWithAccess.query = "update " + ConnectionWithAccess.tablename[1] + " set city = '" + mcity + "', country = '" + tbcountry.Text + "', pin = '" + tbPincode.Text + "' , aadhar_card = '" + tbadharcard.Text + "' , dist = '" + tbdistrict.Text + "' , gst_number = '" + tbgst_number.Text + "', pan = '" + tbpan.Text + "', state = '" + tbstate.Text + "', prop = '" + tb_prop.Text + "', un_used = '" + cb_account_inactive.SelectedIndex.ToString() + "' where a_n = '" + ma_n + "' and [DESC] = '" + mdesc + "' and city = '" + mcity + "'";
                            }
                            ConnectionCommand.fUpdateInsertDeleteData();
                        }
                        isRecord = 0;
                        ConnectionWithAccess.query = "select 1 from " + ConnectionWithAccess.tablename[4] + " where a_n = '" + ma_n + "' and s_a = '" + ms_a + "' and d_y = '" + md_y + "'";
                        dtData1 = ConnectionCommand.fGetDataTable();
                        if (dtData1 != null && dtData1.Rows.Count > 0)
                        {
                            if (dtData1.Rows[0][0] != null)
                            {
                                isRecord = 1;
                            }
                        }
                        if (isRecord == 0)
                            ConnectionWithAccess.query = "insert into " + ConnectionWithAccess.tablename[4] + " (a_n,s_a,d_y,city,add1,add2,add3,tin_num,tpt,std,o_mob,r_mob,phone1,phone12,phone2,fax,email,web,tx_code) values('" + ma_n + "', '" + ms_a + "', '" + md_y + "', '" + mcity + "', '" + tbAdd1.Text + "' , '" + tbAdd2.Text + "' , '" + tbAdd3.Text + "' , '" + tbTINNo.Text + "' , '" + tbTPT.Text + "' , '" + tbStd.Text + "','" + tbMNo1.Text + "', '" + tbMNo2.Text + "' , '" + tbOPh1.Text + "' , '" + tbOPh2.Text + "' , '" + tbRPh2.Text + "' , '" + tbFax.Text + "' , '" + tbEmail.Text + "' , '" + tbWebsite.Text + "'," + tbTaxCode.Text + ")";
                        else
                            ConnectionWithAccess.query = "update " + ConnectionWithAccess.tablename[4] + " set city  = '" + mcity + "', o_mob = '" + tbMNo1.Text + "', r_mob = '" + tbMNo2.Text + "', phone1 = '" + tbOPh1.Text + "', phone12 = '" + tbOPh2.Text + "', phone2 = '" + tbRPh2.Text + "', add1 = '" + tbAdd1.Text + "', add2 = '" + tbAdd2.Text + "', add3 = '" + tbAdd3.Text + "', tin_num = '" + tbTINNo.Text + "', tpt = '" + tbTPT.Text + "', std = '" + tbStd.Text + "', fax = '" + tbFax.Text + "', email = '" + tbEmail.Text + "', web = '" + tbWebsite.Text + "', tx_code = " + tbTaxCode.Text + " where a_n = '" + ma_n + "' and s_a = '" + ms_a + "' and d_y = '@@@'";
                        ConnectionCommand.fUpdateInsertDeleteData();
                    }
                    else
                    {
                        isRecord = 0;
                        if (cb_change_master_account_name.Checked)
                            ConnectionWithAccess.query = "select s_a from " + ConnectionWithAccess.tablename[1] + " where a_n = '" + ma_n + "' and s_a = '" + ms_a + "' and d_y = '" + md_y + "'";
                        else
                        {
                            if (mcity == "")
                                ConnectionWithAccess.query = "select s_a from " + ConnectionWithAccess.tablename[1] + " where a_n = '" + ma_n + "' and [DESC] = '" + tbdelivery.Text + "' and s_a = '" + ms_a + "' and d_y = '" + md_y + "'";
                            else
                                ConnectionWithAccess.query = "select s_a from " + ConnectionWithAccess.tablename[1] + " where a_n = '" + ma_n + "' and s_a = '" + ms_a + "' and d_y = '" + md_y + "'";
                        }
                        DataTable dtData1 = ConnectionCommand.fGetDataTable();
                        if (dtData1 != null && dtData1.Rows.Count > 0)
                        {
                            if (dtData1.Rows[0][0] != null)
                                isRecord = 1;
                        }
                        if (isRecord == 0)
                        {
                            find_new_delivery_s_a(ma_n, ms_a, tbdelivery.Text);
                            md_y = tbd_y.Text;
                            ConnectionWithAccess.query = "insert into " + ConnectionWithAccess.tablename[1] + " (r_c, a_n,s_a,d_y,[desc], city,country,pin,bst,aadhar_card,dist,gst_number,state, un_used) values('3','" + ma_n + "', '" + ms_a + "' , '" + md_y + "' , '" + ConnectionWithAccess.remove_filename_error(tbdelivery.Text) + "', '" + tbdelivery_city.Text + "', '" + tbcountry.Text + "', '" + tbPincode.Text + "' ,'','" + tbadharcard.Text + "','" + tbdistrict.Text + "', '" + tbgst_number.Text + "', '" + tbstate.Text + "', '" + cb_account_inactive.SelectedIndex.ToString() + "')";
                        }
                        else
                        {
                            if (cb_change_master_account_name.Checked == true)
                                ConnectionWithAccess.query = "update " + ConnectionWithAccess.tablename[1] + " set [desc] = '" + ConnectionWithAccess.remove_filename_error(tbdelivery.Text) + "', city = '" + tbdelivery_city.Text + "', country = '" + tbcountry.Text + "', pin = '" + tbPincode.Text + "' , aadhar_card = '" + tbadharcard.Text + "' , dist = '" + tbdistrict.Text + "' , gst_number = '" + tbgst_number.Text + "', pan = '" + tbpan.Text + "', state = '" + tbstate.Text + "', un_used = '" + cb_account_inactive.SelectedIndex.ToString() + "' where a_n = '" + ma_n + "' and s_a = '" + ms_a + "' and d_y = '" + md_y + "'";
                            else
                            {
                                if (cb_add_new_account.Checked == false)
                                    ConnectionWithAccess.query = "update " + ConnectionWithAccess.tablename[1] + " set [desc] = '" + ConnectionWithAccess.remove_filename_error(tbdelivery.Text) + "', city = '" + tbdelivery_city.Text + "', country = '" + tbcountry.Text + "', pin = '" + tbPincode.Text + "' , aadhar_card = '" + tbadharcard.Text + "' , dist = '" + tbdistrict.Text + "' , gst_number = '" + tbgst_number.Text + "', pan = '" + tbpan.Text + "', state = '" + tbstate.Text + "', un_used = '" + cb_account_inactive.SelectedIndex.ToString() + "' where a_n = '" + ma_n + "' and s_a = '" + ms_a + "' and d_y = '" + md_y + "'";
                                else
                                    ConnectionWithAccess.query = "update " + ConnectionWithAccess.tablename[1] + " set country = '" + tbcountry.Text + "', pin = '" + tbPincode.Text + "' , aadhar_card = '" + tbadharcard.Text + "' , dist = '" + tbdistrict.Text + "' , gst_number = '" + tbgst_number.Text + "', pan = '" + tbpan.Text + "', state = '" + tbstate.Text + "', un_used = '" + cb_account_inactive.SelectedIndex.ToString() + "' where a_n = '" + ma_n + "' and [DESC] = '" + tbdelivery.Text + "' and city = '" + tbdelivery_city + "' and s_a = '" + ms_a + "'";
                            }
                        }
                        ConnectionCommand.fUpdateInsertDeleteData();
                        isRecord = 0;
                        ConnectionWithAccess.query = "select 1 from " + ConnectionWithAccess.tablename[4] + " where a_n = '" + ma_n + "' and s_a = '" + ms_a + "' and d_y = '" + md_y + "'";
                        dtData1 = ConnectionCommand.fGetDataTable();
                        if (dtData1 != null && dtData1.Rows.Count > 0)
                        {
                            if (dtData1.Rows[0][0] != null)
                            {
                                isRecord = 1;
                            }
                        }
                        if (isRecord == 0)
                            ConnectionWithAccess.query = "insert into " + ConnectionWithAccess.tablename[4] + " (a_n,s_a,d_y,city,add1,add2,add3,tin_num,tpt,std,o_mob,r_mob,phone1,phone12,phone2,fax,email,web,tx_code) values('" + ma_n + "', '" + ms_a + "', '" + md_y + "', '" + tbdelivery_city.Text + "', '" + tbAdd1.Text + "' , '" + tbAdd2.Text + "' , '" + tbAdd3.Text + "' , '" + tbTINNo.Text + "' , '" + tbTPT.Text + "' , '" + tbStd.Text + "','" + tbMNo1.Text + "', '" + tbMNo2.Text + "' , '" + tbOPh1.Text + "' , '" + tbOPh2.Text + "' , '" + tbRPh2.Text + "' , '" + tbFax.Text + "' , '" + tbEmail.Text + "' , '" + tbWebsite.Text + "'," + tbTaxCode.Text + ")";
                        else
                            ConnectionWithAccess.query = "update " + ConnectionWithAccess.tablename[4] + " set city  = '" + mcity + "', o_mob = '" + tbMNo1.Text + "', r_mob = '" + tbMNo2.Text + "', phone1 = '" + tbOPh1.Text + "', phone12 = '" + tbOPh2.Text + "', phone2 = '" + tbRPh2.Text + "', add1 = '" + tbAdd1.Text + "', add2 = '" + tbAdd2.Text + "', add3 = '" + tbAdd3.Text + "', tin_num = '" + tbTINNo.Text + "', tpt = '" + tbTPT.Text + "', std = '" + tbStd.Text + "', fax = '" + tbFax.Text + "', email = '" + tbEmail.Text + "', web = '" + tbWebsite.Text + "', tx_code = " + tbTaxCode.Text + ", un_used = '" + cb_account_inactive.SelectedIndex.ToString() + "' where a_n = '" + ma_n + "' and s_a = '" + ms_a + "' and d_y = '" + md_y + "'";
                        ConnectionCommand.fUpdateInsertDeleteData();
                    }
                }
                else
                {
                    MessageBox.Show("Account Not saved, GST Number Invalid");
                }
            }
        }

        private void check_for_duplicate_name_city_a_n_exist_for_account()
        {
            isRecord = 0;
            ConnectionWithAccess.query = "select 1 from " + ConnectionWithAccess.tablename[1] + " where a_n = '" + temp_a_n + "' and [desc] = '" + tbDesc.Text + "' and CITY = '" + tbCity.Text + "'";
            DataTable dtData1 = ConnectionCommand.fGetDataTable();

            if (dtData1 != null && dtData1.Rows.Count > 0)
            {
                if (dtData1.Rows[0][0] != null)
                {
                    isRecord = 1;
                }
            }
            if (isRecord == 0)
            {
                ConnectionWithAccess.query = "update " + ConnectionWithAccess.tablename[1] + " set [desc] = '" + tbDesc.Text + "', [city] = '" + tbCity.Text + "', country = '" + tbcountry.Text + "', [pin] = " + tbPincode.Text + " , aadhar_card = '" + tbadharcard.Text + "' , dist = '" + tbdistrict.Text + "' , gst_number = '" + tbgst_number.Text + "', pan = '" + tbpan.Text + "', state = '" + tbstate.Text + "' where a_n = '" + temp_a_n + "' and [s_a] = '" + temp_s_a + "'";
                ConnectionCommand.fUpdateInsertDeleteData();
                ConnectionWithAccess.query = "update " + ConnectionWithAccess.tablename[4] + " set [city] = '" + tbCity.Text + "' where a_n = '" + temp_a_n + "' and [s_a] = '" + temp_s_a + "'";
                ConnectionCommand.fUpdateInsertDeleteData();
            }
            else
            {
                MessageBox.Show("Sorry Account Name with Same Name Already Exist");
            }
        }

        private void save_company_text_file()
        {
            ConnectionWithAccess.mtextfilename = ConnectionWithAccess.data_drive + "acc\\" + ConnectionWithAccess.mNIK + ".txt";
            File.Delete(ConnectionWithAccess.mtextfilename);
            StringBuilder sb = new StringBuilder();
            sb.AppendLine(ConnectionWithAccess.encode(ConnectionWithAccess.mDataFile.ToUpper().ToString()));
            sb.AppendLine(ConnectionWithAccess.encode(comname.Text.Trim().ToUpper()));
            sb.AppendLine(ConnectionWithAccess.encode(comadd1.Text.Trim().ToUpper()));
            sb.AppendLine(ConnectionWithAccess.encode(comadd2.Text.Trim().ToUpper()));
            //sb.AppendLine(ConnectionWithAccess.encode(comadd3.Text.Trim().ToUpper()));
            sb.AppendLine(ConnectionWithAccess.encode(comcity.Text.Trim().ToUpper()));
            sb.AppendLine(ConnectionWithAccess.encode(comstate.Text.Trim().ToUpper()));
            sb.AppendLine(ConnectionWithAccess.encode(compin.Text.Trim().ToUpper()));
            sb.AppendLine(ConnectionWithAccess.encode(comph1.Text.Trim().ToUpper()));
            sb.AppendLine(ConnectionWithAccess.encode(comph2.Text.Trim().ToUpper()));
            sb.AppendLine(ConnectionWithAccess.encode(commob.Text.Trim().ToUpper()));
            sb.AppendLine(ConnectionWithAccess.encode(commob2.Text.Trim().ToUpper()));
            sb.AppendLine(ConnectionWithAccess.encode(comemail.Text.Trim().ToLower() + "[" + comemail_password.Text.Trim() + "]"));
            sb.AppendLine(ConnectionWithAccess.encode(comowner.Text.Trim().ToUpper()));
            sb.AppendLine(ConnectionWithAccess.encode(compan.Text.Trim().ToUpper()));
            sb.AppendLine(ConnectionWithAccess.encode(comsrc1.Text.Trim().ToUpper()));
            sb.AppendLine(ConnectionWithAccess.encode(comsrc2.Text.Trim().ToUpper()));
            sb.AppendLine(ConnectionWithAccess.encode(comsrc3.Text.Trim().ToUpper()));
            sb.AppendLine(ConnectionWithAccess.encode(combst.Text.Trim().ToUpper()));
            sb.AppendLine(ConnectionWithAccess.encode(comvat.Text.Trim().ToUpper()));
            sb.AppendLine(ConnectionWithAccess.encode(comlbt.Text.Trim().ToUpper()));
            sb.AppendLine(ConnectionWithAccess.encode(comitacc.Text.Trim().ToUpper()));
            sb.AppendLine(ConnectionWithAccess.encode(comaccno.Text.Trim().ToUpper()));
            sb.AppendLine(ConnectionWithAccess.encode(comcomments.Text.Trim().ToUpper()));
            sb.AppendLine(ConnectionWithAccess.encode(comdob.Text.Trim().ToUpper()));
            sb.AppendLine(ConnectionWithAccess.encode(comstatus.Text.Trim().ToUpper()));
            if (cb_add_company_logo_in_print.Checked == true)
                sb.AppendLine(ConnectionWithAccess.encode("Y"));
            else
                sb.AppendLine(ConnectionWithAccess.encode("N"));
            sb.AppendLine(ConnectionWithAccess.encode(comcst.Text.Trim().ToUpper()));
            sb.AppendLine(ConnectionWithAccess.encode(comcsttin.Text.Trim().ToUpper()));
            sb.AppendLine(ConnectionWithAccess.encode(comwebsite.Text.Trim().ToUpper()));
            sb.AppendLine(ConnectionWithAccess.encode(comifc.Text.Trim().ToUpper()));
            sb.AppendLine(ConnectionWithAccess.encode(combank.Text.Trim().ToUpper()));
            sb.AppendLine(ConnectionWithAccess.encode(Convert.ToString(comsform.SelectedIndex)));
            sb.AppendLine(ConnectionWithAccess.encode(comgst_number.Text.Trim().ToUpper()));
            if (cb_company_login_password.Checked == true)
                sb.AppendLine(ConnectionWithAccess.encode("Y"));
            else
                sb.AppendLine(ConnectionWithAccess.encode("N"));
            sb.AppendLine(ConnectionWithAccess.encode(comstd.Text));
            if (!string.IsNullOrEmpty(strSelectedFont))
                sb.AppendLine(strSelectedFont);
            else
                sb.AppendLine((ConnectionWithAccess.company_font));
            sb.AppendLine(ConnectionWithAccess.encode(tb_move_sale_print_distance.Text));
            sb.AppendLine(ConnectionWithAccess.encode(combackup_emailid.Text));
            sb.AppendLine(ConnectionWithAccess.encode(comshortname.Text));
            if (cb_print_mobile_number_in_invoice.Checked == true)
                sb.AppendLine(ConnectionWithAccess.encode("Y"));
            else
                sb.AppendLine(ConnectionWithAccess.encode("N"));
            TextWriter writer = new StreamWriter(ConnectionWithAccess.mtextfilename);
            writer.WriteLine(sb);
            writer.Flush();
            //MessageBox.Show("File Created Successfully");
            writer.Close();
            read_company_text_file();
        }

        private void read_company_text_file()
        {
            if (backup == true)
                ConnectionWithAccess.mtextfilename = ConnectionWithAccess.data_drive + "backup\\" + ConnectionWithAccess.mNIK + ".txt";
            else
                ConnectionWithAccess.mtextfilename = ConnectionWithAccess.data_drive + "acc\\" + ConnectionWithAccess.mNIK + ".txt";
            if (File.Exists(ConnectionWithAccess.mtextfilename))
            {
                ConnectionWithAccess.company_details = File.ReadAllLines(ConnectionWithAccess.mtextfilename);
                if (ConnectionWithAccess.company_details.Count() > 0)
                {
                    for (int i = 0; i < 5; i++)
                    {
                        Array.Resize(ref ConnectionWithAccess.company_details, ConnectionWithAccess.company_details.Length + 1);
                        ConnectionWithAccess.company_details[ConnectionWithAccess.company_details.Length - 1] = "Y";
                    }
                    for (row_counter = 0; row_counter < ConnectionWithAccess.company_details.Length; row_counter++)
                    {
                        ConnectionWithAccess.company_details[row_counter] = ConnectionWithAccess.decode(ConnectionWithAccess.company_details[row_counter]);
                        if (ConnectionWithAccess.company_details[row_counter] == null)
                            ConnectionWithAccess.company_details[row_counter] = "";
                        ConnectionWithAccess.company_details[row_counter] = ConnectionWithAccess.company_details[row_counter].Trim();
                    }
                    comdrive.Text = ConnectionWithAccess.company_details[0].Substring(1, 1);
                    comabb.Text = ConnectionWithAccess.company_details[0].Substring(11, 3);
                    comname.Text = ConnectionWithAccess.company_details[1];
                    comadd1.Text = ConnectionWithAccess.company_details[2];
                    comadd2.Text = ConnectionWithAccess.company_details[3];
                    comadd3.Text = ConnectionWithAccess.company_details[4];
                    comcity.Text = ConnectionWithAccess.company_details[4];
                    comstate.Text = ConnectionWithAccess.company_details[5];
                    compin.Text = ConnectionWithAccess.company_details[6];
                    comph1.Text = ConnectionWithAccess.company_details[7];
                    comph2.Text = ConnectionWithAccess.company_details[8];
                    commob.Text = ConnectionWithAccess.company_details[9];
                    commob2.Text = ConnectionWithAccess.company_details[10];
                    if (ConnectionWithAccess.company_details[11].Length > 5)
                    {
                        if (ConnectionWithAccess.company_details[11].Contains("["))
                        {
                            comemail.Text = ConnectionWithAccess.company_details[11].Substring(0, ConnectionWithAccess.company_details[11].IndexOf("["));
                            comemail_password.Text = ConnectionWithAccess.company_details[11].Substring(ConnectionWithAccess.company_details[11].IndexOf("[") + 1, ConnectionWithAccess.company_details[11].IndexOf("]") - ConnectionWithAccess.company_details[11].IndexOf("[") - 1);
                        }
                        else
                        {
                            comemail.Text = ConnectionWithAccess.company_details[11];
                        }
                    }
                    else
                    {
                        comemail.Text = "";
                        comemail_password.Text = "";
                    }
                    comowner.Text = ConnectionWithAccess.company_details[12];
                    compan.Text = ConnectionWithAccess.company_details[13];
                    comsrc1.Text = ConnectionWithAccess.company_details[14];
                    comsrc2.Text = ConnectionWithAccess.company_details[15];
                    comsrc3.Text = ConnectionWithAccess.company_details[16];
                    combst.Text = ConnectionWithAccess.company_details[17];
                    comvat.Text = ConnectionWithAccess.company_details[18];
                    comlbt.Text = ConnectionWithAccess.company_details[19];
                    comitacc.Text = ConnectionWithAccess.company_details[20];
                    comaccno.Text = ConnectionWithAccess.company_details[21];
                    comcomments.Text = ConnectionWithAccess.company_details[22];
                    //comdob.Text = ConnectionWithAccess.company_details[23];
                    comstatus.Text = ConnectionWithAccess.company_details[24];
                    comcst.Text = ConnectionWithAccess.company_details[26];
                    comcsttin.Text = ConnectionWithAccess.company_details[27];
                    comwebsite.Text = ConnectionWithAccess.company_details[28];
                    comifc.Text = ConnectionWithAccess.company_details[29];
                    combank.Text = ConnectionWithAccess.company_details[30];
                    if (ConnectionWithAccess.company_details[31].Trim() == "301")
                        ConnectionWithAccess.company_details[31] = "3";
                    else if (ConnectionWithAccess.company_details[31].Trim() == "302")
                        ConnectionWithAccess.company_details[31] = "4";
                    else if (ConnectionWithAccess.company_details[31].Trim() == "303")
                        ConnectionWithAccess.company_details[31] = "5";
                    comsform.SelectedIndex = Convert.ToInt32(ConnectionWithAccess.company_details[31].Trim());
                    comgst_number.Text = ConnectionWithAccess.company_details[32];
                    if (ConnectionWithAccess.company_details[33] != "Y")
                        cb_company_login_password.Checked = false;
                    else
                        cb_company_login_password.Checked = true;
                    comstd.Text = ConnectionWithAccess.company_details[34];
                    ConnectionWithAccess.company_font = ConnectionWithAccess.company_details[35];
                    tb_move_sale_print_distance.Text = ConnectionWithAccess.company_details[36];
                    if (ConnectionWithAccess.company_details[37].Length > 10)
                    {
                        if (ConnectionWithAccess.company_details[37].Contains("["))
                            combackup_emailid.Text = ConnectionWithAccess.company_details[37].Substring(0, ConnectionWithAccess.company_details[37].IndexOf("["));
                        else
                            combackup_emailid.Text = ConnectionWithAccess.company_details[37];
                    }
                    if (ConnectionWithAccess.company_details[38].Trim() == "")
                        comshortname.Text = ConnectionWithAccess.company_details[1];
                    comshortname.Text = ConnectionWithAccess.company_details[38];
                    if (ConnectionWithAccess.company_details[39] != "Y")
                        cb_print_mobile_number_in_invoice.Checked = false;
                    else
                        cb_print_mobile_number_in_invoice.Checked = true;
                    //Font font1 = new Font("Arial", 12, FontStyle.Italic);
                    //TypeConverter converter = TypeDescriptor.GetConverter(typeof(Font));
                    //// Saving Font object as a string
                    //string fontString = converter.ConvertToString(font1);
                    //// Load an instance of Font from a string
                    //Font font = (Font)converter.ConvertFromString(fontString);
                }
            }
        }

        private void save_company_text_file_from_memory()
        {
            ConnectionWithAccess.mtextfilename = ConnectionWithAccess.data_drive + "acc\\" + ConnectionWithAccess.mNIK + ".txt";
            File.Delete(ConnectionWithAccess.mtextfilename);
            StringBuilder sb = new StringBuilder();
            for (row_counter = 0; row_counter < ConnectionWithAccess.company_details.Length; row_counter++)
            {
                sb.AppendLine(ConnectionWithAccess.encode(ConnectionWithAccess.company_details[row_counter]));
            }
            TextWriter writer = new StreamWriter(ConnectionWithAccess.mtextfilename);
            writer.WriteLine(sb);
            writer.Flush();
            //MessageBox.Show("File Created Successfully");
            writer.Close();
        }

        private void add_amount_in_51(string mprd, string ma_n, string ms_a, double mamount)
        {
            if (!check_for_period_locked_unlocked(mprd))
            {
                if (mamount != 0.00 && ma_n != null)
                {
                    ma_n = ma_n.Trim();
                    ms_a = ms_a.Trim();
                    if (ma_n == "2010")
                        temp_word = "sanjay";
                    if (ma_n == "1003")
                        temp_word = "sanjay";
                    if (ma_n == "7001")
                        temp_word = "sanjay";
                    if (ma_n == "2002" && ms_a == "@@@")
                        temp_word = "sanjay";
                    if (ma_n == "70ICC")
                        temp_word = "sanjay";
                    if (mamount == 4368.00)
                        temp_word = "sanjay";
                    if (ms_a == "MZ1")
                        temp_word = "sanjay";
                    isRecord = 0;
                    mold_amount = 0;
                    ConnectionWithAccess.query = "select amt from " + ConnectionWithAccess.tablename[51] + " where prd = '" + mprd + "' and a_n = '" + ma_n + "' and s_a = '" + ms_a + "'";
                    DataTable dtData1 = ConnectionCommand.fGetDataTable();

                    if (dtData1 != null && dtData1.Rows.Count > 0)
                    {
                        isRecord = 1;
                        mold_amount = Convert.ToDouble(dtData1.Rows[0][0]);
                    }
                    if (ma_n == "2010")
                        temp_word = "";
                    if (isRecord == 0)
                        ConnectionWithAccess.query = "insert into " + ConnectionWithAccess.tablename[51] + " (prd, a_n,s_a, amt, d_d, [user], insert_dt_tm) values('" + mprd + "', '" + ma_n + "', '" + ms_a + "' , " + mamount + " , '01/01/1901'" + ", '" + ConnectionWithAccess.muser + "', @currDate )";
                    else
                        ConnectionWithAccess.query = "update " + ConnectionWithAccess.tablename[51] + " set amt = " + Math.Round((mamount + mold_amount), 2) + ", [user] = '" + ConnectionWithAccess.muser + "' ,insert_dt_tm = @currDate  where prd = '" + mprd + "' and a_n = '" + ma_n + "' and s_a = '" + ms_a + "' ";
                    add_user_date_time_function_compulsory_program();
                    ConnectionCommand.fUpdateInsertDeleteData();
                }
            }
        }

        private void update_amount_in_51(string mprd, string ma_n, string ms_a, double mamount)
        {
            if (!check_for_period_locked_unlocked(mprd))
            {
                ma_n = ma_n.Trim();
                ms_a = ms_a.Trim();
                if (ma_n == "1003")
                    temp_word = "sanjay";
                if (ma_n == "2010")
                    temp_word = "sanjay";
                if (ma_n == "7001")
                    temp_word = "sanjay";
                if (ma_n == "2002" && ms_a == "@@@")
                    temp_word = "sanjay";
                if (ma_n == "5000")
                    temp_word = "sanjay";
                if (ms_a == "@@@")
                    temp_word = "";
                if (ms_a == "MZ1")
                    temp_word = "sanjay";
                isRecord = 0;
                ConnectionWithAccess.query = "delete from " + ConnectionWithAccess.tablename[51] + " where prd = '" + mprd + "' and a_n = '" + ma_n + "' and s_a = '" + ms_a + "'";
                ConnectionCommand.fUpdateInsertDeleteData();
                ConnectionWithAccess.query = "insert into " + ConnectionWithAccess.tablename[51] + " (prd, a_n,s_a, amt, d_d,[user], insert_dt_tm) values('" + mprd + "', '" + ma_n + "', '" + ms_a + "' , " + mamount + " , '01/01/1901'" + " , '" + ConnectionWithAccess.muser + "', @currDate )";
                add_user_date_time_function_compulsory_program();
                ConnectionCommand.fUpdateInsertDeleteData();
            }
            //else
            //    MessageBox.Show("Sorry, Period  " + mprd + "  is Locked for Updating Amount");
        }

        private void update_item_stock(string mtype, string mitem_code, string mTITLE, double mqty)
        {
            if (mtype != "" && mitem_code != "")
            {
                temp_double = 0.0;
                isRecord = 0;
                ConnectionWithAccess.query = "select CLO_STK from " + ConnectionWithAccess.tablename[05] + " where [type] = '" + mtype + "' and item_code = '" + mitem_code + "'";
                DataTable dtData1 = ConnectionCommand.fGetDataTable();

                if (dtData1 != null && dtData1.Rows.Count > 0)
                {
                    temp_double = Convert.ToDouble(dtData1.Rows[0]["clo_stk"].ToString());
                    ConnectionWithAccess.query = "update " + ConnectionWithAccess.tablename[05] + " set clo_stk = " + Math.Round((temp_double + mqty), 2) + ", [user] = '" + ConnectionWithAccess.muser + "' ,insert_dt_tm = @currDate  where [type] = '" + mtype + "' and item_code = '" + mitem_code + "'";
                    add_user_date_time_function_compulsory_program();
                    ConnectionCommand.fUpdateInsertDeleteData();
                    fLoad_Item_Master_List();
                }
            }
        }

        #endregion

        private void save_master_account()
        {
            if (tbPincode.Text == "")
                tbPincode.Text = "0";
            if (!cbParent.SelectedItem.Equals("Unknown"))
            {
                if (cbParent.SelectedItem.Equals("BANK ACCOUNT") || cbParent.SelectedItem.Equals("CASH IN HAND") || cbParent.SelectedItem.Equals("SUNDRY CREDITORS") || cbParent.SelectedItem.Equals("SUNDRY DEBTORS") || cbParent.SelectedItem.Equals("LOANS"))
                {
                    if (cbParent.SelectedItem.Equals("SUNDRY DEBTORS"))
                    {
                        mtx_desc = cbMtaxDesc.Text;
                        get_tx_code_from_tax_name("S", mtx_desc, cb_master_d_c.Text);
                    }
                    else if (cbParent.SelectedItem.Equals("SUNDRY CREDITORS"))
                    {
                        mtx_desc = cbMtaxDesc.Text;
                        get_tx_code_from_tax_name("P", mtx_desc, cb_master_d_c.Text);
                    }
                    if (tbdelivery.Text != "")
                    {
                        isRecord = 0;
                        ConnectionWithAccess.query = "select d_y from " + ConnectionWithAccess.tablename[1] + " where a_n = '" + tbA_N.Text + "' and s_a = '" + tbS_A.Text + "' and d_y = '" + tbd_y.Text + "'  and [DESC] = '" + tbdelivery.Text + "' and city = '" + tbdelivery_city.Text + "'";
                        DataTable dtData1 = ConnectionCommand.fGetDataTable();

                        if (dtData1 != null && dtData1.Rows.Count > 0)
                        {
                            if (dtData1.Rows[0][0] != null)
                            {
                                isRecord = 1;
                                tbd_y.Text = dtData1.Rows[0][0].ToString();
                            }
                        }
                        if (isRecord == 0)
                        {
                            find_new_delivery_s_a(tbA_N.Text, tbS_A.Text, tbdelivery.Text);
                            add_update_record_in_01_and_04(tbA_N.Text, tbS_A.Text, tbd_y.Text, tbDesc.Text, tbCity.Text);
                        }
                        else
                            add_update_record_in_01_and_04(tbA_N.Text, tbS_A.Text, tbd_y.Text, tbDesc.Text, tbCity.Text);
                    }
                    else
                    {
                        if (tbd_y.Text == "")
                            tbd_y.Text = "@@@";
                        if (tbDesc.Text.Length > 0)
                        {
                            tbDesc.Text = tbDesc.Text.Trim();
                            if (cb_change_master_account_name.Checked)
                            {
                                // for changing name or city of account
                                //check_for_duplicate_name_city_a_n_exist_for_account();
                                add_update_record_in_01_and_04(tbA_N.Text, tbS_A.Text, tbd_y.Text, tbDesc.Text, tbCity.Text);
                            }
                            else
                            {
                                if (cb_add_new_account.Checked == true)
                                {
                                    if (cbParent.SelectedItem.Equals("BANK ACCOUNT"))
                                        mbook = "B";
                                    else if (cbParent.SelectedItem.Equals("CASH IN HAND"))
                                        mbook = "C";
                                    else if (cbParent.SelectedItem.Equals("SUNDRY CREDITORS"))
                                        mbook = "P";
                                    else if (cbParent.SelectedItem.Equals("SUNDRY DEBTORS"))
                                        mbook = "S";
                                    find_new_name_a_n(tbA_N.Text, tbDesc.Text);
                                    tbS_A.Text = "@@@";
                                    tbd_y.Text = "@@@";
                                    add_new_book(mbook, tbA_N.Text, tbS_A.Text, tbDesc.Text, tbCity.Text);
                                }
                                else
                                {
                                    add_update_record_in_01_and_04(tbA_N.Text, tbS_A.Text, tbd_y.Text, tbDesc.Text, tbCity.Text);
                                }
                            }
                        }
                    }
                }
                else
                    if (tbdelivery.Text != "")
                {
                    if (tbS_A.Text != "@@@")
                    {
                        isRecord = 0;
                        ConnectionWithAccess.query = "select d_y from " + ConnectionWithAccess.tablename[1] + " where a_n = '" + tbA_N.Text + "' and s_a = '" + tbS_A.Text + "' and d_y = '" + tbd_y.Text + "'  and [DESC] = '" + tbdelivery.Text + "' and city = '" + tbdelivery_city.Text + "'";
                        DataTable dtData1 = ConnectionCommand.fGetDataTable();

                        if (dtData1 != null && dtData1.Rows.Count > 0)
                        {
                            if (dtData1.Rows[0][0] != null)
                            {
                                isRecord = 1;
                                tbd_y.Text = dtData1.Rows[0][0].ToString();
                            }
                        }
                        if (isRecord == 0)
                        {
                            find_new_delivery_s_a(tbA_N.Text, tbS_A.Text, tbdelivery.Text);
                            add_update_record_in_01_and_04(tbA_N.Text, tbS_A.Text, tbd_y.Text, tbDesc.Text, tbCity.Text);
                        }
                    }
                    else
                    {
                        isRecord = 0;
                        ConnectionWithAccess.query = "select s_a from " + ConnectionWithAccess.tablename[1] + " where a_n = '" + tbA_N.Text + "' and s_a = '@@@' and d_y = '@@@'  and [DESC] = '" + tbdelivery.Text + "' and city = '" + tbdelivery_city.Text + "'";
                        DataTable dtData1 = ConnectionCommand.fGetDataTable();

                        if (dtData1 != null && dtData1.Rows.Count > 0)
                        {
                            if (dtData1.Rows[0][0] != null)
                            {
                                isRecord = 1;
                                tbS_A.Text = dtData1.Rows[0][0].ToString();
                            }
                        }
                        if (isRecord == 0)
                        {
                            tbS_A.Text = find_new_name_s_a(tbA_N.Text, tbdelivery.Text);
                            tbd_y.Text = "@@@";
                            add_update_record_in_01_and_04(tbA_N.Text, tbS_A.Text, tbd_y.Text, tbdelivery.Text, tbdelivery_city.Text);
                        }
                        else
                            add_update_record_in_01_and_04(tbA_N.Text, tbS_A.Text, tbd_y.Text, tbDesc.Text, tbCity.Text);
                    }
                }
                else
                {
                    //if (cb_add_new_account.Checked == true || (cbParent.SelectedItem.Equals("FIXED ASSETS")))
                    if (tbDesc.Text == "" && tbA_N.Text == "3001" && cbParent.Text == "CAPITAL ACCOUNT")
                        tbDesc.Text = "CAPITAL ACCOUNT";
                    if (cb_add_new_account.Checked == true)
                    {
                        find_new_name_a_n(tbA_N.Text, tbDesc.Text);
                        tbS_A.Text = "@@@";
                        tbd_y.Text = "@@@";
                        add_update_record_in_01_and_04(tbA_N.Text, tbS_A.Text, tbd_y.Text, tbDesc.Text, tbCity.Text);
                    }
                    else
                    {
                        add_update_record_in_01_and_04(tbA_N.Text, tbS_A.Text, tbd_y.Text, tbDesc.Text, tbCity.Text);
                    }
                }
                save_bank_details();
                if (tbA_N.Text.Substring(0, 1) == "1")
                {
                    //ConnectionWithAccess.moprd = ConnectionWithAccess.get_old_prd_name("@");
                    update_amount_in_51("?", tbA_N.Text, tbS_A.Text, Convert.ToDouble(tbopenbalance.Text));
                }
                else
                {
                    if (cbParent.SelectedItem.Equals("LOANS"))
                    {
                        update_amount_in_51("@", tbA_N.Text, tbS_A.Text, Convert.ToDouble(tbopenbalance.Text));
                        temp_single = calculate_total_account_balance_from_51("@", tbA_N.Text, "", "");
                        update_amount_in_51("@", tbA_N.Text, "@@@", temp_single);
                    }
                    else
                        update_amount_in_51("@", tbA_N.Text, tbS_A.Text, Convert.ToDouble(tbopenbalance.Text));
                }
            }
            else
                MessageBox.Show("Account Cannot be saved with Unknown Parent Account");
            refresh_master_account();
        }

        private void find_empty_coloum_in_masters()
        {
            if (tbMNo1.Text != "")
                momobile = Convert.ToInt64(tbMNo1.Text);
            else
                momobile = 0;
            if (tbTINNo.Text != "")
                mtin = tbTINNo.Text;
            else
                mtin = "";
            if (tbAdd1.Text != "")
                madd1 = tbAdd1.Text;
            else
                madd1 = "";
            if (tbAdd2.Text != "")
                madd2 = tbAdd2.Text;
            else
                madd2 = "";
            if (tbAdd3.Text != "")
                madd3 = tbAdd3.Text;
            else
                madd3 = "";
            if (tbCity.Text != "")
                mcity = tbCity.Text;
            else
                mcity = "";
            if (tbPincode.Text != "")
                mpincode = tbPincode.Text;
            else
                mpincode = "";
            if (tbTPT.Text != "")
                mtpt = tbTPT.Text;
            else
                mtpt = "";
            if (tbStd.Text != "")
                mstd = tbStd.Text;
            else
                mstd = "";
            if (tbOPh1.Text != "")
                mphone1 = Convert.ToInt64(tbOPh1.Text);
            else
                mphone1 = 0;
            if (tbRPh2.Text != "")
                mphone12 = Convert.ToInt64(tbRPh2.Text);
            else
                mphone12 = 0;
            if (tbMNo2.Text != "")
                mphone2 = Convert.ToInt64(tbMNo2.Text);
            else
                mphone2 = 0;
            if (tbOPh2.Text != "")
                mphone22 = Convert.ToInt64(tbOPh2.Text);
            else
                mphone22 = 0;
            if (tbFax.Text != "")
                mfax = Convert.ToInt64(tbFax.Text);
            else
                mfax = 0;
            if (tbEmail.Text != "")
                memail = tbEmail.Text;
            else
                memail = "";
            if (tbWebsite.Text != "")
                mwebsite = tbWebsite.Text;
            else
                mwebsite = "";
            if (tbgst_number.Text != "")
                mgst_number = tbgst_number.Text;
            else
                mgst_number = "";
        }

        private void fDeleteCompanyInUseFile()
        {
            string strFileName = ConnectionWithAccess.data_drive + "ACC\\" + ConnectionWithAccess.mNIK + "\\" + ConnectionWithAccess.mNIK + ".abc";
            if (File.Exists(strFileName))
                System.IO.File.Delete(strFileName);
        }

        private void MainForm_FormClosing(object sender, FormClosingEventArgs e)
        {
            if (!isEscKeyPressed)
            {
                move_cursor_to_button_position("Exit_ok");
                const string message = "Do you want to close application?";
                const string caption = "Close Sharp";
                var result = MessageBox.Show(message, caption,
                                             MessageBoxButtons.YesNo,
                                             MessageBoxIcon.Question);
                if (result == DialogResult.Yes)
                {
                    fDeleteCompanyInUseFile();
                    login_user_time_out();
                    //if (ConnectionWithAccess.detach_exit == "Y")
                    //{
                    //    detachandcloseapplication();
                    //}
                    //this.ParentForm.Dispose();
                    System.Environment.Exit(1);
                    System.Windows.Forms.Application.Exit();
                    Application.Exit();
                    this.Close();
                }
                else
                {
                    e.Cancel = true;
                }

            }
        }

        private void login_user_time_out()
        {
            ConnectionWithAccess.query = "insert into " + ConnectionWithAccess.tablename[53] + " (name,IDT,[out]) values ('" + ConnectionWithAccess.muser + "','" + DateTime.Now + "','" + DateTime.Now + "')";
            ConnectionCommand.fUpdateInsertDeleteData();
        }

        private void play_sound()
        {
            SystemSounds.Beep.Play();
            SystemSounds.Question.Play();
            //startSoundPlayer.Play();
            //Point startingPoint = panel1.Location;
            //startingPoint.Offset(10, 10);
            //Cursor.Position = PointToScreen(startingPoint);
        }

        public void detachandcloseapplication()
        {
            //ConnectionWithAccess.mNIK = ConnectionWithAccess.databasename;
            //ConnectionWithAccess.mDataFile = ConnectionWithAccess.data_drive + "acc\\" + ConnectionWithAccess.mNIK + "\\" + ConnectionWithAccess.mNIK + ".mdf";
            //if (ConnectionWithAccess.detach_exit == "Y")
            //{
            //    if (File.Exists(ConnectionWithAccess.mDataFile))
            //    {
            //        ConnectionWithAccess.query = "use master";
            //        ConnectionWithAccess.connectAndUseQuery();

            //        ConnectionWithAccess.connection.ConnectionString = "data source = .;initial catalog = master; integrated security = true";
            //        ConnectionWithAccess.command.Connection = ConnectionWithAccess.connection;

            //        ConnectionWithAccess.query = "exec sp_detach_db @dbname = '" + ConnectionWithAccess.mNIK + "'";
            //        ConnectionWithAccess.connectAndUseQuery();
            //    }
            //    ConnectionWithAccess.detach_exit = "Y";
            //}
        }

        # region tab_control
        private void mastertab()
        {
            user_setting_only_visible = "N";
            if (ConnectionWithAccess.data_entry_working != null && subtabMasters.SelectedIndex != 7 && subtabMasters.SelectedIndex != 9)
            {
                if (ConnectionWithAccess.data_entry_working == "Sale Party")
                {
                    change_cbparent_master_account_type(sia_n.Text);
                    if (sipartycode.Text != "")
                    {
                        //tbDesc.Text = sipartycode.Text;
                        update_master_account_screen_details(sia_n.Text, sis_a.Text, sid_y.Text);
                        tbA_N.Text = sia_n.Text;
                        tbS_A.Text = sis_a.Text;
                    }
                }
                else if (ConnectionWithAccess.data_entry_working == "Sale Item")
                {
                    subtabMasters.SelectedIndex = 1;
                }
                else if (ConnectionWithAccess.data_entry_working == "Sale Tax")
                {
                    subtabMasters.SelectedIndex = 2;
                }
                else if (ConnectionWithAccess.data_entry_working == "Purchase Party")
                {
                    change_cbparent_master_account_type(pia_n.Text);
                    if (pipartycode.Text != "")
                    {
                        tbDesc.Text = pipartycode.Text;
                        update_master_account_screen_details(pia_n.Text, pis_a.Text, "@@@");
                        tbA_N.Text = pia_n.Text;
                        tbS_A.Text = pis_a.Text;
                    }
                }
                else if (ConnectionWithAccess.data_entry_working == "Bank Receipt")
                {
                    change_cbparent_master_account_type(bra_n.Text);
                    if (brpartycode.Text != "")
                    {
                        tbDesc.Text = brpartycode.Text;
                        update_master_account_screen_details(bra_n.Text, brs_a.Text, "@@@");
                        tbA_N.Text = bra_n.Text;
                        tbS_A.Text = brs_a.Text;
                    }
                }
                else if (ConnectionWithAccess.data_entry_working == "Bank Payment")
                {
                    change_cbparent_master_account_type(bpa_n.Text);
                    if (bppartycode.Text != "")
                    {
                        tbDesc.Text = bppartycode.Text;
                        update_master_account_screen_details(bpa_n.Text, bps_a.Text, "@@@");
                        tbA_N.Text = bpa_n.Text;
                        tbS_A.Text = bps_a.Text;
                    }
                }
                else if (ConnectionWithAccess.data_entry_working == "Cash Receipt")
                {
                    change_cbparent_master_account_type(cra_n.Text);
                    if (crpartycode.Text != "")
                    {
                        tbDesc.Text = crpartycode.Text;
                        update_master_account_screen_details(cra_n.Text, crs_a.Text, "@@@");
                        tbA_N.Text = cra_n.Text;
                        tbS_A.Text = crs_a.Text;
                    }
                }
                else if (ConnectionWithAccess.data_entry_working == "Cash Payment")
                {
                    change_cbparent_master_account_type(cpa_n.Text);
                    if (cppartycode.Text != "")
                    {
                        tbDesc.Text = cppartycode.Text;
                        update_master_account_screen_details(cpa_n.Text, cps_a.Text, "@@@");
                        tbA_N.Text = cpa_n.Text;
                        tbS_A.Text = cps_a.Text;
                    }
                }
                else if (ConnectionWithAccess.data_entry_working == "Ledger")
                {
                    change_cbparent_master_account_type(rla_n.Text);
                    //tbDesc.Text = tb_ledger_account_name.Text;
                    tbA_N.Text = rla_n.Text;
                    tbS_A.Text = rls_a.Text;
                    update_master_account_screen_details(rla_n.Text, rls_a.Text, "@@@");
                }
            }
            if (subtabMasters.SelectedIndex == 0 && ConnectionWithAccess.data_entry_working == null)
            {
                current_working_tab = "20";
                if (chbPrivAccountE.Checked)
                {
                    //tbDesc.Text = null;
                    refresh_master_account();
                    master_accounts_process();
                    lbl_master_d_c.Visible = false;
                    update_master_account_screen_details(tbA_N.Text, tbS_A.Text, tbd_y.Text);
                }
                else
                {
                    //subtabMasters.TabPages[0].Hide();
                    refresh_master_account();
                    master_accounts_process();
                    lbl_master_d_c.Visible = false;
                    user_setting_only_visible = "T";
                }
                check_save_button();
            }
            else if (subtabMasters.SelectedIndex == 1)
            {
                if (!chbPrivItemE.Checked)
                    user_setting_only_visible = "T";
                check_save_button();
                itemlistmastertab();
            }
            else if (subtabMasters.SelectedIndex == 2)
            {
                if (!chbPrivTaxE.Checked)
                    user_setting_only_visible = "T";
                check_save_button();
                taxlistmatertab();
            }
            else if (subtabMasters.SelectedIndex == 3)
            {
                if (!chbPrivDbcE.Checked)
                    user_setting_only_visible = "T";
                check_save_button();
                daybooklistmastertab();
            }
            else if (subtabMasters.SelectedIndex == 4)
            {
                if (!chbPrivPeriodE.Checked)
                    user_setting_only_visible = "T";
                check_save_button();
                periodlistmastertab();
            }
            else if (subtabMasters.SelectedIndex == 6)
            {
                fFillAreaList(cmbArea);
                fFillAreaGrid();
            }
            else if (subtabMasters.SelectedIndex == 7)
            {
                if (tb_fix_desc.Enabled == true)
                    tb_fix_desc.Focus();
                if (tb_merge_desc.Enabled == true)
                    tb_merge_desc.Focus();
            }
            else if (subtabMasters.SelectedIndex == 8) //Batch List
            {
                ConnectionWithAccess.data_entry_working = "Master Batch Entry";
                fBindAvailableBatchList();
            }
        }

        private void change_cbparent_master_account_type(string ma_n)
        {
            if (ma_n != "")
            {
                if (ma_n == "2002")
                    cbParent.Text = "SUNDRY DEBTORS";
                else if (ma_n == "4002")
                    cbParent.Text = "SUNDRY CREDITORS";
                else if (ma_n == "2011")
                    cbParent.Text = "BANK ACCOUNT";
                else if (ma_n == "3000")
                    cbParent.Text = "OLD CAPITAL ACCOUNT";
                else if (ma_n == "3001")
                    cbParent.Text = "CAPITAL ACCOUNT";
                else if (ma_n == "2010")
                    cbParent.Text = "CASH IN HAND";
                else if (ma_n.Substring(0, 2) == "70")
                    cbParent.Text = "INCOMES/EXPENSES(TRADING A/c.)";
                else if (ma_n.Substring(0, 1) == "1")
                    cbParent.Text = "FIXED ASSETS";
                else if (ma_n.Substring(0, 2) == "75")
                    cbParent.Text = "INCOMES/EXPENSES(P&L A/c.)";
                else if (ma_n == "3500")
                    cbParent.Text = "LOANS GIVEN";
                else if (ma_n == "3501")
                    cbParent.Text = "LOANS TAKEN";
                else if (ma_n == "3555")
                    cbParent.Text = "LOANS";
                else if (ma_n == "3600")
                    cbParent.Text = "Taxes and Duties";
                else if (ma_n == jb_osm_a_n)
                    cbParent.Text = "Job Work";

            }
        }

        private void itemlistmastertab()
        {
            current_working_tab = "21";
            ItemListDG.DataSource = null;
            //ConnectionWithAccess.query = "select [type], item_code, [title],packing,box,p_price,price,clo_stk,cat,OPN_STK,igst_per,hsn_code from " + ConnectionWithAccess.tablename[05] + " order by TITLE";
            //ConnectionCommand.accountHelp_datatable_Seperate(ItemListDG, "ItemListDG");
            vFilterDataTableAndFillGrid(ItemListDG, dt_Item_Master_List, " ");
            tbTitle.Text = mtitle;
            update_masters_items_screen_details(tbTitle.Text);
            ConnectionWithAccess.query = "select distinct location from " + ConnectionWithAccess.tablename[5];
            ConnectionCommand.retrieval(cb_item_location);
            tbTitle.Focus();
        }

        private void taxlistmatertab()
        {
            current_working_tab = "22";
            fill_tax_d_c();
            if (rb_sale_tax.Checked)
                ConnectionWithAccess.fix_account_a_n = "2002";
            else
                ConnectionWithAccess.fix_account_a_n = "4002";
            ConnectionWithAccess.query = "select distinct a_n from " + ConnectionWithAccess.tablename[1] + " where a_n like '" + ConnectionWithAccess.fix_account_a_n + "%' and s_a ='@@@'";
            ConnectionCommand.retrieval(cb_tax_transfer_account);
        }

        private void daybooklistmastertab()
        {
            if (maintab.SelectedIndex == 2)
            {
                cb_auto_cash_sale_entry.Visible = false;
                current_working_tab = "23" + cbAction.SelectedIndex;
                //cbAction.SelectedIndex = 0;
                //DBCListDG.Rows.Clear();
                DBCListDG.DataSource = null;
                if (cbAction.SelectedIndex == 0)
                {
                    ConnectionWithAccess.query = "select distinct d_c,a_n from " + ConnectionWithAccess.tablename[21] + " where d_n = 999999";
                    ConnectionCommand.accountHelp(DBCListDG, "DayBookMaster");
                    ConnectionWithAccess.query = "select distinct a_n from " + ConnectionWithAccess.tablename[1] + " where (a_n like '2002%' or a_n like '6700%') and s_a ='@@@'";
                    ConnectionCommand.retrieval(cb_transfer_account);
                    if (cb_transfer_account.Items.Count == 1)
                        cb_transfer_account.Enabled = false;
                    cb_auto_cash_sale_entry.Visible = true;
                    tbbank_accnumber.Visible = false;
                    label132.Visible = false;
                }
                else if (cbAction.SelectedIndex == 1)
                {
                    ConnectionWithAccess.query = "select distinct d_c,a_n from " + ConnectionWithAccess.tablename[22] + " where d_n = 999999";
                    ConnectionCommand.accountHelp(DBCListDG, "DayBookMaster");
                    ConnectionWithAccess.query = "select distinct a_n from " + ConnectionWithAccess.tablename[1] + " where (a_n like '4002%'  or a_n like '6700%') and s_a ='@@@'";
                    ConnectionCommand.retrieval(cb_transfer_account);
                    if (cb_transfer_account.Items.Count == 1)
                        cb_transfer_account.Enabled = false;
                    tbbank_accnumber.Visible = false;
                    label132.Visible = false;
                }
                else if (cbAction.SelectedIndex == 2)
                {
                    ConnectionWithAccess.query = "select distinct d_c,a_n from " + ConnectionWithAccess.tablename[23] + " where d_n = 999999";
                    ConnectionCommand.accountHelp(DBCListDG, "DayBookMaster");
                    ConnectionWithAccess.query = "select distinct a_n from " + ConnectionWithAccess.tablename[1] + " where a_n like '2011%' and s_a ='@@@'";
                    ConnectionCommand.retrieval(cb_transfer_account);
                    if (cb_transfer_account.Items.Count == 1)
                        cb_transfer_account.Enabled = false;
                    tbbank_accnumber.Visible = true;
                    label132.Visible = true;
                }
                else if (cbAction.SelectedIndex == 3)
                {
                    ConnectionWithAccess.query = "select distinct d_c,a_n from " + ConnectionWithAccess.tablename[24] + " where d_n = 999999";
                    ConnectionCommand.accountHelp(DBCListDG, "DayBookMaster");
                    ConnectionWithAccess.query = "select a_n from " + ConnectionWithAccess.tablename[1] + " where a_n like '2010%' and s_a ='@@@'";
                    ConnectionCommand.retrieval(cb_transfer_account);
                    if (cb_transfer_account.Items.Count == 1)
                        cb_transfer_account.Enabled = false;
                    tbbank_accnumber.Visible = false;
                    label132.Visible = false;
                }
                else if (cbAction.SelectedIndex == 4)
                {
                    ConnectionWithAccess.query = "select distinct d_c,a_n from " + ConnectionWithAccess.tablename[25] + " where d_n = 999999";
                    ConnectionCommand.accountHelp(DBCListDG, "DayBookMaster");
                    tbbank_accnumber.Visible = false;
                    label132.Visible = false;

                }
                else if (cbAction.SelectedIndex == 5)
                {
                    ConnectionWithAccess.query = "select distinct d_c,a_n from " + ConnectionWithAccess.tablename[30] + " where d_n = 999999";
                    //ConnectionCommand.accountHelp(DBCListDG, "DayBookMaster");
                    ConnectionCommand.accountHelp_datatable_Seperate(DBCListDG, "DayBookMaster");
                    if (DBCListDG.Rows.Count == 0)
                        tbDBC.Text = "5";
                    ConnectionWithAccess.query = "select a_n from " + ConnectionWithAccess.tablename[1] + " where a_n like '2002%' and s_a ='@@@'";
                    ConnectionCommand.retrieval(cb_transfer_account);
                    ConnectionWithAccess.query = "select a_n from " + ConnectionWithAccess.tablename[1] + " where a_n like '4002%' and s_a ='@@@'";
                    ConnectionCommand.add_retrieval(cb_transfer_account);
                    if (cb_transfer_account.Items.Count == 1)
                        cb_transfer_account.Enabled = false;
                    tbbank_accnumber.Visible = false;
                    label132.Visible = false;
                }
                else if (cbAction.SelectedIndex == 6)
                {
                    ConnectionWithAccess.query = "select distinct d_c,a_n from " + ConnectionWithAccess.tablename[7] + " where d_n = 999999";
                    ConnectionCommand.accountHelp(DBCListDG, "DayBookMaster");
                    ConnectionWithAccess.query = "select distinct a_n from " + ConnectionWithAccess.tablename[1] + " where a_n like '2002%' and s_a ='@@@'";
                    ConnectionCommand.retrieval(cb_transfer_account);
                    if (cb_transfer_account.Items.Count == 1)
                        cb_transfer_account.Enabled = false;
                    cb_auto_cash_sale_entry.Visible = true;
                    tbbank_accnumber.Visible = false;
                    label132.Visible = false;
                }
                else if (cbAction.SelectedIndex == 7)
                {
                    ConnectionWithAccess.query = "select distinct d_c,a_n from " + ConnectionWithAccess.tablename[22] + " where d_n = 99999999";
                    ConnectionCommand.accountHelp(DBCListDG, "DayBookMaster");
                    ConnectionWithAccess.query = "select distinct a_n from " + ConnectionWithAccess.tablename[1] + " where a_n like '4002%' and s_a ='@@@'";
                    ConnectionCommand.retrieval(cb_transfer_account);
                    if (cb_transfer_account.Items.Count == 1)
                        cb_transfer_account.Enabled = false;
                    tbbank_accnumber.Visible = false;
                    label132.Visible = false;
                }
            }
        }

        private void periodlistmastertab()
        {
            atbsave.Enabled = true;
            current_working_tab = "24";
            //PeriodListDG.Rows.Clear();
            ConnectionWithAccess.query = "select prd, [start], [end], [lock], gp, vat, data_tran, s_form from " + ConnectionWithAccess.tablename[50] + " order by prd";
            ConnectionCommand.accountHelp(PeriodListDG, "PeriodListDG");
            //ConnectionCommand.accountHelp_datatable_Seperate(PeriodListDG, "PeriodListDG");
            //PeriodListDG.Sort(PeriodListDG.Columns[0], ListSortDirection.Ascending);
        }
        #endregion

        public void readusersettingsfromfiletoMemory(string muser, string mpassword)
        {
            ConnectionWithAccess.query = "select f3 from " + ConnectionWithAccess.tablename[52] + " where f1 = '" + muser + "' and f2 = '" + mpassword + "'";
            DataTable dtData1 = ConnectionCommand.fGetDataTable();
            if (dtData1 != null && dtData1.Rows.Count > 0)
            {
                if (dtData1.Rows[0][0] != null)
                {
                    ConnectionWithAccess.mUserFeatures = dtData1.Rows[0][0].ToString();
                    ConnectionWithAccess.mUserFeatures += "NNNNNNNNNN";
                }
            }
            changestatusaspermemory();
        }

        public void changestatusaspermemory()
        {
            if (ConnectionWithAccess.mUserFeatures.Length < 60)
            {
                for (int i = ConnectionWithAccess.mUserFeatures.Length; i < 60; i++)
                {
                    ConnectionWithAccess.mUserFeatures = ConnectionWithAccess.mUserFeatures + "Y";
                }
            }
            tbUserName.Text = ConnectionWithAccess.muser;
            tbPassword.Text = ConnectionWithAccess.mpassword;
            if (ConnectionWithAccess.mUserFeatures.Substring(0, 1) == "Y")
                chbPrivMastersAllV.Checked = true;
            else
                chbPrivMastersAllV.Checked = false;

            if (ConnectionWithAccess.mUserFeatures.Substring(1, 1) == "Y")
                chbPrivMastersAllE.Checked = true;
            else
                chbPrivMastersAllE.Checked = false;

            if (ConnectionWithAccess.mUserFeatures.Substring(2, 1) == "Y")
                chbPrivAccountV.Checked = true;
            else
                chbPrivAccountV.Checked = false;

            if (ConnectionWithAccess.mUserFeatures.Substring(3, 1) == "Y")
                chbPrivAccountE.Checked = true;
            else
                chbPrivAccountE.Checked = false;
            if (ConnectionWithAccess.mUserFeatures.Substring(4, 1) == "Y")
                chbPrivItemV.Checked = true;
            else
                chbPrivItemV.Checked = false;
            if (ConnectionWithAccess.mUserFeatures.Substring(5, 1) == "Y")
                chbPrivItemE.Checked = true;
            else
                chbPrivItemE.Checked = false;
            if (ConnectionWithAccess.mUserFeatures.Substring(6, 1) == "Y")
                chbPrivTaxV.Checked = true;
            else
                chbPrivTaxV.Checked = false;
            if (ConnectionWithAccess.mUserFeatures.Substring(7, 1) == "Y")
                chbPrivTaxE.Checked = true;
            else
                chbPrivTaxE.Checked = false;
            if (ConnectionWithAccess.mUserFeatures.Substring(8, 1) == "Y")
                chbPrivDbcV.Checked = true;
            else
                chbPrivDbcV.Checked = false;
            if (ConnectionWithAccess.mUserFeatures.Substring(09, 1) == "Y")
                chbPrivDbcE.Checked = true;
            else
                chbPrivDbcE.Checked = false;
            if (ConnectionWithAccess.mUserFeatures.Substring(10, 1) == "Y")
                chbPrivPeriodV.Checked = true;
            else
                chbPrivPeriodV.Checked = false;
            if (ConnectionWithAccess.mUserFeatures.Substring(11, 1) == "Y")
                chbPrivPeriodE.Checked = true;
            else
                chbPrivPeriodE.Checked = false;
            if (ConnectionWithAccess.mUserFeatures.Substring(12, 1) == "Y")
                chbPrivDataEntAllV.Checked = true;
            else
                chbPrivDataEntAllV.Checked = false;
            if (ConnectionWithAccess.mUserFeatures.Substring(13, 1) == "Y")
                chbPrivDataEntAllE.Checked = true;
            else
                chbPrivDataEntAllE.Checked = false;
            if (ConnectionWithAccess.mUserFeatures.Substring(14, 1) == "Y")
                chbPrivSaleV.Checked = true;
            else
                chbPrivSaleV.Checked = false;
            if (ConnectionWithAccess.mUserFeatures.Substring(15, 1) == "Y")
                chbPrivSaleE.Checked = true;
            else
                chbPrivSaleE.Checked = false;
            if (ConnectionWithAccess.mUserFeatures.Substring(16, 1) == "Y")
                chbPrivPurchaseV.Checked = true;
            else
                chbPrivPurchaseV.Checked = false;
            if (ConnectionWithAccess.mUserFeatures.Substring(17, 1) == "Y")
                chbPrivPurchaseE.Checked = true;
            else
                chbPrivPurchaseE.Checked = false;
            if (ConnectionWithAccess.mUserFeatures.Substring(18, 1) == "Y")
                chbPrivBankV.Checked = true;
            else
                chbPrivBankV.Checked = false;
            if (ConnectionWithAccess.mUserFeatures.Substring(19, 1) == "Y")
                chbPrivBankE.Checked = true;
            else
                chbPrivBankE.Checked = false;
            if (ConnectionWithAccess.mUserFeatures.Substring(20, 1) == "Y")
                chbPrivCashV.Checked = true;
            else
                chbPrivCashV.Checked = false;
            if (ConnectionWithAccess.mUserFeatures.Substring(21, 1) == "Y")
                chbPrivCashE.Checked = true;
            else
                chbPrivCashE.Checked = false;
            if (ConnectionWithAccess.mUserFeatures.Substring(22, 1) == "Y")
                chbPrivJournalV.Checked = true;
            else
                chbPrivJournalV.Checked = false;
            if (ConnectionWithAccess.mUserFeatures.Substring(23, 1) == "Y")
                chbPrivJournalE.Checked = true;
            else
                chbPrivJournalE.Checked = false;
            if (ConnectionWithAccess.mUserFeatures.Substring(24, 1) == "Y")
                chbPrivOthersAllV.Checked = true;
            else
                chbPrivOthersAllV.Checked = false;
            if (ConnectionWithAccess.mUserFeatures.Substring(25, 1) == "Y")
                chbPrivOthersAllE.Checked = true;
            else
                chbPrivOthersAllE.Checked = false;
            if (ConnectionWithAccess.mUserFeatures.Substring(26, 1) == "Y")
                chbPrivUSetngV.Checked = true;
            else
                chbPrivUSetngV.Checked = false;
            if (ConnectionWithAccess.mUserFeatures.Substring(27, 1) == "Y")
                chbPrivUSetngE.Checked = true;
            else
                chbPrivUSetngE.Checked = false;
            if (ConnectionWithAccess.mUserFeatures.Substring(28, 1) == "Y")
                chbPrivGSetngV.Checked = true;
            else
                chbPrivGSetngV.Checked = false;
            if (ConnectionWithAccess.mUserFeatures.Substring(29, 1) == "Y")
                chbPrivGSetngE.Checked = true;
            else
                chbPrivGSetngE.Checked = false;
            if (ConnectionWithAccess.mUserFeatures.Substring(30, 1) == "Y")
                chbPrivCompInV.Checked = true;
            else
                chbPrivCompInV.Checked = false;
            if (ConnectionWithAccess.mUserFeatures.Substring(31, 1) == "Y")
                chbPrivCompInE.Checked = true;
            else
                chbPrivCompInE.Checked = false;
            if (ConnectionWithAccess.mUserFeatures.Substring(32, 1) == "Y")
                chbPrivReportsV.Checked = true;
            else
                chbPrivReportsV.Checked = false;
            if (ConnectionWithAccess.mUserFeatures.Substring(33, 1) == "Y")
                chbPrivReportsE.Checked = true;
            else
                chbPrivReportsE.Checked = false;
            if (ConnectionWithAccess.mUserFeatures.Substring(34, 1) == "Y")
                chbPrivUtilitiesV.Checked = true;
            else
                chbPrivUtilitiesV.Checked = false;
            if (ConnectionWithAccess.mUserFeatures.Substring(35, 1) == "Y")
                chbPrivUtilitiesE.Checked = true;
            else
                chbPrivUtilitiesE.Checked = false;
            if (ConnectionWithAccess.mUserFeatures.Substring(36, 1) == "Y")
                chbPrivsendsms.Checked = true;
            else
                chbPrivsendsms.Checked = false;
            if (ConnectionWithAccess.mUserFeatures.Substring(37, 1) == "Y")
                chbPrivsendemail.Checked = true;
            else
                chbPrivsendemail.Checked = false;
            if (ConnectionWithAccess.mUserFeatures.Substring(38, 1) == "Y")
                chbPriveditaccount.Checked = true;
            else
                chbPriveditaccount.Checked = false;
            if (ConnectionWithAccess.mUserFeatures.Substring(39, 1) == "Y")
                chbPriveditinvoice.Checked = true;
            else
                chbPriveditinvoice.Checked = false;
            if (ConnectionWithAccess.mUserFeatures.Substring(40, 1) == "Y")
                chbPrivprintinvoice.Checked = true;
            else
                chbPrivprintinvoice.Checked = false;
            if (ConnectionWithAccess.mUserFeatures.Substring(41, 1) == "Y")
                chbcompanydetail.Checked = true;
            else
                chbcompanydetail.Checked = false;
            if (ConnectionWithAccess.mUserFeatures.Substring(42, 1) == "Y")
                chb_export_to_excel.Checked = true;
            else
                chb_export_to_excel.Checked = false;
            if (ConnectionWithAccess.mUserFeatures.Substring(43, 1) == "Y")
                chb_add_datetime_in_output.Checked = true;
            else
                chb_add_datetime_in_output.Checked = false;
            if (ConnectionWithAccess.mUserFeatures.Substring(44, 1) == "Y")
                chb_allow_stock_check_bypass.Checked = true;
            else
                chb_allow_stock_check_bypass.Checked = false;
        }

        public void readusersettingsfromscreen()
        {
            if (chbPrivMastersAllV.Checked == true)
                ConnectionWithAccess.mUserFeatures = "Y";
            else
                ConnectionWithAccess.mUserFeatures = "N";
            if (chbPrivMastersAllE.Checked == true)
                ConnectionWithAccess.mUserFeatures = ConnectionWithAccess.mUserFeatures.Substring(0, 1) + "Y";
            else
                ConnectionWithAccess.mUserFeatures = ConnectionWithAccess.mUserFeatures.Substring(0, 1) + "N";
            if (chbPrivAccountV.Checked == true)
                ConnectionWithAccess.mUserFeatures = ConnectionWithAccess.mUserFeatures.Substring(0, 2) + "Y";
            else
                ConnectionWithAccess.mUserFeatures = ConnectionWithAccess.mUserFeatures.Substring(0, 2) + "N";
            if (chbPrivAccountE.Checked == true)
                ConnectionWithAccess.mUserFeatures = ConnectionWithAccess.mUserFeatures.Substring(0, 3) + "Y";
            else
                ConnectionWithAccess.mUserFeatures = ConnectionWithAccess.mUserFeatures.Substring(0, 3) + "N";
            if (chbPrivItemV.Checked == true)
                ConnectionWithAccess.mUserFeatures = ConnectionWithAccess.mUserFeatures.Substring(0, 4) + "Y";
            else
                ConnectionWithAccess.mUserFeatures = ConnectionWithAccess.mUserFeatures.Substring(0, 4) + "N";
            if (chbPrivItemE.Checked == true)
                ConnectionWithAccess.mUserFeatures = ConnectionWithAccess.mUserFeatures.Substring(0, 5) + "Y";
            else
                ConnectionWithAccess.mUserFeatures = ConnectionWithAccess.mUserFeatures.Substring(0, 5) + "N";
            if (chbPrivTaxV.Checked == true)
                ConnectionWithAccess.mUserFeatures = ConnectionWithAccess.mUserFeatures.Substring(0, 6) + "Y";
            else
                ConnectionWithAccess.mUserFeatures = ConnectionWithAccess.mUserFeatures.Substring(0, 6) + "N";
            if (chbPrivTaxE.Checked == true)
                ConnectionWithAccess.mUserFeatures = ConnectionWithAccess.mUserFeatures.Substring(0, 7) + "Y";
            else
                ConnectionWithAccess.mUserFeatures = ConnectionWithAccess.mUserFeatures.Substring(0, 7) + "N";
            if (chbPrivDbcV.Checked == true)
                ConnectionWithAccess.mUserFeatures = ConnectionWithAccess.mUserFeatures.Substring(0, 8) + "Y";
            else
                ConnectionWithAccess.mUserFeatures = ConnectionWithAccess.mUserFeatures.Substring(0, 8) + "N";
            if (chbPrivDbcE.Checked == true)
                ConnectionWithAccess.mUserFeatures = ConnectionWithAccess.mUserFeatures.Substring(0, 9) + "Y";
            else
                ConnectionWithAccess.mUserFeatures = ConnectionWithAccess.mUserFeatures.Substring(0, 9) + "N";
            if (chbPrivPeriodV.Checked == true)
                ConnectionWithAccess.mUserFeatures = ConnectionWithAccess.mUserFeatures.Substring(0, 10) + "Y";
            else
                ConnectionWithAccess.mUserFeatures = ConnectionWithAccess.mUserFeatures.Substring(0, 10) + "N";
            if (chbPrivPeriodE.Checked == true)
                ConnectionWithAccess.mUserFeatures = ConnectionWithAccess.mUserFeatures.Substring(0, 11) + "Y";
            else
                ConnectionWithAccess.mUserFeatures = ConnectionWithAccess.mUserFeatures.Substring(0, 11) + "N";
            if (chbPrivDataEntAllV.Checked == true)
                ConnectionWithAccess.mUserFeatures = ConnectionWithAccess.mUserFeatures.Substring(0, 12) + "Y";
            else
                ConnectionWithAccess.mUserFeatures = ConnectionWithAccess.mUserFeatures.Substring(0, 12) + "N";
            if (chbPrivDataEntAllE.Checked == true)
                ConnectionWithAccess.mUserFeatures = ConnectionWithAccess.mUserFeatures.Substring(0, 13) + "Y";
            else
                ConnectionWithAccess.mUserFeatures = ConnectionWithAccess.mUserFeatures.Substring(0, 13) + "N";
            if (chbPrivSaleV.Checked == true)
                ConnectionWithAccess.mUserFeatures = ConnectionWithAccess.mUserFeatures.Substring(0, 14) + "Y";
            else
                ConnectionWithAccess.mUserFeatures = ConnectionWithAccess.mUserFeatures.Substring(0, 14) + "N";
            if (chbPrivSaleE.Checked == true)
                ConnectionWithAccess.mUserFeatures = ConnectionWithAccess.mUserFeatures.Substring(0, 15) + "Y";
            else
                ConnectionWithAccess.mUserFeatures = ConnectionWithAccess.mUserFeatures.Substring(0, 15) + "N";
            if (chbPrivPurchaseV.Checked == true)
                ConnectionWithAccess.mUserFeatures = ConnectionWithAccess.mUserFeatures.Substring(0, 16) + "Y";
            else
                ConnectionWithAccess.mUserFeatures = ConnectionWithAccess.mUserFeatures.Substring(0, 16) + "N";
            if (chbPrivPurchaseE.Checked == true)
                ConnectionWithAccess.mUserFeatures = ConnectionWithAccess.mUserFeatures.Substring(0, 17) + "Y";
            else
                ConnectionWithAccess.mUserFeatures = ConnectionWithAccess.mUserFeatures.Substring(0, 17) + "N";
            if (chbPrivBankV.Checked == true)
                ConnectionWithAccess.mUserFeatures = ConnectionWithAccess.mUserFeatures.Substring(0, 18) + "Y";
            else
                ConnectionWithAccess.mUserFeatures = ConnectionWithAccess.mUserFeatures.Substring(0, 18) + "N";
            if (chbPrivBankE.Checked == true)
                ConnectionWithAccess.mUserFeatures = ConnectionWithAccess.mUserFeatures.Substring(0, 19) + "Y";
            else
                ConnectionWithAccess.mUserFeatures = ConnectionWithAccess.mUserFeatures.Substring(0, 19) + "N";
            if (chbPrivCashV.Checked == true)
                ConnectionWithAccess.mUserFeatures = ConnectionWithAccess.mUserFeatures.Substring(0, 20) + "Y";
            else
                ConnectionWithAccess.mUserFeatures = ConnectionWithAccess.mUserFeatures.Substring(0, 20) + "N";
            if (chbPrivCashE.Checked == true)
                ConnectionWithAccess.mUserFeatures = ConnectionWithAccess.mUserFeatures.Substring(0, 21) + "Y";
            else
                ConnectionWithAccess.mUserFeatures = ConnectionWithAccess.mUserFeatures.Substring(0, 21) + "N";
            if (chbPrivJournalV.Checked == true)
                ConnectionWithAccess.mUserFeatures = ConnectionWithAccess.mUserFeatures.Substring(0, 22) + "Y";
            else
                ConnectionWithAccess.mUserFeatures = ConnectionWithAccess.mUserFeatures.Substring(0, 22) + "N";
            if (chbPrivJournalE.Checked == true)
                ConnectionWithAccess.mUserFeatures = ConnectionWithAccess.mUserFeatures.Substring(0, 23) + "Y";
            else
                ConnectionWithAccess.mUserFeatures = ConnectionWithAccess.mUserFeatures.Substring(0, 23) + "N";
            if (chbPrivOthersAllV.Checked == true)
                ConnectionWithAccess.mUserFeatures = ConnectionWithAccess.mUserFeatures.Substring(0, 24) + "Y";
            else
                ConnectionWithAccess.mUserFeatures = ConnectionWithAccess.mUserFeatures.Substring(0, 24) + "N";
            if (chbPrivOthersAllE.Checked == true)
                ConnectionWithAccess.mUserFeatures = ConnectionWithAccess.mUserFeatures.Substring(0, 25) + "Y";
            else
                ConnectionWithAccess.mUserFeatures = ConnectionWithAccess.mUserFeatures.Substring(0, 25) + "N";
            if (chbPrivUSetngV.Checked == true)
                ConnectionWithAccess.mUserFeatures = ConnectionWithAccess.mUserFeatures.Substring(0, 26) + "Y";
            else
                ConnectionWithAccess.mUserFeatures = ConnectionWithAccess.mUserFeatures.Substring(0, 26) + "N";
            if (chbPrivUSetngE.Checked == true)
                ConnectionWithAccess.mUserFeatures = ConnectionWithAccess.mUserFeatures.Substring(0, 27) + "Y";
            else
                ConnectionWithAccess.mUserFeatures = ConnectionWithAccess.mUserFeatures.Substring(0, 27) + "N";
            if (chbPrivGSetngV.Checked == true)
                ConnectionWithAccess.mUserFeatures = ConnectionWithAccess.mUserFeatures.Substring(0, 28) + "Y";
            else
                ConnectionWithAccess.mUserFeatures = ConnectionWithAccess.mUserFeatures.Substring(0, 28) + "N";
            if (chbPrivGSetngE.Checked == true)
                ConnectionWithAccess.mUserFeatures = ConnectionWithAccess.mUserFeatures.Substring(0, 29) + "Y";
            else
                ConnectionWithAccess.mUserFeatures = ConnectionWithAccess.mUserFeatures.Substring(0, 29) + "N";
            if (chbPrivCompInV.Checked == true)
                ConnectionWithAccess.mUserFeatures = ConnectionWithAccess.mUserFeatures.Substring(0, 30) + "Y";
            else
                ConnectionWithAccess.mUserFeatures = ConnectionWithAccess.mUserFeatures.Substring(0, 30) + "N";
            if (chbPrivCompInE.Checked == true)
                ConnectionWithAccess.mUserFeatures = ConnectionWithAccess.mUserFeatures.Substring(0, 31) + "Y";
            else
                ConnectionWithAccess.mUserFeatures = ConnectionWithAccess.mUserFeatures.Substring(0, 31) + "N";
            if (chbPrivReportsV.Checked == true)
                ConnectionWithAccess.mUserFeatures = ConnectionWithAccess.mUserFeatures.Substring(0, 32) + "Y";
            else
                ConnectionWithAccess.mUserFeatures = ConnectionWithAccess.mUserFeatures.Substring(0, 32) + "N";
            if (chbPrivReportsE.Checked == true)
                ConnectionWithAccess.mUserFeatures = ConnectionWithAccess.mUserFeatures.Substring(0, 33) + "Y";
            else
                ConnectionWithAccess.mUserFeatures = ConnectionWithAccess.mUserFeatures.Substring(0, 33) + "N";
            if (chbPrivUtilitiesV.Checked == true)
                ConnectionWithAccess.mUserFeatures = ConnectionWithAccess.mUserFeatures.Substring(0, 34) + "Y";
            else
                ConnectionWithAccess.mUserFeatures = ConnectionWithAccess.mUserFeatures.Substring(0, 34) + "N";
            if (chbPrivUtilitiesE.Checked == true)
                ConnectionWithAccess.mUserFeatures = ConnectionWithAccess.mUserFeatures.Substring(0, 35) + "Y";
            else
                ConnectionWithAccess.mUserFeatures = ConnectionWithAccess.mUserFeatures.Substring(0, 35) + "N";
            if (chbPrivsendsms.Checked == true)
                ConnectionWithAccess.mUserFeatures = ConnectionWithAccess.mUserFeatures.Substring(0, 36) + "Y";
            else
                ConnectionWithAccess.mUserFeatures = ConnectionWithAccess.mUserFeatures.Substring(0, 36) + "N";
            if (chbPrivsendemail.Checked == true)
                ConnectionWithAccess.mUserFeatures = ConnectionWithAccess.mUserFeatures.Substring(0, 37) + "Y";
            else
                ConnectionWithAccess.mUserFeatures = ConnectionWithAccess.mUserFeatures.Substring(0, 37) + "N";
            if (chbPriveditaccount.Checked == true)
                ConnectionWithAccess.mUserFeatures = ConnectionWithAccess.mUserFeatures.Substring(0, 38) + "Y";
            else
                ConnectionWithAccess.mUserFeatures = ConnectionWithAccess.mUserFeatures.Substring(0, 38) + "N";
            if (chbPriveditinvoice.Checked == true)
                ConnectionWithAccess.mUserFeatures = ConnectionWithAccess.mUserFeatures.Substring(0, 39) + "Y";
            else
                ConnectionWithAccess.mUserFeatures = ConnectionWithAccess.mUserFeatures.Substring(0, 39) + "N";
            if (chbPrivprintinvoice.Checked == true)
                ConnectionWithAccess.mUserFeatures = ConnectionWithAccess.mUserFeatures.Substring(0, 40) + "Y";
            else
                ConnectionWithAccess.mUserFeatures = ConnectionWithAccess.mUserFeatures.Substring(0, 40) + "N";
            if (chbcompanydetail.Checked == true)
                ConnectionWithAccess.mUserFeatures = ConnectionWithAccess.mUserFeatures.Substring(0, 41) + "Y";
            else
                ConnectionWithAccess.mUserFeatures = ConnectionWithAccess.mUserFeatures.Substring(0, 41) + "N";
            if (chb_export_to_excel.Checked == true)
                ConnectionWithAccess.mUserFeatures = ConnectionWithAccess.mUserFeatures.Substring(0, 42) + "Y";
            else
                ConnectionWithAccess.mUserFeatures = ConnectionWithAccess.mUserFeatures.Substring(0, 42) + "N";
            if (chb_add_datetime_in_output.Checked == true)
                ConnectionWithAccess.mUserFeatures = ConnectionWithAccess.mUserFeatures.Substring(0, 43) + "Y";
            else
                ConnectionWithAccess.mUserFeatures = ConnectionWithAccess.mUserFeatures.Substring(0, 43) + "N";
            if (chb_allow_stock_check_bypass.Checked == true)
                ConnectionWithAccess.mUserFeatures = ConnectionWithAccess.mUserFeatures.Substring(0, 44) + "Y";
            else
                ConnectionWithAccess.mUserFeatures = ConnectionWithAccess.mUserFeatures.Substring(0, 44) + "N";
        }

        private void ClearAllUserSettings()
        {
            chbPrivMastersAllV.Checked = false;
            chbPrivMastersAllE.Checked = false;
            chbPrivAccountV.Checked = false;
            chbPrivAccountE.Checked = false;
            chbPrivItemV.Checked = false;
            chbPrivItemE.Checked = false;
            chbPrivTaxV.Checked = false;
            chbPrivTaxE.Checked = false;
            chbPrivDbcV.Checked = false;
            chbPrivDbcE.Checked = false;
            chbPrivPeriodV.Checked = false;
            chbPrivPeriodE.Checked = false;
            chbPrivDataEntAllV.Checked = false;
            chbPrivDataEntAllE.Checked = false;
            chbPrivSaleV.Checked = false;
            chbPrivSaleE.Checked = false;
            chbPrivPurchaseV.Checked = false;
            chbPrivPurchaseE.Checked = false;
            chbPrivBankV.Checked = false;
            chbPrivBankE.Checked = false;
            chbPrivCashE.Checked = false;
            chbPrivCashV.Checked = false;
            chbPrivJournalV.Checked = false;
            chbPrivJournalE.Checked = false;
            chbPrivOthersAllV.Checked = false;
            chbPrivOthersAllE.Checked = false;
            chbPrivUSetngV.Checked = false;
            chbPrivUSetngE.Checked = false;
            chbPrivGSetngV.Checked = false;
            chbPrivGSetngE.Checked = false;
            chbPrivCompInV.Checked = false;
            chbPrivCompInE.Checked = false;
            chbPrivReportsV.Checked = false;
            chbPrivReportsE.Checked = false;
            chbPrivUtilitiesV.Checked = false;
            chbPrivUtilitiesE.Checked = false;
            chbPrivUSetngV.Checked = false;
            chbPrivUSetngE.Checked = false;
            chbPrivsendsms.Checked = false;
            chbPrivsendemail.Checked = false;
            chbPriveditaccount.Checked = false;
            chbPriveditinvoice.Checked = false;
            chbPrivprintinvoice.Checked = false;
            chbcompanydetail.Checked = false;
            chb_export_to_excel.Checked = false;
            chb_add_datetime_in_output.Checked = false;
            chb_allow_stock_check_bypass.Checked = false;
        }

        #region refresh_data

        private void refresh_date_range()
        {
            if (maintab.SelectedIndex == 1 && subtabDataEntry.SelectedIndex == 0 && subtabsale.SelectedIndex == 0)
            {
                if (sidatetime.Value <= Convert.ToDateTime(ConnectionWithAccess.medate))
                {
                    if (sidatetime.Value <= DateTime.Now)
                    {
                        if (sidatetime.MinDate <= DateTime.Now)
                        {
                            sidatetime.MaxDate = DateTime.Today;
                            sidatetime.Value = DateTime.Today;
                            dtp_sisale_lr_date.Value = sidatetime.Value;
                        }
                    }
                }
            }
        }

        //private void fAddBlankRowInGrid(DataGridView dgvData)
        //{
        //    if (dgvData != null && dgvData.Rows.Count > 0)
        //    {
        //        DataTable dtSource = (DataTable)dgvData.DataSource;
        //        if (dtSource != null)
        //        {
        //            DataTable dtBlank = dtSource.Clone();
        //            DataRow drNewRow = dtBlank.NewRow();
        //            drNewRow[0] = "";
        //            drNewRow[1] = "";
        //            dtBlank.Rows.Add(drNewRow);
        //            dgvData.DataSource = null;
        //            dgvData.DataSource = dtBlank;
        //        }
        //    }
        //}

        private void refresh_data_entry_simple_sale_for_new_record()
        {
            simple_s_a.Text = "@@@";
            simple_partyname.Text = "";
            simple_partycity.Text = "";
            simple_itemsalelist.DataSource = null;
            simple_itemsalelist.Rows.Clear();
            ConnectionWithAccess.query = "SELECT max(d_n) +1 from " + ConnectionWithAccess.tablename[21] + " where prd = '" + ConnectionWithAccess.mprd + "' and d_n <> 999999 and d_c = " + sidbc.SelectedValue.ToString();
            ConnectionCommand.ExportToText(sidbc, simple_docno);
            ConnectionWithAccess.md_n = simple_docno.Text;
            refresh_date_range();
            simple_party_help.Visible = false;
            simple_item_help.Visible = false;
        }

        private void refresh_data_entry_sale_for_new_record()
        {
            sideliverycode.Visible = false;
            sideliverycity.Visible = false;
            lbl_sideliver.Visible = false;
            lbl_si_message.Visible = false;
            pdf_invoice.Visible = false;
            new_sale_invoice = true;
            tb_si_mobilenumber.Visible = false;
            tb_si_mobilenumber.Text = "";
            DispEmail.Text = "";
            pb_si_sendsms.Visible = false;
            sale_invoice_saved = false;
            ConnectionWithAccess.data_entry_working = null;
            sis_a.Clear();
            sid_y.Clear();
            siitemlist.DataSource = null;
            siitemlist.Rows.Clear();
            //siitemlist.Rows.Add();
            old_sale_invoice_amount = 0;
            cb_print_Tpt_copy.Visible = false;
            cb_print_chit_copy.Visible = false;
            sisalelistdg.Visible = true;
            DispEmail.Clear();
            sipartyname.Clear();
            sipartyaddress.Clear();
            sicontactdetails.Clear();
            sitransport.Items.Clear();
            sideliverycode.Clear();
            sideliverycity.Clear();
            sibasicamt.Text = "0.00";
            si_freight_amt.Text = "0.00";
            si_packing_amt.Text = "0.00";
            si_insurance_amt.Text = "0.00";
            si_other_amt.Text = "0.00";
            sitaxamt.Text = "0.00";
            siroundoffamt.Text = "0.00";
            sigrossamt.Text = "0.00";
            sitaxcode.Text = "0";
            sitaxdesc.Text = "";
            sitaxrate.Text = "0.00";
            sitransport.Text = "";
            sitransport.Enabled = false;
            sipartybalance.Text = "0.00";
            si_cash_received.Text = "0.00";
            old_cash_received_against_sale_invoice = 0;
            sisale_lr_no.Text = "";
            sicomments.Text = "";
            sipartycode.ReadOnly = false;
            ConnectionWithAccess.ms_a = null;
            sipartycode.Text = "";
            sicity.Text = "";
            ConnectionWithAccess.query = "SELECT max(d_n) +1 from " + ConnectionWithAccess.tablename[21] + " where prd = '" + ConnectionWithAccess.mprd + "' and d_n <> 999999 and d_c = " + sidbc.SelectedValue.ToString();
            ConnectionCommand.ExportToText(sidbc, sidocno);
            ConnectionWithAccess.md_n = sidocno.Text;
            //refresh_date_range();
            si_party_help.Visible = false;
            si_item_help.Visible = false;
            //siitemlist.Enabled = false;
            sitaxlist.Visible = false;
            si_cash_received.Visible = false;
            lbl_si_cash_received.Visible = false;
            si_freight_amt.ReadOnly = true;
            si_packing_amt.ReadOnly = true;
            si_insurance_amt.ReadOnly = true;
            si_other_amt.ReadOnly = true;
            msalepdf = null;
            old_sale_invoice_amount = 0;
            pb_eway_bill_url.Visible = false;
            lbl_si_trans_mode.Visible = false;
            lbl_si_kilometers.Visible = false;
            cb_si_trans_mode.Visible = false;
            tb_si_kilometers.Visible = false;
            set_invoice_date(21, sidocno.Text, Convert.ToInt32(sidbc.SelectedValue.ToString()));
            sipartycode.Focus();
        }

        private void refresh_data_entry_sale_replacement_for_new_record()
        {
            ConnectionWithAccess.data_entry_working = null;
            srs_a.Clear();
            srd_y.Clear();
            srpartycode.Clear();
            srpartyname.Clear();
            srcity.Clear();
            srpartyaddress.Clear();
            srcontactdetails.Clear();
            srlastinvoice.Clear();
            srpartybalance.Text = "0.00";
            sritemlist.DataSource = null;
            sritemlist.Enabled = false;
            old_sale_invoice_amount = 0;
            cb_print_Tpt_copy.Visible = false;
            cb_print_chit_copy.Visible = false;
            srsalelistdg.Visible = true;
            srtaxcode.Visible = false;
            sr_party_help.Visible = false;
            sr_item_help.Visible = false;
            DispEmail.Clear();
            srtransport.Clear();
            srbasicamt.Text = "0.00";
            srtaxamt.Text = "0.00";
            srgrossamt.Text = "0.00";
            srtaxcode.Text = "0";
            srtaxdesc.Text = "";
            srpartycode.Enabled = true;
            ConnectionWithAccess.ms_a = null;
            srpartycode.Text = "";
            ConnectionWithAccess.query = "SELECT max(d_n) +1 from " + ConnectionWithAccess.tablename[30] + " where prd = '" + ConnectionWithAccess.mprd + "' and d_n <> 999999 and d_c = " + srdbc.SelectedValue.ToString();
            ConnectionCommand.ExportToText(srdbc, srdocno);
            ConnectionWithAccess.md_n = srdocno.Text;
            //dateCheckForSaleInvoice();
            si_party_help.Visible = false;
            ConnectionWithAccess.query = "select [type], item_code, [title], q_cs, [box], qty, price, amount, cat,igst_per,hsn_code from " + ConnectionWithAccess.tablename[03] + " where prd = '0'";
            ConnectionCommand.accountHelp_datatable_Seperate(sritemlist, "sritemlist");
            fillsrreplamentlist();
            srpartycode.Focus();
        }

        private void refresh_data_entry_sale_order_for_new_record()
        {
            pdf_invoice.Visible = false;
            new_sale_invoice = true;
            DispEmail.Text = "";
            sale_invoice_saved = false;
            ConnectionWithAccess.data_entry_working = null;
            sos_a.Clear();
            sod_y.Clear();
            soitemlist.DataSource = null;
            soitemlist.Rows.Clear();
            old_sale_invoice_amount = 0;
            cb_print_Tpt_copy.Visible = false;
            cb_print_chit_copy.Visible = false;
            sosalelistdg.Visible = true;
            DispEmail.Clear();
            sipartyname.Clear();
            sipartyaddress.Clear();
            sicontactdetails.Clear();
            sotaxamt.Text = "0.00";
            soroundoffamt.Text = "0.00";
            sogrossamt.Text = "0.00";
            sotaxcode.Text = "0";
            sotaxdesc.Text = "";
            sotaxrate.Text = "0.00";
            sotransport.Text = "";
            sotransport.Enabled = false;
            sopartybalance.Text = "0.00";
            sopartycode.Enabled = true;
            socity.Enabled = true;
            ConnectionWithAccess.ms_a = null;
            sopartycode.Text = "";
            socity.Text = "";
            ConnectionWithAccess.query = "SELECT max(d_n) +1 from " + ConnectionWithAccess.tablename[7] + " where prd = '" + ConnectionWithAccess.mprd + "' and d_n <> 999999 and d_c = " + sodbc.SelectedValue.ToString();
            ConnectionCommand.ExportToText(sodbc, sodocno);
            ConnectionWithAccess.md_n = sodocno.Text;
            refresh_date_range();
            so_party_help.Visible = false;
            soitemlist.Enabled = false;
            sopartycode.Focus();
        }

        private void refresh_data_entry_purc_for_new_record()
        {
            pi_party_help.Visible = false;
            pi_item_help.Visible = false;
            piitemlist.DataSource = null;
            piitemlist.Rows.Clear();
            piitemlist.Enabled = false;
            old_purchase_invoice_number = "";
            cb_pack_igst_per.Text = "0";
            tb_pi_igst_tax_amount.Text = "0.00";
            pi_freight_amt.Text = "0.00";
            pi_packing_amt.Text = "0.00";
            pi_insurance_amt.Text = "0.00";
            pi_other_amt.Text = "0.00";
            pi_freight_amt.ReadOnly = true;
            pi_packing_amt.ReadOnly = true;
            pi_insurance_amt.ReadOnly = true;
            pi_other_amt.ReadOnly = true;
            lbl_pi_message.Visible = false;
            tb_pi_mobilenumber.Text = "";
            tb_pi_mobilenumber.Visible = false;
            pb_pi_sendsms.Visible = false;
            item_purchase_list.Clear();
            ConnectionWithAccess.data_entry_working = null;
            pia_n.Clear();
            pis_a.Clear();
            old_purchase_invoice_amount = 0;
            pitx_code.Enabled = true;
            pidocno.Clear();
            picity.Clear();
            pitransport.Enabled = false;
            cb_print_Tpt_copy.Visible = false;
            cb_print_chit_copy.Visible = false;
            pipurchaselist.Visible = true;
            pitaxcode.Enabled = false;
            sitaxlist.Visible = false;
            DispEmail.Clear();
            sipartyname.Clear();
            sipartyaddress.Clear();
            sicontactdetails.Clear();
            pitransport.Items.Clear();
            pibasicamt.Text = "0.00";
            pitaxamt.Text = "0.00";
            piroundoffamt.Text = "0.00";
            pigrossamt.Text = "0.00";
            pitaxcode.Text = "0";
            pipartycode.Enabled = true;
            pipartycode.Clear();
            pisuppliername.Clear();
            pisupplieraddress.Clear();
            pipartybalance.Clear();
            pia_n.Clear();
            pis_a.Clear();
            pitaxcode.Clear();
            pitaxdesc.Clear();
            pitransport.Text = "";
            pitx_code.Clear();
            pitaxrate.Clear();
            pi_cash_paid.Text = "0.00";
            pipartycode.Focus();
        }

        private void refresh_data_entry_purc_replacement_for_new_record()
        {
            ConnectionWithAccess.data_entry_working = null;
            prs_a.Clear();
            prpartycode.Clear();
            pritemlist.Rows.Clear();
            old_sale_invoice_amount = 0;
            cb_print_Tpt_copy.Visible = false;
            cb_print_chit_copy.Visible = false;
            prtaxcode.Visible = false;
            DispEmail.Clear();
            prtransport.Clear();
            prbasicamt.Text = "0.00";
            prtaxamt.Text = "0.00";
            prgrossamt.Text = "0.00";
            prtaxcode.Text = "0";
            prtaxdesc.Text = "";
            prpartycode.Enabled = true;
            ConnectionWithAccess.ms_a = null;
            prpartycode.Text = "";
            ConnectionWithAccess.query = "SELECT max(d_n) +1 from " + ConnectionWithAccess.tablename[30] + " where prd = '" + ConnectionWithAccess.mprd + "' and d_n <> 999999 and d_c = " + prdbc.SelectedValue.ToString();
            ConnectionCommand.ExportToText(prdbc, prdocno);
            ConnectionWithAccess.md_n = prdocno.Text;
            si_party_help.Visible = false;
            ConnectionWithAccess.query = "select [type], item_code, [title], q_cs, [box], qty, price, amount, cat,igst_per,hsn_code from " + ConnectionWithAccess.tablename[03] + " where prd = '0'";
            ConnectionCommand.accountHelp_datatable_Seperate(pritemlist, "pritemlist");
            fillprreplamentlist();
            prpartycode.Focus();
        }

        private void refresh_bank_document_number()
        {
            if (subtabbank.SelectedIndex == 0 && brdbc.Items.Count >= 1)
            {
                brchkstatus.SelectedIndex = 1;
                ConnectionWithAccess.query = "SELECT max(d_n) +1 from " + ConnectionWithAccess.tablename[23] + " where prd = '" + ConnectionWithAccess.mprd + "' and d_n <> 999999 and d_c = " + brdbc.SelectedValue.ToString() + " and r_p = '2'";
                ConnectionCommand.ExportToText(brdbc, brdocno);
                bra_n.Text = null;
                brs_a.Text = null;
            }
            else if (subtabbank.SelectedIndex == 1 && bpdbc.Items.Count >= 1)
            {
                bpchkstatus.SelectedIndex = 1;
                ConnectionWithAccess.query = "SELECT max(d_n) +1 from " + ConnectionWithAccess.tablename[23] + " where prd = '" + ConnectionWithAccess.mprd + "' and d_n <> 999999 and d_c = " + bpdbc.SelectedValue.ToString().ToString() + " and r_P = '4'";
                ConnectionCommand.ExportToText(bpdbc, bpdocno);
                bpa_n.Text = null;
                bps_a.Text = null;
            }
            else if (subtabbank.SelectedIndex == 2 && bddbc.Items.Count >= 1)
            {
                ConnectionWithAccess.query = "SELECT max(d_n) +1 from " + ConnectionWithAccess.tablename[23] + " where prd = '" + ConnectionWithAccess.mprd + "' and d_n <> 999999 and d_c = " + bddbc.SelectedValue.ToString() + " and b_t = '3' and r_p = '1'";
                ConnectionCommand.ExportToText(bddbc, bddocno);
            }
            else if (subtabbank.SelectedIndex == 3 && bwdbc.Items.Count >= 1)
            {
                ConnectionWithAccess.query = "SELECT max(d_n) +1 from " + ConnectionWithAccess.tablename[23] + " where prd = '" + ConnectionWithAccess.mprd + "' and d_n <> 999999 and d_c = " + bwdbc.SelectedValue.ToString() + " and b_t = '3' and r_p = '3'";
                ConnectionCommand.ExportToText(bwdbc, bwdocno);
            }
            else if (subtabbank.SelectedIndex == 4)
            {
                ConnectionWithAccess.query = "SELECT max(d_n) +1 from " + ConnectionWithAccess.tablename[23] + " where prd = '" + ConnectionWithAccess.mprd + "' and d_n <> 999999 and r_p = '5' and b_t = '3'";
                ConnectionCommand.ExportToText(cb_tr_from_dc, tr_docno);
                //get_account_name_from_d_c("B",Convert.ToInt32(cb_tr_from_dc.SelectedValue.ToString()));
                //get_bank_balance(ConnectionWithAccess.mprd, ConnectionWithAccess.bank_a_n);
                //tr_from_bank_curr_bal.Text = Convert.ToString(old_bank_balance);
                //get_account_name_from_d_c("B", Convert.ToInt32(cb_tr_to_dc.SelectedValue.ToString()));
                //get_bank_balance(ConnectionWithAccess.mprd, ConnectionWithAccess.bank_a_n);;
                //tr_to_bank_curr_bal.Text = Convert.ToString(old_bank_balance);
            }
        }

        private void refresh_cash_document_number()
        {
            if (crdbc.Items.Count > 0)
            {
                if (subtabcash.SelectedIndex == 0)
                {
                    ConnectionWithAccess.query = "SELECT d_n from " + ConnectionWithAccess.tablename[24] + " where prd = '" + ConnectionWithAccess.mprd + "' and d_n <> 999999 and d_c = " + crdbc.SelectedValue.ToString() + " and d_d = @d_d_date order by d_n";
                    search_on_particular_date_in_select_query("@d_d_date", crdatetime.Value);
                    //List<ConnectionWithAccess.QueryParams> objParams = new List<ConnectionWithAccess.QueryParams>();
                    //ConnectionWithAccess.QueryParams ParamFrom = new ConnectionWithAccess.QueryParams();
                    //ParamFrom.paramName = "@D_D_Date";
                    //ParamFrom.paramValue = Convert.ToDateTime(crdatetime.Value.ToShortDateString());
                    //objParams.Add(ParamFrom);
                    //ConnectionWithAccess.QueryParamList = objParams;
                    DataTable dtData1 = ConnectionCommand.fGetDataTable();
                    if (dtData1 != null && dtData1.Rows.Count > 0)
                    {
                        for (int iRowCount = 0; iRowCount < dtData1.Rows.Count; iRowCount++)
                        {
                            if (dtData1.Rows[iRowCount][0].ToString() != "")
                            {
                                if (crdocno.Text != "")
                                {
                                    if (Convert.ToInt32(crdocno.Text) < Convert.ToInt32(dtData1.Rows[iRowCount][0].ToString()) + 1)
                                        crdocno.Text = (Convert.ToInt32(dtData1.Rows[iRowCount][0].ToString()) + 1).ToString();
                                }
                                else
                                    crdocno.Text = (Convert.ToInt32(dtData1.Rows[iRowCount][0].ToString()) + 1).ToString();
                            }
                        }
                    }
                    else
                        crdocno.Text = "1";

                    //ConnectionWithAccess.query = "SELECT max(d_n) +1 from " + ConnectionWithAccess.tablename[24] + " where prd = '" + ConnectionWithAccess.mprd + "' and d_n <> 999999 and d_c = " + crdbc.SelectedValue.ToString();
                    //ConnectionCommand.ExportToText(crdbc, crdocno);
                    cra_n.Clear();
                    crs_a.Clear();
                }
                else if (subtabcash.SelectedIndex == 1)
                {
                    ConnectionWithAccess.query = "SELECT d_n from " + ConnectionWithAccess.tablename[24] + " where prd = '" + ConnectionWithAccess.mprd + "' and d_n <> 999999 and d_c = " + cpdbc.SelectedValue.ToString() + " and d_d = @d_d_date order by d_n";
                    search_on_particular_date_in_select_query("@d_d_date", cpdatetime.Value);
                    //List<ConnectionWithAccess.QueryParams> objParams = new List<ConnectionWithAccess.QueryParams>();
                    //ConnectionWithAccess.QueryParams ParamFrom = new ConnectionWithAccess.QueryParams();
                    //ParamFrom.paramName = "@D_D_Date";
                    //ParamFrom.paramValue = Convert.ToDateTime(cpdatetime.Value.ToShortDateString());
                    //objParams.Add(ParamFrom);
                    //ConnectionWithAccess.QueryParamList = objParams;
                    DataTable dtData1 = ConnectionCommand.fGetDataTable();
                    if (dtData1 != null && dtData1.Rows.Count > 0)
                    {
                        temp_int = 0;
                        int mcolumncount = dtData1.Columns.Count;
                        for (int iRowCount = 0; iRowCount < dtData1.Rows.Count; iRowCount++)
                        {
                            temp_int = Convert.ToInt32(dtData1.Rows[iRowCount][0].ToString());

                        }
                        cpdocno.Text = (temp_int + 1).ToString();
                    }
                    else
                        cpdocno.Text = "1";
                    //ConnectionCommand.ExportToText(cpdbc, cpdocno);
                    //temp_word = Convert.ToString(cpdatetime.Value.Year) + Convert.ToString(cpdatetime.Value.Month);
                    //cpdocno.Text = cpdocno.Text.Replace(temp_word, "");
                    cpa_n.Clear();
                    cps_a.Clear();
                    cpcurcashbal.Text = Convert.ToString(get_cash_balance("2010", "@@@", cpdatetime.Value.ToString()));
                }
            }
        }

        private void refresh_data_entry_bank_for_new_record()
        {
            DispEmail.Clear();
            if (subtabbank.SelectedIndex == 0)
            {
                tb_br_mobilenumber.Text = "";
                old_bank_receipt_amount = 0;
                if (DateTime.Today > Convert.ToDateTime(ConnectionWithAccess.medate))
                    brdatetime.Value = Convert.ToDateTime(ConnectionWithAccess.medate);
                else
                    brdatetime.Value = DateTime.Today;
                brdid.Clear();
                brformid.Clear();
                brpartyaddress.Clear();
                brpartycontact.Clear();
                brpartyname.Clear();
                brpid.Clear();
                bramt.Clear();
                brchkdate.Text = null;
                brchkno.Text = "0";
                brchkstatus.SelectedIndex = 1;
                brcomm.Text = null;
                brcurbankbal.Text = null;
                brdocno.Text = null;
                brpartycode.Text = null;
                brpartycity.Text = null;
                brpartyoverallbalance.Text = "0.00";
                refresh_bank_document_number();
                fill_bank_trans_list();
                get_account_name_from_d_c("B", Convert.ToInt32(brdbc.SelectedValue.ToString()));
                brcurbankbal.Text = Convert.ToString(get_bank_balance(ConnectionWithAccess.bank_a_n, "@@@", DateTime.Today.ToShortDateString()));
                brpartycode.Focus();
            }
            else if (subtabbank.SelectedIndex == 1)
            {
                bp_basicamt.ReadOnly = true;
                bp_igst_per.ReadOnly = true;
                bpamt.ReadOnly = true;
                tb_bp_mobilenumber.Text = "";
                old_bank_payment_amount = 0;
                if (DateTime.Today > Convert.ToDateTime(ConnectionWithAccess.medate))
                {
                    bpdatetime.MinDate = Convert.ToDateTime(ConnectionWithAccess.msdate);
                    bpdatetime.MaxDate = Convert.ToDateTime(ConnectionWithAccess.medate);
                    bpdatetime.Value = Convert.ToDateTime(ConnectionWithAccess.medate);
                }
                else
                    bpdatetime.Value = DateTime.Today;
                bpamt.Text = "0.00";
                bpchkdate.Text = null;
                bpchkno.Text = "0";
                bpchkstatus.SelectedIndex = 1;
                bpcomm.Text = null;
                bpcurbankbal.Text = null;
                bpdocno.Text = null;
                bppartycode.Text = null;
                bppartycity.Text = null;
                bp_basicamt.Text = "0.00";
                bp_igst_per.Text = "0.00";
                bp_igstamt.Text = "0.00";
                refresh_bank_document_number();
                fill_bank_trans_list();
                get_account_name_from_d_c("B", Convert.ToInt32(bpdbc.SelectedValue.ToString()));
                bpcurbankbal.Text = Convert.ToString(get_bank_balance(ConnectionWithAccess.bank_a_n, "@@@", DateTime.Today.ToShortDateString()));
                bp_dgv_gst_tax_brief.Visible = false;
                btn_cheque_print.Visible = false;
                bppartycode.Focus();
            }
            else if (subtabbank.SelectedIndex == 2)
            {
                tb_bd_mobilenumber.Text = "";
                old_bank_deposit_amount = 0;
                if (DateTime.Today > Convert.ToDateTime(ConnectionWithAccess.medate))
                    bddatetime.Value = Convert.ToDateTime(ConnectionWithAccess.medate);
                else
                    bddatetime.Value = DateTime.Today;
                bdamt.Clear();
                //bdbankname.Text = null;
                bdcomm.Text = null;
                bdcurbankbal.Text = null;
                bddatetime.Text = null;
                bddocno.Text = null;
                bdpartycode.Text = null;
                refresh_bank_document_number();
                fill_bank_trans_list();
                get_account_name_from_d_c("B", Convert.ToInt32(bddbc.SelectedValue.ToString()));
                bdcurbankbal.Text = Convert.ToString(get_bank_balance(ConnectionWithAccess.bank_a_n, "@@@", DateTime.Today.ToShortDateString()));
                bdcurcashbal.Text = Convert.ToString(get_cash_balance("2010", "@@@", DateTime.Today.ToShortDateString()));
                bdamt.Focus();
                move_cursor_to_button_position("atbnew");
            }
            else if (subtabbank.SelectedIndex == 3)
            {
                tb_bw_mobilenumber.Text = "";
                old_bank_withdrawal_amount = 0;
                if (DateTime.Today > Convert.ToDateTime(ConnectionWithAccess.medate))
                    bwdatetime.Value = Convert.ToDateTime(ConnectionWithAccess.medate);
                else
                    bwdatetime.Value = DateTime.Today;
                bwamt.Clear();
                bwcomm.Text = null;
                bwdocno.Text = null;
                refresh_bank_document_number();
                fill_bank_trans_list();
                get_account_name_from_d_c("B", Convert.ToInt32(bwdbc.SelectedValue.ToString()));
                bwcurbankbal.Text = Convert.ToString(get_bank_balance(ConnectionWithAccess.bank_a_n, "@@@", DateTime.Today.ToShortDateString()));
                bwcurcashbal.Text = Convert.ToString(get_cash_balance(ConnectionWithAccess.cash_a_n, "@@@", DateTime.Today.ToShortDateString()));
                bwamt.Focus();
                move_cursor_to_button_position("atbnew");
            }
            else if (subtabbank.SelectedIndex == 4)
            {
                old_bank_transfer_amount = 0;
                if (DateTime.Today > Convert.ToDateTime(ConnectionWithAccess.medate))
                    tr_datetime.Value = Convert.ToDateTime(ConnectionWithAccess.medate);
                else
                    tr_datetime.Value = DateTime.Today;
                tr_docno.Text = null;
                ConnectionWithAccess.md_n = null;
                tr_amt.Text = null;
                tr_comm.Text = null;
                refresh_bank_document_number();
                fill_bank_trans_list();
                get_account_name_from_d_c("B", Convert.ToInt32(cb_tr_from_dc.SelectedValue.ToString()));
                tr_from_bank_curr_bal.Text = Convert.ToString(get_bank_balance(ConnectionWithAccess.bank_a_n, "@@@", DateTime.Today.ToShortDateString()));
                get_account_name_from_d_c("B", Convert.ToInt32(cb_tr_to_dc.SelectedValue.ToString()));
                tr_to_bank_curr_bal.Text = Convert.ToString(get_bank_balance(ConnectionWithAccess.bank_a_n, "@@@", DateTime.Today.ToShortDateString()));
                tr_amt.Focus();
                move_cursor_to_button_position("atbnew");
            }
        }

        private void refresh_data_entry_cash_for_new_record()
        {
            if (subtabcash.SelectedIndex == 0)
            {
                tb_cr_mobilenumber.Text = "";
                cramt.ReadOnly = true;
                cra_n.Clear();
                crs_a.Clear();
                old_cash_receipt_amount = 0;
                crpartyname.Text = null;
                crpartyaddress.Text = null;
                crpartycontact.Text = null;
                crpartybalance.Text = null;
                cramt.Text = "0.00";
                crcomm.Text = null;
                crcurcashbal.Text = null;
                crdocno.Text = null;
                crpartycode.Text = null;
                crpartycity.Text = null;
                DispEmail.Clear();
                refresh_cash_document_number();
                fill_cr_tran_list();
                get_account_name_from_d_c("C", Convert.ToInt32(crdbc.SelectedValue.ToString()));
                crcurcashbal.Text = Convert.ToString(get_cash_balance(ConnectionWithAccess.cash_a_n, "@@@", DateTime.Today.ToShortDateString()));
                if (crtranlist.Rows.Count > 0)
                {
                    crdatetime.Value = Convert.ToDateTime(crtranlist.Rows[0].Cells[0].Value.ToString());
                }
                crpartycode.Focus();
            }
            else if (subtabcash.SelectedIndex == 1)
            {
                label175.Text = "";
                cpdocno.Text = "";
                refresh_cash_document_number();
                tb_cp_mobilenumber.Text = "";
                cpamt.ReadOnly = true;
                cp_igst_per.ReadOnly = true;
                cp_igstamt.ReadOnly = true;
                cp_basicamt.ReadOnly = true;
                cp_igstamt.Text = "0.00";
                cp_igst_per.Text = "0.00";
                cp_basicamt.Text = "0.00";
                cpamt.Text = "0.00";
                cpa_n.Clear();
                cps_a.Clear();
                old_cash_payment_amount = 0;
                DispEmail.Clear();
                cppartyname.Text = null;
                cppartyaddress.Text = null;
                cppartycontact.Text = null;
                cppartyoverallbalance.Text = "0.00";
                cpcomm.Text = null;
                cpcurcashbal.Text = null;
                cppartycode.Text = null;
                cppartycity.Text = null;
                fill_cp_tran_list();
                cpcurcashbal.Text = Convert.ToString(get_cash_balance(ConnectionWithAccess.cash_a_n, "@@@", DateTime.Today.ToShortDateString()));
                if (cptranlist.Rows.Count > 0)
                    cpdatetime.Value = Convert.ToDateTime(cptranlist.Rows[0].Cells[0].Value.ToString());
                cp_dgv_gst_tax_brief.Visible = false;
                cppartycode.Focus();
            }
        }

        private void refresh_data_entry_journal_for_new_record()
        {
            jj_dgv_gst_tax_brief.Visible = false;
            jj_dgv_gst_tax_brief.DataSource = null;
            gb_payee_details.Visible = false;
            gb_payer_details.Visible = false;
            cb_tr_to_dc.Enabled = true;
            ja_n.Clear();
            js_a.Clear();
            jna_n.Clear();
            jns_a.Clear();
            old_journal_amount = 0;
            DispEmail.Clear();
            jjdocno.Text = null;
            jjcomm.Text = null;
            jjamt.Text = "0.00";
            jjbamt.Text = "0.00";
            jjigst_per.Text = "0.00";
            jjigst_amt.Text = "0.00";
            jjpartycode1.Text = null;
            jjpartycode2.Text = null;
            jjpartycode2.Enabled = false;
            lbl_jour_payer_acc_head.Visible = false;
            jour_datagridview.Visible = false;
            jjamt.ReadOnly = true;
            jjbamt.ReadOnly = true;
            jjigst_per.ReadOnly = true;
            ConnectionWithAccess.query = "SELECT max(d_n) +1 from " + ConnectionWithAccess.tablename[25] + " where prd = '" + ConnectionWithAccess.mprd + "' and d_n <> 999999 and d_c = " + jjdbc.Text;
            ConnectionCommand.ExportToText(jjdbc, jjdocno);
            fill_jr_tran_list();
            jjpartycode1.Focus();
        }

        private void refresh_item_master()
        {
            tbTitle.ReadOnly = false;
            cb_change_item_name.Visible = false;
            tbItemType.Clear();
            tbItemCode.Clear();
            tbTitle.Clear();
            tbItemRate.Text = "0.00";
            tb_purc_price.Text = "0.00";
            tblbt.Text = "0";
            tbMinStock.Text = "0";
            tbCB.Text = "1";
            tbBQ.Text = "1";
            tbCurStock.Text = "0";
            tb_hsn_code.Text = "0";
            tb_item_open_stock.Text = "0";
            tb_igst_tax_rate.Text = "0.00";
            tb_hsn_code.Text = "";
            tb_purc_price.Text = "0.00";
            cb_item_in_use.SelectedIndex = 1;
            tb_item_printed.Text = "";
            tb_item_pitch.Text = "0.00";
            tb_item_length.Text = "0.00";
            tb_item_breadth.Text = "0.00";
            tb_item_location.Text = "";
            tb_item_moq.Text = "0";
            find_new_item_code();
            dgv_item_in_which_batch_list.DataSource = null;
            tbTitle.Focus();
        }

        private void refresh_tax_master()
        {
            tbTaxCode.Clear();
            tbTaxDesc.Clear();
            tbTaxRate.Clear();
            find_new_tax_code();
            tbTaxDesc.Focus();
        }

        private void refresh_user_settings()
        {
            tbUserName.Text = "";
            tbPassword.Text = "";
            chbPrivMastersAllV.Checked = false;
            chbPrivMastersAllE.Checked = false;
            chbPrivAccountV.Checked = false;
            chbPrivAccountE.Checked = false;
            chbPrivItemV.Checked = false;
            chbPrivItemE.Checked = false;
            chbPrivTaxV.Checked = false;
            chbPrivTaxE.Checked = false;
            chbPrivDbcV.Checked = false;
            chbPrivDbcE.Checked = false;
            chbPrivPeriodV.Checked = false;
            chbPrivPeriodE.Checked = false;
            chbPrivDataEntAllV.Checked = false;
            chbPrivDataEntAllE.Checked = false;
            chbPrivSaleV.Checked = false;
            chbPrivSaleE.Checked = false;
            chbPrivPurchaseV.Checked = false;
            chbPrivPurchaseE.Checked = false;
            chbPrivBankV.Checked = false;
            chbPrivBankE.Checked = false;
            chbPrivCashV.Checked = false;
            chbPrivCashE.Checked = false;
            chbPrivJournalV.Checked = false;
            chbPrivJournalE.Checked = false;

            chbPrivDataEntAllV.Checked = false;
            chbPrivSaleV.Checked = false;
            chbPrivPurchaseV.Checked = false;

            chbPrivOthersAllV.Checked = false;
            chbPrivUSetngV.Checked = false;
            chbPrivGSetngV.Checked = false;
            chbPrivCompInV.Checked = false;
            chbPrivReportsV.Checked = false;
            chbPrivUtilitiesV.Checked = false;

            chbPrivOthersAllE.Checked = false;
            chbPrivUSetngE.Checked = false;
            chbPrivGSetngE.Checked = false;
            chbPrivCompInE.Checked = false;
            chbPrivReportsE.Checked = false;
            chbPrivUtilitiesE.Checked = false;

            chbPrivsendsms.Checked = false;
            chbPrivsendemail.Checked = false;
            chbPriveditaccount.Checked = false;
            chbPriveditinvoice.Checked = false;
            chbPrivprintinvoice.Checked = false;
        }

        private void refresh_master_period()
        {
            temp_int = PeriodListDG.Rows.Count - 1;
            char c = Convert.ToChar(PeriodListDG.Rows[temp_int].Cells[0].Value.ToString());
            tbPrd.Text = Convert.ToString(Convert.ToChar((Convert.ToInt32(c)) + 1));
            Int64 addedDays = Convert.ToInt64(10);
            dtPrdSD.Value = Convert.ToDateTime(PeriodListDG.Rows[temp_int].Cells[2].Value).AddDays(1);
            dtPrdSD.MinDate = Convert.ToDateTime(dtPrdSD.Value);
            if (rb_yearly.Checked == true)
                dtPrdED.Value = Convert.ToDateTime(PeriodListDG.Rows[temp_int].Cells[2].Value).AddDays(365);
            else
            {
                //dtPrdED.Value = Convert.ToDateTime(PeriodListDG.Rows[temp_int].Cells[2].Value).AddDays(30);
                temp_datetime = Convert.ToDateTime(PeriodListDG.Rows[temp_int].Cells[2].Value);
                DateTime firstOfNextMonth = new DateTime(temp_datetime.Year, temp_datetime.Month, 1).AddMonths(2);
                DateTime lastOfThisMonth = firstOfNextMonth.AddDays(-1);
                dtPrdED.Value = lastOfThisMonth;
            }
            tbGP.Text = PeriodListDG.Rows[temp_int].Cells[4].Value.ToString();
            tb_vat_tax_required.Text = PeriodListDG.Rows[temp_int].Cells[5].Value.ToString();
            tb_print_form.Text = PeriodListDG.Rows[temp_int].Cells[7].Value.ToString();
            if (tbGP.Text == "")
                tbGP.Text = "0.00";
            if (tb_vat_tax_required.Text == "")
                tb_vat_tax_required.Text = "N";
            if (tb_print_form.Text == "")
                tb_print_form.Text = "1";
        }

        private void refresh_bank_details()
        {
            bankname.Text = "";
            BANKADDRESS.Text = "";
            BANKCITY.Text = "";
            BANKACCNUMBER.Text = "0";
            BANKNEFTIFSC.Text = "";
        }

        private void refresh_master_account()
        {
            btn_add_delivery_account.Visible = false;
            refresh_bank_details();
            cb_add_new_account.Checked = false;
            if (tbDesc.Text == "")
            {
                tbS_A.Text = "@@@";
                tbd_y.Text = "@@@";
                tbCity.Text = "";
                lbl_master_master_account_name.Visible = false;
                if (cbParent.SelectedItem.Equals("CURRENT ASSETS"))
                    tbA_N.Text = "15";
                else if (cbParent.SelectedItem.Equals("INVESTMENTS"))
                    tbA_N.Text = "16";
                else if (cbParent.SelectedItem.Equals("CURRENT LIABIALITIES"))
                    tbA_N.Text = "17";
                else if (cbParent.SelectedItem.Equals("BANK ACCOUNT"))
                    tbA_N.Text = "2011";
                else if (cbParent.SelectedItem.Equals("OLD CAPITAL ACCOUNT"))
                    tbA_N.Text = "3000";
                else if (cbParent.SelectedItem.Equals("CAPITAL ACCOUNT"))
                    tbA_N.Text = "3001";
                else if (cbParent.SelectedItem.Equals("CASH IN HAND"))
                    tbA_N.Text = "2010";
                else if (cbParent.SelectedItem.Equals("INCOMES/EXPENSES(TRADING A/c.)"))
                    tbA_N.Text = "70";
                else if (cbParent.SelectedItem.Equals("FIXED ASSETS"))
                    tbA_N.Text = "1";
                else if (cbParent.SelectedItem.Equals("INCOMES/EXPENSES(P&L A/c.)"))
                    tbA_N.Text = "75";
                else if (cbParent.SelectedItem.Equals("LOANS GIVEN"))
                    tbA_N.Text = "3500";
                else if (cbParent.SelectedItem.Equals("LOANS TAKEN"))
                    tbA_N.Text = "3501";
                else if (cbParent.SelectedItem.Equals("LOANS"))
                    tbA_N.Text = "3555";
                else if (cbParent.SelectedItem.Equals("Taxes and Duties"))
                    tbA_N.Text = "3600";
                else if (cbParent.SelectedItem.Equals("Job Work"))
                    tbA_N.Text = jb_osm_a_n;
                else if (cbParent.SelectedItem.Equals("SUNDRY CREDITORS"))
                {
                    tbA_N.Text = "4002";
                    cb_master_d_c.Text = "2";
                }
                else if (cbParent.SelectedItem.Equals("SUNDRY DEBTORS"))
                {
                    cb_master_d_c.Text = "1";
                    if (cb_master_d_c.Text != "")
                    {
                        tbA_N.Text = get_a_n_from_d_c("S", Convert.ToInt32(cb_master_d_c.Text));
                        tbS_A.Text = "@@@";
                        tbd_y.Text = "@@@";
                    }
                    else
                        tbA_N.Text = "2002";

                    //cb_master_d_c.Text = get_d_c_from_a_n(tbA_N.Text).ToString();
                }

                else if (cbParent.SelectedItem.Equals("Opening Stock"))
                    tbA_N.Text = "2001";
                else if (cbParent.SelectedItem.Equals("Purchase Ac."))
                    tbA_N.Text = "7000";
                else if (cbParent.SelectedItem.Equals("Closing Stock"))
                    tbA_N.Text = "5000";
                else if (cbParent.SelectedItem.Equals("Sales Ac."))
                    tbA_N.Text = "6000";
                else if (cbParent.SelectedItem.Equals("Repair Charges"))
                    tbA_N.Text = "6300";
                else if (cbParent.SelectedItem.Equals("Gross Profit"))
                    tbA_N.Text = "719999";
                else if (cbParent.SelectedItem.Equals("Net Profit"))
                    tbA_N.Text = "7998";
                get_account_details_from_01(tbA_N.Text, "@@@");
                if (tbA_N.Text == "2001" || tbA_N.Text == "7000" || tbA_N.Text == "5000" || tbA_N.Text == "6000" || tbA_N.Text == "6300" || tbA_N.Text == "719999" || tbA_N.Text == "7998" || tbA_N.Text == "3000")
                {
                    function_working = "Fix";
                    tbDesc.Enabled = false;
                }
                else
                    tbDesc.Enabled = true;
                if (function_working != "New" && function_working != null)
                {// make tbdesc blank if its atbnew
                    if (account_detail_from_01.Count > 4)
                    {
                        tbDesc.Text = account_detail_from_01[4];
                        tbCity.Text = account_detail_from_01[8];
                    }
                    //update_master_account_screen_details(tbA_N.Text, tbS_A.Text, tbd_y.Text);
                }
            }
            else
            {
                tbDesc.Text = "";
                tbCity.Text = "";
                tbS_A.Text = "@@@";
                tbd_y.Text = "@@@";
            }
            //cb_change_master_account_name.Visible = false;
            if (cbParent.SelectedItem.Equals("BANK ACCOUNT") || cbParent.SelectedItem.Equals("CASH IN HAND") || cbParent.SelectedItem.Equals("SUNDRY CREDITORS") || cbParent.SelectedItem.Equals("SUNDRY DEBTORS") || cbParent.SelectedItem.Equals("FIXED ASSETS"))
                cb_add_new_account.Visible = true;
            else
                cb_add_new_account.Visible = false;
            cb_change_master_account_name.Checked = false;
            master_account_help_dg.Visible = false;
            dgvStdCodeHelp.Visible = false;
            Bank_Details.Visible = true;
            clear_all_master_account_screen_fields();
            tbDesc.ReadOnly = false;
            tbCity.ReadOnly = false;
            tbdelivery.Enabled = false;
            tbdelivery_city.Enabled = false;
            tbgst_number.BackColor = Color.White;
            tbDesc.Focus();
        }

        private void refresh_UserListDG()
        {
            //UserListDG.Rows.Clear();
            UserListDG.DataSource = null;
            ConnectionWithAccess.query = "select f1, f2, f3, f4, f5, f6, f7, f8, f9 from " + ConnectionWithAccess.tablename[52];
            ConnectionCommand.accountHelp_datatable_Seperate(UserListDG, "UserListDG");
        }

        private void refresh_item_batch_list()
        {
            ibl_type.Text = "";
            ibl_itemcode.Text = "";
            ibl_title.Text = "";
            ibl_title.Enabled = true;
            ibl_itemlist.DataSource = null;
            ibl_itemlist.Rows.Clear();
            ibl_itemlist.ReadOnly = true;
            ibl_available_dgv.Visible = true;
            dgv_item_purchase_details.Visible = false;
            ibl_basicamt.Text = "0.00";
            ibl_freightamt.Text = "0.00";
            ibl_grossamt.Text = "0.00";
        }

        private void refresh_item_stock_list()
        {
            tb_dataentry_stock_item_type.Text = "";
            tb_dataentry_stock_item_code.Text = "";
            tb_dataentry_stock_item_name.Text = "";
            dgv_stock_list.Visible = true;
            ConnectionWithAccess.query = "select f18.[type], f18.item_code, f5.[title], f18.clo_stk, f18.cat, f18.d_d from " + ConnectionWithAccess.tablename[18] + " f18 inner join " + ConnectionWithAccess.tablename[5] + " f5 on f18.[type] = f5.[type] and f18.item_code = f5.item_code order by f18.d_d, f18.[title]";
            ConnectionCommand.accountHelp_datatable_Seperate(dgv_stock_list, "dgv_stock_list");
            cb_item_in_use.Visible = false;
        }

        #endregion

        # region create_new


        private void create_new_additional()
        {
            tb_additional_desc.Clear();
            tb_additional_add1.Clear();
            tb_additional_add2.Clear();
            tb_additional_add3.Clear();
            tb_additional_city.Clear();
            tb_additional_pincode.Text = "0";
            find_new_additional_a_n(cb_additional_a_n.Text);
            cb_additional_a_n.Items.Add(ConnectionWithAccess.new_additional_a_n);
            cb_additional_a_n.Text = ConnectionWithAccess.new_additional_a_n;
            cb_additional_a_n.Enabled = true;
        }
        #endregion

        private void siitemlist_RowValidating(object sender, DataGridViewCellCancelEventArgs e)
        {
            ConnectionWithAccess.data_entry_working = "Sale Item";
        }

        # region calculate_data
        private void calculateSaleItemTotal()
        {
            int totalrowcount = siitemlist.Rows.Count;
            sale_invoice_amount = 0;
            for (int i = 0; i < totalrowcount; i++)
            {
                if (siitemlist.Rows[i].Cells[5].Value != System.DBNull.Value && siitemlist.Rows[i].Cells[6].Value != System.DBNull.Value)
                {
                    siitemlist.Rows[i].Cells[7].Value = Convert.ToDouble(siitemlist.Rows[i].Cells[5].Value) * Convert.ToDouble(siitemlist.Rows[i].Cells[6].Value);
                    if (siitemlist.Rows[i].Cells[7].Value != System.DBNull.Value)
                        sale_invoice_amount = sale_invoice_amount + Convert.ToDouble(siitemlist.Rows[i].Cells[7].Value);
                }
            }
            if (sale_invoice_amount == 0)
                sibasicamt.Enabled = true;
            sibasicamt.Text = Convert.ToString(sale_invoice_amount);
        }

        private void calculateSaleorderItemTotal()
        {
            int totalrowcount = soitemlist.Rows.Count;
            sale_order_amount = 0;
            for (int i = 0; i < totalrowcount; i++)
            {
                if (soitemlist.Rows[i].Cells[5].Value != System.DBNull.Value && soitemlist.Rows[i].Cells[6].Value != System.DBNull.Value)
                {
                    soitemlist.Rows[i].Cells[7].Value = Convert.ToDouble(soitemlist.Rows[i].Cells[5].Value) * Convert.ToDouble(soitemlist.Rows[i].Cells[6].Value);
                    if (soitemlist.Rows[i].Cells[7].Value != System.DBNull.Value)
                        sale_order_amount += Convert.ToDouble(soitemlist.Rows[i].Cells[7].Value);
                }
            }
            if (sale_order_amount == 0)
                sobasicamt.Enabled = true;
            sobasicamt.Text = Convert.ToString(sale_order_amount);
        }

        private void calculateSalereplaceItemTotal()
        {
            int totalrowcount = sritemlist.Rows.Count;
            sale_replace_amount = 0;
            for (int i = 0; i < totalrowcount; i++)
            {
                if (sritemlist.Rows[i].Cells[5].Value != System.DBNull.Value && sritemlist.Rows[i].Cells[6].Value != System.DBNull.Value)
                {
                    sritemlist.Rows[i].Cells[7].Value = Convert.ToDouble(sritemlist.Rows[i].Cells[5].Value) * Convert.ToDouble(sritemlist.Rows[i].Cells[6].Value);
                    if (sritemlist.Rows[i].Cells[7].Value != System.DBNull.Value)
                        sale_replace_amount += Convert.ToDouble(sritemlist.Rows[i].Cells[7].Value);
                }
            }
            if (sale_replace_amount == 0)
                srbasicamt.Enabled = true;
            srbasicamt.Text = Convert.ToString(sale_replace_amount);
        }

        private void calculate_simple_SaleItemTotal()
        {
            int totalrowcount = simple_itemsalelist.Rows.Count;
            sale_invoice_amount = 0;
            for (int i = 0; i < totalrowcount; i++)
            {
                if (simple_itemsalelist.Rows[i].Cells[5].Value != System.DBNull.Value && simple_itemsalelist.Rows[i].Cells[6].Value != System.DBNull.Value)
                {
                    simple_itemsalelist.Rows[i].Cells[7].Value = Convert.ToDouble(simple_itemsalelist.Rows[i].Cells[5].Value) * Convert.ToDouble(simple_itemsalelist.Rows[i].Cells[6].Value);
                    if (simple_itemsalelist.Rows[i].Cells[7].Value != System.DBNull.Value)
                        sale_invoice_amount = sale_invoice_amount + Convert.ToDouble(simple_itemsalelist.Rows[i].Cells[7].Value);
                }
            }
            if (sale_invoice_amount == 0)
                simple_salelist.Enabled = true;
            simple_grossamt.Text = Convert.ToString(sale_invoice_amount);
        }

        private void calculatepurcItemTotal()
        {
            pibasicamt.Text = "0.00";
            tb_pi_igst_tax_amount.Text = "0.00";
            pigrossamt.Text = "0.00";
            if (cb_pack_igst_per.Text == "")
                cb_pack_igst_per.Text = "0";
            purchase_invoice_amount = 0;
            pi_invoice_tax_amount = 0;
            int totalrowcount = piitemlist.Rows.Count;
            if (totalrowcount > 1)
            {
                for (row_pointer = 0; row_pointer < totalrowcount; row_pointer++)
                {
                    if (piitemlist.Rows[row_pointer].Cells[3].Value == null || piitemlist.Rows[row_pointer].Cells[3].Value == System.DBNull.Value)
                        piitemlist.Rows[row_pointer].Cells[3].Value = "0";
                    if (piitemlist.Rows[row_pointer].Cells[4].Value == null || piitemlist.Rows[row_pointer].Cells[4].Value == System.DBNull.Value)
                        piitemlist.Rows[row_pointer].Cells[4].Value = "0";
                    if (piitemlist.Rows[row_pointer].Cells[8].Value == null || piitemlist.Rows[row_pointer].Cells[8].Value == System.DBNull.Value)
                        piitemlist.Rows[row_pointer].Cells[8].Value = "PCS";
                    else if (piitemlist.Rows[row_pointer].Cells[8].Value.ToString() == "")
                        piitemlist.Rows[row_pointer].Cells[8].Value = "PCS";
                    if (piitemlist.Rows[row_pointer].Cells[9].Value == null || piitemlist.Rows[row_pointer].Cells[9].Value == System.DBNull.Value)
                        piitemlist.Rows[row_pointer].Cells[9].Value = "0";
                    if (piitemlist.Rows[row_pointer].Cells[10].Value == null || piitemlist.Rows[row_pointer].Cells[10].Value == System.DBNull.Value)
                        piitemlist.Rows[row_pointer].Cells[10].Value = "0";
                    if (piitemlist.Rows[row_pointer].Cells[5].Value != System.DBNull.Value && piitemlist.Rows[row_pointer].Cells[6].Value != System.DBNull.Value)
                    {
                        piitemlist.Rows[row_pointer].Cells[7].Value = Convert.ToDouble(piitemlist.Rows[row_pointer].Cells[5].Value) * Convert.ToDouble(piitemlist.Rows[row_pointer].Cells[6].Value);
                        if (piitemlist.Rows[row_pointer].Cells[7].Value != System.DBNull.Value)
                            purchase_invoice_amount += Convert.ToDouble(piitemlist.Rows[row_pointer].Cells[7].Value);
                        if (periodofgst == true)
                        {
                            if (piitemlist.Rows[row_pointer].Cells[9].Value != System.DBNull.Value)
                                pi_invoice_tax_amount += (Convert.ToDouble(piitemlist.Rows[row_pointer].Cells[7].Value) * Convert.ToDouble(piitemlist.Rows[row_pointer].Cells[9].Value) / 100);
                        }
                    }
                }

            }
            if (purchase_invoice_amount == 0 && Convert.ToSingle(pibasicamt.Text) > 0)
                purchase_invoice_amount = Convert.ToSingle(pibasicamt.Text);
            if (purchase_invoice_amount > 0)
            {
                if (pidatetime.Value >= Convert.ToDateTime("01/07/2017"))
                {
                    pibasicamt.Text = Convert.ToString(purchase_invoice_amount);
                    tb_pi_igst_tax_amount.Text = string.Format("{0:0.00}", pi_invoice_tax_amount);
                    purchase_invoice_amount += Convert.ToDouble(tb_pi_igst_tax_amount.Text);
                }
                else
                {
                    pibasicamt.Text = Convert.ToString(purchase_invoice_amount);
                    if (pitaxrate.Text != "")
                        pi_invoice_tax_amount = (purchase_invoice_amount * Convert.ToSingle(pitaxrate.Text) / 100);
                    //pitaxamt.Text = Convert.ToString(pi_invoice_tax_amount);
                    pitaxamt.Text = string.Format("{0:0.00}", Convert.ToDouble(pi_invoice_tax_amount));
                    purchase_invoice_amount += Convert.ToDouble(pitaxamt.Text);
                }
                if (pi_freight_amt.Text != "" && pi_freight_amt.Text != "0.00")
                {
                    purchase_invoice_amount += Convert.ToDouble(pi_freight_amt.Text);
                    if (cb_pack_igst_per.Text != "0")
                    {
                        purchase_invoice_amount += (Convert.ToDouble(pi_freight_amt.Text) * Convert.ToDouble(cb_pack_igst_per.Text) / 100);
                        pi_invoice_tax_amount += Convert.ToDouble((Convert.ToDouble(pi_freight_amt.Text) * Convert.ToDouble(cb_pack_igst_per.Text) / 100));
                        tb_pi_igst_tax_amount.Text = string.Format("{0:0.00}", pi_invoice_tax_amount);
                    }
                }
                if (pi_packing_amt.Text != "" && pi_packing_amt.Text != "0.00")
                {
                    purchase_invoice_amount += Convert.ToDouble(pi_packing_amt.Text);
                    if (cb_pack_igst_per.Text != "0")
                    {
                        purchase_invoice_amount += (Convert.ToDouble(pi_packing_amt.Text) * Convert.ToDouble(cb_pack_igst_per.Text) / 100);
                        pi_invoice_tax_amount += Convert.ToDouble((Convert.ToDouble(pi_packing_amt.Text) * Convert.ToDouble(cb_pack_igst_per.Text) / 100));
                        tb_pi_igst_tax_amount.Text = string.Format("{0:0.00}", pi_invoice_tax_amount);
                    }
                }
                if (pi_insurance_amt.Text != "" && pi_insurance_amt.Text != "0.00")
                {
                    purchase_invoice_amount += Convert.ToDouble(pi_insurance_amt.Text);
                    if (cb_pack_igst_per.Text != "0")
                    {
                        purchase_invoice_amount += (Convert.ToDouble(pi_insurance_amt.Text) * Convert.ToDouble(cb_pack_igst_per.Text) / 100);
                        pi_invoice_tax_amount += Convert.ToDouble((Convert.ToDouble(pi_insurance_amt.Text) * Convert.ToDouble(cb_pack_igst_per.Text) / 100));
                        tb_pi_igst_tax_amount.Text = string.Format("{0:0.00}", pi_invoice_tax_amount);
                    }
                }
                if (pi_other_amt.Text != "" && pi_other_amt.Text != "0.00")
                    purchase_invoice_amount += Convert.ToDouble(pi_other_amt.Text);
                calculate_roundoff();
                if (piroundoffamt.Text != "" && piroundoffamt.Text != "0.00")
                    purchase_invoice_amount += Convert.ToDouble(piroundoffamt.Text);
                purchase_invoice_amount = Math.Round(purchase_invoice_amount, 2);
                pigrossamt.Text = Convert.ToString(purchase_invoice_amount);
            }
        }

        private void calculate_roundoff()
        {
            if (subtabDataEntry.SelectedIndex == 0 && subtabsale.SelectedIndex == 0)
            {
                temp_double = Math.Round(sale_invoice_amount, 0);
                temp_double2 = Math.Round((sale_invoice_amount - temp_double), 2);
                siroundoffamt.Text = (temp_double2 * -1).ToString();
            }
            else if (subtabDataEntry.SelectedIndex == 1 && subtabpurchase.SelectedIndex == 0)
            {
                temp_double = Math.Round(purchase_invoice_amount, 0);
                temp_double2 = Math.Round((purchase_invoice_amount - temp_double), 2);
                piroundoffamt.Text = (temp_double2 * -1).ToString();
            }
        }

        #endregion

        #region keypress events

        private void txtBankAccountName_KeyPress(object sender, KeyPressEventArgs e)
        {
            dgvBankExcelAccName.Visible = true;
            dgvBankExcelAccName.BringToFront();
        }

        private void tbCity_KeyPress(object sender, KeyPressEventArgs e)
        {
            dgvStdCodeHelp.Visible = true;
        }

        private void dgv_period_KeyPress(object sender, KeyPressEventArgs e)
        {
            isExists = 0;
            if (char.IsLetter(e.KeyChar))
            {
                DataTable dtPeriod = new DataTable();
                string strQuery = "select prd,[start],[end],gp,[lock] from " + ConnectionWithAccess.tablename[50] + " where prd = '" + e.KeyChar.ToString() + "' ";
                if (ConnectionWithAccess.connection.State == ConnectionState.Open) { ConnectionWithAccess.connection.Close(); }
                ConnectionWithAccess.connection.Open();
                try
                {

                    var adapter = new OleDbDataAdapter(strQuery, ConnectionWithAccess.connection);
                    adapter.Fill(dtPeriod);
                    if (dtPeriod != null && dtPeriod.Rows.Count > 0)
                        isExists = 1;
                }
                catch (Exception ex)
                { }
                if (isExists == 1)
                {
                    ConnectionWithAccess.mprd = e.KeyChar.ToString().ToUpper();
                    go_to_selected_period(ConnectionWithAccess.mprd);
                    clear_all_datagridview_after_period_change();
                    dgv_period.Visible = false;
                    load_all_period_values();
                    load_necessary_values();
                    sidbc.Text = "";
                    sidbc_SelectedIndexChanged(sender, e);
                    pidbc.Text = "";
                    pidbc_SelectedIndexChanged(sender, e);
                    text_to_display_on_top_function();
                    enable_all_keys();
                    getdaybookcode();
                    atbnew_Click(sender, e);
                    fSetDateRangeOnPeriodChange();
                }
            }
        }

        private void tb_dataentry_stock_item_name_KeyPress(object sender, KeyPressEventArgs e)
        {
        }

        private void sopartycode_KeyPress(object sender, KeyPressEventArgs e)
        {
            ConnectionWithAccess.data_entry_working = "Sale Replacement Party";
            so_party_help.Visible = true;
        }

        private void soitemlist_KeyPress(object sender, KeyPressEventArgs e)
        {
            ConnectionWithAccess.data_entry_working = "Sale Item";
            if (e.KeyChar == 27)
            {
                soitemlist.BringToFront();
                so_item_help.Visible = false;
            }
            else if (e.KeyChar == 9)
            {
                soitemlist.BringToFront();
                so_item_help.Visible = false;
            }
            else if (e.KeyChar == 13)
            {
                soitemlist.BringToFront();
                so_item_help.Visible = false;
                get_item_details_from_05_using_type_item_code(mtype, mitem_code);
                soitemlist.SelectedCells[2].Value = item_details_from_05[2];
                soitemlist.SelectedCells[3].Value = 1;
                soitemlist.SelectedCells[4].Value = item_details_from_05[3];
            }
        }

        private void tbUserName_KeyPress(object sender, KeyPressEventArgs e)
        {
            dgv_user_list.Visible = true;
        }

        private void tbItemCode_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (tbItemCode.Text != "")
            {
                master_item_help.Visible = false;
                ConnectionWithAccess.query = "select [title] from " + ConnectionWithAccess.tablename[05] + " where [type] = '" + tbItemType.Text.Trim() + "' and [item_code] LIKE '" + tbItemCode.Text.Trim() + "*'";
                DataTable dtData1 = ConnectionCommand.fGetDataTable();

                if (dtData1 != null && dtData1.Rows.Count > 0)
                {
                    if (dtData1.Rows[0][0] != null)
                    {
                        tbTitle.Text = dtData1.Rows[0][0].ToString();
                    }
                }
            }
        }

        private void blstgp_per_KeyPress(object sender, KeyPressEventArgs e)
        {
            gp_percentage_change = true;
        }

        private void blstclosingstock_KeyPress(object sender, KeyPressEventArgs e)
        {
            gp_percentage_change = false;
        }

        private void prpartycode_KeyPress(object sender, KeyPressEventArgs e)
        {
            ConnectionWithAccess.data_entry_working = "Purchase Replacement";
            pr_acc_help_dgv.Visible = true;
        }

        private void sipartycode_KeyPress(object sender, KeyPressEventArgs e)
        {
            ConnectionWithAccess.data_entry_working = "Sale Party";
            si_party_help.Visible = true;
        }

        private void sitaxcode_KeyPress(object sender, KeyPressEventArgs e)
        {
            ConnectionWithAccess.data_entry_working = "Sale Tax";
            sitaxlist.Visible = true;
            cb_all_sale_invoice_ledger.Visible = false;
            cb_all_sale_invoice_list.Visible = false;
            cb_all_sale_item_list.Visible = false;
        }

        private void MainForm_KeyPress(object sender, KeyPressEventArgs e)
        {
            //MessageBox.Show("Keypress");

            //if (e.KeyCode == Keys.F12)

            //if (e.KeyChar == 28)
            //{
            //    extraform periodform = new extraform();
            //    periodform.Show();
            //}
            //if (e.KeyChar == 9)
            //{
            //    periodgridview.Visible = true;
            //    ConnectionWithAccess.query = "select prd, start, [end] from " + ConnectionWithAccess.tablename[50] + " order by prd desc";
            //    ConnectionCommand.accountHelp(periodgridview, "ChangePeriod");
            //}
        }

        private void pipartycode_KeyPress(object sender, KeyPressEventArgs e)
        {
            pi_party_help.Visible = true;
        }

        private void popartycode_KeyPress(object sender, KeyPressEventArgs e)
        {
            po_party_help.Visible = true;
        }

        private void ledger_account_help_KeyPress(object sender, KeyPressEventArgs e)
        {
            get_common_account_head();
        }

        private void bpamt_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (!(Char.IsDigit(e.KeyChar) || (e.KeyChar == (char)Keys.Back) || (e.KeyChar == ((char)'.')) || (e.KeyChar == ((char)'-'))))
                e.Handled = true;
        }

        private void bramt_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (!(Char.IsDigit(e.KeyChar) || (e.KeyChar == (char)Keys.Back) || (e.KeyChar == ((char)'.')) || (e.KeyChar == ((char)'-'))))
                e.Handled = true;
        }

        private void piitemlist_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (e.KeyChar == 27)
            {
                piitemlist.BringToFront();
                pi_party_help.Visible = false;
            }
            else if (e.KeyChar == 9)
            {
                piitemlist.BringToFront();
                pi_party_help.Visible = false;
            }
            else if (e.KeyChar == 13)
            {
                piitemlist.BringToFront();
                pi_party_help.Visible = false;
                if (piitemlist.CurrentRow.Index < piitemlist.Rows.Count - 1)
                {
                    get_item_details_from_05_using_type_item_code(mtype, mitem_code);
                    if (item_details_from_05.Count > 2)
                    {
                        piitemlist.SelectedCells[2].Value = item_details_from_05[3];
                        piitemlist.SelectedCells[3].Value = 1;
                        piitemlist.SelectedCells[4].Value = item_details_from_05[4];
                    }
                }
            }
        }

        private void pitx_code_KeyPress(object sender, KeyPressEventArgs e)
        {
            pitaxlist_dgv.Visible = true;
        }

        private void jjpartycode1_KeyPress(object sender, KeyPressEventArgs e)
        {
            working_journal_payer_payee = "payee";
            jour_datagridview.Visible = true;
            ConnectionWithAccess.j1a_n = null;
            ConnectionWithAccess.j1s_a = null;
        }

        private void jjpartycode2_KeyPress(object sender, KeyPressEventArgs e)
        {
            working_journal_payer_payee = "payer";
            jour_datagridview.Visible = true;
            ConnectionWithAccess.j2a_n = null;
            ConnectionWithAccess.j2s_a = null;
        }

        private void crpartycode_KeyPress(object sender, KeyPressEventArgs e)
        {
            cr_datagridview.Visible = true;
        }

        private void cppartycode_KeyPress(object sender, KeyPressEventArgs e)
        {
            cp_datagridview.Visible = true;
        }

        private void brpartycode_KeyPress(object sender, KeyPressEventArgs e)
        {
            braccountdg.Visible = true;
        }

        private void bppartycode_KeyPress(object sender, KeyPressEventArgs e)
        {
            bp_datagridview.Visible = true;
            bp_datagridview.BringToFront();
        }

        private void tbTitle_KeyPress(object sender, KeyPressEventArgs e)
        {
            //if (!cb_change_item_name.Checked)
            //{
            //    if (tbTitle.Text != "")
            //    {
            //        master_item_help.Visible = true;
            //        master_item_help.BringToFront();
            //        ConnectionWithAccess.query = "select [type], item_code, [title],packing,box,price,clo_stk,cat,igst_per,hsn_code from " + ConnectionWithAccess.tablename[05] + " where title like '%" + tbTitle.Text + "%' order by [title]";
            //        ConnectionCommand.accountHelp_datatable_Seperate(master_item_help, "master_item_help");
            //        if (master_item_help.CurrentRow != null)
            //        {
            //            master_item_help.Columns[0].Visible = false;
            //            master_item_help.Columns[1].Visible = false;
            //            master_item_help.Columns[2].Width = 300;
            //        }
            //        else
            //            master_item_help.Visible = false;
            //    }
            //}
        }

        private void tbDesc_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (!cb_change_master_account_name.Checked)
            {
                master_account_help_dg.Visible = true;
                Bank_Details.Visible = false;
            }
        }

        private void srpartycode_KeyPress(object sender, KeyPressEventArgs e)
        {
            ConnectionWithAccess.data_entry_working = "Sale Replacement";
            sr_party_help.Visible = true;
        }

        private void sideliverycode_KeyPress(object sender, KeyPressEventArgs e)
        {
            si_party_help.Visible = true;
        }

        private void tbdelivery_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (tbdelivery == null)
            {
                tbDesc.ReadOnly = false;
                tbCity.ReadOnly = false;
            }
            else
            {
                tbDesc.ReadOnly = true;
                tbCity.ReadOnly = true;
            }
            master_account_help_dg.Visible = true;
            Bank_Details.Visible = false;
        }


        # endregion

        bool issrTxtChangedAssigned = false;
        bool issiTxtChangedAssigned = false;
        private void siitemlist_EditingControlShowing(object sender, DataGridViewEditingControlShowingEventArgs e)
        {
            if (!issiTxtChangedAssigned)
            {
                ConnectionWithAccess.data_entry_working = "Sale Item";
                cntObject = e.Control;
                cntObject.TextChanged += textBox_TextChanged;
                issiTxtChangedAssigned = true;
            }
        }

        private void calculate_all_bank_payment_gst_rows()
        {
            bp_gross_amt = 0;
            for (row_pointer = 0; row_pointer < bp_dgv_gst_tax_brief.Rows.Count; row_pointer++)
            {
                bp_dgv_gst_tax_brief.Rows[row_pointer].Cells[2].Value = Convert.ToDouble(bp_dgv_gst_tax_brief.Rows[row_pointer].Cells[0].Value) * Convert.ToDouble(bp_dgv_gst_tax_brief.Rows[row_pointer].Cells[1].Value) / 100;
                bp_dgv_gst_tax_brief.Rows[row_pointer].Cells[3].Value = Convert.ToDouble(bp_dgv_gst_tax_brief.Rows[row_pointer].Cells[0].Value) + Convert.ToDouble(bp_dgv_gst_tax_brief.Rows[row_pointer].Cells[2].Value);
                bp_gross_amt += Convert.ToDouble(bp_dgv_gst_tax_brief.Rows[row_pointer].Cells[3].Value);
            }
            bpamt.Text = bp_gross_amt.ToString();
        }

        private void update_master_account_screen_details(string ma_n, string ms_a, string md_y)
        {
            ConnectionWithAccess.query = "select f1.[desc], f1.city, add1, add2,add3, tin_num, budget, f1.pin, tpt, tx_code, std, o_mob, r_mob, phone1, phone12, phone2, fax, email,web, f1.a_n, f1.s_a, f1.d_y,f1.aadhar_card,f1.dist,f1.gst_number,f1.state,f1.pan,f1.prop,f1.un_used from " + ConnectionWithAccess.tablename[1] + " f1, " + ConnectionWithAccess.tablename[4] + " f4 where f4.a_n = f1.a_n and f4.s_a = f1.s_a and f4.d_y = f1.d_y and f1.a_n = '" + ma_n + "' and f1.s_a = '" + ms_a + "' and f1.d_y = '" + md_y + "'";
            DataTable dtData1 = ConnectionCommand.fGetDataTable();
            if (dtData1 != null && dtData1.Rows.Count > 0)
            {
                if (dtData1.Rows[0][0] != null)
                {
                    ConnectionWithAccess.mdesc = dtData1.Rows[0][0].ToString();
                    tbStd.Text = dtData1.Rows[0][10].ToString();
                    tbstate.Text = dtData1.Rows[0][25].ToString();
                    tbAdd1.Text = dtData1.Rows[0][2].ToString();
                    tbAdd2.Text = dtData1.Rows[0][3].ToString();
                    tbAdd3.Text = dtData1.Rows[0][4].ToString();
                    tbTINNo.Text = dtData1.Rows[0][5].ToString();
                    tbMaxLim.Text = dtData1.Rows[0][6].ToString();
                    tbPincode.Text = dtData1.Rows[0][7].ToString();
                    tbTPT.Text = dtData1.Rows[0][8].ToString();
                    tbTaxCode.Text = dtData1.Rows[0][9].ToString();
                    tbMNo1.Text = dtData1.Rows[0][11].ToString();
                    tbMNo2.Text = dtData1.Rows[0][12].ToString();
                    tbOPh1.Text = dtData1.Rows[0][13].ToString();
                    tbOPh2.Text = dtData1.Rows[0][14].ToString();
                    tbRPh2.Text = dtData1.Rows[0][15].ToString();
                    tbFax.Text = dtData1.Rows[0][16].ToString();
                    tbEmail.Text = dtData1.Rows[0][17].ToString();
                    tbWebsite.Text = dtData1.Rows[0][18].ToString();
                    tbadharcard.Text = dtData1.Rows[0][22].ToString();
                    tbdistrict.Text = dtData1.Rows[0][23].ToString();
                    tbgst_number.Text = dtData1.Rows[0][24].ToString();
                    tbpan.Text = dtData1.Rows[0]["pan"].ToString();
                    tb_prop.Text = dtData1.Rows[0]["prop"].ToString();
                    if (pidbc.Items.Count > 0)
                        get_tax_desc_from_dc("P", pidbc.SelectedValue.ToString(), Convert.ToInt32(tbTaxCode.Text));
                    if (md_y == "@@@")
                    {
                        tbDesc.Text = ConnectionWithAccess.mdesc;
                        tbCity.Text = dtData1.Rows[0][1].ToString();
                    }
                    else
                    {
                        tbdelivery.Text = ConnectionWithAccess.mdesc;
                        tbdelivery_city.Text = dtData1.Rows[0][1].ToString();
                    }
                    if (tbStd.Text != "")
                    {
                        if (tbStd.Text.Substring(0, 1) == "0")
                            tbStd.Text = tbStd.Text.Substring(1, tbStd.Text.Length - 1);
                    }
                    if (dtData1.Rows[0]["un_used"].ToString() != "1")
                        cb_account_inactive.SelectedIndex = 0;
                    else
                        cb_account_inactive.SelectedIndex = 1;
                }
            }
            if (ma_n != "")
            {
                if ((ma_n != "2002" && ma_n != "4002") || ms_a != "@@@")

                    if (ma_n.Substring(0, 1) == "1")
                        tbopenbalance.Text = Convert.ToString(get_account_balance_from_51("?", ma_n, ms_a));
                    else
                        tbopenbalance.Text = Convert.ToString(get_account_balance_from_51("@", ma_n, ms_a));
                else
                {
                    if (ma_n == "2002" && ms_a == "@@@")
                    {
                        tbopenbalance.Text = Convert.ToString(calculate_total_account_balance_from_51("@", ma_n, "", "more"));
                        update_amount_in_51("@", ma_n, "@@@", Convert.ToSingle(tbopenbalance.Text));
                    }
                    else if (ma_n == "4002" && ms_a == "@@@")
                    {
                        tbopenbalance.Text = Convert.ToString(calculate_total_account_balance_from_51("@", ma_n, "", "less"));
                        update_amount_in_51("@", ma_n, "@@@", Convert.ToSingle(tbopenbalance.Text));
                    }
                    else if (ma_n == "2002" && ms_a != "@@@")
                    {
                        tbopenbalance.Text = Convert.ToString(get_account_balance_from_51_New("@", ma_n, ms_a));
                        //update_amount_in_51("@", ma_n, "@@@", Convert.ToSingle(tbopenbalance.Text));
                    }
                    else if (ma_n == "4002" && ms_a != "@@@")
                    {
                        tbopenbalance.Text = Convert.ToString(get_account_balance_from_51_New("@", ma_n, ms_a));
                        //update_amount_in_51("@", ma_n, "@@@", Convert.ToSingle(tbopenbalance.Text));
                    }
                }
                cb_change_master_account_name.Visible = true;
                check_pincode_and_stdcode_and_update_state();
            }
        }

        private void fill_tax_description()
        {
            cbMtaxDesc.Items.Clear();
            if (cbParent.SelectedItem.Equals("SUNDRY CREDITORS") || cbParent.SelectedItem.Equals("SUNDRY DEBTORS"))
            {
                cbMtaxDesc.Visible = true;
                ConnectionWithAccess.query = "select distinct [desc] from " + ConnectionWithAccess.tablename[6] + " where d_c = " + cb_master_d_c.Text;
                DataTable dtData1 = ConnectionCommand.fGetDataTable();
                if (dtData1 != null && dtData1.Rows.Count > 0)
                {
                    if (dtData1.Rows.Count >= 1)
                    {
                        for (int iRowCount = 0; iRowCount < dtData1.Rows.Count; iRowCount++)
                        {
                            if (dtData1.Rows[iRowCount][0] != null)
                                cbMtaxDesc.Items.Add(dtData1.Rows[iRowCount][0].ToString());
                        }
                    }
                    else
                    {
                        if (dtData1.Rows[0][0] != null)
                            cbMtaxDesc.Items.Add(dtData1.Rows[0][0].ToString());
                    }
                }
                if (cbMtaxDesc.Items.Count > 1)
                    cbMtaxDesc.SelectedIndex = 0;
            }
            else
                cbMtaxDesc.Visible = false;
        }

        private static void SendEmailFromYahoo(string emailFrom, string password, string emailmessage, string subject, string toemail_id, string attach_filename)
        {
            //Link for steps to set account security in Yahoo
            //https://stackoverflow.com/questions/40583661/authentication-error-in-sending-mail-from-yahoo-in-c-sharp-windows-application
            string smtpAddress = "smtp.mail.yahoo.com";
            int portNumber = 587;
            bool enableSSL = true;

            using (MailMessage mail = new MailMessage())
            {
                try
                {
                    mail.From = new MailAddress(emailFrom);
                    mail.To.Add(toemail_id.Trim().ToString());
                    mail.Subject = subject;
                    mail.Body = emailmessage;
                    mail.IsBodyHtml = true;
                    // Can set to false, if you are sending pure text.

                    mail.Attachments.Add(new Attachment(attach_filename));

                    using (SmtpClient smtp = new SmtpClient(smtpAddress, portNumber))
                    {
                        smtp.Credentials = new NetworkCredential(emailFrom, password);
                        smtp.EnableSsl = enableSSL;
                        smtp.Send(mail);
                        MessageBox.Show("Email Sent");
                    }
                }
                catch (Exception ex)
                {
                    MessageBox.Show("Error sending email. Email not sent.");
                }
            }
        }

        public static void sendemail(string subject, string toemail_id, string attach_filename)
        {
            if (toemail_id != null)
            {
                PleaseWait objPleaseWait = new PleaseWait("Please wait Sending Email");
                objPleaseWait.Show();
                Application.DoEvents();

                //Link to provide access to send emails from code (set "Allow less secure apps" to ON)
                //https://myaccount.google.com/lesssecureapps?pli=1

                //string emailfrom = "anupeng.india@gmail.com";
                //string emailpassword = "sharp_anup2";
                string emailfrom = "";
                string emailpassword = "";

                if (ConnectionWithAccess.company_details[11].Contains("["))
                {
                    emailfrom = ConnectionWithAccess.company_details[11].Substring(0, ConnectionWithAccess.company_details[11].IndexOf("["));
                    emailpassword = ConnectionWithAccess.company_details[11].Substring(ConnectionWithAccess.company_details[11].IndexOf("[") + 1, ConnectionWithAccess.company_details[11].IndexOf("]") - ConnectionWithAccess.company_details[11].IndexOf("[") - 1);
                    emailfrom = emailfrom.Trim();
                }
                else
                {
                    emailfrom = ConnectionWithAccess.company_details[11];
                }
                if (emailfrom.Contains("@yahoo."))
                    SendEmailFromYahoo(emailfrom, emailpassword, emailmessage, subject, toemail_id, attach_filename);
                else
                {
                    //string emailsubject = "Sale Invoice Details";
                    MailMessage messagedata = new MailMessage();
                    messagedata.From = new MailAddress(emailfrom);
                    messagedata.Subject = subject;

                    //messagedata.ReplyTo = new MailAddress(emailfrom);
                    //emailmessage = "M/s " + " is sent to you. Invoice Number is" + ConnectionWithAccess.md_n;

                    //                    Dear Sir,

                    //This is to inform you that the payment for Invoice No. I-116/18-19 has been due.

                    //We will appreciate your prompt action.


                    //Please find enclosed ledger for your reference.





                    emailmessage = "Please Find the following Attachment(s):";
                    messagedata.Body = emailmessage;
                    messagedata.IsBodyHtml = true;
                    emailto = toemail_id.Trim().ToString();
                    messagedata.To.Add(emailto);
                    SmtpClient smtp = new SmtpClient();
                    try
                    {
                        //Your SMTP Server
                        smtp.Host = "smtp.gmail.com";
                        smtp.Timeout = int.MaxValue;
                        //SSL Settings depending on your Server
                        smtp.EnableSsl = true;

                        //Creadentials for the Server
                        NetworkCredential NetworkCred = new System.Net.NetworkCredential();

                        //Your Email
                        NetworkCred.UserName = emailfrom;

                        //Your Password
                        NetworkCred.Password = emailpassword;

                        smtp.UseDefaultCredentials = true;

                        smtp.Credentials = NetworkCred;

                        System.Net.Mail.Attachment attachment;
                        attachment = new System.Net.Mail.Attachment(attach_filename);
                        messagedata.Attachments.Add(attachment);

                        //Port No of the Server 
                        smtp.Port = 587;
                        smtp.Send(messagedata);
                        MessageBox.Show("Email Sent");
                        //return true;
                    }
                    catch (Exception ex)
                    {
                        MessageBox.Show("Error sending email. Email not sent.");
                        //MessageBox.Show(ex.Message);
                        //return false;
                    }
                }
                objPleaseWait.Close();
            }
        }

        private void pdfsyntexfile()
        {
            //string pdfFile = Server.MapPath(".") + "/Files/TestPDFfile.pdf";
            //string imageFile = Server.MapPath(".") + "/Files/TestImage.jpg";
            //string currentpath = Environment.GetFolderPath(Environment.SpecialFolder.Desktop) + "pdfcode.pdf";
            //FileStream FS = File.Create(currentpath);
            //Document doc = new Document();

            Document doc = new Document(PageSize.A4, 40, 45, 40, 25);
            ConnectionWithAccess.create_file_folder(ConnectionWithAccess.mpdffile);
            FileStream FS = File.Create(ConnectionWithAccess.mpdffile);
            writer = PdfWriter.GetInstance(doc, FS);
            //PdfWriter.GetInstance(doc, FS);
            doc.Open();
            //iTextSharp.text.Image pdfimage = iTextSharp.text.Image.GetInstance(ConnectionWithAccess.mpdffile);

            iTextSharp.text.Image pdfimage = iTextSharp.text.Image.GetInstance("F:\\visual studio\\images\\ANUP ENGINEERING LETTER PAD.jpg");

            pdfimage.ScaleToFit(600f, 800f);
            pdfimage.SpacingBefore = 10f;
            pdfimage.SpacingAfter = 10f;
            pdfimage.Alignment = Element.ALIGN_CENTER;
            pdfimage.SetAbsolutePosition(20, 20);
            doc.Add(pdfimage);
            //iTextSharp.text.Paragraph pdfparagraph = iTextSharp.text.Paragraph.GetInstance();
            //iTextSharp.text.Phrase pdfParagraph= (Paragraph)iTextSharp.text.Paragraph.GetInstance("hello");
            //pdfParagraph.SpacingBefore = 30;
            Paragraph para = new Paragraph("");
            //Paragraph para = new Paragraph("Hi I am Sanjay");
            //para.SpacingBefore = 100;
            //doc.Add(para);

            //para = new Paragraph("Hi This is second Line");
            //para.SpacingBefore = 150;
            //doc.Add(para);

            //para = new Paragraph("Hi This is Third Line");
            //para.SpacingBefore = 175;
            //doc.Add(para);
            int rowindex = 0;
            for (int i = 0; i < 200; i++)
            {
                para = new Paragraph(Convert.ToString((rowindex * rowindex)));
                para.IndentationLeft = (rowindex * rowindex);
                para.SpacingBefore = rowindex;
                //para.SpacingAfter = rowindex;
                doc.Add(para);
                //para.Alignment = Element.ALIGN_JUSTIFIED;
                //para.SetLeading(0.0f, 2.0f);
                rowindex = rowindex + 2;
            }
            //doc.AddTitle("Hello World example");
            //doc.AddSubject("This is an Example 4 of Chapter 1 of Book 'iText in Action'");
            //doc.AddKeywords("Metadata, iTextSharp 5.4.4, Chapter 1, Tutorial");
            //doc.AddCreator("iTextSharp 5.4.4");
            //doc.AddAuthor("Debopam Pal");
            //doc.AddHeader("Nothing", "No Header");
            //doc.Add(para);
            //doc.NewPage();
            //doc.Add(new Paragraph(string.Format("This is a page {0}", i)));4
            //doc.Add(new Paragraph("File created in " + ConnectionWithAccess.mpdffile));

            doc.Close();
            //PdfWriter writer = PdfWriter.GetInstance(doc, new FileStream(ConnectionWithAccess.mpdffile, FileMode.Create);
            //doc.Open();
            //Paragraph para = new Paragraph("Let's write some text before inserting image.");
            //iTextSharp.text.Image pdfImage = iTextSharp.text.Image.GetInstance("F:\\visual studio\\images\\plus sign.jpg");
            //pdfImage.ScaleToFit(300f, 250f);
            //pdfImage.SpacingBefore = 50f;
            //pdfImage.SpacingAfter = 10f;
            //pdfImage.Alignment = Element.ALIGN_CENTER;
            //Doc.Add(para);
            //Doc.Add(pdfImage);
        }

        # region printing

        private void print_sale_invoice()
        {
            if (periodofgst)
            {
                if (Convert.ToDateTime(sidatetime.Text) <= Convert.ToDateTime("30/06/2017"))
                    sale_invoice_number_three();
                else
                {
                    if (ConnectionWithAccess.company_details[31] == "0")
                        sale_invoice_number_one();
                    else if (ConnectionWithAccess.company_details[31] == "1")
                        sale_invoice_number_two();
                    else if (ConnectionWithAccess.company_details[31] == "2")
                        sale_invoice_number_three();
                    else if (ConnectionWithAccess.company_details[31] == "3")
                        sale_invoice_with_top_free();
                    else if (ConnectionWithAccess.company_details[31] == "4")
                        sale_invoice_gst_letterpad();
                    else if (ConnectionWithAccess.company_details[31] == "5")
                        sale_invoice_gst_with_contant_and_top_address();
                    else if (ConnectionWithAccess.company_details[31] == "6")
                        sale_invoice_gst_with_contant_and_bottom_address();
                    else if (ConnectionWithAccess.company_details[31] == "7")
                        sale_invoice_Plain_Paper();
                }
            }
            else
            {
                if (ConnectionWithAccess.company_details[31] == "0")
                    sale_invoice_number_one();
                else if (ConnectionWithAccess.company_details[31] == "1")
                    sale_invoice_number_two();
                else if (ConnectionWithAccess.company_details[31] == "2")
                    sale_invoice_number_three();
                else
                    sale_invoice_number_three();
            }
            report_filename = msalepdf;
            ConnectionWithAccess.query = "update " + ConnectionWithAccess.tablename[21] + " set print ='Y' where d_n  " + (sidocno.Text.Trim() == string.Empty ? "is null" : "= " + sidocno.Text.Trim()) + " and prd = '" + ConnectionWithAccess.mprd + "' and d_c = " + sidbc.SelectedValue.ToString();
            ConnectionCommand.fUpdateInsertDeleteData();
        }

        private void sale_invoice_number_one()
        {
            pdf_invoice.Location = new Point(20, 144);
            get_account_details_from_01(sia_n.Text, sis_a.Text);
            get_account_details_from_04(sia_n.Text, sis_a.Text);
            msalepdf = ConnectionWithAccess.data_drive + "acc\\" + ConnectionWithAccess.mNIK + "\\reports\\saleinvoice_" + sidocno.Text;
            if (chb_add_datetime_in_output.Checked)
                msalepdf += "_" + DateTime.Now.Day + "_" + DateTime.Now.Month + "_" + DateTime.Now.Year + "_" + DateTime.Now.TimeOfDay.Hours + "_" + DateTime.Now.TimeOfDay.Minutes;
            msalepdf += ".pdf";
            ConnectionWithAccess.create_file_folder(msalepdf);
            doc1 = new Document(PageSize.A4, 40, 45, 40, 25);
            ConnectionWithAccess.create_file_folder(msalepdf);
            FileStream FS1 = File.Create(msalepdf);
            writer = PdfWriter.GetInstance(doc1, FS1);
            doc1.Open();
            current_pdf_page_number = 1;
            invoice_jpg_filename = ConnectionWithAccess.data_drive + "acc\\" + ConnectionWithAccess.mNIK + "\\reports\\" + "INVOICE.jpg";
            //iTextSharp.text.Image pdfimage = iTextSharp.text.Image.GetInstance("F:\\visual studio\\images\\ANUP ENGINEERING LETTER PAD.jpg");
            if (File.Exists(invoice_jpg_filename))
            {
                iTextSharp.text.Image pdfimage = iTextSharp.text.Image.GetInstance(invoice_jpg_filename);
                pdfimage.ScaleToFit(600f, 800f);
                pdfimage.SpacingBefore = 10f;
                pdfimage.SpacingAfter = 10f;
                pdfimage.Alignment = Element.ALIGN_CENTER;
                pdfimage.SetAbsolutePosition(20, 20);
                doc1.Add(pdfimage);
            }
            Paragraph para = new Paragraph("");
            para.Font.Size = 25;
            temp_word = "Subject to Ulhasnagar Jurisdiction";
            print_pdf_line(cour_11_red, temp_word, 180, 135);
            temp_word = "Tax Invoice";
            print_pdf_line(cour_11, temp_word, 240, -5);
            temp_word = "Buyer's Name & Address";
            print_pdf_line(cour_11, temp_word, 30, 0);
            temp_word = "Invoice No.";
            print_pdf_line(cour_11, temp_word, 300, -18);
            temp_word = "Date";
            print_pdf_line(cour_11, temp_word, 440, -18);
            temp_word = sidocno.Text;
            print_pdf_line(cour_11, temp_word, 320, -2);
            temp_word = sidatetime.Text;
            print_pdf_line(cour_11, temp_word, 430, -16);
            temp_word = account_detail_from_01[4];
            print_pdf_line(cour_11, temp_word, 30, 0);
            temp_word = account_detail_from_04[4];
            print_pdf_line(cour_11, temp_word, 30, -5);
            temp_word = account_detail_from_04[5];
            print_pdf_line(cour_11, temp_word, 30, -5);
            temp_word = account_detail_from_01[8] + "-" + account_detail_from_01[10];
            print_pdf_line(cour_11, temp_word, 30, -5);
            temp_word = account_detail_from_01[12];
            print_pdf_line(cour_11, temp_word, 30, -5);
            temp_word = DispEmail.Text;
            print_pdf_line(cour_11, temp_word, 30, -5);
            temp_word = "Buyer's";
            print_pdf_line(cour_11, temp_word, 30, 0);
            temp_word = "Tin";
            print_pdf_line(cour_11, temp_word, 30, -5);
            temp_word = account_detail_from_04[29];
            if (temp_word != null && temp_word != "")
            {
                print_pdf_line(cour_11, temp_word, 100, -18);
            }
            temp_word = "-----------------------------------------------------------------------------------------------------------------------";
            print_pdf_line(cour_11, temp_word, 30, -5);
            temp_word = "Sr.                      Particular's                              Pac          Quantity         Rate        Amount";
            print_pdf_line(cour_11, temp_word, 30, -5);
            temp_word = "-----------------------------------------------------------------------------------------------------------------------";
            print_pdf_line(cour_11, temp_word, 30, -5);
            si_invoice_basic_amount = 0;
            sale_invoice_amount = 0;
            mpacking = 0;
            for (int i = 0; i < siitemlist.Rows.Count - 1; i++)
            {
                temp_word = Convert.ToString(i + 1);
                print_pdf_line(cour_11, temp_word, para_IndentationLeft_position(-45, temp_word, "cour_11"), 0);
                temp_word = siitemlist.Rows[i].Cells[2].Value.ToString();
                print_pdf_line(cour_11, temp_word, para_IndentationLeft_position(70, temp_word, "cour_11"), -16);
                temp_word = siitemlist.Rows[i].Cells[4].Value.ToString();
                mpacking += Convert.ToInt16(siitemlist.Rows[i].Cells[3].Value.ToString());
                print_pdf_line(cour_11, temp_word, para_IndentationLeft_position(210, temp_word, "cour_11"), -16);
                temp_word = siitemlist.Rows[i].Cells[5].Value.ToString();
                if (temp_word.Contains(".00"))
                    temp_word = temp_word.Substring(0, temp_word.Length - 3);
                print_pdf_line(cour_11, temp_word, para_IndentationLeft_position(280, temp_word, "cour_11"), -16);
                temp_word = siitemlist.Rows[i].Cells[6].Value.ToString();
                print_pdf_line(cour_11, temp_word, para_IndentationLeft_position(350, temp_word, "cour_11"), -16);
                temp_word = siitemlist.Rows[i].Cells[7].Value.ToString();
                print_pdf_line(cour_11, temp_word, para_IndentationLeft_position(425, temp_word, "cour_11"), -16);
                if (siitemlist.Rows[i].Cells[7].Value != System.DBNull.Value)
                    si_invoice_basic_amount = si_invoice_basic_amount + Convert.ToDouble(siitemlist.Rows[i].Cells[7].Value);
            }
            si_invoice_tax_amount = Convert.ToDouble(sitaxamt.Text);
            si_invoice_gross_amount = (si_invoice_basic_amount + si_invoice_tax_amount);
            temp_word = "------------";
            print_pdf_line(cour_11, temp_word, 455, 0);
            temp_word = "Total";
            print_pdf_line(cour_11, temp_word, 390, -5);
            temp_word = Convert.ToString(si_invoice_basic_amount);
            print_pdf_line(cour_11, temp_word, para_IndentationLeft_position(425, temp_word, "cour_11"), -18);
            temp_word = "------------";
            print_pdf_line(cour_11, temp_word, 455, -10);
            temp_word = NumberToWords(mpacking) + " Packing Only";
            temp_word = temp_word.Replace("AND", "");
            if (siitemlist.Rows.Count > 2)
            {
                print_pdf_line(cour_11, temp_word, 30, (175 - ((siitemlist.Rows.Count - 2) * 16)));
            }
            else
                print_pdf_line(cour_11, temp_word, 30, 175);
            temp_word = sitaxdesc.Text;
            print_pdf_line(cour_11, temp_word, para_IndentationLeft_position(240, temp_word, "cour_11"), 0);
            temp_word = sitaxamt.Text;
            if (!temp_word.Contains("."))
                temp_word = temp_word + ".00";
            print_pdf_line(cour_11, temp_word, para_IndentationLeft_position(425, temp_word, "cour_11"), -18);
            temp_word = "Note # Cheque Fail Charges Rs. 350/- or 2%";
            print_pdf_line(cour_9, temp_word, 30, 0);
            temp_word = "---          --------                 ------------";
            print_pdf_line(cour_11, temp_word, 324, -18);
            temp_word = "of Bill Amount Which ever is Higher";
            print_pdf_line(cour_9, temp_word, 45, -5);
            temp_word = "Total";
            print_pdf_line(cour_11, temp_word, 270, -16);
            temp_word = Convert.ToString(si_invoice_gross_amount);
            print_pdf_line(cour_11, temp_word, para_IndentationLeft_position(425, temp_word, "cour_11"), -18);
            temp_word = "---          --------                 ------------";
            print_pdf_line(cour_11, temp_word, 324, -5);
            temp_word = "L.B.T. Num : " + ConnectionWithAccess.company_details[19];
            print_pdf_line(cour_9_red, temp_word, 30, -5);
            temp_word = "-----------------------------------------------------------------------------------------------------------------------";
            print_pdf_line(cour_11, temp_word, 30, -5);
            temp_word = "Rupees : " + (NumberToWords(Convert.ToInt32(si_invoice_gross_amount))) + " Only";
            print_pdf_line(cour_11, temp_word, 30, -5);
            temp_word = "-----------------------------------------------------------------------------------------------------------------------";
            print_pdf_line(cour_11, temp_word, 30, -5);
            temp_word = "V.A.T. TIN : " + ConnectionWithAccess.company_details[18];
            print_pdf_line(cour_9_red, temp_word, 30, -9);
            temp_word = "For " + ConnectionWithAccess.company_details[1];
            print_pdf_line(cour_9, temp_word, 500 - (temp_word.Length * 52 / 10), -18);
            temp_word = "C.S.T. TIN : " + ConnectionWithAccess.company_details[27];
            print_pdf_line(cour_9_red, temp_word, 30, -5);
            temp_word = "Added Tax Act 2002 is  in force on the date on  which the sale of  the goods specified in ";
            print_pdf_line(cour_9, temp_word, 30, -5);
            temp_word = "this Tax  Invoice is made  by us/me  & that the  transaction of  sales covered by this Tax ";
            print_pdf_line(cour_9, temp_word, 30, -5);
            temp_word = "Invoice has been effected by me/us and it shall be accounted for in the turnover of Sales ";
            print_pdf_line(cour_9, temp_word, 30, -5);
            temp_word = "while filing of return and the due tax, if any payable on the sale has been paid or shall be ";
            print_pdf_line(cour_9, temp_word, 30, -5);
            temp_word = "Prop.";
            print_pdf_line(cour_9, temp_word, 480, -18);
            temp_word = "paid.";
            print_pdf_line(cour_9, temp_word, 30, -5);
            if (ConnectionWithAccess.company_details[30].Length > 6)
                temp_word += "Bank Details : " + ConnectionWithAccess.company_details[30];
            if (ConnectionWithAccess.company_details[21].Length > 6)
                temp_word += " A/c. : " + process_bank_account_number(ConnectionWithAccess.company_details[21]);
            if (ConnectionWithAccess.company_details[29].Length > 6)
                temp_word += " Ifc Code : " + ConnectionWithAccess.company_details[29];
            print_pdf_line(cour_9, temp_word, 30, -5);
            doc1.Close();
            pdf_invoice.BringToFront();
            pdf_invoice.Visible = true;
            //sisalelistdg.Visible = false;
            //pbdataentry.Visible = false;
            pdf_invoice.Size = new System.Drawing.Size(1200, 381);
            pdf_invoice.LoadFile(msalepdf);
        }

        private void sale_invoice_number_two()
        {
            pdf_invoice.Location = new Point(20, 144);
            if (cb_print_Tpt_copy.Checked == true || cb_print_chit_copy.Checked == true)
            {
                get_account_details_from_01(sia_n.Text, sis_a.Text);
                get_account_details_from_04(sia_n.Text, sis_a.Text);
                msalepdf = ConnectionWithAccess.data_drive + "acc\\" + ConnectionWithAccess.mNIK + "\\reports\\" + ConnectionWithAccess.mNIK + "_si_" + ConnectionWithAccess.mprd + "_" + sidbc.SelectedValue.ToString() + "_" + sidocno.Text + ".pdf";
                doc1 = new Document(PageSize.A4, 0, 0, 0, 0);
                ConnectionWithAccess.create_file_folder(msalepdf);
                FileStream FS1 = File.Create(msalepdf);
                writer = PdfWriter.GetInstance(doc1, FS1);
                doc1.Open();
                current_pdf_page_number = 1;
                Paragraph para = new Paragraph("");
                if (cb_print_Tpt_copy.Checked == true)
                    sale_invoice_two_transport_copy();
                if (cb_print_chit_copy.Checked == true)
                    sale_invoice_two_chit_copy();
                doc1.Close();
                pdf_invoice.BringToFront();
                pdf_invoice.Visible = true;
                pdf_invoice.LoadFile(msalepdf);
            }
        }

        private void sale_invoice_two_transport_copy()
        {
            get_account_details_from_01(sia_n.Text, "@@@");
            get_account_details_from_04(sia_n.Text, "@@@");
            string consigner_name, consigner_add1, consigner_add2, consigner_city;
            consigner_name = account_detail_from_01[4];
            consigner_add1 = account_detail_from_04[4];
            consigner_add2 = account_detail_from_04[5];
            consigner_city = account_detail_from_01[8] + "-" + account_detail_from_01[10];
            if (sid_y.Text == "@@@")
            {
                get_account_details_from_01(sia_n.Text, sis_a.Text);
                get_account_details_from_04(sia_n.Text, sis_a.Text);
                print_pdf_line(cour_11_red, temp_word, 200, 10);
            }
            else
            {
                get_account_details_with_d_y_from_01(sia_n.Text, sis_a.Text, sid_y.Text);
                get_account_details_with_d_y_from_04(sia_n.Text, sis_a.Text, sid_y.Text);
                print_pdf_line(cour_11_red, temp_word, 200, 10);
            }
            PdfContentByte cb = writer.DirectContent;
            cb.MoveTo(200, 760);
            cb.LineTo(200, 820);
            cb.LineTo(400, 820);
            cb.LineTo(400, 760);
            cb.Stroke();
            cb.MoveTo(30, 760);
            cb.LineTo(550, 760);
            cb.Stroke();
            cb.MoveTo(30, 740);
            cb.LineTo(550, 740);
            cb.Stroke();
            cb.MoveTo(30, 550);
            cb.LineTo(550, 550);
            cb.Stroke();
            cb.MoveTo(30, 530);
            cb.LineTo(550, 530);
            cb.Stroke();
            temp_word = "Subject to Ulhasnagar Jurisdiction";
            print_pdf_line(cour_9, temp_word, 220, -16);
            print_pdf_line(cour_9, consigner_name, 30, 0);
            temp_word = account_detail_from_01[4];
            print_pdf_line(cour_9, temp_word, 202, -16);
            temp_word = "Invoice : " + sidocno.Text;
            print_pdf_line(cour_9, temp_word, 420, -16);
            temp_word = ConnectionWithAccess.company_details[2];
            print_pdf_line(cour_9, consigner_add1, 30, -5);
            temp_word = account_detail_from_04[4].Trim();
            print_pdf_line(cour_9, temp_word, 202, -16);
            temp_word = "Date : " + sidatetime.Text;
            print_pdf_line(cour_9, temp_word, 420, -16);
            temp_word = ConnectionWithAccess.company_details[3];
            print_pdf_line(cour_9, consigner_add2, 30, -5);
            temp_word = account_detail_from_04[5].Trim();
            print_pdf_line(cour_9, temp_word, 202, -16);
            temp_word = ConnectionWithAccess.company_details[5];
            print_pdf_line(cour_9, consigner_city, 30, -5);
            temp_word = account_detail_from_01[8] + "-" + account_detail_from_01[10];
            print_pdf_line(cour_9, temp_word, 202, -16);
            if (sid_y.Text != "@@@")
            {
                get_account_details_from_01(sia_n.Text, sis_a.Text);
                print_pdf_line(cour_9, "By:" + sis_a.Text + "," + account_detail_from_01[8].Trim(), 405, 0);
                get_account_details_with_d_y_from_01(sia_n.Text, sis_a.Text, sid_y.Text);
                get_account_details_with_d_y_from_04(sia_n.Text, sis_a.Text, sid_y.Text);
                print_pdf_line(cour_11, "", 10, -7);
            }
            else
                print_pdf_line(cour_11, "", 10, 10);
            temp_word = "Sr.                      Particular's                                   Case      Box.          Qty            Rate          Amount";
            print_pdf_line(cour_11, temp_word, 50, -10);
            si_invoice_basic_amount = 0;
            sale_invoice_amount = 0;
            mpacking = 0;
            print_pdf_line(cour_11, "", 10, -10);
            for (int i = 0; i < siitemlist.Rows.Count - 1; i++)
            {
                mpacking += Convert.ToInt16(siitemlist.Rows[i].Cells[3].Value.ToString());
                temp_word = Convert.ToString(i + 1);
                print_pdf_line(cour_11, temp_word, 45, 0);
                temp_word = siitemlist.Rows[i].Cells[2].Value.ToString();
                print_pdf_line(cour_11, temp_word, 75, -16);
                temp_word = siitemlist.Rows[i].Cells[3].Value.ToString();
                if (temp_word != "0")
                    print_pdf_line(cour_11, temp_word, para_IndentationLeft_position(230, temp_word, "cour_11"), -16);
                temp_word = siitemlist.Rows[i].Cells[4].Value.ToString();
                if (temp_word != "0")
                    print_pdf_line(cour_11, temp_word, para_IndentationLeft_position(270, temp_word, "cour_11"), -16);
                temp_word = siitemlist.Rows[i].Cells[5].Value.ToString();
                if (temp_word.Contains(".00"))
                    temp_word = temp_word.Replace(".00", "");
                else
                    temp_word = string.Format("{0:0.00}", Convert.ToDouble(temp_word));
                print_pdf_line(cour_11, temp_word, para_IndentationLeft_position(330, temp_word, "cour_11"), -16);
                temp_word = siitemlist.Rows[i].Cells[6].Value.ToString();
                temp_word = string.Format("{0:0.00}", Convert.ToDouble(temp_word));
                print_pdf_line(cour_11, temp_word, para_IndentationLeft_position(390, temp_word, "cour_11"), -16);
                if (siitemlist.Rows[i].Cells[7].Value != System.DBNull.Value)
                {
                    temp_word = siitemlist.Rows[i].Cells[7].Value.ToString();
                    temp_word = string.Format("{0:0.00}", Convert.ToDouble(temp_word));
                    print_pdf_line(cour_11, temp_word, para_IndentationLeft_position(470, temp_word, "cour_11"), -16);
                    si_invoice_basic_amount = si_invoice_basic_amount + Convert.ToDouble(siitemlist.Rows[i].Cells[7].Value);
                }
            }
            temp_int = 0;
            if (si_freight_amt.Text != "0.00")
            {
                check_data_type(si_freight_amt.Text);
                if (data_type == "Numeric")
                {
                    if (Convert.ToDouble(si_freight_amt.Text) > 0)
                    {
                        temp_word = "Freight Charges : ";
                        print_pdf_line(cour_11, temp_word, 330, 0);
                        temp_word = string.Format("{0:0.00}", Convert.ToDouble(si_freight_amt.Text));
                        print_pdf_line(cour_11, temp_word, para_IndentationLeft_position(470, temp_word, "cour_11"), -16);
                        temp_int += 1;
                    }
                }
            }
            if (si_packing_amt.Text != "0.00")
            {
                check_data_type(si_packing_amt.Text);
                if (data_type == "Numeric")
                {
                    if (Convert.ToDouble(si_packing_amt.Text) > 0)
                    {
                        temp_word = "Packing Charges : ";
                        print_pdf_line(cour_11, temp_word, 330, 0);
                        temp_word = string.Format("{0:0.00}", Convert.ToDouble(si_packing_amt.Text));
                        print_pdf_line(cour_11, temp_word, para_IndentationLeft_position(470, temp_word, "cour_11"), -16);
                        temp_int += 1;
                    }
                }
            }
            if (si_insurance_amt.Text != "0.00")
            {
                check_data_type(si_insurance_amt.Text);
                if (data_type == "Numeric")
                {
                    if (Convert.ToDouble(si_insurance_amt.Text) > 0)
                    {
                        temp_word = "Insurance Charges : ";
                        print_pdf_line(cour_11, temp_word, 330, 0);
                        temp_word = string.Format("{0:0.00}", Convert.ToDouble(si_insurance_amt.Text));
                        print_pdf_line(cour_11, temp_word, para_IndentationLeft_position(470, temp_word, "cour_11"), -16);
                        temp_int += 1;
                    }
                }
            }
            if (si_other_amt.Text != "0.00")
            {
                check_data_type(si_other_amt.Text);
                if (data_type == "Numeric")
                {
                    if (Convert.ToDouble(si_other_amt.Text) > 0)
                    {
                        temp_word = "Other Charges : ";
                        print_pdf_line(cour_11, temp_word, 330, 0);
                        temp_word = string.Format("{0:0.00}", Convert.ToDouble(si_other_amt.Text));
                        print_pdf_line(cour_11, temp_word, para_IndentationLeft_position(470, temp_word, "cour_11"), -16);
                        temp_int += 1;
                    }
                }
            }
            temp_word = NumberToWords(mpacking) + " Packing Only";
            temp_word = temp_word.Replace("AND", "");
            if (siitemlist.Rows.Count > 2)
            {
                print_pdf_line(cour_11, temp_word, 50, (100 - ((siitemlist.Rows.Count - 2 + temp_int) * 16)));
            }
            else
                print_pdf_line(cour_11, temp_word, 50, 100 - (temp_int * 16));
            temp_word = "Transport : " + account_detail_from_04[30];
            print_pdf_line(cour_11, temp_word, 50, 0);
            temp_word = sitaxdesc.Text;
            print_pdf_line(cour_11, temp_word, 50, 0);
            temp_word = "Total";
            print_pdf_line(cour_11, temp_word, 250, 0);
            temp_word = Convert.ToString(mpacking);
            print_pdf_line(cour_11, temp_word, para_IndentationLeft_position(230, temp_word, "cour_11"), -16);
            temp_word = Convert.ToString(sigrossamt.Text);
            temp_word = string.Format("{0:0.00}", Convert.ToDouble(temp_word));
            print_pdf_line(cour_11, temp_word, para_IndentationLeft_position(470, temp_word, "cour_11"), -16);
            temp_word = "Rupees : " + (NumberToWords(Convert.ToInt32(sigrossamt.Text.Substring(0, sigrossamt.Text.IndexOf("."))))) + " Only";
            print_pdf_line(cour_11, temp_word, 50, 10);
            temp_word = "For " + consigner_name;
            print_pdf_line(cour_11, temp_word, 520 - (temp_word.Length * 52 / 10), 0);
            temp_word = "Goods once sold will not be taken back ";
            print_pdf_line(cour_11, temp_word, 50, -16);
            temp_word = "This bill is good for Payment ";
            print_pdf_line(cour_11, temp_word, 50, -5);
            temp_word = "on time Demanded by us. ";
            print_pdf_line(cour_11, temp_word, 50, -5);
            temp_word = "Prop.";
            print_pdf_line(cour_11, temp_word, 500, 10);
        }

        private void sale_invoice_two_chit_copy()
        {
            int second_chit_left_margin;

            second_chit_left_margin = 290;
            print_pdf_line(cour_9, " ", 30, 25);
            temp_word = "Invoice : " + sidocno.Text;
            print_pdf_line(cour_9, temp_word, 30, 5);
            print_pdf_line(cour_9, temp_word, second_chit_left_margin + 30, -16);
            temp_word = "Date : " + sidatetime.Text;
            print_pdf_line(cour_9, temp_word, 195, -16);
            print_pdf_line(cour_9, temp_word, second_chit_left_margin + 195, -16);
            temp_word = account_detail_from_01[4];
            print_pdf_line(cour_9, temp_word, 30, 0);
            print_pdf_line(cour_9, temp_word, second_chit_left_margin + 30, -16);
            temp_word = account_detail_from_04[4];
            print_pdf_line(cour_9, temp_word, 30, -5);
            print_pdf_line(cour_9, temp_word, second_chit_left_margin + 30, -16);
            temp_word = account_detail_from_04[5];
            print_pdf_line(cour_9, temp_word, 30, -5);
            print_pdf_line(cour_9, temp_word, second_chit_left_margin + 30, -16);
            temp_word = account_detail_from_01[8] + "-" + account_detail_from_01[10];
            print_pdf_line(cour_9, temp_word, 30, -5);
            print_pdf_line(cour_9, temp_word, second_chit_left_margin + 30, -16);
            if (sid_y.Text != "@@@")
            {
                get_account_details_from_01(sia_n.Text, sis_a.Text);
                temp_word = "By:" + sis_a.Text + "," + account_detail_from_01[8].Trim();
                print_pdf_line(cour_9, temp_word, 105, 0);
                print_pdf_line(cour_9, temp_word, second_chit_left_margin + 105, -16);
                get_account_details_with_d_y_from_01(sia_n.Text, sis_a.Text, sid_y.Text);
                get_account_details_with_d_y_from_04(sia_n.Text, sis_a.Text, sid_y.Text);
            }
            //temp_word = account_detail_from_01[12];
            //if (temp_word != null && temp_word != "")
            //{
            //    print_pdf_line(cour_11, temp_word, 100, -16);
            //    print_pdf_line(cour_11, temp_word, second_chit_left_margin + 100, -16);
            //}
            temp_word = "------------------------------------------------------------------------";
            print_pdf_line(cour_11, temp_word, 30, -5);
            print_pdf_line(cour_11, temp_word, second_chit_left_margin + 30, -16);
            temp_word = "Particular's                                     Case    Qty    Rate    Amount";
            print_pdf_line(cour_9, temp_word, 42, -5);
            print_pdf_line(cour_9, temp_word, second_chit_left_margin + 42, -16);
            temp_word = "------------------------------------------------------------------------";
            print_pdf_line(cour_11, temp_word, 30, -5);
            print_pdf_line(cour_11, temp_word, second_chit_left_margin + 30, -16);
            print_pdf_line(cour_11, " ", 0, -20);
            si_invoice_basic_amount = 0;
            sale_invoice_amount = 0;
            mpacking = 0;
            for (int i = 0; i < siitemlist.Rows.Count - 1; i++)
            {
                mpacking += Convert.ToInt16(siitemlist.Rows[i].Cells[3].Value.ToString());
                temp_word = siitemlist.Rows[i].Cells[2].Value.ToString();
                print_pdf_line(cour_7, temp_word, 30, 0);
                print_pdf_line(cour_7, temp_word, second_chit_left_margin + 30, -16);
                temp_word = siitemlist.Rows[i].Cells[3].Value.ToString();
                if (temp_word != "0")
                {
                    print_pdf_line(cour_7, temp_word, para_IndentationLeft_position(110, temp_word, "cour_7"), -16);
                    print_pdf_line(cour_7, temp_word, para_IndentationLeft_position(second_chit_left_margin + 110, temp_word, "cour_7"), -16);
                }
                temp_word = siitemlist.Rows[i].Cells[5].Value.ToString();
                temp_word = string.Format("{0:0.00}", Convert.ToDouble(temp_word));
                if (temp_word.Contains(".00"))
                    temp_word = temp_word.Replace(".00", "");
                print_pdf_line(cour_7, temp_word, para_IndentationLeft_position(145, temp_word, "cour_7"), -16);
                print_pdf_line(cour_7, temp_word, para_IndentationLeft_position(second_chit_left_margin + 145, temp_word, "cour_7"), -16);
                temp_word = siitemlist.Rows[i].Cells[6].Value.ToString();
                temp_word = string.Format("{0:0.00}", Convert.ToDouble(temp_word));
                print_pdf_line(cour_7, temp_word, para_IndentationLeft_position(182, temp_word, "cour_7"), -16);
                print_pdf_line(cour_7, temp_word, para_IndentationLeft_position(second_chit_left_margin + 182, temp_word, "cour_7"), -16);
                temp_word = siitemlist.Rows[i].Cells[7].Value.ToString();
                temp_word = string.Format("{0:0.00}", Convert.ToDouble(temp_word));
                print_pdf_line(cour_7, temp_word, para_IndentationLeft_position(220, temp_word, "cour_7"), -16);
                print_pdf_line(cour_7, temp_word, para_IndentationLeft_position(second_chit_left_margin + 220, temp_word, "cour_7"), -16);
                //print_pdf_line(cour_7, temp_word, second_chit_left_margin + 240, -16);
                if (siitemlist.Rows[i].Cells[7].Value != System.DBNull.Value)
                    si_invoice_basic_amount = si_invoice_basic_amount + Convert.ToDouble(siitemlist.Rows[i].Cells[7].Value);
            }
            temp_int = 0;
            if (si_freight_amt.Text != "0.00")
            {
                check_data_type(si_freight_amt.Text);
                if (data_type == "Numeric")
                {
                    if (Convert.ToDouble(si_freight_amt.Text) > 0)
                    {
                        temp_word = "Freight Charges : ";
                        print_pdf_line(cour_7, temp_word, 30, 0);
                        print_pdf_line(cour_7, temp_word, second_chit_left_margin + 30, -16);
                        temp_word = string.Format("{0:0.00}", Convert.ToDouble(si_freight_amt.Text));
                        print_pdf_line(cour_9, temp_word, para_IndentationLeft_position(220, temp_word, "cour_9"), -16);
                        print_pdf_line(cour_9, temp_word, para_IndentationLeft_position(second_chit_left_margin + 220, temp_word, "cour_9"), -16);
                        temp_int += 1;
                    }
                }
            }
            if (si_packing_amt.Text != "0.00")
            {
                check_data_type(si_packing_amt.Text);
                if (data_type == "Numeric")
                {
                    if (Convert.ToDouble(si_packing_amt.Text) > 0)
                    {
                        temp_word = "Packing Charges : ";
                        print_pdf_line(cour_7, temp_word, 30, 0);
                        print_pdf_line(cour_7, temp_word, second_chit_left_margin + 30, -16);
                        temp_word = string.Format("{0:0.00}", Convert.ToDouble(si_packing_amt.Text));
                        print_pdf_line(cour_9, temp_word, para_IndentationLeft_position(220, temp_word, "cour_9"), -16);
                        print_pdf_line(cour_9, temp_word, para_IndentationLeft_position(second_chit_left_margin + 220, temp_word, "cour_9"), -16);
                        temp_int += 1;
                    }
                }
            }
            if (si_insurance_amt.Text != "0.00")
            {
                check_data_type(si_insurance_amt.Text);
                if (data_type == "Numeric")
                {
                    if (Convert.ToDouble(si_insurance_amt.Text) > 0)
                    {
                        temp_word = "Insurance Charges : ";
                        print_pdf_line(cour_7, temp_word, 30, 0);
                        print_pdf_line(cour_7, temp_word, second_chit_left_margin + 30, -16);
                        temp_word = string.Format("{0:0.00}", Convert.ToDouble(si_insurance_amt.Text));
                        print_pdf_line(cour_9, temp_word, para_IndentationLeft_position(220, temp_word, "cour_9"), -16);
                        print_pdf_line(cour_9, temp_word, para_IndentationLeft_position(second_chit_left_margin + 220, temp_word, "cour_9"), -16);
                        temp_int += 1;
                    }
                }
            }
            if (si_other_amt.Text != "0.00")
            {
                check_data_type(si_other_amt.Text);
                if (data_type == "Numeric")
                {
                    if (Convert.ToDouble(si_other_amt.Text) > 0)
                    {
                        temp_word = "Other Charges : ";
                        print_pdf_line(cour_7, temp_word, 30, 0);
                        print_pdf_line(cour_7, temp_word, second_chit_left_margin + 30, -16);
                        temp_word = string.Format("{0:0.00}", Convert.ToDouble(si_other_amt.Text));
                        print_pdf_line(cour_9, temp_word, para_IndentationLeft_position(220, temp_word, "cour_9"), -16);
                        print_pdf_line(cour_9, temp_word, para_IndentationLeft_position(second_chit_left_margin + 220, temp_word, "cour_9"), -16);
                        temp_int += 1;
                    }
                }
            }
            print_pdf_line(cour_11, "Lr. No. _______  Date ___________", 30, 10);
            temp_word = NumberToWords(mpacking) + " Packing Only";
            temp_word = temp_word.Replace("AND", "");
            if (siitemlist.Rows.Count > 2)
            {
                print_pdf_line(cour_11, temp_word, 30, (100 - ((siitemlist.Rows.Count - 2 - temp_int) * 16)));
                print_pdf_line(cour_11, temp_word, second_chit_left_margin + 30, -16);
            }
            else
            {
                print_pdf_line(cour_11, temp_word, 30, 100 - (temp_int * 16));
                print_pdf_line(cour_11, temp_word, second_chit_left_margin + 30, -16);
            }
            temp_word = "Transport : " + account_detail_from_04[30];
            print_pdf_line(cour_11, temp_word, 30, 0);
            print_pdf_line(cour_11, temp_word, second_chit_left_margin + 30, -16);
            temp_word = sitaxdesc.Text;
            print_pdf_line(cour_11, temp_word, 30, 0);
            print_pdf_line(cour_11, temp_word, second_chit_left_margin + 30, -16);
            temp_word = "---          --------                 ------------";
            print_pdf_line(cour_11, temp_word, 130, -16);
            print_pdf_line(cour_11, temp_word, second_chit_left_margin + 130, -16);
            temp_word = "Total";
            print_pdf_line(cour_11, temp_word, 100, -8);
            print_pdf_line(cour_11, temp_word, second_chit_left_margin + 100, -16);
            temp_word = Convert.ToString(sigrossamt.Text);
            temp_word = string.Format("{0:0.00}", Convert.ToDouble(temp_word));
            print_pdf_line(cour_11, temp_word, 255, -16);
            print_pdf_line(cour_11, temp_word, second_chit_left_margin + 255, -16);
            temp_word = "---          --------                 ------------";
            print_pdf_line(cour_11, temp_word, 130, -8);
            print_pdf_line(cour_11, temp_word, second_chit_left_margin + 130, -16);
            temp_word = "------------------------------------------------------------------------";
            print_pdf_line(cour_11, temp_word, 30, -5);
            print_pdf_line(cour_11, temp_word, second_chit_left_margin + 30, -16);
            temp_word = "Rupees : " + (NumberToWords(Convert.ToInt32(sigrossamt.Text.Substring(0, sigrossamt.Text.IndexOf("."))))) + " Only";
            print_pdf_line(cour_7, temp_word, 30, -5);
            print_pdf_line(cour_7, temp_word, second_chit_left_margin + 30, -16);
            temp_word = "------------------------------------------------------------------------";
            print_pdf_line(cour_11, temp_word, 30, -5);
            print_pdf_line(cour_11, temp_word, second_chit_left_margin + 30, -16);
            print_pdf_line(cour_11, " ", 30, 25);
        }

        private void sale_invoice_number_three()
        {
            msalepdf = ConnectionWithAccess.data_drive + "acc\\" + ConnectionWithAccess.mNIK + "\\reports\\" + ConnectionWithAccess.mNIK + "_si_" + ConnectionWithAccess.mprd + "_" + sidbc.SelectedValue.ToString() + "_" + sidocno.Text + ".pdf";
            doc1 = new Document(PageSize.A4, 10, 45, 40, 25);
            ConnectionWithAccess.create_file_folder(msalepdf);
            FileStream FS1 = File.Create(msalepdf);
            writer = PdfWriter.GetInstance(doc1, FS1);
            //PdfContentByte cb = writer.DirectContent;
            //cb.MoveTo(10, 100);
            //cb.LineTo(10, 200);
            //cb.Stroke();
            get_account_details_from_01(sia_n.Text, sis_a.Text);
            get_account_details_from_04(sia_n.Text, sis_a.Text);
            doc1.Open();
            current_pdf_page_number = 1;
            Paragraph para = new Paragraph("");
            para.Font.Size = 25;
            temp_word = " ";
            print_pdf_line(cour_11_red, temp_word, (Convert.ToInt32(ConnectionWithAccess.company_details[36]) + 240), 2);
            //print_pdf_line(cour_11_red, temp_word, 180, 0);
            temp_word = "Subject to ULHASNAGAR Jurisdiction";
            print_pdf_line(cour_11_red, temp_word, 180, 75);
            temp_word = "Tax - Invoice";
            print_pdf_line(arabic_14, temp_word, 240, 0);
            temp_word = "Buyer's Name & Address";
            print_pdf_line(cour_11, temp_word, 30, 0);
            temp_word = "Invoice No.";
            print_pdf_line(cour_11, temp_word, 300, -18);
            temp_word = "Date";
            print_pdf_line(cour_11, temp_word, 470, -18);
            temp_word = sidocno.Text;
            print_pdf_line(cour_11, temp_word, 320, -2);
            temp_word = sidatetime.Text;
            print_pdf_line(cour_11, temp_word, 460, -16);
            temp_word = account_detail_from_01[4];
            print_pdf_line(cour_11, temp_word, 30, 0);
            temp_word = account_detail_from_04[4];
            print_pdf_line(cour_11, temp_word, 30, -5);
            temp_word = account_detail_from_04[5];
            print_pdf_line(cour_11, temp_word, 30, -5);
            temp_word = account_detail_from_01[8] + "-" + account_detail_from_01[10];
            print_pdf_line(cour_11, temp_word, 30, -5);
            temp_word = "Transport : " + sitransport.Text;
            print_pdf_line(cour_11, temp_word, 300, -15);
            temp_word = account_detail_from_01[12];
            print_pdf_line(cour_11, temp_word, 30, -5);
            temp_word = DispEmail.Text;
            print_pdf_line(cour_11, temp_word, 30, -5);
            temp_word = "Buyer's";
            print_pdf_line(cour_11, temp_word, 30, 0);
            temp_word = "Tin : " + account_detail_from_04[29];
            print_pdf_line(cour_11, temp_word, 30, -5);
            temp_word = account_detail_from_01[17] + " ," + account_detail_from_01[19];
            if (temp_word != null && temp_word != "")
            {
                print_pdf_line(cour_11, temp_word, 100, -18);
            }
            temp_word = "-------------------------------------------------------------------------------------------------------------------------------------------";
            print_pdf_line(cour_11, temp_word, 30, -5);
            temp_word = "Sr.                          Particular's                                                 Pac        Quantity     Rate             Amount";
            print_pdf_line(cour_11, temp_word, 30, -5);
            temp_word = "-------------------------------------------------------------------------------------------------------------------------------------------";
            print_pdf_line(cour_11, temp_word, 30, -5);
            si_invoice_basic_amount = 0;
            sale_invoice_amount = 0;
            mpacking = 0;
            for (int i = 0; i < siitemlist.Rows.Count - 1; i++)
            {
                mpacking += Convert.ToInt16(siitemlist.Rows[i].Cells[3].Value.ToString());
                temp_word = Convert.ToString(i + 1);
                print_pdf_line(cour_11, temp_word, para_IndentationLeft_position(-35, temp_word, "cour_11"), 0);
                temp_word = siitemlist.Rows[i].Cells[2].Value.ToString();
                print_pdf_line(cour_11, temp_word, 60, -16);
                if (siitemlist.Rows[i].Cells[3].Value.ToString() != "0" && siitemlist.Rows[i].Cells[3].Value.ToString() != null)
                {
                    temp_word = siitemlist.Rows[i].Cells[3].Value.ToString();
                    print_pdf_line(cour_11, temp_word, para_IndentationLeft_position(260, temp_word, "cour_11"), -16);
                }
                temp_word = siitemlist.Rows[i].Cells[5].Value.ToString();
                temp_word = string.Format("{0:0.00}", Convert.ToDouble(temp_word));
                print_pdf_line(cour_11, temp_word, para_IndentationLeft_position(310, temp_word, "cour_11"), -16);
                temp_word = add_comma_to_number(siitemlist.Rows[i].Cells[6].Value.ToString());
                print_pdf_line(cour_11, temp_word, para_IndentationLeft_position(380, temp_word, "cour_11"), -16);
                temp_word = add_comma_to_number(siitemlist.Rows[i].Cells[7].Value.ToString());
                print_pdf_line(cour_11, temp_word, para_IndentationLeft_position(455, temp_word, "cour_11"), -16);
                if (siitemlist.Rows[i].Cells[7].Value != System.DBNull.Value)
                    si_invoice_basic_amount = si_invoice_basic_amount + Convert.ToDouble(siitemlist.Rows[i].Cells[7].Value);
            }
            si_invoice_tax_amount = Convert.ToDouble(sitaxamt.Text);
            si_invoice_gross_amount = (si_invoice_basic_amount + si_invoice_tax_amount);
            temp_word = "------------";
            print_pdf_line(cour_11, temp_word, 485, 0);
            temp_word = "Total";
            print_pdf_line(cour_11, temp_word, 375, -5);
            //temp_word = Convert.ToString(si_invoice_basic_amount);
            temp_word = add_comma_to_number(si_invoice_basic_amount.ToString());
            print_pdf_line(cour_11, temp_word, para_IndentationLeft_position(455, temp_word, "cour_11"), -18);
            temp_word = "------------";
            print_pdf_line(cour_11, temp_word, 485, -10);
            temp_word = NumberToWords(mpacking) + " Packing Only";
            temp_word = temp_word.Replace("AND", "");
            if (siitemlist.Rows.Count > 2)
                print_pdf_line(cour_11, temp_word, 30, (240 - ((siitemlist.Rows.Count - 2) * 16)));
            else
                print_pdf_line(cour_11, temp_word, 30, 240);
            temp_word = sitaxdesc.Text;
            print_pdf_line(cour_11, temp_word, para_IndentationLeft_position(240, temp_word, "cour_11"), 0);
            //temp_word = sitaxamt.Text;
            temp_word = Convert.ToDouble(sitaxamt.Text).ToString("#,##,##,###0.00");
            print_pdf_line(cour_11, temp_word, para_IndentationLeft_position(455, temp_word, "cour_11"), -18);
            temp_word = "Note # Cheque Fail Charges Rs. 350/- or 2%";
            print_pdf_line(cour_9, temp_word, 30, 0);
            temp_word = "----      ----                      -----------------";
            print_pdf_line(cour_11, temp_word, 340, -18);
            temp_word = "of Bill Amount Which ever is Higher";
            print_pdf_line(cour_9, temp_word, 75, -5);
            temp_word = "Total";
            print_pdf_line(cour_11, temp_word, 300, -16);
            temp_word = add_comma_to_number(si_invoice_gross_amount.ToString());
            print_pdf_line(cour_11, temp_word, para_IndentationLeft_position(455, temp_word, "cour_11"), -18);
            temp_word = "----      ----                      -----------------";
            print_pdf_line(cour_11, temp_word, 342, -5);
            temp_word = "L.B.T. Num : " + ConnectionWithAccess.company_details[19];
            print_pdf_line(cour_9_red, temp_word, 30, -5);
            temp_word = "-------------------------------------------------------------------------------------------------------------------------------------------";
            print_pdf_line(cour_11, temp_word, 30, -5);
            temp_word = "Rupees : " + (NumberToWords(Convert.ToInt32(si_invoice_gross_amount))) + " Only";
            print_pdf_line(cour_9, temp_word, 30, -5);
            temp_word = "-------------------------------------------------------------------------------------------------------------------------------------------";
            print_pdf_line(cour_11, temp_word, 30, -5);
            temp_word = "V.A.T. TIN : " + ConnectionWithAccess.company_details[18];
            print_pdf_line(cour_9_red, temp_word, 30, -9);
            temp_word = "For " + ConnectionWithAccess.company_details[1];
            print_pdf_line(cour_9, temp_word, 530 - (temp_word.Length * 52 / 10), -18);
            temp_word = "C.S.T. TIN : " + ConnectionWithAccess.company_details[27];
            print_pdf_line(cour_9_red, temp_word, 30, -5);
            temp_word = "Added Tax Act 2002 is  in force on the date on  which the sale of  the goods specified in ";
            print_pdf_line(cour_9, temp_word, 30, -5);
            temp_word = "this Tax  Invoice is made  by us/me  & that the  transaction of  sales covered by this Tax ";
            print_pdf_line(cour_9, temp_word, 30, -5);
            temp_word = "Invoice has been effected by me/us and it shall be accounted for in the turnover of Sales ";
            print_pdf_line(cour_9, temp_word, 30, -5);
            temp_word = "while filing of return and the due tax, if any payable on the sale has been paid or shall be ";
            print_pdf_line(cour_9, temp_word, 30, -5);
            temp_word = "Prop.";
            print_pdf_line(cour_9, temp_word, 510, -18);
            temp_word = "paid.";
            print_pdf_line(cour_9, temp_word, 30, -5);
            if (ConnectionWithAccess.company_details[30].Length > 6)
                temp_word += "Bank Details : " + ConnectionWithAccess.company_details[30];
            if (ConnectionWithAccess.company_details[21].Length > 6)
                temp_word += " A/c. : " + process_bank_account_number(ConnectionWithAccess.company_details[21]);
            if (ConnectionWithAccess.company_details[29].Length > 6)
                temp_word += " Ifc Code : " + ConnectionWithAccess.company_details[29];
            print_pdf_line(cour_9, temp_word, 30, -5);
            doc1.Close();
            pdf_invoice.BringToFront();
            pdf_invoice.Visible = true;
            pdf_invoice.LoadFile(msalepdf);
        }

        private void sale_invoice_with_top_free()
        {
            //read_company_text_file();
            msalepdf = ConnectionWithAccess.data_drive + "acc\\" + ConnectionWithAccess.mNIK + "\\reports\\" + ConnectionWithAccess.mNIK + "_si_" + ConnectionWithAccess.mprd + "_" + sidbc.SelectedValue.ToString() + "_" + sidocno.Text + ".pdf";
            doc1 = new Document(PageSize.A4, 15, 10, 10, 20);
            ConnectionWithAccess.create_file_folder(msalepdf);
            FileStream FS1 = File.Create(msalepdf);
            writer = PdfWriter.GetInstance(doc1, FS1);
            get_account_details_from_01(sia_n.Text, sis_a.Text);
            get_account_details_from_04(sia_n.Text, sis_a.Text);
            doc1.Open();
            current_pdf_page_number = 1;
            //if (ckbx_Igst.Checked)
            if (ConnectionWithAccess.company_details[5].Trim() != account_detail_from_01[12].Trim())
                invoice_jpg_filename = ConnectionWithAccess.setup_drive + "sharp\\" + "gst invoice interstate.jpg";
            else
                invoice_jpg_filename = ConnectionWithAccess.setup_drive + "sharp\\" + "gst invoice state.jpg";
            if (File.Exists(invoice_jpg_filename))
            {
                iTextSharp.text.Image pdfimage = iTextSharp.text.Image.GetInstance(invoice_jpg_filename);
                pdfimage.ScaleToFit(560f, 700f);
                pdfimage.Alignment = Element.ALIGN_CENTER;
                //pdfimage.SetAbsolutePosition(15, 40);
                pdfimage.SetAbsolutePosition(15, 40 - (Convert.ToInt32(ConnectionWithAccess.company_details[36]) * 1));
                doc1.Add(pdfimage);
            }
            invoice_jpg_filename = ConnectionWithAccess.setup_drive + "sharp\\" + "sharp accounting logo.jpg";
            if (File.Exists(invoice_jpg_filename))
            {
                iTextSharp.text.Image pdfimage = iTextSharp.text.Image.GetInstance(invoice_jpg_filename);
                pdfimage.ScaleToFit(21, 21);
                pdfimage.Alignment = Element.ALIGN_CENTER;
                //pdfimage.SetAbsolutePosition(21, 50);
                pdfimage.SetAbsolutePosition(21, 50 - (Convert.ToInt32(ConnectionWithAccess.company_details[36]) * 1));
                doc1.Add(pdfimage);
            }
            invoice_jpg_filename = ConnectionWithAccess.data_drive + "acc\\" + ConnectionWithAccess.mNIK + "\\reports\\" + "invoice_top.jpg";
            if (File.Exists(invoice_jpg_filename))
            {
                iTextSharp.text.Image pdfimage = iTextSharp.text.Image.GetInstance(invoice_jpg_filename);
                pdfimage.ScaleToFit(700f, 140f);
                pdfimage.Alignment = Element.ALIGN_CENTER;
                //pdfimage.SetAbsolutePosition(21, 690);
                pdfimage.SetAbsolutePosition(21, 690 - (Convert.ToInt32(ConnectionWithAccess.company_details[36]) * 1));
                doc1.Add(pdfimage);
            }
            Paragraph para = new Paragraph("");
            para.Font.Size = 25;
            temp_word = " ";
            print_pdf_line(cour_11_red, temp_word, 0, (Convert.ToInt32(ConnectionWithAccess.company_details[36]) + 240));
            gst_invoice_common_matter();
        }

        private void add_boxes_for_gst_INVOICE_IN_SALE()
        {

        }

        private void gst_invoice_common_matter()
        {
            oldsaleinvoicedetails();
            sale_invoice_item_filling();

            if (ConnectionWithAccess.company_details[32].Trim().Length > 5)
                temp_word = "GST NUMBER # ";
            else
                temp_word = "";
            print_pdf_line(cour_11, temp_word, 10, 13);
            temp_word = ConnectionWithAccess.company_details[32];
            print_pdf_line(cour_11_bold, temp_word, 96, -16);
            //temp_word = "Invoice Number # ";
            //print_pdf_line(cour_11, temp_word, 290, -16);
            //temp_word = sidocno.Text;
            //long_invoice_number = sidocno.Text;
            //print_pdf_line(cour_11_bold, temp_word, 384, -16);
            //temp_word = "Invoice Date # ";
            //print_pdf_line(cour_11, temp_word, 430, -16);
            //temp_word = sidatetime.Value.Date.ToString("dd/MM/yyyy");
            //print_pdf_line(cour_11_bold, temp_word, 504, -16);

            temp_word = "Inv.No.";
            print_pdf_line(cour_11, temp_word, 290, -16);
            temp_word = ConnectionWithAccess.company_details[32].Substring(0, 2) + "-" + ConnectionWithAccess.company_details[5].Substring(0, 3) + "/" + ConnectionWithAccess.msdate.Substring(8, 2) + "-" + (Convert.ToInt32(ConnectionWithAccess.msdate.Substring(8, 2)) + 1).ToString() + "/" + sidocno.Text;
            print_pdf_line(cour_11_bold, temp_word, 330, -16);
            temp_word = "Inv.Date ";
            print_pdf_line(cour_11, temp_word, 460, -16);
            temp_word = sidatetime.Value.Date.ToString("dd/MM/yyyy");
            print_pdf_line(cour_11_bold, temp_word, 504, -16);


            if (ConnectionWithAccess.company_details[11].Length > 5)
            {
                if (ConnectionWithAccess.company_details[11].Contains("["))
                {
                    temp_word = "Email Id # " + ConnectionWithAccess.company_details[11].Substring(0, ConnectionWithAccess.company_details[11].IndexOf("["));
                }
                else
                    temp_word = "Email Id # " + ConnectionWithAccess.company_details[11];
            }
            else
                temp_word = "";
            print_pdf_line(cour_9, temp_word, 10, -5);
            if (sitransport.Text.Trim().Length > 3)
                temp_word = "Transport # " + sitransport.Text;
            else
                temp_word = "";
            print_pdf_line(cour_9, temp_word, 290, -16);
            if (ConnectionWithAccess.company_details[13].Trim().Length > 6)
                temp_word = "Pan Card # " + ConnectionWithAccess.company_details[13];
            else
                temp_word = "";
            print_pdf_line(cour_9, temp_word, 10, -5);
            if (sisale_lr_no.Text.Trim() != "")
                temp_word = "L.R. No " + sisale_lr_no.Text + " Date " + dtp_sisale_lr_date.Text;
            else
                temp_word = "L.R. No ____________ Date __________________";
            print_pdf_line(cour_9, temp_word, 290, -16);
            if (ConnectionWithAccess.company_details[20].Trim().Length > 10)
                temp_word = "Aadhar Card # " + ConnectionWithAccess.company_details[20];
            else
                temp_word = "";
            print_pdf_line(cour_9, temp_word, 10, -5);
            if (account_detail_from_01[4].Trim().Length > 1)
                temp_word = account_detail_from_01[4];
            else
                temp_word = "";
            print_pdf_line(cour_9_bold, temp_word, 10, 24);
            if (account_detail_from_04[24].Trim().Length > 6)
                temp_word = "Email Id # " + account_detail_from_04[24];
            else
                temp_word = "";
            print_pdf_line(cour_9, temp_word, 290, -16);
            temp_word = account_detail_from_04[4];
            print_pdf_line(cour_9, temp_word, 10, -5);
            if (account_detail_from_04[25].Trim().Length > 5)
                temp_word = "Website # " + account_detail_from_04[25];
            else
                temp_word = "";
            print_pdf_line(cour_9, temp_word, 290, -16);
            temp_word = account_detail_from_04[5];
            print_pdf_line(cour_9, temp_word, 10, -5);
            if (account_detail_from_01[28].Trim().Length > 5)
                temp_word = "GST Number # " + account_detail_from_01[28];
            else
                temp_word = "";
            print_pdf_line(cour_9, temp_word, 290, -16);
            temp_word = account_detail_from_04[6];
            print_pdf_line(cour_9, temp_word, 10, -5);
            if (account_detail_from_04[29].Trim().Length > 5)
                temp_word = "Vat Tin # " + account_detail_from_04[29];
            else
                temp_word = "";
            print_pdf_line(cour_9, temp_word, 290, -16);
            temp_word = account_detail_from_04[7];
            if (account_detail_from_01[10].Trim().Length > 5)
                temp_word += "  Pincode - " + account_detail_from_01[10];
            print_pdf_line(cour_9, temp_word, 10, -5);
            if (account_detail_from_01[7].Trim().Length > 5)
                temp_word = "Pan Number # " + account_detail_from_01[7];
            else
                temp_word = "";
            print_pdf_line(cour_9, temp_word, 290, -16);
            if (account_detail_from_01[12].Trim().Length > 5)
                temp_word = "State - " + account_detail_from_01[12];
            else
                temp_word = "";
            print_pdf_line(cour_9, temp_word, 10, -5);
            if (account_detail_from_04[17].Trim().Length > 5 && ConnectionWithAccess.company_details[39] == "Y")
            {
                temp_word = "Mobile # " + account_detail_from_04[17];
                if (account_detail_from_01[6] != "")
                    temp_word += "  (" + account_detail_from_01[6] + ")";
            }
            else
                temp_word = "";
            print_pdf_line(cour_9, temp_word, 290, -16);
            if (access_line2 != null && access_line2.Length > 2)
                print_pdf_line(cour_15_bold, access_line2, 180, 13);
            else
                print_pdf_line(cour_15_bold, " ", 0, 13);
            print_pdf_line(cour_9, " ", 0, 0);
            si_invoice_basic_amount = 0;
            sale_invoice_amount = 0;
            si_cgst_total_tax_amount = 0;
            si_sgst_total_tax_amount = 0;
            si_igst_total_tax_amount = 0;
            si_invoice_basic_amount = 0;
            si_invoice_gross_amount = 0;
            si_gst_item_total_basic_amount = 0;
            si_gst_item_basic_amount = 0;
            mpacking = 0;
            //if (ConnectionWithAccess.company_details[5].Trim() != account_detail_from_01[12].Trim())
            for (row_pointer = 0; row_pointer < siitemlist.Rows.Count - 1; row_pointer++)
            {
                if (siitemlist.Rows[row_pointer].Cells[3].Value != System.DBNull.Value && siitemlist.Rows[row_pointer].Cells[3].Value != null)
                {
                    temp_word = siitemlist.Rows[row_pointer].Cells[3].Value.ToString();
                    if (siitemlist.Rows[row_pointer].Cells[3].Value != System.DBNull.Value)
                    {
                        siitemlist.Rows[row_pointer].Cells[3].Value = siitemlist.Rows[row_pointer].Cells[3].Value.ToString().Replace(".00", "");
                        mpacking += Convert.ToInt16(siitemlist.Rows[row_pointer].Cells[3].Value.ToString());
                    }
                }
                temp_word = Convert.ToString(row_pointer + 1);
                if (siitemlist.Rows.Count > 11)
                    print_pdf_line(cour_7, temp_word, para_IndentationLeft_position(-63, temp_word, "cour_7"), -5);
                else
                    print_pdf_line(cour_7, temp_word, para_IndentationLeft_position(-63, temp_word, "cour_7"), 0);
                temp_word = siitemlist.Rows[row_pointer].Cells[2].Value.ToString();
                if (temp_word.Length > 32)
                    print_pdf_line(cour_7, temp_word, 33, -16);
                else
                    print_pdf_line(cour_9, temp_word, 33, -16);
                temp_word = siitemlist.Rows[row_pointer].Cells[10].Value.ToString();
                print_pdf_line(cour_7, temp_word, 211, -16);
                temp_word = siitemlist.Rows[row_pointer].Cells[5].Value.ToString();
                if (temp_word.Contains(".00"))
                    temp_word = temp_word.Substring(0, temp_word.Length - 3);
                print_pdf_line(cour_7, temp_word, para_IndentationLeft_position(199, temp_word, "cour_7"), -16);
                temp_word = siitemlist.Rows[row_pointer].Cells[6].Value.ToString();
                if (temp_word.Contains("."))
                {
                    if (temp_word.Length - temp_word.IndexOf(".") > temp_word.IndexOf("."))
                        temp_word = temp_word.Substring(0, temp_word.IndexOf(".") + 3);
                }
                if (temp_word.Contains(".00"))
                    temp_word = temp_word.Substring(0, temp_word.Length - 3);
                print_pdf_line(cour_7, temp_word, para_IndentationLeft_position(257, temp_word, "cour_7"), -16);
                temp_word = siitemlist.Rows[row_pointer].Cells[8].Value.ToString();
                print_pdf_line(cour_7, temp_word, 280, -16);
                if (siitemlist.Rows[row_pointer].Cells[9].Value != null && !string.IsNullOrEmpty(siitemlist.Rows[row_pointer].Cells[9].Value.ToString()))
                    si_igst_tax_per = Convert.ToDouble(siitemlist.Rows[row_pointer].Cells[9].Value.ToString());
                else
                    si_igst_tax_per = 0.00;
                si_gst_item_basic_amount = Convert.ToDouble(siitemlist.Rows[row_pointer].Cells[5].Value.ToString()) * Convert.ToDouble(siitemlist.Rows[row_pointer].Cells[6].Value.ToString());
                si_cgst_tax_per = si_igst_tax_per / 2;
                si_sgst_tax_per = si_igst_tax_per / 2;
                si_cgst_tax_amount = si_gst_item_basic_amount * si_cgst_tax_per / 100;
                si_sgst_tax_amount = si_gst_item_basic_amount * si_sgst_tax_per / 100;
                si_igst_tax_amount = si_gst_item_basic_amount * si_igst_tax_per / 100;
                si_cgst_total_tax_amount += si_cgst_tax_amount;
                si_sgst_total_tax_amount += si_sgst_tax_amount;
                si_igst_total_tax_amount += si_igst_tax_amount;
                si_gst_item_total_basic_amount += si_gst_item_basic_amount;
                temp_word = add_comma_to_number(si_gst_item_basic_amount.ToString());
                print_pdf_line(cour_7, temp_word, para_IndentationLeft_position(303, temp_word, "cour_7"), -16);
                if (ConnectionWithAccess.company_details[5].Trim() != account_detail_from_01[12].Trim())
                {
                    temp_word = si_igst_tax_per.ToString() + "%";
                    print_pdf_line(cour_7, temp_word, para_IndentationLeft_position(325, temp_word, "cour_7"), -16);
                    temp_word = add_comma_to_number(si_igst_tax_amount.ToString());
                    print_pdf_line(cour_7, temp_word, para_IndentationLeft_position(386, temp_word, "cour_7"), -16);
                    temp_word = add_comma_to_number(Convert.ToString(si_gst_item_basic_amount + si_igst_tax_amount));
                    print_pdf_line(cour_7, temp_word, para_IndentationLeft_position(480, temp_word, "cour_7"), -16);
                }
                else
                {
                    temp_word = si_cgst_tax_per.ToString();
                    print_pdf_line(cour_7, temp_word, para_IndentationLeft_position(316, temp_word, "cour_7"), -16);
                    temp_word = si_cgst_tax_amount.ToString();
                    print_pdf_line(cour_7, temp_word, para_IndentationLeft_position(359, temp_word, "cour_7"), -16);
                    temp_word = si_sgst_tax_per.ToString();
                    print_pdf_line(cour_7, temp_word, para_IndentationLeft_position(374, temp_word, "cour_7"), -16);
                    temp_word = si_sgst_tax_amount.ToString();
                    print_pdf_line(cour_7, temp_word, para_IndentationLeft_position(420, temp_word, "cour_7"), -16);
                    temp_word = add_comma_to_number(Convert.ToString(si_gst_item_basic_amount + si_cgst_tax_amount + si_sgst_tax_amount));
                    print_pdf_line(cour_7, temp_word, para_IndentationLeft_position(480, temp_word, "cour_7"), -16);
                }
                si_invoice_basic_amount = si_invoice_basic_amount + Convert.ToDouble(siitemlist.Rows[row_pointer].Cells[7].Value);
                si_invoice_gross_amount += (si_gst_item_basic_amount + si_cgst_tax_amount + si_sgst_tax_amount);
            }
            int temp_count = 0;
            if (siitemlist.Rows.Count < 12)
                temp_count = 11;
            else if (siitemlist.Rows.Count == 13)
                temp_count = 15;
            else if (siitemlist.Rows.Count >= 12)
                temp_count = 15;

            for (int i = siitemlist.Rows.Count; i < temp_count; i++)
            {
                print_pdf_line(cour_11, " ", 36, 0);
                print_pdf_line(cour_11, " ", 36, -16);
            }

            temp_word = NumberToWords(mpacking) + " Packing Only";
            temp_word = temp_word.Replace("AND", "");
            //if (siitemlist.Rows.Count > 2)
            //{
            //temp_int = 145 - ((siitemlist.Rows.Count - 2) * 16);
            //print_pdf_line(cour_11, temp_word, 36,temp_int );
            //print_pdf_line(cour_11, temp_word, 36, 145 - ((siitemlist.Rows.Count - 2) * 16)));
            print_pdf_line(cour_11, temp_word, 36, -2);
            //}
            //else
            //    print_pdf_line(cour_11, temp_word, 36, 145);
            if (ConnectionWithAccess.company_details[5].Trim() != account_detail_from_01[12].Trim())
            {
                temp_word = add_comma_to_number(si_gst_item_total_basic_amount.ToString());
                print_pdf_line(cour_7, temp_word, para_IndentationLeft_position(303, temp_word, "cour_7"), -16);
                temp_word = add_comma_to_number(si_igst_total_tax_amount.ToString());
                print_pdf_line(cour_7, temp_word, para_IndentationLeft_position(384, temp_word, "cour_7"), -16);
            }
            else
            {
                temp_word = add_comma_to_number(si_gst_item_total_basic_amount.ToString());
                print_pdf_line(cour_7, temp_word, para_IndentationLeft_position(303, temp_word, "cour_7"), -16);
                temp_word = si_cgst_total_tax_amount.ToString();
                print_pdf_line(cour_7, temp_word, para_IndentationLeft_position(359, temp_word, "cour_7"), -16);
                temp_word = si_sgst_total_tax_amount.ToString();
                print_pdf_line(cour_7, temp_word, para_IndentationLeft_position(420, temp_word, "cour_7"), -16);
            }
            temp_word = add_comma_to_number(Convert.ToString(si_invoice_gross_amount));
            print_pdf_line(cour_7, temp_word, para_IndentationLeft_position(480, temp_word, "cour_7"), 18);
            si_invoice_gross_amount += Convert.ToDouble(si_freight_amt.Text);
            si_invoice_gross_amount += Convert.ToDouble(si_packing_amt.Text);
            si_invoice_gross_amount += Convert.ToDouble(si_insurance_amt.Text);
            si_invoice_gross_amount += Convert.ToDouble(si_other_amt.Text);
            si_invoice_gross_amount += Convert.ToDouble(siroundoffamt.Text);
            temp_word = add_comma_to_number(si_freight_amt.Text);
            print_pdf_line(cour_7, temp_word, para_IndentationLeft_position(480, temp_word, "cour_7"), 0);
            temp_word = add_comma_to_number(si_packing_amt.Text);
            print_pdf_line(cour_7, temp_word, para_IndentationLeft_position(480, temp_word, "cour_7"), 0);
            temp_word = add_comma_to_number(si_insurance_amt.Text);
            print_pdf_line(cour_7, temp_word, para_IndentationLeft_position(480, temp_word, "cour_7"), 0);
            temp_word = add_comma_to_number(si_other_amt.Text);
            print_pdf_line(cour_7, temp_word, para_IndentationLeft_position(480, temp_word, "cour_7"), 0);
            temp_word = add_comma_to_number(Convert.ToString(si_invoice_gross_amount));
            print_pdf_line(cour_7_bold, temp_word, para_IndentationLeft_position(480, temp_word, "cour_7"), 0);

            temp_word = "";
            if (ConnectionWithAccess.company_details[30].Length > 6)
                temp_word += "Bank Details : " + ConnectionWithAccess.company_details[30];
            if (ConnectionWithAccess.company_details[21].Length > 6)
                temp_word += " A/c. : " + process_bank_account_number(ConnectionWithAccess.company_details[21]);
            if (ConnectionWithAccess.company_details[29].Length > 6)
                temp_word += " Ifc Code : " + ConnectionWithAccess.company_details[29];
            print_pdf_line(cour_9_bold, temp_word, 3, 24);
            //temp_word = "Note # Cheque Fail Charges Rs. 350/- or 2% of Bill Amount Which ever is Higher";
            temp_word = "Note # Payment only by online banking or through cheque";
            print_pdf_line(cour_9, temp_word, 15, -3);
            temp_word = "Payment after 30 Days from Invoice Date will be charged 2% Interest Per Month";
            print_pdf_line(cour_9, temp_word, 15, -5);
            temp_word = "For " + ConnectionWithAccess.company_details[1];
            //print_pdf_line(cour_7, temp_word, 372, 7);
            print_pdf_line(cour_7, temp_word, 385, 6);
            temp_word = (NumberToWords(Convert.ToInt32(si_invoice_gross_amount))) + " Only";
            print_pdf_line(cour_7, temp_word, 21, 4);
            if (ConnectionWithAccess.company_details[18].Length > 5)
                temp_word = "V.A.T. TIN : " + ConnectionWithAccess.company_details[18];
            else
                temp_word = "";
            //print_pdf_line(cour_9_bold, temp_word, 21, -5);
            if (ConnectionWithAccess.company_details[27].Trim().Length > 5)
                temp_word += "             C.S.T. TIN : " + ConnectionWithAccess.company_details[27];
            else
                temp_word = "";
            print_pdf_line(cour_9_bold, temp_word, 21, -5);
            if (ConnectionWithAccess.company_details[4].Trim().Length > 2)
                temp_word = "Subject to " + ConnectionWithAccess.company_details[4] + " Jurisdiction";
            else
                temp_word = "";
            print_pdf_line(cour_9_bold, temp_word, 21, -5);
            if (function_working == "export")
            {
                temp_word = "Auto Generated Invoice Copy, Signature Not Required";
                print_pdf_line(cour_11_bold_red, temp_word, 21, -5);
            }
            if (ConnectionWithAccess.company_details[22].Length > 5)
                temp_word = ConnectionWithAccess.company_details[22];
            else
                temp_word = "";
            print_pdf_line(cour_9_bold, temp_word, 21, 0);
            if (access_line4 != null && temp_word.Length > 2)
                print_pdf_line(cour_9_bold, access_line4, 180, 0);
            else
                print_pdf_line(cour_9_bold, " ", 180, 0);
            if (access_line5 != null && access_line5.Length > 2)
                print_pdf_line(cour_9_bold, access_line5, 180, 0);
            else
                print_pdf_line(cour_9_bold, " ", 180, 0);
            doc1.Close();
            pdf_invoice.BringToFront();
            pdf_invoice.Visible = true;
            pdf_invoice.LoadFile(msalepdf);
        }

        private string process_bank_account_number(string bank_account_number)
        {
            try
            {
                temp_word = "";
                if (bank_account_number.Trim() != "")
                {
                    temp_count = 0;
                    bank_account_number = bank_account_number.Trim();
                    for (int i = 0; i < bank_account_number.Length; i++)
                    {
                        if (i == 0 || i == 2 || i == 4 || i == 6 || i == 8 || i == 10 || i == 12 || i == 14 || i == 16 || i == 18)
                        {
                            if ((i + 1) < bank_account_number.Length)
                            {
                                temp_word += bank_account_number.Substring(i, 2) + " ";
                                temp_count = temp_count + 2;
                            }
                        }
                    }
                    if (bank_account_number.Length - temp_count == 1)
                        temp_word += bank_account_number.Substring(temp_count, 1) + " ";
                }
            }
            catch (Exception ex)
            {
                temp_word = bank_account_number;
            }
            return temp_word;
        }

        private void sale_invoice_gst_with_contant_and_top_address()
        {
            msalepdf = ConnectionWithAccess.data_drive + "acc\\" + ConnectionWithAccess.mNIK + "\\reports\\" + ConnectionWithAccess.mNIK + "_si_" + ConnectionWithAccess.mprd + "_" + sidbc.SelectedValue.ToString() + "_" + sidocno.Text + ".pdf";
            ConnectionWithAccess.create_file_folder(msalepdf);
            doc1 = new Document(PageSize.A4, 15, 10, 10, 20);
            FileStream FS1 = File.Create(msalepdf);
            writer = PdfWriter.GetInstance(doc1, FS1);
            get_account_details_from_01(sia_n.Text, sis_a.Text);
            get_account_details_from_04(sia_n.Text, sis_a.Text);
            doc1.Open();
            current_pdf_page_number = 1;
            if (ConnectionWithAccess.company_details[5].Trim() != account_detail_from_01[12].Trim())
                invoice_jpg_filename = ConnectionWithAccess.setup_drive + "sharp\\" + "gst invoice interstate.jpg";
            else
                invoice_jpg_filename = ConnectionWithAccess.setup_drive + "sharp\\" + "gst invoice state.jpg";
            if (File.Exists(invoice_jpg_filename))
            {
                iTextSharp.text.Image pdfimage = iTextSharp.text.Image.GetInstance(invoice_jpg_filename);
                pdfimage.ScaleToFit(560f, 700f);
                pdfimage.Alignment = Element.ALIGN_CENTER;
                //pdfimage.SetAbsolutePosition(15, 40);
                pdfimage.SetAbsolutePosition(15, 40 - (Convert.ToInt32(ConnectionWithAccess.company_details[36]) * 1));
                doc1.Add(pdfimage);
            }
            invoice_jpg_filename = ConnectionWithAccess.setup_drive + "sharp\\" + "sharp accounting logo.jpg";
            if (File.Exists(invoice_jpg_filename))
            {
                iTextSharp.text.Image pdfimage = iTextSharp.text.Image.GetInstance(invoice_jpg_filename);
                pdfimage.ScaleToFit(21, 21);
                pdfimage.Alignment = Element.ALIGN_CENTER;
                //pdfimage.SetAbsolutePosition(21, 50);
                pdfimage.SetAbsolutePosition(21, 50 - (Convert.ToInt32(ConnectionWithAccess.company_details[36]) * 1));
                doc1.Add(pdfimage);
            }
            Paragraph para = new Paragraph("");
            para.Font.Size = 25;
            temp_word = " ";
            print_pdf_line(cour_11_red, temp_word, 0, (Convert.ToInt32(ConnectionWithAccess.company_details[36]) + 2));
            //print_pdf_line(cour_11_red, temp_word, 240, 2);
            //temp_word2 = "012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789";
            //for (int i = 0; i <= 112; i++)
            //{
            //    temp_word = temp_word2.Substring(0, i);
            //    print_pdf_line_at_center(cour_27_red, temp_word, 10, "cour_27_red");
            //}
            temp_word = ConnectionWithAccess.company_details[1].Trim();
            if (temp_word.Length > 50)
            {
                temp_word = temp_word.Substring(0, 50);
                print_pdf_line_at_center(arial_20, temp_word, 10, "cour_20_red");
            }
            else if (temp_word.Length > 39 && temp_word.Length <= 50)
            {
                temp_word = temp_word.Substring(0, 39);
                print_pdf_line_at_center(arial_20, temp_word, 0, "arial_20");
            }
            else
                print_pdf_line_at_center(cour_27_red, temp_word, 10, "cour_27_red");
            temp_word = ConnectionWithAccess.company_details[14].Trim();
            print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
            temp_word = ConnectionWithAccess.company_details[15].Trim() + ConnectionWithAccess.company_details[16].Trim();
            print_pdf_line_at_center(cour_11_red, temp_word, 0, "cour_11_red");
            temp_word = "Add : " + ConnectionWithAccess.company_details[2].Trim() + " " + ConnectionWithAccess.company_details[3].Trim() + " " + ConnectionWithAccess.company_details[4].Trim() + ")";
            print_pdf_line_at_center(cour_11_red, temp_word, 0, "cour_11_red");
            temp_word = "(" + ConnectionWithAccess.company_details[5].Trim() + ") - " + ConnectionWithAccess.company_details[6].Trim();
            print_pdf_line_at_center(cour_11_red, temp_word, 0, "cour_11_red");
            temp_word = "Mobile : " + ConnectionWithAccess.company_details[9].Trim();
            if (ConnectionWithAccess.company_details[10].Trim().Length > 3)
                temp_word += "/" + ConnectionWithAccess.company_details[10].Trim();
            //if (ConnectionWithAccess.company_details[11].Contains("@"))
            //    temp_word += " Email id. : " + ConnectionWithAccess.company_details[11].Trim();
            //if (ConnectionWithAccess.company_details[28].Length > 3)
            //    temp_word += " Website : " + ConnectionWithAccess.company_details[28].Trim();
            print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
            temp_word = " ";
            print_pdf_line(cour_11_red, temp_word, 0, (Convert.ToInt32(ConnectionWithAccess.company_details[36]) + 0));
            //print_pdf_line(cour_11_red, temp_word, 240, -10);
            gst_invoice_common_matter();
        }

        private void sale_invoice_gst_with_contant_and_bottom_address()
        {
            msalepdf = ConnectionWithAccess.data_drive + "acc\\" + ConnectionWithAccess.mNIK + "\\reports\\" + ConnectionWithAccess.mNIK + "_si_" + ConnectionWithAccess.mprd + "_" + sidbc.SelectedValue.ToString() + "_" + sidocno.Text + ".pdf";
            doc1 = new Document(PageSize.A4, 15, 10, 10, 20);
            FileStream FS1 = File.Create(msalepdf);
            writer = PdfWriter.GetInstance(doc1, FS1);
            get_account_details_from_01(sia_n.Text, sis_a.Text);
            get_account_details_from_04(sia_n.Text, sis_a.Text);
            doc1.Open();
            current_pdf_page_number = 1;
            //if (ckbx_Igst.Checked)
            if (ConnectionWithAccess.company_details[5].Trim() != account_detail_from_01[12].Trim())
                invoice_jpg_filename = ConnectionWithAccess.setup_drive + "sharp\\" + "gst invoice interstate.jpg";
            else
                invoice_jpg_filename = ConnectionWithAccess.setup_drive + "sharp\\" + "gst invoice state.jpg";
            if (File.Exists(invoice_jpg_filename))
            {
                iTextSharp.text.Image pdfimage = iTextSharp.text.Image.GetInstance(invoice_jpg_filename);
                pdfimage.ScaleToFit(560f, 700f);
                pdfimage.Alignment = Element.ALIGN_CENTER;
                //pdfimage.SetAbsolutePosition(15, 60);
                pdfimage.SetAbsolutePosition(15, 60 - (Convert.ToInt32(ConnectionWithAccess.company_details[36]) * 1));
                doc1.Add(pdfimage);
            }
            invoice_jpg_filename = ConnectionWithAccess.setup_drive + "sharp\\" + "sharp accounting logo.jpg";
            if (File.Exists(invoice_jpg_filename))
            {
                iTextSharp.text.Image pdfimage = iTextSharp.text.Image.GetInstance(invoice_jpg_filename);
                pdfimage.ScaleToFit(21, 21);
                pdfimage.Alignment = Element.ALIGN_CENTER;
                // pdfimage.SetAbsolutePosition(21, 50);
                pdfimage.SetAbsolutePosition(21, 50 - (Convert.ToInt32(ConnectionWithAccess.company_details[36]) * 1));
                doc1.Add(pdfimage);
            }
            Paragraph para = new Paragraph("");
            para.Font.Size = 25;
            temp_word = " ";
            print_pdf_line(cour_11_red, temp_word, 0, (Convert.ToInt32(ConnectionWithAccess.company_details[36]) + 2));
            //print_pdf_line(cour_11_red, temp_word, 240, 2);
            //temp_word2 = "012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789";
            //for (int i = 0; i <= 112; i++)
            //{
            //    temp_word = temp_word2.Substring(0, i);
            //    print_pdf_line_at_center(cour_27_red, temp_word, 10, "cour_27_red");
            //}
            temp_word = ConnectionWithAccess.company_details[1].Trim();
            if (temp_word.Length > 50)
            {
                temp_word = temp_word.Substring(0, 50);
                print_pdf_line_at_center(cour_20_red, temp_word, 10, "cour_20_red");
            }
            else if (temp_word.Length > 37 && temp_word.Length <= 50)
            {
                temp_word = temp_word.Substring(0, 37);
                print_pdf_line_at_center(cour_27_red, temp_word, 0, "cour_27_red");
            }
            else
                print_pdf_line_at_center(cour_27_red, temp_word, 10, "cour_27_red");
            temp_word = ConnectionWithAccess.company_details[14].Trim();
            print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
            temp_word = ConnectionWithAccess.company_details[15].Trim() + ConnectionWithAccess.company_details[16].Trim();
            print_pdf_line_at_center(cour_11_red, temp_word, 0, "cour_11_red");
            temp_word = "Add : " + ConnectionWithAccess.company_details[2].Trim() + " " + ConnectionWithAccess.company_details[3].Trim() + " " + ConnectionWithAccess.company_details[4].Trim() + " - " + ConnectionWithAccess.company_details[6].Trim() + " (" + ConnectionWithAccess.company_details[5].Trim() + ")";
            print_pdf_line_at_center(cour_11_red, temp_word, 0, "cour_11_red");
            temp_word = "Mobile : " + ConnectionWithAccess.company_details[9].Trim();
            if (ConnectionWithAccess.company_details[10].Trim().Length > 3)
                temp_word += "/" + ConnectionWithAccess.company_details[10].Trim();
            //if (ConnectionWithAccess.company_details[11].Contains("@"))
            //    temp_word += " Email id. : " + ConnectionWithAccess.company_details[11].Trim();
            //if (ConnectionWithAccess.company_details[28].Length > 3)
            //    temp_word += " Website : " + ConnectionWithAccess.company_details[28].Trim();
            print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
            temp_word = " ";
            print_pdf_line(cour_11_red, temp_word, 0, (Convert.ToInt32(ConnectionWithAccess.company_details[36]) + 0));
            //print_pdf_line(cour_11_red, temp_word, 240, 3);
            gst_invoice_common_matter();
        }

        private void sale_invoice_gst_letterpad()
        {
            msalepdf = ConnectionWithAccess.data_drive + "acc\\" + ConnectionWithAccess.mNIK + "\\reports\\" + ConnectionWithAccess.mNIK + "_si_" + ConnectionWithAccess.mprd + "_" + sidbc.SelectedValue.ToString() + "_" + sidocno.Text + ".pdf";
            doc1 = new Document(PageSize.A4, 15, 10, 10, 20);
            ConnectionWithAccess.create_file_folder(msalepdf);
            FileStream FS1 = File.Create(msalepdf);
            writer = PdfWriter.GetInstance(doc1, FS1);
            get_account_details_from_01(sia_n.Text, sis_a.Text);
            get_account_details_from_04(sia_n.Text, sis_a.Text);
            doc1.Open();
            current_pdf_page_number = 1;
            if (function_working == "export")
            {
                invoice_jpg_filename = ConnectionWithAccess.data_drive + "acc\\" + ConnectionWithAccess.mNIK + "\\images\\letterpad.jpg";
                if (File.Exists(invoice_jpg_filename))
                {
                    iTextSharp.text.Image pdfimage = iTextSharp.text.Image.GetInstance(invoice_jpg_filename);
                    pdfimage.ScaleToFit(590f, 900f);
                    pdfimage.Alignment = Element.ALIGN_CENTER;
                    //pdfimage.SetAbsolutePosition(21, 50);
                    //pdfimage.SetAbsolutePosition(21, 50 - (Convert.ToInt32(ConnectionWithAccess.company_details[36]) * 1));
                    pdfimage.SetAbsolutePosition(4, 4);
                    doc1.Add(pdfimage);
                }
            }
            if (ConnectionWithAccess.company_details[5].Trim() != account_detail_from_01[12].Trim())
                invoice_jpg_filename = ConnectionWithAccess.setup_drive + "sharp\\" + "gst invoice interstate.jpg";
            else
                invoice_jpg_filename = ConnectionWithAccess.setup_drive + "sharp\\" + "gst invoice state.jpg";
            if (File.Exists(invoice_jpg_filename))
            {
                iTextSharp.text.Image pdfimage = iTextSharp.text.Image.GetInstance(invoice_jpg_filename);
                pdfimage.ScaleToFit(560f, 700f);
                pdfimage.Alignment = Element.ALIGN_CENTER;
                //pdfimage.SetAbsolutePosition(15, 40);
                pdfimage.SetAbsolutePosition(15, 40 - (Convert.ToInt32(ConnectionWithAccess.company_details[36]) * 1));
                doc1.Add(pdfimage);
            }
            invoice_jpg_filename = ConnectionWithAccess.setup_drive + "sharp\\" + "sharp accounting logo.jpg";
            if (File.Exists(invoice_jpg_filename))
            {
                iTextSharp.text.Image pdfimage = iTextSharp.text.Image.GetInstance(invoice_jpg_filename);
                pdfimage.ScaleToFit(21, 21);
                pdfimage.Alignment = Element.ALIGN_CENTER;
                //pdfimage.SetAbsolutePosition(21, 50);
                pdfimage.SetAbsolutePosition(21, 50 - (Convert.ToInt32(ConnectionWithAccess.company_details[36]) * 1));
                doc1.Add(pdfimage);
            }
            //qr_image_details = "SI," + ConnectionWithAccess.company_details[32] + "," + ConnectionWithAccess.company_details[1] + "," + ConnectionWithAccess.company_details[4] + "," + account_detail_from_01[28] + "," + account_detail_from_01[4] + "," + account_detail_from_01[8] + "," + ConnectionWithAccess.mNIK + "," + ConnectionWithAccess.mprd + "," + sidocno.Text + "," + sidatetime.Value.ToShortDateString() + "," + sigrossamt.Text;
            qr_image_details = "SI," + ConnectionWithAccess.company_details[32] + "," + account_detail_from_01[4] + "," + account_detail_from_01[8] + "," + account_detail_from_01[28] + "," + ConnectionWithAccess.mNIK + "," + ConnectionWithAccess.mprd + "," + sidocno.Text + "," + sidatetime.Value.ToShortDateString() + "," + sigrossamt.Text;
            save_qr_code(qr_image_details);
            if (File.Exists(qr_filename))
            {
                iTextSharp.text.Image pdfimage = iTextSharp.text.Image.GetInstance(qr_filename);
                pdfimage.ScaleToFit(60, 60);
                pdfimage.Alignment = Element.ALIGN_CENTER;
                //pdfimage.SetAbsolutePosition(21, 800);
                //pdfimage.SetAbsolutePosition(450, 140 - (Convert.ToInt32(ConnectionWithAccess.company_details[36]) * 1));
                pdfimage.SetAbsolutePosition(30, 220 - (Convert.ToInt32(ConnectionWithAccess.company_details[36]) * 1));
                doc1.Add(pdfimage);
            }
            Paragraph para = new Paragraph("");
            para.Font.Size = 25;
            temp_word = " ";
            print_pdf_line(cour_11_red, temp_word, 0, (Convert.ToInt32(ConnectionWithAccess.company_details[36]) + 112));
            //print_pdf_line(cour_11_red, temp_word, 240, 112);
            gst_invoice_common_matter();
        }

        private void Printing_delivery_challan()
        {
            //read_company_text_file();
            msalepdf = ConnectionWithAccess.data_drive + "acc\\" + ConnectionWithAccess.mNIK + "\\reports\\" + ConnectionWithAccess.mNIK + "_si_" + ConnectionWithAccess.mprd + "_" + sidbc.SelectedValue.ToString() + "_" + sidocno.Text + ".pdf";
            ConnectionWithAccess.create_file_folder(msalepdf);
            doc1 = new Document(PageSize.A4, 15, 10, 10, 20);
            FileStream FS1 = File.Create(msalepdf);
            writer = PdfWriter.GetInstance(doc1, FS1);
            get_account_details_from_01(sia_n.Text, sis_a.Text);
            get_account_details_from_04(sia_n.Text, sis_a.Text);
            doc1.Open();
            current_pdf_page_number = 1;
            if (ConnectionWithAccess.company_details[5].Trim() != account_detail_from_01[12].Trim())
                invoice_jpg_filename = ConnectionWithAccess.setup_drive + "sharp\\" + "gst invoice interstate.jpg";
            else
                invoice_jpg_filename = ConnectionWithAccess.setup_drive + "sharp\\" + "gst invoice state.jpg";
            if (File.Exists(invoice_jpg_filename))
            {
                iTextSharp.text.Image pdfimage = iTextSharp.text.Image.GetInstance(invoice_jpg_filename);
                pdfimage.ScaleToFit(560f, 700f);
                pdfimage.Alignment = Element.ALIGN_CENTER;
                //pdfimage.SetAbsolutePosition(15, 40);
                pdfimage.SetAbsolutePosition(15, 40 - (Convert.ToInt32(ConnectionWithAccess.company_details[36]) * 1));
                doc1.Add(pdfimage);
            }
            invoice_jpg_filename = ConnectionWithAccess.setup_drive + "sharp\\" + "sharp accounting logo.jpg";
            if (File.Exists(invoice_jpg_filename))
            {
                iTextSharp.text.Image pdfimage = iTextSharp.text.Image.GetInstance(invoice_jpg_filename);
                pdfimage.ScaleToFit(21, 21);
                pdfimage.Alignment = Element.ALIGN_CENTER;
                //pdfimage.SetAbsolutePosition(21, 50);
                pdfimage.SetAbsolutePosition(21, 50 - (Convert.ToInt32(ConnectionWithAccess.company_details[36]) * 1));
                doc1.Add(pdfimage);
            }
            Paragraph para = new Paragraph("");
            para.Font.Size = 25;
            temp_word = " ";
            print_pdf_line(cour_11_red, temp_word, 240, 2);
            //temp_word2 = "012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789";
            //for (int i = 0; i <= 112; i++)
            //{
            //    temp_word = temp_word2.Substring(0, i);
            //    print_pdf_line_at_center(cour_27_red, temp_word, 10, "cour_27_red");
            //}
            temp_word = ConnectionWithAccess.company_details[1].Trim();
            if (temp_word.Length > 50)
            {
                temp_word = temp_word.Substring(0, 50);
                print_pdf_line_at_center(cour_20_red, temp_word, 10, "cour_20_red");
            }
            else if (temp_word.Length > 37 && temp_word.Length <= 50)
            {
                temp_word = temp_word.Substring(0, 37);
                print_pdf_line_at_center(cour_27_red, temp_word, 0, "cour_27_red");
            }
            else
                print_pdf_line_at_center(cour_27_red, temp_word, 10, "cour_27_red");
            temp_word = ConnectionWithAccess.company_details[14].Trim();
            print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
            temp_word = ConnectionWithAccess.company_details[15].Trim() + ConnectionWithAccess.company_details[16].Trim();
            print_pdf_line_at_center(cour_11_red, temp_word, 0, "cour_11_red");
            temp_word = "Add : " + ConnectionWithAccess.company_details[2].Trim() + " " + ConnectionWithAccess.company_details[3].Trim() + " " + ConnectionWithAccess.company_details[4].Trim() + " - " + ConnectionWithAccess.company_details[6].Trim() + " (" + ConnectionWithAccess.company_details[5].Trim() + ")";
            print_pdf_line_at_center(cour_11_red, temp_word, 0, "cour_11_red");
            temp_word = "Mobile : " + ConnectionWithAccess.company_details[9].Trim();
            if (ConnectionWithAccess.company_details[10].Trim().Length > 3)
                temp_word += "/" + ConnectionWithAccess.company_details[10].Trim();
            //if (ConnectionWithAccess.company_details[11].Contains("@"))
            //    temp_word += " Email id. : " + ConnectionWithAccess.company_details[11].Trim();
            //if (ConnectionWithAccess.company_details[28].Length > 3)
            //    temp_word += " Website : " + ConnectionWithAccess.company_details[28].Trim();
            print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
            temp_word = " ";
            print_pdf_line(cour_11_red, temp_word, 0, (Convert.ToInt32(ConnectionWithAccess.company_details[36]) + 3));
            //print_pdf_line(cour_11_red, temp_word, 240, 3);
            gst_invoice_common_matter();
        }

        private void addCell(PdfPTable table, string text, int rowspan, bool bBorders = true, iTextSharp.text.Font cell_font = null)
        {
            if (cell_font == null)
                cell_font = cour_11;
            //BaseFont bfTimes = BaseFont.CreateFont(BaseFont.TIMES_ROMAN, BaseFont.CP1252, false);

            //iTextSharp.text.Font times = FontFactory.GetFont("Arial", 11, iTextSharp.text.Font.BOLD);

            //iTextSharp.text.Font times = new iTextSharp.text.Font(bfTimes, 11, iTextSharp.text.Font.BOLD, iTextSharp.text.BaseColor.BLACK);

            PdfPCell cell = new PdfPCell(new Phrase(text, cell_font));
            cell.Rowspan = rowspan;

            cell.BorderWidth = 0;
            if (bBorders)
            {
                cell.BorderWidthTop = 1;
                cell.BorderWidthBottom = 1;
            }
            cell.NoWrap = true;
            //cell.Width = cell_width;
            //cell.BackgroundColor = new iTextSharp.text.BaseColor(240, 240, 240);
            cell.HorizontalAlignment = PdfPCell.ALIGN_CENTER;
            cell.VerticalAlignment = PdfPCell.ALIGN_MIDDLE;
            table.AddCell(cell);
        }

        private void sale_invoice_Plain_Paper()
        {
            //pdf_invoice.Location = new Point(20, 144);
            //msalepdf = ConnectionWithAccess.data_drive + "acc\\" + ConnectionWithAccess.mNIK + "\\reports\\saleinvoice_" + sidocno.Text;
            //if (chb_add_datetime_in_output.Checked)
            //    msalepdf += "_" + DateTime.Now.Day + "_" + DateTime.Now.Month + "_" + DateTime.Now.Year + "_" + DateTime.Now.TimeOfDay.Hours + "_" + DateTime.Now.TimeOfDay.Minutes;
            //msalepdf += ".pdf";
            //ConnectionWithAccess.create_file_folder(msalepdf);
            //doc1 = new Document(PageSize.A4, 10, 45, 40, 25);
            //FileStream FS1 = File.Create(msalepdf);
            //writer = PdfWriter.GetInstance(doc1, FS1);
            //get_account_details_from_01(sia_n.Text, sis_a.Text);
            //get_account_details_from_04(sia_n.Text, sis_a.Text);
            //doc1.Open();
            //current_pdf_page_number = 1;
            //Paragraph para = new Paragraph("");
            //para.Font.Size = 25;
            //temp_word = " ";
            //print_pdf_line(cour_11_red, temp_word, 180, 0);
            //temp_word = "Subject to ULHASNAGAR Jurisdiction";
            //print_pdf_line(cour_11_red, temp_word, 180, 75);
            //temp_word = "Tax - Invoice";
            //print_pdf_line(arabic_14, temp_word, 240, 0);
            //temp_word = "Buyer's Name & Address";
            //print_pdf_line(cour_11, temp_word, 30, 0);
            //temp_word = "Invoice No.";
            //print_pdf_line(cour_11, temp_word, 300, -18);
            //temp_word = "Date";
            //print_pdf_line(cour_11, temp_word, 470, -18);
            //temp_word = sidocno.Text;
            //print_pdf_line(cour_11, temp_word, 320, -2);
            //temp_word = sidatetime.Text;
            //print_pdf_line(cour_11, temp_word, 460, -16);
            //temp_word = account_detail_from_01[4];
            //print_pdf_line(cour_11, temp_word, 30, 0);
            //temp_word = account_detail_from_04[4];
            //print_pdf_line(cour_11, temp_word, 30, -5);
            //temp_word = account_detail_from_04[5];
            //print_pdf_line(cour_11, temp_word, 30, -5);
            //temp_word = account_detail_from_01[8] + "-" + account_detail_from_01[10];
            //print_pdf_line(cour_11, temp_word, 30, -5);
            //temp_word = "Transport : " + sitransport.Text;
            //print_pdf_line(cour_11, temp_word, 300, -15);
            //temp_word = account_detail_from_01[12];
            //print_pdf_line(cour_11, temp_word, 30, -5);
            //temp_word = DispEmail.Text;
            //print_pdf_line(cour_11, temp_word, 30, -5);
            //temp_word = "Buyer's";
            //print_pdf_line(cour_11, temp_word, 30, 0);
            //temp_word = "Tin : " + account_detail_from_04[29];
            //print_pdf_line(cour_11, temp_word, 30, -5);
            //temp_word = account_detail_from_01[17] + " ," + account_detail_from_01[19];
            //if (temp_word != null && temp_word != "")
            //{
            //    print_pdf_line(cour_11, temp_word, 100, -18);
            //}
            ////temp_word = "-------------------------------------------------------------------------------------------------------------------------------------------";
            ////print_pdf_line(cour_11, temp_word, 30, -5);
            ////temp_word = "Sr.                          Particular's                                                 Pac        Quantity     Rate             Amount";
            ////print_pdf_line(cour_11, temp_word, 30, -5);
            ////temp_word = "-------------------------------------------------------------------------------------------------------------------------------------------";
            ////print_pdf_line(cour_11, temp_word, 30, -5);
            //si_invoice_basic_amount = 0;
            //sale_invoice_amount = 0;

            //PdfPTable pdfTable = new PdfPTable(siitemlist.ColumnCount);
            //pdfTable.HorizontalAlignment = Element.ALIGN_LEFT;
            //pdfTable.WidthPercentage = 100;
            //List<int> lstTableWidth = new List<int>();

            //foreach (DataGridViewColumn column in siitemlist.Columns)
            //{
            //    addCell(pdfTable, column.HeaderText.Trim(), 2);
            //    //lstTableWidth.Add(column.Width);
            //}

            ////pdfTable.SetWidths(lstTableWidth.ToArray());
            //string cell_value = string.Empty;

            ////Adding DataRow
            //foreach (DataGridViewRow row in siitemlist.Rows)
            //{
            //    foreach (DataGridViewCell cell in row.Cells)
            //    {
            //        cell_value = string.Empty;
            //        if (cell.Value != null)
            //            cell_value = cell.Value.ToString();
            //        PdfPCell pdf_cell = new PdfPCell(new Phrase(cell_value, cour_11));
            //        pdf_cell.Border = 0;

            //        //pdf_cell.HorizontalAlignment =  
            //        pdfTable.AddCell(pdf_cell);
            //    }
            //    si_invoice_basic_amount = si_invoice_basic_amount + Convert.ToDouble(row.Cells[7].Value);
            //}

            //doc1.Add(pdfTable);
            ////int.TryParse(sitaxamt.Text, out si_invoice_tax_amount);
            //if (sitaxamt.Text == "")
            //    sitaxamt.Text = "0";
            //si_invoice_tax_amount = Convert.ToDouble(sitaxamt.Text);
            //si_invoice_gross_amount = (si_invoice_basic_amount + si_invoice_tax_amount);
            //temp_word = "------------";
            //print_pdf_line(cour_11, temp_word, 485, 0);
            //temp_word = "Total";
            //print_pdf_line(cour_11, temp_word, 375, -5);
            ////temp_word = Convert.ToString(si_invoice_basic_amount);
            //temp_word = add_comma_to_number(si_invoice_basic_amount.ToString());
            //print_pdf_line(cour_11, temp_word, para_IndentationLeft_position(455, temp_word, "cour_11"), -18);
            //temp_word = "------------";
            //print_pdf_line(cour_11, temp_word, 485, -10);
            //temp_word = NumberToWords(mpacking) + " Packing Only";
            //temp_word = temp_word.Replace("AND", "");
            //if (siitemlist.Rows.Count > 2)
            //    print_pdf_line(cour_11, temp_word, 30, (240 - ((siitemlist.Rows.Count - 2) * 16)));
            //else
            //    print_pdf_line(cour_11, temp_word, 30, 240);
            //temp_word = sitaxdesc.Text;
            //print_pdf_line(cour_11, temp_word, para_IndentationLeft_position(240, temp_word, "cour_11"), 0);
            ////temp_word = sitaxamt.Text;
            //temp_word = Convert.ToDouble(sitaxamt.Text).ToString("#,##,##,###0.00");
            //print_pdf_line(cour_11, temp_word, para_IndentationLeft_position(455, temp_word, "cour_11"), -18);
            //temp_word = "Note # Cheque Fail Charges Rs. 350/- or 2%";
            //print_pdf_line(cour_9, temp_word, 30, 0);
            //temp_word = "----      ----                      -----------------";
            //print_pdf_line(cour_11, temp_word, 340, -18);
            //temp_word = "of Bill Amount Which ever is Higher";
            //print_pdf_line(cour_9, temp_word, 75, -5);
            //temp_word = "Total";
            //print_pdf_line(cour_11, temp_word, 300, -16);
            //temp_word = add_comma_to_number(si_invoice_gross_amount.ToString());
            //print_pdf_line(cour_11, temp_word, para_IndentationLeft_position(455, temp_word, "cour_11"), -18);
            //temp_word = "----      ----                      -----------------";
            //print_pdf_line(cour_11, temp_word, 342, -5);
            //temp_word = "L.B.T. Num : " + ConnectionWithAccess.company_details[19];
            //print_pdf_line(cour_9_red, temp_word, 30, -5);
            //temp_word = "-------------------------------------------------------------------------------------------------------------------------------------------";
            //print_pdf_line(cour_11, temp_word, 30, -5);
            //temp_word = "Rupees : " + (NumberToWords(Convert.ToInt32(si_invoice_gross_amount))) + " Only";
            //print_pdf_line(cour_9, temp_word, 30, -5);
            //temp_word = "-------------------------------------------------------------------------------------------------------------------------------------------";
            //print_pdf_line(cour_11, temp_word, 30, -5);
            //temp_word = "V.A.T. TIN : " + ConnectionWithAccess.company_details[18];
            //print_pdf_line(cour_9_red, temp_word, 30, -9);
            //temp_word = "For " + ConnectionWithAccess.company_details[1];
            //print_pdf_line(cour_9, temp_word, 530 - (temp_word.Length * 52 / 10), -18);
            //temp_word = "C.S.T. TIN : " + ConnectionWithAccess.company_details[27];
            //print_pdf_line(cour_9_red, temp_word, 30, -5);
            //temp_word = "Added Tax Act 2002 is  in force on the date on  which the sale of  the goods specified in ";
            //print_pdf_line(cour_9, temp_word, 30, -5);
            //temp_word = "this Tax  Invoice is made  by us/me  & that the  transaction of  sales covered by this Tax ";
            //print_pdf_line(cour_9, temp_word, 30, -5);
            //temp_word = "Invoice has been effected by me/us and it shall be accounted for in the turnover of Sales ";
            //print_pdf_line(cour_9, temp_word, 30, -5);
            //temp_word = "while filing of return and the due tax, if any payable on the sale has been paid or shall be ";
            //print_pdf_line(cour_9, temp_word, 30, -5);
            //temp_word = "Prop.";
            //print_pdf_line(cour_9, temp_word, 510, -18);
            //temp_word = "paid.";
            //print_pdf_line(cour_9, temp_word, 30, -5);
            //if (ConnectionWithAccess.company_details[30].Length > 6)
            //    temp_word += "Bank Details : " + ConnectionWithAccess.company_details[30];
            //if (ConnectionWithAccess.company_details[21].Length > 6)
            //    temp_word += " A/c. : " + process_bank_account_number(ConnectionWithAccess.company_details[21]);
            //if (ConnectionWithAccess.company_details[29].Length > 6)
            //    temp_word += " Ifc Code : " + ConnectionWithAccess.company_details[29];
            //print_pdf_line(cour_9, temp_word, 30, -5);
            //doc1.Close();
            //pdf_invoice.BringToFront();
            //pdf_invoice.Visible = true;
            //pdf_invoice.LoadFile(msalepdf);

            msalepdf = ConnectionWithAccess.data_drive + "acc\\" + ConnectionWithAccess.mNIK + "\\reports\\" + ConnectionWithAccess.mNIK + "_si_" + ConnectionWithAccess.mprd + "_" + sidbc.SelectedValue.ToString() + "_" + sidocno.Text + ".pdf";
            doc1 = new Document(PageSize.A4, 15, 10, 10, 20);
            //doc1 = new Document(PageSize.A4, 5, 5, 5, 5);
            ConnectionWithAccess.create_file_folder(msalepdf);
            FileStream FS1 = File.Create(msalepdf);
            writer = PdfWriter.GetInstance(doc1, FS1);
            get_account_details_from_01(sia_n.Text, sis_a.Text);
            get_account_details_from_04(sia_n.Text, sis_a.Text);
            doc1.Open();
            current_pdf_page_number = 1;





            Paragraph para = new Paragraph("");
            para.Font.Size = 25;
            temp_word = " ";
            print_pdf_line(cour_11_red, temp_word, 0, (Convert.ToInt32(ConnectionWithAccess.company_details[36]) + 112));
            //print_pdf_line(cour_11_red, temp_word, 240, 112);
            temp_word = ConnectionWithAccess.company_details[1];
            print_pdf_line(cour_27_red, temp_word, 165, 10);
            //temp_word = ConnectionWithAccess.company_details[1];
            //print_pdf_line_at_center(cour_9_bold, temp_word, 0, "cour_9_bold");
            temp_word = ConnectionWithAccess.company_details[2];
            temp_word += ConnectionWithAccess.company_details[3];
            print_pdf_line_at_center(cour_9, temp_word, 0, "cour_9");
            temp_word = ConnectionWithAccess.company_details[4];
            if (ConnectionWithAccess.company_details[6].Length > 2)
                temp_word += "-" + ConnectionWithAccess.company_details[6];
            if (ConnectionWithAccess.company_details[5].Length > 2)
                temp_word += " " + ConnectionWithAccess.company_details[5];
            print_pdf_line_at_center(cour_9, temp_word, 0, "cour_9");
            temp_word = ConnectionWithAccess.company_details[14];
            print_pdf_line_at_center(cour_9, temp_word, 0, "cour_9");
            temp_word = ConnectionWithAccess.company_details[15];
            if (ConnectionWithAccess.company_details[16] != "")
                temp_word += "," + ConnectionWithAccess.company_details[16];
            print_pdf_line_at_center(cour_9, temp_word, 0, "cour_9");
            temp_word = "Mobile : " + ConnectionWithAccess.company_details[9];
            print_pdf_line_at_center(cour_11_bold_red, temp_word, 0, "cour_9");
            temp_word = " ";
            print_pdf_line_at_center(cour_9, temp_word, 0, "cour_9");
            if (ConnectionWithAccess.company_details[5].Trim() != account_detail_from_01[12].Trim())
                invoice_jpg_filename = ConnectionWithAccess.setup_drive + "sharp\\" + "gst invoice interstate.jpg";
            else
                invoice_jpg_filename = ConnectionWithAccess.setup_drive + "sharp\\" + "gst invoice state.jpg";
            if (File.Exists(invoice_jpg_filename))
            {
                iTextSharp.text.Image pdfimage = iTextSharp.text.Image.GetInstance(invoice_jpg_filename);
                pdfimage.ScaleToFit(560f, 700f);
                pdfimage.Alignment = Element.ALIGN_CENTER;
                //pdfimage.SetAbsolutePosition(15, 40);
                pdfimage.SetAbsolutePosition(15, 40 - (Convert.ToInt32(ConnectionWithAccess.company_details[36]) * 1));
                doc1.Add(pdfimage);
            }
            invoice_jpg_filename = ConnectionWithAccess.setup_drive + "sharp\\" + "sharp accounting logo.jpg";
            if (File.Exists(invoice_jpg_filename))
            {
                iTextSharp.text.Image pdfimage = iTextSharp.text.Image.GetInstance(invoice_jpg_filename);
                pdfimage.ScaleToFit(21, 21);
                pdfimage.Alignment = Element.ALIGN_CENTER;
                //pdfimage.SetAbsolutePosition(21, 50);
                pdfimage.SetAbsolutePosition(21, 50 - (Convert.ToInt32(ConnectionWithAccess.company_details[36]) * 1));
                doc1.Add(pdfimage);
            }
            //qr_image_details = "SI," + ConnectionWithAccess.company_details[32] + "," + ConnectionWithAccess.company_details[1] + "," + ConnectionWithAccess.company_details[4] + "," + account_detail_from_01[28] + "," + account_detail_from_01[4] + "," + account_detail_from_01[8] + "," + ConnectionWithAccess.mNIK + "," + ConnectionWithAccess.mprd + "," + sidocno.Text + "," + sidatetime.Value.ToShortDateString() + "," + sigrossamt.Text;
            qr_image_details = "SI," + ConnectionWithAccess.company_details[32] + "," + account_detail_from_01[4] + "," + account_detail_from_01[8] + "," + account_detail_from_01[28] + "," + ConnectionWithAccess.mNIK + "," + ConnectionWithAccess.mprd + "," + sidocno.Text + "," + sidatetime.Value.ToShortDateString() + "," + sigrossamt.Text;
            save_qr_code(qr_image_details);
            if (File.Exists(qr_filename))
            {
                iTextSharp.text.Image pdfimage = iTextSharp.text.Image.GetInstance(qr_filename);
                pdfimage.ScaleToFit(60, 60);
                pdfimage.Alignment = Element.ALIGN_CENTER;
                //pdfimage.SetAbsolutePosition(21, 800);
                //pdfimage.SetAbsolutePosition(450, 140 - (Convert.ToInt32(ConnectionWithAccess.company_details[36]) * 1));
                pdfimage.SetAbsolutePosition(30, 220 - (Convert.ToInt32(ConnectionWithAccess.company_details[36]) * 1));
                doc1.Add(pdfimage);
            }
            gst_invoice_common_matter();



        }

        private string add_comma_to_number(string old_number)
        {
            if (old_number != "")
            {
                check_data_type(old_number);
                if (data_type == "Numeric")
                    old_number = Convert.ToDouble(old_number).ToString("#,##,##,###0.00");
            }
            return old_number;
        }

        #endregion

        private void pdfwithpdfwriter()
        {
            ////Document document = new Document();
            //Document document = new Document(PageSize.A4, 40, 45, 40, 25);
            //FileStream FS = File.Create(ConnectionWithAccess.mpdffile);
            //// step 2:
            //// we create a writer that listens to the document
            //// and directs a PDF-stream to a file
            //PdfWriter.GetInstance(document, FS);
            ////PdfWriter writer = PdfWriter.getInstance(document, new FileStream("Chap1002.pdf", FileMode.Create));


            //// step 3: we open the document
            //document.Open();


            //// step 4: we grab the ContentByte and do some stuff with it
            ////PdfContentByte cb = writer.DirectContent;


            //// we tell the ContentByte we're ready to draw text
            //cb.beginText();


            //// we draw some text on a certain position
            //cb.setTextMatrix(100, 400);
            //cb.showText("Text at position 100,400.");


            //// we tell the contentByte, we've finished drawing text
            //cb.endText();
            //document.Close();
        }

        private void pdfwatermark()
        {
            string watermarkedFile = "Watermarked.pdf";
            // Creating watermark on a separate layer
            // Creating iTextSharp.text.pdf.PdfReader object to read the Existing PDF Document
            PdfReader reader1 = new PdfReader(ConnectionWithAccess.mpdffile);
            using (FileStream fs = new FileStream(watermarkedFile, FileMode.Create, FileAccess.Write, FileShare.None))
            // Creating iTextSharp.text.pdf.PdfStamper object to write Data from iTextSharp.text.pdf.PdfReader object to FileStream object
            using (PdfStamper stamper = new PdfStamper(reader1, fs))
            {
                // Getting total number of pages of the Existing Document
                int pageCount = reader1.NumberOfPages;

                // Create New Layer for Watermark
                PdfLayer layer = new PdfLayer("WatermarkLayer", stamper.Writer);
                // Loop through each Page
                for (int i = 1; i <= pageCount; i++)
                {
                    // Getting the Page Size
                    //Rectangle rect = reader1.GetPageSize(i);

                    // Get the ContentByte object
                    PdfContentByte cb = stamper.GetUnderContent(i);

                    // Tell the cb that the next commands should be "bound" to this new layer
                    cb.BeginLayer(layer);
                    cb.SetFontAndSize(BaseFont.CreateFont(
                      BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED), 50);

                    PdfGState gState = new PdfGState();
                    gState.FillOpacity = 0.25f;
                    cb.SetGState(gState);

                    cb.SetColorFill(BaseColor.BLACK);
                    cb.BeginText();
                    //cb.ShowTextAligned(PdfContentByte.ALIGN_CENTER, watermarkText, rect.Width / 2, rect.Height / 2, 45f);
                    cb.EndText();

                    // Close the layer
                    cb.EndLayer();
                }
            }
        }

        private void si_item_help_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                rowIndex = si_item_help.CurrentCell.RowIndex;
                mtype = Convert.ToString(si_item_help.Rows[rowIndex].Cells[0].Value);
                mitem_code = Convert.ToString(si_item_help.Rows[rowIndex].Cells[1].Value);
                mtitle = Convert.ToString(siitemlist.Rows[mRowIndex].Cells[2].Value);
                ConnectionWithAccess.query = "select [type], item_code, [title],packing,box,price,clo_stk,cat,igst_per,hsn_code from " + ConnectionWithAccess.tablename[05] + " where [type] = '" + mtype + "' and item_code = '" + mitem_code + "'";
                DataTable dtData1 = ConnectionCommand.fGetDataTable();
                if (dtData1 != null && dtData1.Rows.Count > 0)
                {
                    if (dtData1.Rows[0][0] != null)
                    {
                        siitemlist.Rows[siitemlistrowindex].Cells[0].Value = dtData1.Rows[0][0].ToString();
                        siitemlist.Rows[siitemlistrowindex].Cells[1].Value = dtData1.Rows[0][1].ToString();
                        siitemlist.Rows[siitemlistrowindex].Cells[2].Value = dtData1.Rows[0][2].ToString();
                        mcase = 1;
                        mbox = Convert.ToDouble(dtData1.Rows[0][3].ToString());
                        mqty = Convert.ToDouble(dtData1.Rows[0][4].ToString());
                        mprice = Convert.ToDouble(dtData1.Rows[0][5].ToString());
                        siitemlist.Rows[siitemlistrowindex].Cells[3].Value = mcase;
                        siitemlist.Rows[siitemlistrowindex].Cells[4].Value = mbox * mcase;
                        siitemlist.Rows[siitemlistrowindex].Cells[5].Value = mbox * mqty;
                        siitemlist.Rows[siitemlistrowindex].Cells[6].Value = mprice;
                        mamount = mcase * mbox * mqty * mprice;
                        siitemlist.Rows[siitemlistrowindex].Cells[7].Value = Convert.ToString(mamount);
                        siitemlist.Rows[siitemlistrowindex].Cells[8].Value = dtData1.Rows[0][6].ToString();
                        siitemlist.Rows[siitemlistrowindex].Cells[9].Value = dtData1.Rows[0][8].ToString();
                        siitemlist.Rows[siitemlistrowindex].Cells[10].Value = dtData1.Rows[0][9].ToString();
                        si_item_help.Visible = false;
                        calculateSaleItemTotal();
                    }
                }
            }
            else
                show_images();
        }

        private void sitaxcode_KeyDown(object sender, KeyEventArgs e)
        {
            ConnectionWithAccess.data_entry_working = "Sale Tax";
            if (e.KeyCode == Keys.Down)
            {
                sitaxlist.Focus();
            }
        }

        private void sitaxlist_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                rowIndex = sitaxlist.CurrentCell.RowIndex;
                mtx_code = Convert.ToString(sitaxlist.Rows[rowIndex].Cells[0].Value);
                sitaxrate.Text = Convert.ToString(sitaxlist.Rows[rowIndex].Cells[1].Value);
                sitaxdesc.Text = Convert.ToString(sitaxlist.Rows[rowIndex].Cells[2].Value);
                sitaxcode.Text = mtx_code;
                sitaxlist.Visible = false;
            }
        }

        private void report_analysis_check_box_selected_changed()
        {
            cbRepSubType.Items.Clear();
            cbRepFormat.Items.Clear();
            cmb_analysis_account_item_name.Visible = false;
            if (cbRepType.Text == "Sale" || cbRepType.Text == "Purchase")
            {
                cbrep_ana_d_c.Visible = true;
                label253.Visible = true;
                cbRepSubType.Items.Add("Invoice");
                cbRepSubType.Items.Add("Replacement");
                cbRepSubType.Items.Add("Brief with Items");
                cbRepSubType.Items.Add("Quotation");
                cbRepSubType.Items.Add("Balance");
                cbRepSubType.Items.Add("Proforma Invoice");
                cbRepFormat.Items.Add("Document Wise");
                cbRepFormat.Items.Add("Party Wise");
                cbRepFormat.Items.Add("Item Wise");
                cbRepFormat.Items.Add("Tax Sheet");
                cbRepSubType.SelectedIndex = 0;
                cbRepFormat.SelectedIndex = 0;
                move_cursor_to_button_position("btn_analysis_generate");
            }
            else if (cbRepType.Text == "Bank")
            {
                cbRepSubType.Items.Add("All");
                cbRepSubType.Items.Add("Receipt");
                cbRepSubType.Items.Add("Payment");
                cbRepSubType.Items.Add("Deposit");
                cbRepSubType.Items.Add("Withdrawal");
                cbRepSubType.Items.Add("Mon.Statement");
                cbRepFormat.Items.Add("Passed");
                cbRepFormat.Items.Add("Failed");
                cbRepFormat.Items.Add("Pending");
                cbRepSubType.SelectedIndex = 0;
                cbRepFormat.SelectedIndex = 0;
                cbrep_ana_d_c.Focus();
            }
            else if (cbRepType.Text == "Cash")
            {
                cbrep_ana_d_c.Visible = false;
                label253.Visible = false;
                //cbRepSubType.Items.Clear();
                cbRepSubType.Items.Add("All");
                cbRepSubType.Items.Add("Receipt");
                cbRepSubType.Items.Add("Payment");
                cbRepFormat.Visible = false;
                cbRepSubType.SelectedIndex = 0;
                move_cursor_to_button_position("btn_analysis_generate");
            }
            else if (cbRepType.Text == "Journal")
            {
                cbrep_ana_d_c.Visible = false;
                label253.Visible = false;
                cbRepSubType.Items.Add("Entry");
                cbRepFormat.Visible = false;
                cbRepSubType.SelectedIndex = 0;
                move_cursor_to_button_position("btn_analysis_generate");
            }
            else if (cbRepType.Text == "Opening Balances" || cbRepType.Text == "Closing Balances")
            {
                cbrep_ana_d_c.Visible = false;
                label253.Visible = false;
                cbRepSubType.Items.Add("Customer's");
                cbRepSubType.Items.Add("Supplier's");
                cbRepFormat.Visible = false;
                cbRepSubType.SelectedIndex = 0;
                move_cursor_to_button_position("btn_analysis_generate");
            }
            else if (cbRepType.Text == "Stock")
            {
                cbrep_ana_d_c.Visible = false;
                label253.Visible = false;
                cbRepSubType.Items.Add("Current Stock");
                cbRepSubType.Items.Add("Short Stock");
                cbRepSubType.Visible = true;
                //cbRepFormat.Visible = false;
                cbRepSubType.SelectedIndex = 0;
                move_cursor_to_button_position("btn_analysis_generate");
            }
            else if (cbRepType.Text == "Tax")
            {
                cbrep_ana_d_c.Visible = false;
                label253.Visible = false;
                cbRepSubType.Items.Add("General Tax");
                cbRepSubType.Items.Add("LBT Tax");
                cbRepFormat.Visible = false;
                cbRepSubType.SelectedIndex = 0;
                move_cursor_to_button_position("btn_analysis_generate");
            }
            else if (cbRepType.Text == "Item")
            {
                cbrep_ana_d_c.Visible = false;
                label253.Visible = false;
                cbRepSubType.Items.Add("Opening Stock");
                cbRepSubType.Items.Add("Type wise");
                cbRepSubType.Items.Add("Price wise");
                cbRepFormat.Visible = false;
                cbRepSubType.SelectedIndex = 0;
            }
            else if (cbRepType.Text == "Job Work")
            {
                cbrep_ana_d_c.Visible = false;
                label253.Visible = false;
                cbRepSubType.Items.Add("Batch Dispatch Process");
                cbRepSubType.Items.Add("Item Ledger");
                cbRepSubType.Items.Add("Own Material Sent");
                cbRepSubType.Items.Add("Direct Material Sent");
                cbRepSubType.Items.Add("Material Received");
                cbRepSubType.Items.Add("Closing Stock");
                cbRepFormat.Visible = false;
                cmb_analysis_account_item_name.Visible = true;
                cmb_analysis_account_item_name.Location = new System.Drawing.Point(440, 23);
                cbRepSubType.SelectedIndex = 0;
            }
            //cbRepSubType.SelectedIndex = 0;
        }

        private void cbRepFormat_SelecedIndexChanged(object sender, EventArgs e)
        {
            PleaseWait objPleaseWait = new PleaseWait("Please wait collecting Data");
            objPleaseWait.Show();
            Application.DoEvents();
            report_keys_enable();
            report_analysis_check_box_selected_changed();
            objPleaseWait.Close();
        }

        private void report_keys_enable()
        {
            pdf_viewer1.Visible = false;
            gdvreport.Visible = false;
            dgv_tax_report.Visible = false;
        }

        private void KeyEvent(object sender, KeyEventArgs e) //Keyup Event 
        {
            //if (e.KeyCode == Keys.F9)
            //{
            //    MessageBox.Show("Function F9");
            //}
            //if (e.KeyCode == Keys.F6)
            //{
            //    MessageBox.Show("Function F6");
            //}
            //else
            //    MessageBox.Show("No Function");

        }

        bool isEscKeyPressed = false;

        private void periodgridview_CellClick(object sender, DataGridViewCellEventArgs e)
        {
            rowIndex = periodgridview.CurrentCell.RowIndex;
            ConnectionWithAccess.mprd = Convert.ToString(periodgridview.Rows[rowIndex].Cells[0].Value);
            ConnectionWithAccess.msdate = Convert.ToString(periodgridview.Rows[rowIndex].Cells[1].Value);
            ConnectionWithAccess.medate = Convert.ToString(periodgridview.Rows[rowIndex].Cells[2].Value);
            if (DateTime.Today > Convert.ToDateTime(ConnectionWithAccess.msdate))
            {
                if (DateTime.Today <= Convert.ToDateTime(ConnectionWithAccess.medate))
                {
                    ConnectionWithAccess.medate = (DateTime.Today.ToShortDateString()).ToString();
                }
            }
            try
            {
                ConnectionWithAccess.moprd = ConnectionWithAccess.get_old_prd_name(ConnectionWithAccess.mprd);
                ConnectionWithAccess.mnew_prd = ConnectionWithAccess.get_next_prd_name(ConnectionWithAccess.mprd);
                //RepFrom.Value = Convert.ToDateTime(ConnectionWithAccess.msdate);
                //RepTo.Value = Convert.ToDateTime(ConnectionWithAccess.medate);
            }
            catch (Exception ex)
            { }
            periodgridview.Visible = false;
            load_all_period_values();
            //  ToolStripStatusPeriod.Text = "<" + ConnectionWithAccess.data_drive.Substring(0, 1) + "> " + ConnectionWithAccess.mprd.ToString() + "  " + ConnectionWithAccess.msdate + "  To  " + ConnectionWithAccess.medate.ToString();
        }

        # region datagridview
        private void sort_datewise_datagridview(DataGridView mDataGridView, string mgridviewname, int sort_column, int date_column)
        {
            for (int i = 0; i < mDataGridView.Rows.Count; i++)
            {
                if (mDataGridView.Rows[i].Cells[date_column].Value != null && mDataGridView.Rows[i].Cells[date_column].Value.ToString() != "")
                {
                    temp_word2 = mDataGridView.Rows[i].Cells[date_column].Value.ToString();
                    //temp_word = "07/08/2012";
                    //temp_word = mDataGridView.Rows[i].Cells[date_column].Value.ToString();
                    temp_word = temp_word2.Substring(temp_word2.Length - 4, 4);
                    temp_word += temp_word2.Substring(temp_word2.IndexOf("/") + 1, temp_word2.IndexOf("/"));
                    if (temp_word.Substring(temp_word2.IndexOf("/") + 1, temp_word2.IndexOf("/")).Length == 1)
                        temp_word += "0";
                    temp_word += temp_word2.Substring(0, temp_word2.IndexOf("/"));
                    int slash_posi = mDataGridView.Rows[i].Cells[date_column].Value.ToString().IndexOf("/");
                    if (mgridviewname == "Bankrep")
                    {
                        temp_word = temp_word.Trim();
                        temp_word = temp_word + mDataGridView.Rows[i].Cells[10].Value.ToString();
                    }
                    mDataGridView.Rows[i].Cells[sort_column].Value = temp_word.Trim();
                }
            }
            mDataGridView.Columns[sort_column].SortMode = DataGridViewColumnSortMode.Programmatic;
            mDataGridView.Sort(mDataGridView.Columns[sort_column], ListSortDirection.Ascending);
            temporary_datagridview_data = new string[mDataGridView.Rows.Count];
            column_counter = mDataGridView.ColumnCount;
            for (row_pointer = 0; row_pointer < mDataGridView.Rows.Count; row_pointer++)
            {
                temp_word = null;
                for (column_pointer = 0; column_pointer < column_counter; column_pointer++)
                {
                    if (mDataGridView.Rows[row_pointer].Cells[column_pointer].Value != null)
                    {
                        temp_word = temp_word + mDataGridView.Rows[row_pointer].Cells[column_pointer].Value.ToString().Trim() + ",";
                    }
                    else
                        temp_word = temp_word + ",";
                }
                if (temp_word.Length > column_counter)
                    temporary_datagridview_data[row_pointer] = temp_word.Trim();
            }
            int new_row;
            new_row = 0;
            mDataGridView.Rows.Clear();
            mDataGridView.Columns[sort_column].SortMode = DataGridViewColumnSortMode.NotSortable;
            for (row_pointer = 0; row_pointer < temporary_datagridview_data.Count(); row_pointer++)
            {
                if (temporary_datagridview_data[row_pointer] != null)
                {
                    mDataGridView.Rows.Add();
                    word = temporary_datagridview_data[row_pointer];
                    var cellArray = word.Split(new[] { ',' });
                    for (column_pointer = 0; column_pointer < column_counter; column_pointer++)
                    {
                        mDataGridView.Rows[new_row].Cells[column_pointer].Value = cellArray[column_pointer];
                    }
                    new_row++;
                }
            }
            mDataGridView.Columns[sort_column].Visible = false;
        }

        private void sort_numberwise_datagridview(DataGridView mDataGridView, int sort_column, int number_column)
        {
            temp_int = 0;
            for (int i = 0; i < mDataGridView.Rows.Count; i++)
            {
                if (mDataGridView.Rows[i].Cells[number_column].Value != null)
                {
                    if (mDataGridView.Rows[i].Cells[number_column].Value.ToString() != "")
                    {
                        if (Convert.ToInt32(mDataGridView.Rows[i].Cells[number_column].Value.ToString()) > temp_int)
                            temp_int = Convert.ToInt32(mDataGridView.Rows[i].Cells[number_column].Value.ToString());
                    }
                }
            }
            temp_word = Convert.ToString(temp_int);
            for (int i = 0; i < mDataGridView.Rows.Count; i++)
            {
                if (mDataGridView.Rows[i].Cells[number_column].Value != null)
                {
                    temp_int = mDataGridView.Rows[i].Cells[number_column].Value.ToString().Length;
                    temp_word2 = null;
                    if (temp_int < temp_word.Length)
                    {
                        for (int j = 0; j < temp_word.Length - temp_int; j++)
                        {
                            temp_word2 = temp_word2 + "0";
                        }
                        //mDataGridView.Rows[i].Cells[sort_column].Value = temp_word2 + mDataGridView.Rows[i].Cells[date_column].Value.ToString();
                    }
                    mDataGridView.Rows[i].Cells[sort_column].Value = temp_word2 + mDataGridView.Rows[i].Cells[number_column].Value.ToString();
                }
            }
            mDataGridView.Columns[sort_column].SortMode = DataGridViewColumnSortMode.Programmatic;
            mDataGridView.Sort(mDataGridView.Columns[sort_column], ListSortDirection.Ascending);
            temporary_datagridview_data = new string[mDataGridView.Rows.Count];
            column_counter = mDataGridView.ColumnCount;
            for (row_pointer = 0; row_pointer < mDataGridView.Rows.Count; row_pointer++)
            {
                temp_word = null;
                for (column_pointer = 0; column_pointer < column_counter; column_pointer++)
                {
                    if (mDataGridView.Rows[row_pointer].Cells[column_pointer].Value != null)
                        temp_word = temp_word + mDataGridView.Rows[row_pointer].Cells[column_pointer].Value.ToString().Trim() + ",";
                    else
                        temp_word = temp_word + ",";
                }
                if (temp_word.Length > column_counter)
                    temporary_datagridview_data[row_pointer] = temp_word.Trim();
            }
            int new_row;
            new_row = 0;
            mDataGridView.Rows.Clear();
            mDataGridView.Columns[sort_column].SortMode = DataGridViewColumnSortMode.NotSortable;
            for (row_pointer = 0; row_pointer < temporary_datagridview_data.Count(); row_pointer++)
            {
                if (temporary_datagridview_data[row_pointer] != null)
                {
                    mDataGridView.Rows.Add();
                    word = temporary_datagridview_data[row_pointer];
                    var cellArray = word.Split(new[] { ',' });
                    for (column_pointer = 0; column_pointer < column_counter; column_pointer++)
                    {
                        mDataGridView.Rows[new_row].Cells[column_pointer].Value = cellArray[column_pointer];
                    }
                    new_row++;
                }
            }
            mDataGridView.Columns[sort_column].Visible = false;
        }
        #endregion

        private void add_tax_list_to_sale_purchase_gridview()
        {
            dgv_tax_report.Visible = true;
            dgv_tax_report.Rows.Clear();
            if (cbRepType.Text == "Sale")
            {
                //f30.d_c = '" + cbrep_ana_d_c.SelectedValue.ToString()
                ConnectionWithAccess.query = "select F6.TaX_Rate, f6.[Desc], sum(f21.bamt) as 'BAmount', sum(f21.tamt) as 'TAmount',  sum(f21.gamt) as 'GAmount' from " + ConnectionWithAccess.tablename[21] + " f21 inner join " + ConnectionWithAccess.tablename[6] + " f6 on f21.tx_code = f6.tx_code and f21.d_c = f6.d_c where f21.prd = '" + ConnectionWithAccess.mprd + "' and f21.d_c = " + cbrep_ana_d_c.SelectedValue.ToString() + " and f21.d_d >= @From and f21.d_d <= @To group by f6.tax_rate, f6.[desc]";
            }
            else
                ConnectionWithAccess.query = "select F6.TaX_Rate, f6.[Desc], sum(f22.bamt) as 'BAmount', sum(f22.tamt) as 'TAmount',  sum(f22.gamt) as 'GAmount' from " + ConnectionWithAccess.tablename[22] + " f22 inner join " + ConnectionWithAccess.tablename[6] + " f6 on f22.tx_code = f6.tx_code and f22.d_c = f6.d_c     where f22.prd = '" + ConnectionWithAccess.mprd + "' and f22.d_d >= @From and f22.d_d <= @To group by f6.tax_rate, f6.[desc]";

            parameters_for_date_range(RepFrom.Text, RepTo.Text);

            ConnectionCommand.accountHelp_datatable_Seperate(dgv_tax_report, "dgv_tax_report");
            dgv_tax_report.Columns[0].HeaderText = "Tax Code";
            dgv_tax_report.Columns[1].HeaderText = "Desc";
            dgv_tax_report.Columns[2].HeaderText = "Basic Amount";
            dgv_tax_report.Columns[3].HeaderText = "Tax Amount";
            dgv_tax_report.Columns[4].HeaderText = "Gross Amount";
        }

        # region fadd_totals

        public void delete_old_date_record_from_bank_cash(DataGridView mDataGridView, int column_pointer, string before_date)
        {
            temp_double = 0;
            temp_int = 0;
            for (row_pointer = 0; row_pointer < mDataGridView.RowCount; row_pointer++)
            {
                if (mDataGridView.Rows[row_pointer].Cells[column_pointer].Value != null)
                {
                    temp_word = mDataGridView.Rows[row_pointer].Cells[column_pointer].Value.ToString().Trim();
                    temp_word = temp_word.Substring(0, temp_word.IndexOf(" "));
                    if (temp_word != null && temp_word != "")
                    {
                        //temp_word = temp_word.Substring(0, temp_word.IndexOf(" "));
                        //temp_word = temp_word.Substring(3, 2) + "/" + temp_word.Substring(0, 2) + "/" + temp_word.Substring(6, 4);
                        if (Convert.ToDateTime(temp_word) < Convert.ToDateTime(before_date))
                        {
                            //mDataGridView.Rows.RemoveAt(mDataGridView.SelectedRows[0].Index);
                            if (mDataGridView.Rows[row_pointer].Cells[4].Value != null && mDataGridView.Rows[row_pointer].Cells[4].Value.ToString() != "")
                            {
                                temp_double = temp_double + Convert.ToDouble(mDataGridView.Rows[row_pointer].Cells[4].Value);
                                mDataGridView.Rows[row_pointer].Cells[1].Value = 0;
                                mDataGridView.Rows[row_pointer].Cells[4].Value = 0;
                                mDataGridView.Rows[row_pointer].Cells[5].Value = 0;
                                mDataGridView.Rows[row_pointer].Cells[6].Value = 0;
                            }
                            if (mDataGridView.Rows[row_pointer].Cells[5].Value != null && mDataGridView.Rows[row_pointer].Cells[5].Value.ToString() != "")
                            {
                                temp_double = temp_double - Convert.ToDouble(mDataGridView.Rows[row_pointer].Cells[5].Value);
                                mDataGridView.Rows[row_pointer].Cells[1].Value = 0;
                                mDataGridView.Rows[row_pointer].Cells[4].Value = 0;
                                mDataGridView.Rows[row_pointer].Cells[5].Value = 0;
                                mDataGridView.Rows[row_pointer].Cells[6].Value = 0;
                            }
                            if (mDataGridView.Rows[row_pointer].Cells[6].Value != null && mDataGridView.Rows[row_pointer].Cells[6].Value.ToString() != "")
                            {
                                mDataGridView.Rows[row_pointer].Cells[1].Value = 0;
                                mDataGridView.Rows[row_pointer].Cells[4].Value = 0;
                                mDataGridView.Rows[row_pointer].Cells[5].Value = 0;
                                mDataGridView.Rows[row_pointer].Cells[6].Value = 0;
                            }
                            temp_int = row_pointer;
                        }
                    }
                }
            }
            //if (temp_int > 0)
            //    temp_int = temp_int - 1;
            mDataGridView.Rows[temp_int - 1].Cells[1].Value = 0;
            mDataGridView.Rows[temp_int - 1].Cells[column_pointer].Value = before_date;
            mDataGridView.Rows[temp_int - 1].Cells[2].Value = "Opening Balance";
            //            mDataGridView.Rows[temp_int].Cells[5].Value = "";
            mDataGridView.Rows[temp_int - 1].Cells[6].Value = Convert.ToString(Convert.ToInt32(temp_double));
            for (row_pointer = 0; row_pointer < mDataGridView.RowCount; row_pointer++)
            {
                if (mDataGridView.Rows[row_pointer].Cells[6].Value != null && mDataGridView.Rows[row_pointer].Cells[6].Value.ToString() != "0")
                {
                    temp_word = mDataGridView.Rows[row_pointer].Cells[4].Value.ToString();
                    temp_word1 = mDataGridView.Rows[row_pointer].Cells[5].Value.ToString();
                    temp_word2 = mDataGridView.Rows[row_pointer].Cells[6].Value.ToString();
                    if (temp_word == "0" && temp_word1 == "0" && temp_word2 == "0")
                    {
                        //mDataGridView.Rows.RemoveAt(mDataGridView.Rows[row_pointer].Index);
                        mDataGridView.Rows.RemoveAt(row_pointer);
                    }
                }
            }
            mDataGridView.Refresh();
        }

        private void fAdd_Bank_Report_Totals(string strSortColumnOrder)
        {
            if (gdvreport.DataSource != null && gdvreport.Rows.Count > 0)
            {
                if (Convert.ToDateTime(RepFrom.Text) > Convert.ToDateTime(ConnectionWithAccess.msdate))
                    delete_old_date_record_from_bank_cash(gdvreport, 0, RepFrom.Text);
                DataTable dtNewTable = ((DataTable)gdvreport.DataSource).Clone();
                dtNewTable = ((DataTable)gdvreport.DataSource);
                //DataTable selected = view.ToTable(false, "amt");
                if (dtNewTable != null)
                {
                    DataView view = new DataView(dtNewTable);
                    view.Sort = strSortColumnOrder;
                    DataTable dtNewTable1 = view.ToTable();
                    DataTable sortedTable = update_datatable_balances(dtNewTable1, 4, 5, 6);
                    string strTotalCol1 = getTotal_Datatable(sortedTable, 4);
                    string strTotalCol2 = getTotal_Datatable(sortedTable, 5);
                    if (!string.IsNullOrEmpty(strTotalCol1) && !string.IsNullOrEmpty(strTotalCol2))
                    {
                        DataRow drTotalRow = sortedTable.NewRow();
                        drTotalRow[0] = RepTo.Text;
                        drTotalRow[1] = "999999";
                        drTotalRow[4] = strTotalCol1;
                        drTotalRow[5] = strTotalCol2;
                        sortedTable.Rows.Add(drTotalRow);
                    }
                    gdvreport.DataSource = null;
                    //Remove rows with zero value
                    //sortedTable.DefaultView.RowFilter = "amt > 0 or pay_amt > 0 or balance_amt > 0";
                    sortedTable.DefaultView.RowFilter = "amt <> 0 or pay_amt <> 0 or balance_amt <> 0";
                    gdvreport.DataSource = sortedTable;// dtNewTable.DefaultView;

                    //DataTable dtNewTable = ((DataTable)LedDGV.DataSource).Clone();

                    //dtNewTable = ((DataTable)LedDGV.DataSource);

                    ////DataTable selected = view.ToTable(false, "amt");

                    //if (dtNewTable != null)
                    //{
                    //    //for (int i = dtNewTable.Rows.Count - 1; i >= 0; i--)
                    //    //{
                    //    //    DataRow dr = dtNewTable.Rows[i];
                    //    //    if (dr["debit"].ToString() == "" && dr["credit"].ToString() == "" && dr["balance"].ToString() == "")
                    //    //        dr.Delete();
                    //    //}
                    //    DataView view = new DataView(dtNewTable);
                    //    view.Sort = "[Date] asc";
                    //    DataTable dtNewTable1 = view.ToTable();

                    //    //DataTable dtNewTable1 = ((DataTable)LedDGV.DataSource).Clone();

                    //    DataTable sortedTable = update_datatable_balances(dtNewTable1, 6, 7, 8);

                    //    string strTotalCol1 = getTotal_Datatable(sortedTable, 6);
                    //    string strTotalCol2 = getTotal_Datatable(sortedTable, 7);

                    //    if (!string.IsNullOrEmpty(strTotalCol1) && !string.IsNullOrEmpty(strTotalCol2))
                    //    {
                    //        DataRow drTotalRow = sortedTable.NewRow();
                    //        drTotalRow[6] = strTotalCol1;
                    //        drTotalRow[7] = strTotalCol2;
                    //        sortedTable.Rows.Add(drTotalRow);
                    //    }

                    //    LedDGV.DataSource = null;
                    //    LedDGV.DataSource = sortedTable;// dtNewTable.DefaultView;
                    //}
                    //ConnectionCommand.hide_columns_of_datagridview(LedDGV, "0,1,2");
                    //LedDGV.FirstDisplayedScrollingRowIndex = LedDGV.Rows.Count - 2;
                    //excel_filename = "Ledger of_" + tb_ledger_account_name.Text.Trim() + "_" + rla_n.Text + "_" + rls_a.Text + "_as on_" + ConnectionWithAccess.mprd;
                    //ledger_filename = excel_filename;
                    //ConnectionWithAccess.export(LedDGV, excel_filename);
                    //generate_ledger_report();
                }
            }
        }

        private void fAdd_cash_Report_Totals(string strSortColumnOrder)
        {
            if (gdvreport.DataSource != null && gdvreport.Rows.Count > 0)
            {
                if (Convert.ToDateTime(RepFrom.Text) > Convert.ToDateTime(ConnectionWithAccess.msdate))
                    delete_old_date_record_from_bank_cash(gdvreport, 0, RepFrom.Text);
                DataTable dtNewTable = ((DataTable)gdvreport.DataSource).Clone();
                dtNewTable = ((DataTable)gdvreport.DataSource);
                //DataTable selected = view.ToTable(false, "amt");
                if (dtNewTable != null)
                {
                    DataView view = new DataView(dtNewTable);
                    view.Sort = strSortColumnOrder;
                    DataTable dtNewTable1 = view.ToTable();
                    DataTable sortedTable = update_datatable_balances(dtNewTable1, 4, 5, 6);
                    string strTotalCol1 = getTotal_Datatable(sortedTable, 4);
                    string strTotalCol2 = getTotal_Datatable(sortedTable, 5);
                    if (!string.IsNullOrEmpty(strTotalCol1) && !string.IsNullOrEmpty(strTotalCol2))
                    {
                        DataRow drTotalRow = sortedTable.NewRow();
                        drTotalRow[4] = strTotalCol1;
                        drTotalRow[5] = strTotalCol2;
                        sortedTable.Rows.Add(drTotalRow);
                    }
                    gdvreport.DataSource = null;
                    gdvreport.DataSource = sortedTable;// dtNewTable.DefaultView;
                }
            }
        }

        private void fAdd_Sale_Report_Totals(string strSortColumnOrder)
        {
            if (gdvreport.DataSource != null && gdvreport.Rows.Count > 0)
            {
                DataTable dtReport = (DataTable)gdvreport.DataSource;
                if (dtReport != null && dtReport.Rows.Count > 0)
                {

                    DataColumn dtCol = new DataColumn("SortOrder");
                    dtReport.Columns.Add(dtCol);

                    DataRow drTotalRow = dtReport.NewRow();

                    string strPaymentTotal = dtReport.Compute("Sum(gamt)", "").ToString();
                    drTotalRow[0] = dtReport.Rows[dtReport.Rows.Count - 1][0].ToString();
                    drTotalRow[1] = "999999";
                    drTotalRow[4] = "Total";
                    drTotalRow[5] = strPaymentTotal;
                    drTotalRow[8] = "1";

                    dtReport.Rows.Add(drTotalRow);

                    dtReport.DefaultView.Sort = "SortOrder ASC, " + strSortColumnOrder;

                    gdvreport.DataSource = null;
                    gdvreport.DataSource = dtReport;
                    gdvreport.Columns["SortOrder"].Visible = false;
                }
            }
        }

        private void fAdd_trial_balance_Report_Totals()
        {
            if (BalShDGV.DataSource != null && BalShDGV.Rows.Count > 0)
            {
                DataTable dtReport = (DataTable)BalShDGV.DataSource;
                if (dtReport != null && dtReport.Rows.Count > 0)
                {

                    DataColumn dtCol = new DataColumn("SortOrder");
                    dtReport.Columns.Add(dtCol);

                    DataRow drTotalRow = dtReport.NewRow();

                    string strDebitTotal = dtReport.Compute("Sum(amt_debit)", "").ToString();
                    string strCreditTotal = dtReport.Compute("Sum(amt_credit)", "").ToString();
                    strDebitTotal = Math.Round(Convert.ToDouble(strDebitTotal), 2).ToString();
                    strCreditTotal = Math.Round(Convert.ToDouble(strCreditTotal), 2).ToString();
                    if (Convert.ToDouble(strDebitTotal) > Convert.ToDouble(strCreditTotal))
                    {
                        drTotalRow[2] = "Difference";
                        drTotalRow[4] = Math.Round(Convert.ToDouble(strDebitTotal) - Convert.ToDouble(strCreditTotal), 2);
                        dtReport.Rows.Add(drTotalRow);
                    }
                    else if (Convert.ToDouble(strDebitTotal) < Convert.ToDouble(strCreditTotal))
                    {
                        drTotalRow[2] = "Difference";
                        drTotalRow[3] = Math.Round(Convert.ToDouble(strCreditTotal) - Convert.ToDouble(strDebitTotal), 2);
                        dtReport.Rows.Add(drTotalRow);
                    }
                    drTotalRow = dtReport.NewRow();
                    strDebitTotal = dtReport.Compute("Sum(amt_debit)", "").ToString();
                    strCreditTotal = dtReport.Compute("Sum(amt_credit)", "").ToString();
                    strDebitTotal = Math.Round(Convert.ToDouble(strDebitTotal), 2).ToString();
                    strCreditTotal = Math.Round(Convert.ToDouble(strCreditTotal), 2).ToString();
                    drTotalRow[2] = "Total";
                    drTotalRow[3] = strDebitTotal;
                    drTotalRow[4] = strCreditTotal;

                    drTotalRow["SortOrder"] = "0";

                    dtReport.Rows.Add(drTotalRow);
                    dtReport.DefaultView.Sort = "SortOrder ASC ";

                    BalShDGV.DataSource = null;
                    BalShDGV.DataSource = dtReport;
                    BalShDGV.Columns["SortOrder"].Visible = false;
                }
            }
        }

        private void fAdd_Trading_Report_Totals()
        {
            if (BalShDGV.DataSource != null && BalShDGV.Rows.Count > 0)
            {
                DataTable dtReport = (DataTable)BalShDGV.DataSource;
                if (dtReport != null && dtReport.Rows.Count > 0)
                {

                    DataColumn dtCol = new DataColumn("SortOrder");
                    dtReport.Columns.Add(dtCol);

                    DataRow drTotalRow = dtReport.NewRow();

                    string strDebitTotal = dtReport.Compute("Sum(amt_debit)", "").ToString();
                    string strCreditTotal = dtReport.Compute("Sum(amt_credit)", "").ToString();

                    drTotalRow[3] = "Total";
                    drTotalRow[5] = strDebitTotal;
                    drTotalRow[6] = "Total";
                    drTotalRow[8] = strCreditTotal;
                    drTotalRow["SortOrder"] = "1";

                    dtReport.Rows.Add(drTotalRow);
                    dtReport.DefaultView.Sort = "SortOrder ASC ";

                    BalShDGV.DataSource = null;
                    BalShDGV.DataSource = dtReport;
                    BalShDGV.Columns["SortOrder"].Visible = false;
                }
            }
        }

        private void fAdd_ProfitLoss_Report_Totals()
        {
            if (BalShDGV.DataSource != null && BalShDGV.Rows.Count > 0)
            {
                DataTable dtReport = (DataTable)BalShDGV.DataSource;
                if (dtReport != null && dtReport.Rows.Count > 0)
                {

                    DataColumn dtCol = new DataColumn("SortOrder");
                    dtReport.Columns.Add(dtCol);

                    DataRow drTotalRow = dtReport.NewRow();

                    string strDebitTotal = dtReport.Compute("Sum(amt_debit)", "").ToString();
                    string strCreditTotal = dtReport.Compute("Sum(amt_credit)", "").ToString();

                    drTotalRow[3] = "Total";
                    drTotalRow[5] = strDebitTotal;
                    drTotalRow[6] = "Total";
                    drTotalRow[8] = strCreditTotal;
                    drTotalRow["SortOrder"] = "1";

                    dtReport.Rows.Add(drTotalRow);
                    dtReport.DefaultView.Sort = "SortOrder ASC ";

                    BalShDGV.DataSource = null;
                    BalShDGV.DataSource = dtReport;
                    BalShDGV.Columns["SortOrder"].Visible = false;
                }
            }
        }

        private void fAdd_CapitalAccount_Report_Totals()
        {
            if (BalShDGV.DataSource != null && BalShDGV.Rows.Count > 0)
            {
                DataTable dtReport = (DataTable)BalShDGV.DataSource;
                if (dtReport != null && dtReport.Rows.Count > 0)
                {

                    DataColumn dtCol = new DataColumn("SortOrder");
                    dtReport.Columns.Add(dtCol);

                    DataRow drTotalRow = dtReport.NewRow();

                    string strDebitTotal = dtReport.Compute("Sum(amt_debit)", "").ToString();
                    string strCreditTotal = dtReport.Compute("Sum(amt_credit)", "").ToString();

                    drTotalRow[3] = "Total";
                    drTotalRow[5] = strDebitTotal;
                    drTotalRow[6] = "Total";
                    drTotalRow[8] = strCreditTotal;
                    drTotalRow["SortOrder"] = "1";

                    dtReport.Rows.Add(drTotalRow);
                    dtReport.DefaultView.Sort = "SortOrder ASC ";

                    BalShDGV.DataSource = null;
                    BalShDGV.DataSource = dtReport;
                    BalShDGV.Columns["SortOrder"].Visible = false;
                }
            }
        }

        private void fAdd_Balance_Report_Totals()
        {
            if (BalShDGV.DataSource != null && BalShDGV.Rows.Count > 0)
            {
                DataTable dtReport = (DataTable)BalShDGV.DataSource;
                if (dtReport != null && dtReport.Rows.Count > 0)
                {

                    DataColumn dtCol = new DataColumn("SortOrder");
                    dtReport.Columns.Add(dtCol);

                    DataRow drTotalRow = dtReport.NewRow();

                    string strDebitTotal = dtReport.Compute("Sum(amt_debit)", "").ToString();
                    string strCreditTotal = dtReport.Compute("Sum(amt_credit)", "").ToString();

                    drTotalRow[3] = "Total";
                    drTotalRow[5] = strDebitTotal;
                    drTotalRow[6] = "Total";
                    drTotalRow[8] = strCreditTotal;
                    drTotalRow["SortOrder"] = "1";

                    dtReport.Rows.Add(drTotalRow);
                    dtReport.DefaultView.Sort = "SortOrder ASC ";

                    BalShDGV.DataSource = null;
                    BalShDGV.DataSource = dtReport;
                    BalShDGV.Columns["SortOrder"].Visible = false;
                }
            }
        }

        private void fAdd_total_row(DataGridView mDataGridView, string column_name, int column_number, string strSortColumnOrder)
        {
            if (mDataGridView.DataSource != null && mDataGridView.Rows.Count > 0)
            {
                int mtotal_columns;
                mtotal_columns = mDataGridView.Columns.Count;
                DataTable dtReport = (DataTable)mDataGridView.DataSource;
                if (dtReport != null && dtReport.Rows.Count > 0)
                {
                    DataColumn dtCol = new DataColumn("SortOrder");
                    dtReport.Columns.Add(dtCol);

                    DataRow drTotalRow = dtReport.NewRow();

                    string strPaymentTotal = dtReport.Compute("Sum(" + dtReport.Columns[column_number] + ")", "").ToString();
                    drTotalRow[column_number - 1] = "Total";
                    drTotalRow[column_number] = strPaymentTotal;
                    drTotalRow[mtotal_columns] = "1";

                    dtReport.Rows.Add(drTotalRow);

                    dtReport.DefaultView.Sort = "SortOrder ASC, " + strSortColumnOrder;

                    mDataGridView.DataSource = null;
                    mDataGridView.DataSource = dtReport;
                    mDataGridView.Columns["SortOrder"].Visible = false;
                }
            }
        }

        //private void fAdd_item_batch_Totals(string strSortColumnOrder)
        //{
        //    if (dtNewTable.DataSource != null && dtNewTable.Rows.Count > 0)
        //    {
        //        DataTable dtReport = (DataTable)dtNewTable.DataSource;
        //        if (dtReport != null && dtReport.Rows.Count > 0)
        //        {

        //            //DataColumn dtCol = new DataColumn("SortOrder");
        //            //dtReport.Columns.Add(dtCol);

        //            DataRow drTotalRow = dtReport.NewRow();
        //            string strPaymentTotal = dtReport.Compute("Sum(amount)", "").ToString();
        //            drTotalRow[0] = dtReport.Rows[dtReport.Rows.Count - 1][0].ToString();
        //            drTotalRow[1] = "999999";
        //            drTotalRow[4] = "Total";
        //            drTotalRow[6] = strPaymentTotal;
        //            dtReport.Rows.Add(drTotalRow);

        //            //dtReport.DefaultView.Sort = "SortOrder ASC, " + strSortColumnOrder;

        //            dtNewTable.DataSource = null;
        //            dtNewTable.DataSource = dtReport;
        //            //dtNewTable.Columns["SortOrder"].Visible = false;
        //        }
        //    }
        //}

        #endregion

        # region auto_boxes_pdf

        private void sale_purchase_report_list_mini_auto_boxes()
        {
            DataTable dtReport = (DataTable)gdvreport.DataSource;
            List<int> lColumn_number_for_data = new List<int>();
            lColumn_number_for_data.Add(0);
            lColumn_number_for_data.Add(1);
            lColumn_number_for_data.Add(2);
            lColumn_number_for_data.Add(3);
            lColumn_number_for_data.Add(4);
            lColumn_number_for_data.Add(5);

            float[] columnWidths = { 7, 6, 27, 12, 13, 9 };

            List<string> column_header_text = new List<string>();
            column_header_text.Add("Date");
            column_header_text.Add("Invoice");
            column_header_text.Add("Name");
            column_header_text.Add("City");
            column_header_text.Add("G.S.T. Number");
            column_header_text.Add("Amount");

            List<string> column_alignment = new List<string>();
            column_alignment.Add("CENTER");
            column_alignment.Add("LEFT");
            column_alignment.Add("LEFT");
            column_alignment.Add("LEFT");
            column_alignment.Add("LEFT");
            column_alignment.Add("RIGHT");

            bool isTotalRequired = true;
            int iTotal_Column_no = 5;
            string strreport_filetype = cbRepType.Text + " " + cbRepSubType.Text + " " + cbRepFormat.Text;
            string strHeader_text_message = " " + " From : " + RepFrom.Text + " to " + RepTo.Text;
            bool bAdd_date_time_in_output = true;
            List<int> cell_font_change_length = new List<int>();
            cell_font_change_length.Add(0);
            cell_font_change_length.Add(30);
            cell_font_change_length.Add(10);
            cell_font_change_length.Add(0);
            cell_font_change_length.Add(0);
            cell_font_change_length.Add(0);

            fGenerate_PDF_Report_From_DataTable(dtReport, lColumn_number_for_data, columnWidths, column_header_text, column_alignment,
                isTotalRequired, iTotal_Column_no, strreport_filetype, strHeader_text_message, bAdd_date_time_in_output, cell_font_change_length, true, 6);

        }

        private void bank_report_list_auto_boxes()
        {
            DataTable dtReport = null;

            DataTable dtTempTable = (DataTable)gdvreport.DataSource;
            dtReport = dtTempTable.Select("amt <> 0 OR pay_amt <> 0 OR balance_amt <> 0").CopyToDataTable();

            DataView view = new DataView(dtReport);
            view.Sort = "[PASS_DATE], d_n asc";
            dtReport = view.ToTable();


            List<int> lColumn_number_for_data = new List<int>();
            lColumn_number_for_data.Add(0);
            lColumn_number_for_data.Add(1);
            lColumn_number_for_data.Add(2);
            lColumn_number_for_data.Add(4);
            lColumn_number_for_data.Add(5);
            lColumn_number_for_data.Add(6);

            float[] columnWidths = { 9, 6, 28, 9, 9, 9 };

            List<string> column_header_text = new List<string>();
            column_header_text.Add("Date");
            column_header_text.Add("Doc.");
            column_header_text.Add("Name,City");
            column_header_text.Add("Debit");
            column_header_text.Add("Credit");
            column_header_text.Add("Balance");

            List<string> column_alignment = new List<string>();
            column_alignment.Add("LEFT");
            column_alignment.Add("RIGHT");
            column_alignment.Add("LEFT");
            column_alignment.Add("RIGHT");
            column_alignment.Add("RIGHT");
            column_alignment.Add("RIGHT");

            bool isTotalRequired = true;
            int iTotal_Column_no = 5;
            string strreport_filetype = cbRepType.Text + " " + cbRepSubType.Text + " " + cbRepFormat.Text + "_" + cbrep_ana_d_c.Text + "_" + ConnectionWithAccess.mprd;
            string strHeader_text_message = " " + " From : " + RepFrom.Text + " to " + RepTo.Text;
            bool bAdd_date_time_in_output = true;
            List<int> cell_font_change_length = new List<int>();
            cell_font_change_length.Add(0);
            cell_font_change_length.Add(30);
            cell_font_change_length.Add(10);
            cell_font_change_length.Add(0);
            cell_font_change_length.Add(0);
            cell_font_change_length.Add(0);

            fGenerate_PDF_Report_From_DataTable(dtReport, lColumn_number_for_data, columnWidths, column_header_text, column_alignment,
                isTotalRequired, iTotal_Column_no, strreport_filetype, strHeader_text_message, bAdd_date_time_in_output, cell_font_change_length);

        }

        private void cash_report_list_auto_boxes()
        {
            DataTable dtReport = (DataTable)gdvreport.DataSource;
            List<int> lColumn_number_for_data = new List<int>();
            lColumn_number_for_data.Add(0);
            lColumn_number_for_data.Add(1);
            lColumn_number_for_data.Add(2);
            lColumn_number_for_data.Add(4);
            lColumn_number_for_data.Add(5);
            lColumn_number_for_data.Add(6);

            float[] columnWidths = { 6, 6, 28, 10, 10, 10 };

            List<string> column_header_text = new List<string>();
            column_header_text.Add("Date");
            column_header_text.Add("Doc.");
            column_header_text.Add("Name,City");
            column_header_text.Add("Receipt");
            column_header_text.Add("Payment");
            column_header_text.Add("Balance");

            List<string> column_alignment = new List<string>();
            column_alignment.Add("LEFT");
            column_alignment.Add("RIGHT");
            column_alignment.Add("LEFT");
            column_alignment.Add("RIGHT");
            column_alignment.Add("RIGHT");
            column_alignment.Add("RIGHT");

            bool isTotalRequired = false;
            int iTotal_Column_no = 5;
            string strreport_filetype = cbRepType.Text + " " + cbRepSubType.Text + " " + cbRepFormat.Text;
            string strHeader_text_message = " " + " From : " + RepFrom.Text + " to " + RepTo.Text;
            bool bAdd_date_time_in_output = true;
            List<int> cell_font_change_length = new List<int>();
            cell_font_change_length.Add(0);
            cell_font_change_length.Add(30);
            cell_font_change_length.Add(10);
            cell_font_change_length.Add(0);
            cell_font_change_length.Add(0);
            cell_font_change_length.Add(0);

            fGenerate_PDF_Report_From_DataTable(dtReport, lColumn_number_for_data, columnWidths, column_header_text, column_alignment,
                isTotalRequired, iTotal_Column_no, strreport_filetype, strHeader_text_message, bAdd_date_time_in_output, cell_font_change_length);

        }

        private void jour_report_list_auto_boxes()
        {
            DataTable dtReport = (DataTable)gdvreport.DataSource;
            List<int> lColumn_number_for_data = new List<int>();
            lColumn_number_for_data.Add(0);
            lColumn_number_for_data.Add(1);
            lColumn_number_for_data.Add(2);
            lColumn_number_for_data.Add(3);
            lColumn_number_for_data.Add(4);
            lColumn_number_for_data.Add(5);
            lColumn_number_for_data.Add(6);

            float[] columnWidths = { 6, 6, 28, 10, 10, 28, 10 };

            List<string> column_header_text = new List<string>();
            column_header_text.Add("Date");
            column_header_text.Add("Doc.");
            column_header_text.Add("Name");
            column_header_text.Add("City");
            column_header_text.Add("Amount");
            column_header_text.Add("Name");
            column_header_text.Add("City");


            List<string> column_alignment = new List<string>();
            column_alignment.Add("LEFT");
            column_alignment.Add("LEFT");
            column_alignment.Add("LEFT");
            column_alignment.Add("LEFT");
            column_alignment.Add("RIGHT");
            column_alignment.Add("LEFT");
            column_alignment.Add("LEFT");

            bool isTotalRequired = false;
            int iTotal_Column_no = 5;
            string strreport_filetype = cbRepType.Text + " " + cbRepSubType.Text + " " + cbRepFormat.Text;
            string strHeader_text_message = " " + " From : " + RepFrom.Text + " to " + RepTo.Text;
            bool bAdd_date_time_in_output = true;
            List<int> cell_font_change_length = new List<int>();
            cell_font_change_length.Add(0);
            cell_font_change_length.Add(0);
            cell_font_change_length.Add(0);
            cell_font_change_length.Add(0);
            cell_font_change_length.Add(0);
            cell_font_change_length.Add(0);
            cell_font_change_length.Add(0);

            fGenerate_PDF_Report_From_DataTable(dtReport, lColumn_number_for_data, columnWidths, column_header_text, column_alignment,
                isTotalRequired, iTotal_Column_no, strreport_filetype, strHeader_text_message, bAdd_date_time_in_output, cell_font_change_length);

        }

        private void job_work_closing_stock_report_list_auto_boxes()
        {
            DataTable dtReport = null;

            //DataTable dtTempTable = (DataTable)gdvreport.DataSource;
            //dtReport = dtTempTable.Select("amt <> 0 OR pay_amt <> 0 OR balance_amt <> 0").CopyToDataTable();
            dtReport = (DataTable)gdvreport.DataSource;
            List<int> lColumn_number_for_data = new List<int>();
            lColumn_number_for_data.Add(0);
            lColumn_number_for_data.Add(1);
            lColumn_number_for_data.Add(2);
            lColumn_number_for_data.Add(3);
            lColumn_number_for_data.Add(4);

            float[] columnWidths = { 6, 28, 9, 9, 9 };

            List<string> column_header_text = new List<string>();
            column_header_text.Add("Item Code");
            column_header_text.Add("Title");
            column_header_text.Add("Sent");
            column_header_text.Add("Consumed");
            column_header_text.Add("Balance");

            List<string> column_alignment = new List<string>();
            column_alignment.Add("LEFT");
            column_alignment.Add("LEFT");
            column_alignment.Add("RIGHT");
            column_alignment.Add("RIGHT");
            column_alignment.Add("RIGHT");

            bool isTotalRequired = true;
            int iTotal_Column_no = 4;
            string strreport_filetype = cbRepType.Text + " " + cbRepSubType.Text;
            string strHeader_text_message = " " + " From : " + RepFrom.Text + " to " + RepTo.Text;
            bool bAdd_date_time_in_output = true;
            List<int> cell_font_change_length = new List<int>();
            cell_font_change_length.Add(0);
            cell_font_change_length.Add(30);
            cell_font_change_length.Add(0);
            cell_font_change_length.Add(0);
            cell_font_change_length.Add(0);

            fGenerate_PDF_Report_From_DataTable(dtReport, lColumn_number_for_data, columnWidths, column_header_text, column_alignment,
                isTotalRequired, iTotal_Column_no, strreport_filetype, strHeader_text_message, bAdd_date_time_in_output, cell_font_change_length);

        }

        private void generate_ledger_report_auto_boxes()
        {
            DataTable dtReport = (DataTable)LedDGV.DataSource;
            DataRow drNewRow = dtReport.NewRow();
            DataRow drNewRow1 = dtReport.NewRow();


            if (dtReport != null && dtReport.Rows.Count > 2)
            {
                decimal dCreditAmount = 0, dDebitAmount = 0;
                dCreditAmount = Convert.ToDecimal(dtReport.Rows[dtReport.Rows.Count - 1]["Credit"].ToString());//, out creditAmount);
                dDebitAmount = Convert.ToDecimal(dtReport.Rows[dtReport.Rows.Count - 1]["Debit"].ToString());//, out debitAmount);
                if (dDebitAmount < dCreditAmount)
                {
                    drNewRow[6] = Math.Round((dCreditAmount - dDebitAmount), 2);
                    //Math.Round((dCreditAmount - dDebitAmount), 2).ToString();
                    //debitamount = creditamount;
                }
                else
                {
                    drNewRow[6] = Math.Round((dDebitAmount - dCreditAmount), 2);
                    //creditamount = debitamount;
                }
                dtReport.Rows.InsertAt(drNewRow, dtReport.Rows.Count);

                decimal d1 = string.IsNullOrEmpty(dtReport.Rows[dtReport.Rows.Count - 1]["Credit"].ToString()) ? Convert.ToDecimal(0) : Convert.ToDecimal(dtReport.Rows[dtReport.Rows.Count - 1]["Credit"].ToString());
                decimal d2 = string.IsNullOrEmpty(dtReport.Rows[dtReport.Rows.Count - 2]["Credit"].ToString()) ? Convert.ToDecimal(0) : Convert.ToDecimal(dtReport.Rows[dtReport.Rows.Count - 2]["Credit"].ToString());
                decimal d3 = string.IsNullOrEmpty(dtReport.Rows[dtReport.Rows.Count - 1]["Debit"].ToString()) ? Convert.ToDecimal(0) : Convert.ToDecimal(dtReport.Rows[dtReport.Rows.Count - 1]["Debit"].ToString());
                decimal d4 = string.IsNullOrEmpty(dtReport.Rows[dtReport.Rows.Count - 2]["Debit"].ToString()) ? Convert.ToDecimal(0) : Convert.ToDecimal(dtReport.Rows[dtReport.Rows.Count - 2]["Debit"].ToString());
                dCreditAmount = d1 + d2;
                dDebitAmount = d3 + d4;
                drNewRow1[4] = "By Closing Balance";
                drNewRow1[6] = Math.Round(dDebitAmount, 2);
                drNewRow1[7] = Math.Round(dCreditAmount, 2);
                dtReport.Rows.InsertAt(drNewRow1, dtReport.Rows.Count);

            }
            List<int> lColumn_number_for_data = new List<int>();
            lColumn_number_for_data.Add(3);
            lColumn_number_for_data.Add(5);
            lColumn_number_for_data.Add(4);
            lColumn_number_for_data.Add(13);
            lColumn_number_for_data.Add(6);
            lColumn_number_for_data.Add(7);
            lColumn_number_for_data.Add(8);


            float[] columnWidths = { 7, 8, 8, 20, 14, 14, 14 };

            List<string> column_header_text = new List<string>();
            column_header_text.Add("Date");
            column_header_text.Add("Particulars");
            column_header_text.Add("Vch No.");
            column_header_text.Add("");
            column_header_text.Add("Debit");
            column_header_text.Add("Credit");
            column_header_text.Add("Balance");

            List<string> column_alignment = new List<string>();
            column_alignment.Add("CENTER");
            column_alignment.Add("CENTER");
            column_alignment.Add("LEFT");
            column_alignment.Add("LEFT");
            column_alignment.Add("RIGHT");
            column_alignment.Add("RIGHT");
            column_alignment.Add("RIGHT");

            bool bAdd_date_time_in_output = false;

            bool isTotalRequired = false;
            int iTotal_Column_no = 5;
            string strreport_filetype = "Ledger of_" + tb_ledger_account_name.Text.Trim() + "_" + rla_n.Text + "_" + rls_a.Text + "_as on_" + ConnectionWithAccess.mprd;
            ledger_filename = ConnectionWithAccess.report_file_location + (strreport_filetype).Replace(" ", "");
            if (chb_add_datetime_in_output.Checked)
            {
                bAdd_date_time_in_output = true;
                ledger_filename += "_" + DateTime.Now.Day + "_" + DateTime.Now.Month + "_" + DateTime.Now.Year + "_" + DateTime.Now.TimeOfDay.Hours + "_" + DateTime.Now.TimeOfDay.Minutes;
            }
            ledger_filename += ".pdf";
            ConnectionWithAccess.create_file_folder(ledger_filename);
            string strHeader_text_message = " " + " From : " + RepFrom.Text + " to " + RepTo.Text;
            List<int> cell_font_change_length = new List<int>();
            cell_font_change_length.Add(0);
            cell_font_change_length.Add(30);
            cell_font_change_length.Add(10);
            cell_font_change_length.Add(30);
            cell_font_change_length.Add(0);
            cell_font_change_length.Add(0);
            cell_font_change_length.Add(0);

            List<int> Total_Column_no_For_Border = new List<int>();
            Total_Column_no_For_Border.Add(6);
            Total_Column_no_For_Border.Add(7);

            int LastNoOfRowsHavingTopBottomBorder = 3;
            fGenerate_PDF_Report_From_DataTable(dtReport, lColumn_number_for_data, columnWidths, column_header_text, column_alignment,
                isTotalRequired, iTotal_Column_no, strreport_filetype, strHeader_text_message, bAdd_date_time_in_output, cell_font_change_length, false, 6, false,
                LastNoOfRowsHavingTopBottomBorder, Total_Column_no_For_Border);
            dtReport.Rows.Remove(drNewRow);
            dtReport.Rows.Remove(drNewRow1);
        }

        private void tr_pl_ca_blst_auto_boxes(string mprd)
        {
            StringBuilder strQuery = new StringBuilder();
            ConnectionWithAccess.query = query_contains_for_trading_account_union(mprd); ;// strQuery.ToString();
            DataTable dtNewTable = ConnectionCommand.fGetDataTable();
            if (dtNewTable != null)
            {
                move_records_upward_to_empty_places(dtNewTable);
                List<int> lColumn_number_for_data = new List<int>();
                lColumn_number_for_data.Add(3);
                lColumn_number_for_data.Add(4);
                lColumn_number_for_data.Add(5);
                lColumn_number_for_data.Add(6);
                lColumn_number_for_data.Add(7);
                lColumn_number_for_data.Add(8);

                float[] columnWidths = { 14, 10, 10, 14, 10, 10 };

                List<string> column_header_text = new List<string>();
                column_header_text.Add("Particulars");
                column_header_text.Add(" ");
                column_header_text.Add("Laibilities");
                column_header_text.Add("Particulars");
                column_header_text.Add(" ");
                column_header_text.Add("Assets");

                List<string> column_alignment = new List<string>();
                column_alignment.Add("LEFT");
                column_alignment.Add("RIGHT");
                column_alignment.Add("RIGHT");
                column_alignment.Add("LEFT");
                column_alignment.Add("RIGHT");
                column_alignment.Add("RIGHT");

                bool bAdd_date_time_in_output = false;

                bool isTotalRequired = false;
                int iTotal_Column_no = 3;

                string strreport_filetype = cbBalShAc.Text + "_" + mprd;
                trading_filename = ConnectionWithAccess.report_file_location + (strreport_filetype).Replace(" ", "");
                if (chb_add_datetime_in_output.Checked)
                {
                    bAdd_date_time_in_output = true;
                    trading_filename += "_" + DateTime.Now.Day + "_" + DateTime.Now.Month + "_" + DateTime.Now.Year + "_" + DateTime.Now.TimeOfDay.Hours + "_" + DateTime.Now.TimeOfDay.Minutes;
                }
                trading_filename += ".pdf";
                ConnectionWithAccess.create_file_folder(trading_filename);
                string strHeader_text_message = " " + " From : " + RepFrom.Text + " to " + RepTo.Text;
                List<int> cell_font_change_length = new List<int>();
                cell_font_change_length.Add(0);
                cell_font_change_length.Add(30);
                cell_font_change_length.Add(10);
                cell_font_change_length.Add(0);
                cell_font_change_length.Add(0);
                cell_font_change_length.Add(0);

                fGenerate_PDF_Report_From_DataTable(dtNewTable, lColumn_number_for_data, columnWidths, column_header_text, column_alignment,
                    isTotalRequired, iTotal_Column_no, strreport_filetype, strHeader_text_message, bAdd_date_time_in_output, cell_font_change_length, false, 6, false);
            }
        }

        private void generate_full_balance_sheet_report_auto_boxes(string mprd)
        {
            debitamount = 0;
            creditamount = 0;
            report_filetype = cbBalShAc.Text + "_" + mprd;
            trading_filename = ConnectionWithAccess.report_file_location + (report_filetype).Replace(" ", "");
            if (chb_add_datetime_in_output.Checked)
                trading_filename += "_" + DateTime.Now.Day + "_" + DateTime.Now.Month + "_" + DateTime.Now.Year + "_" + DateTime.Now.TimeOfDay.Hours + "_" + DateTime.Now.TimeOfDay.Minutes;
            trading_filename += ".pdf";
            ConnectionWithAccess.create_file_folder(trading_filename);
            doc1 = new Document(PageSize.A4, 5, 5, 5, 5);
            FileStream FS1 = File.Create(trading_filename);
            writer = PdfWriter.GetInstance(doc1, FS1);
            doc1.Open();
            current_pdf_page_number = 1;
            pdf_top_heading = null;
            require_header_footer = false;
            Paragraph para = new Paragraph();
            for (int i = 0; i < 6; i++)
            {
                temp_word = ConnectionWithAccess.company_details[i + 1];
                print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
            }
            temp_word = "-------------------------------------------------------";
            print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
            temp_word = Convert.ToString(Convert.ToInt32(Convert.ToString(dtBalShFrom.Text).Substring(dtBalShFrom.Text.Length - 4, 4)) + 1);
            temp_word2 = Convert.ToString(Convert.ToInt32(Convert.ToString(dtBalShTo.Text).Substring(dtBalShTo.Text.Length - 4, 4)) + 1);
            temp_word = "Assesment Year   #   " + temp_word + " - " + temp_word2;
            print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
            temp_word = "-------------------------------------------------------";
            print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
            temp_word = "Status : " + ConnectionWithAccess.company_details[24];
            print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
            temp_word = "Source of Income : " + ConnectionWithAccess.company_details[14];
            print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
            temp_word = ConnectionWithAccess.company_details[15];
            print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
            temp_word = ConnectionWithAccess.company_details[16];
            print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
            temp_word = "Period :" + dtBalShFrom.Text + "   -   " + dtBalShTo.Text;
            print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
            temp_word = "Books of Account's  : Regular Books of Account's";
            print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
            temp_word = "************************";
            print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
            temp_word = "Trading Account";
            print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
            temp_word = "************************";
            print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");

            StringBuilder strQuery = new StringBuilder();
            ConnectionWithAccess.query = query_contains_for_trading_account_union(mprd); ;// strQuery.ToString();
            DataTable dtNewTable = ConnectionCommand.fGetDataTable();
            if (dtNewTable != null)
            {
                DataTable dtReport = move_records_upward_to_empty_places_New(dtNewTable);
                List<int> lColumn_number_for_data = new List<int>();
                lColumn_number_for_data.Add(3);
                lColumn_number_for_data.Add(4);
                lColumn_number_for_data.Add(5);
                lColumn_number_for_data.Add(6);
                lColumn_number_for_data.Add(7);
                lColumn_number_for_data.Add(8);

                float[] columnWidths = { 14, 10, 10, 14, 10, 10 };

                List<string> column_header_text = new List<string>();
                column_header_text.Add("Particulars");
                column_header_text.Add(" ");
                column_header_text.Add("Laibilities");
                column_header_text.Add("Particulars");
                column_header_text.Add(" ");
                column_header_text.Add("Assets");

                List<string> column_alignment = new List<string>();
                column_alignment.Add("LEFT");
                column_alignment.Add("RIGHT");
                column_alignment.Add("RIGHT");
                column_alignment.Add("LEFT");
                column_alignment.Add("RIGHT");
                column_alignment.Add("RIGHT");

                bool bAdd_date_time_in_output = false;

                bool isTotalRequired = false;
                int iTotal_Column_no = 3;

                string strreport_filetype = cbBalShAc.Text + "_" + mprd;
                trading_filename = ConnectionWithAccess.report_file_location + (strreport_filetype).Replace(" ", "");
                if (chb_add_datetime_in_output.Checked)
                {
                    bAdd_date_time_in_output = true;
                    trading_filename += "_" + DateTime.Now.Day + "_" + DateTime.Now.Month + "_" + DateTime.Now.Year + "_" + DateTime.Now.TimeOfDay.Hours + "_" + DateTime.Now.TimeOfDay.Minutes;
                }
                trading_filename += ".pdf";
                ConnectionWithAccess.create_file_folder(trading_filename);
                string strHeader_text_message = " " + " From : " + RepFrom.Text + " to " + RepTo.Text;
                List<int> cell_font_change_length = new List<int>();
                cell_font_change_length.Add(0);
                cell_font_change_length.Add(30);
                cell_font_change_length.Add(10);
                cell_font_change_length.Add(0);
                cell_font_change_length.Add(0);
                cell_font_change_length.Add(0);

                //DataTable dtReport = dtNewTable.Select("amt_debit <> 0 or amt_credit <> 0").CopyToDataTable();
                fGenerate_PDF_Table_From_DataTable(dtReport, lColumn_number_for_data, columnWidths, column_header_text,
            column_alignment, isTotalRequired, iTotal_Column_no, strreport_filetype, strHeader_text_message, bAdd_date_time_in_output,
             cell_font_change_length, false, 0, false,
             0, null, false);
            }
            /*
            if (dtNewTable != null)
            {
                move_records_upward_to_empty_places(dtNewTable);
                for (int i = 0; i < dtNewTable.Rows.Count; i++)
                {
                    if (dtNewTable.Rows[i][3].ToString() != null && dtNewTable.Rows[i][3].ToString() != "")
                    {
                        temp_word = dtNewTable.Rows[i][3].ToString();
                        print_pdf_line(cour_7_bold, temp_word, 15, 0);
                        temp_word = dtNewTable.Rows[i][5].ToString();
                        temp_word = String.Format("{0:0.00}", temp_word);
                        print_pdf_line(cour_7_bold, temp_word, para_IndentationLeft_position(200, temp_word, "cour_9"), -17);
                        debitamount = debitamount + Convert.ToDouble(temp_word);
                    }
                    if (dtNewTable.Rows[i][6].ToString() != null && dtNewTable.Rows[i][6].ToString() != "")
                    {
                        temp_word = dtNewTable.Rows[i][6].ToString();
                        print_pdf_line(cour_7_bold, temp_word, 290, -17);
                        if (dtNewTable.Rows[i][8].ToString() != "")
                        {
                            temp_word = dtNewTable.Rows[i][8].ToString();
                            temp_word = String.Format("{0:0.00}", temp_word);
                            print_pdf_line(cour_7_bold, temp_word, para_IndentationLeft_position(470, temp_word, "cour_9"), -17);
                            creditamount = creditamount + Convert.ToDouble(temp_word);
                        }
                    }
                }
                debitamount = Math.Round(debitamount, 2);
                creditamount = Math.Round(creditamount, 2);
                if (debitamount != creditamount)
                {
                    if (debitamount > creditamount)
                    {
                        temp_word = "Gross Profit";
                        print_pdf_line(cour_7_bold, temp_word, 15, 0);
                        temp_word = Convert.ToString(debitamount - creditamount);
                        //insertGrossAmount("719999", " ", "Gross Profit", (debitamount - creditamount));
                        temp_word = String.Format("{0:0.00}", temp_word);
                        print_pdf_line(cour_9_red, temp_word, para_IndentationLeft_position(200, temp_word, "cour_9_red"), -17);
                        debitamount = creditamount;
                    }
                    else if (creditamount > debitamount)
                    {
                        temp_word = "Gross Loss";
                        print_pdf_line(cour_7_bold, temp_word, 290, 0);
                        temp_word = Convert.ToString(creditamount - debitamount);
                        //insertGrossAmount(creditamount - debitamount);
                        temp_word = String.Format("{0:0.00}", temp_word);
                        print_pdf_line(cour_9_red, temp_word, para_IndentationLeft_position(470, temp_word, "cour_9_red"), -17);
                        creditamount = debitamount;
                    }
                }
                temp_word = "----------------";
                print_pdf_line(cour_7_bold, temp_word, 230, -10);
                print_pdf_line(cour_7_bold, temp_word, 500, -15);
                if (debitamount > 0)
                {
                    temp_word = Convert.ToString(debitamount);
                    temp_word = String.Format("{0:0.00}", temp_word);
                    print_pdf_line(cour_9_red, temp_word, para_IndentationLeft_position(200, temp_word, "cour_9_red"), -10);
                    print_pdf_line(cour_9_red, temp_word, para_IndentationLeft_position(470, temp_word, "cour_9_red"), -15);
                }
                else if (creditamount > 0)
                {
                    temp_word = Convert.ToString(creditamount);
                    temp_word = String.Format("{0:0.00}", temp_word);
                    print_pdf_line(cour_9_red, temp_word, para_IndentationLeft_position(200, temp_word, "cour_9_red"), -10);
                    print_pdf_line(cour_9_red, temp_word, para_IndentationLeft_position(470, temp_word, "cour_9_red"), -15);
                }
                temp_word = "=========";
                print_pdf_line(cour_7_bold, temp_word, 230, -10);
                print_pdf_line(cour_7_bold, temp_word, 500, -15);
            }
            */
            /*
                        skip_balance_page_in_pdf();

                        // trading account finish from hear proift and loss account
                        debitamount = 0;
                        creditamount = 0;
                        for (int i = 0; i < 6; i++)
                        {
                            temp_word = ConnectionWithAccess.company_details[i + 1];
                            print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
                        }
                        temp_word = "-------------------------------------------------------";
                        print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
                        temp_word = Convert.ToString(Convert.ToInt32(Convert.ToString(dtBalShFrom.Text).Substring(dtBalShFrom.Text.Length - 4, 4)) + 1);
                        temp_word2 = Convert.ToString(Convert.ToInt32(Convert.ToString(dtBalShTo.Text).Substring(dtBalShTo.Text.Length - 4, 4)) + 1);
                        temp_word = "Assesment Year   #   " + temp_word + " - " + temp_word2;
                        print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
                        temp_word = "-------------------------------------------------------";
                        print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
                        temp_word = "Status : " + ConnectionWithAccess.company_details[24];
                        print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
                        temp_word = "Source of Income : " + ConnectionWithAccess.company_details[14];
                        print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
                        temp_word = ConnectionWithAccess.company_details[15];
                        print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
                        temp_word = ConnectionWithAccess.company_details[16];
                        print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
                        temp_word = "Period :" + dtBalShFrom.Text + "   -   " + dtBalShTo.Text;
                        print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
                        temp_word = "Books of Account's  : Regular Books of Account's";
                        print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
                        temp_word = "************************";
                        print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
                        temp_word = "Profit & Loss Account";
                        print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
                        temp_word = "************************";
                        print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");

                        strQuery = new StringBuilder();
                        ConnectionWithAccess.query = query_contains_for_profit_and_loss_account_union(mprd); ;// strQuery.ToString();
                        dtNewTable = ConnectionCommand.fGetDataTable();
                        if (dtNewTable != null)
                        {
                            move_records_upward_to_empty_places(dtNewTable);
                            for (int i = 0; i < dtNewTable.Rows.Count; i++)
                            {
                                if (dtNewTable.Rows[i][3].ToString() != null && dtNewTable.Rows[i][3].ToString() != "")
                                {
                                    temp_word = dtNewTable.Rows[i][3].ToString();
                                    print_pdf_line(cour_7_bold, temp_word, 15, 0);
                                    temp_word = dtNewTable.Rows[i][5].ToString();
                                    temp_word = String.Format("{0:0.00}", temp_word);
                                    print_pdf_line(cour_7_bold, temp_word, para_IndentationLeft_position(200, temp_word, "cour_9"), -17);
                                    debitamount = debitamount + Convert.ToDouble(temp_word);
                                }
                                if (dtNewTable.Rows[i][6].ToString() != null && dtNewTable.Rows[i][6].ToString() != "")
                                {
                                    temp_word = dtNewTable.Rows[i][6].ToString();
                                    print_pdf_line(cour_7_bold, temp_word, 290, -17);
                                    if (dtNewTable.Rows[i][8].ToString() != "")
                                    {
                                        temp_word = dtNewTable.Rows[i][8].ToString();
                                        temp_word = String.Format("{0:0.00}", temp_word);
                                        print_pdf_line(cour_7_bold, temp_word, para_IndentationLeft_position(470, temp_word, "cour_9"), -17);
                                        creditamount = creditamount + Convert.ToDouble(temp_word);
                                    }
                                }
                            }
                            debitamount = Math.Round(debitamount, 2);
                            creditamount = Math.Round(creditamount, 2);
                            if (debitamount != creditamount)
                            {
                                if (debitamount > creditamount)
                                {
                                    temp_word = "Net Profit";
                                    print_pdf_line(cour_7_bold, temp_word, 15, 0);
                                    temp_word = Convert.ToString(debitamount - creditamount);
                                    //insertGrossAmount("719999", " ", "Gross Profit", (debitamount - creditamount));
                                    temp_word = String.Format("{0:0.00}", temp_word);
                                    print_pdf_line(cour_9_red, temp_word, para_IndentationLeft_position(200, temp_word, "cour_9_red"), -17);
                                    debitamount = creditamount;
                                }
                                else if (creditamount > debitamount)
                                {
                                    temp_word = "Net Loss";
                                    print_pdf_line(cour_7_bold, temp_word, 290, 0);
                                    temp_word = Convert.ToString(creditamount - debitamount);
                                    //insertGrossAmount(creditamount - debitamount);
                                    temp_word = String.Format("{0:0.00}", temp_word);
                                    print_pdf_line(cour_9_red, temp_word, para_IndentationLeft_position(470, temp_word, "cour_9_red"), -17);
                                    creditamount = debitamount;
                                }
                            }
                            temp_word = "----------------";
                            print_pdf_line(cour_7_bold, temp_word, 230, -10);
                            print_pdf_line(cour_7_bold, temp_word, 500, -15);
                            if (debitamount > 0)
                            {
                                temp_word = Convert.ToString(debitamount);
                                print_pdf_line(cour_9_red, temp_word, para_IndentationLeft_position(200, temp_word, "cour_9_red"), -10);
                                print_pdf_line(cour_9_red, temp_word, para_IndentationLeft_position(470, temp_word, "cour_9_red"), -15);
                            }
                            else if (creditamount > 0)
                            {
                                temp_word = Convert.ToString(creditamount);
                                temp_word = String.Format("{0:0.00}", temp_word);
                                print_pdf_line(cour_9_red, temp_word, para_IndentationLeft_position(200, temp_word, "cour_9_red"), -10);
                                print_pdf_line(cour_9_red, temp_word, para_IndentationLeft_position(470, temp_word, "cour_9_red"), -15);
                            }
                            temp_word = "=========";
                            print_pdf_line(cour_7_bold, temp_word, 230, -10);
                            print_pdf_line(cour_7_bold, temp_word, 500, -15);
                        }
                        skip_balance_page_in_pdf();
                        debitamount = 0;
                        creditamount = 0;
                        for (int i = 0; i < 6; i++)
                        {
                            temp_word = ConnectionWithAccess.company_details[i + 1];
                            print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
                        }
                        temp_word = "-------------------------------------------------------";
                        print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
                        temp_word = Convert.ToString(Convert.ToInt32(Convert.ToString(dtBalShFrom.Text).Substring(dtBalShFrom.Text.Length - 4, 4)) + 1);
                        temp_word2 = Convert.ToString(Convert.ToInt32(Convert.ToString(dtBalShTo.Text).Substring(dtBalShTo.Text.Length - 4, 4)) + 1);
                        temp_word = "Assesment Year   #   " + temp_word + " - " + temp_word2;
                        print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
                        temp_word = "-------------------------------------------------------";
                        print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
                        temp_word = "Status : " + ConnectionWithAccess.company_details[24];
                        print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
                        temp_word = "Source of Income : " + ConnectionWithAccess.company_details[14];
                        print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
                        temp_word = ConnectionWithAccess.company_details[15];
                        print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
                        temp_word = ConnectionWithAccess.company_details[16];
                        print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
                        temp_word = "Period :" + dtBalShFrom.Text + "   -   " + dtBalShTo.Text;
                        print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
                        temp_word = "Books of Account's  : Regular Books of Account's";
                        print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
                        temp_word = "************************";
                        print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
                        temp_word = "Capital Account";
                        print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
                        temp_word = "************************";
                        print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");

                        strQuery = new StringBuilder();
                        ConnectionWithAccess.query = query_contains_for_capital_account_union(mprd); ;// strQuery.ToString();
                        dtNewTable = ConnectionCommand.fGetDataTable();
                        if (dtNewTable != null)
                        {
                            move_records_upward_to_empty_places(dtNewTable);
                            for (int i = 0; i < dtNewTable.Rows.Count; i++)
                            {
                                if (dtNewTable.Rows[i][3].ToString() != null && dtNewTable.Rows[i][3].ToString() != "")
                                {
                                    temp_word = dtNewTable.Rows[i][3].ToString();
                                    print_pdf_line(cour_7_bold, temp_word, 15, 0);
                                    temp_word = dtNewTable.Rows[i][5].ToString();
                                    temp_word = String.Format("{0:0.00}", temp_word);
                                    print_pdf_line(cour_7_bold, temp_word, para_IndentationLeft_position(200, temp_word, "cour_9"), -17);
                                    debitamount = debitamount + Convert.ToDouble(temp_word);
                                }
                                if (dtNewTable.Rows[i][6].ToString() != null && dtNewTable.Rows[i][6].ToString() != "")
                                {
                                    temp_word = dtNewTable.Rows[i][6].ToString();
                                    temp_word = String.Format("{0:0.00}", temp_word);
                                    print_pdf_line(cour_7_bold, temp_word, 290, -17);
                                    if (dtNewTable.Rows[i][8].ToString() != "")
                                    {
                                        temp_word = dtNewTable.Rows[i][8].ToString();
                                        temp_word = String.Format("{0:0.00}", temp_word);
                                        print_pdf_line(cour_7_bold, temp_word, para_IndentationLeft_position(470, temp_word, "cour_9"), -17);
                                        creditamount = creditamount + Convert.ToDouble(temp_word);
                                    }
                                }
                            }
                            debitamount = Math.Round(debitamount, 2);
                            creditamount = Math.Round(creditamount, 2);
                            if (debitamount != creditamount)
                            {
                                if (debitamount > creditamount)
                                {
                                    temp_word = "Difference";
                                    print_pdf_line(cour_7_bold, temp_word, 15, 0);
                                    temp_word = Convert.ToString(debitamount - creditamount);
                                    //insertGrossAmount("719999", " ", "Gross Profit", (debitamount - creditamount));
                                    temp_word = String.Format("{0:0.00}", temp_word);
                                    print_pdf_line(cour_9_red, temp_word, para_IndentationLeft_position(200, temp_word, "cour_9_red"), -17);
                                    debitamount = creditamount;
                                }
                                else if (creditamount > debitamount)
                                {
                                    temp_word = "Difference";
                                    print_pdf_line(cour_7_bold, temp_word, 290, 0);
                                    temp_word = Convert.ToString(creditamount - debitamount);
                                    //insertGrossAmount(creditamount - debitamount);
                                    temp_word = String.Format("{0:0.00}", temp_word);
                                    print_pdf_line(cour_9_red, temp_word, para_IndentationLeft_position(470, temp_word, "cour_9_red"), -17);
                                    creditamount = debitamount;
                                }
                            }
                            temp_word = "----------------";
                            print_pdf_line(cour_7_bold, temp_word, 230, -10);
                            print_pdf_line(cour_7_bold, temp_word, 500, -15);
                            if (debitamount > 0)
                            {
                                temp_word = Convert.ToString(debitamount);
                                temp_word = String.Format("{0:0.00}", temp_word);
                                print_pdf_line(cour_9_red, temp_word, para_IndentationLeft_position(200, temp_word, "cour_9_red"), -10);
                                print_pdf_line(cour_9_red, temp_word, para_IndentationLeft_position(470, temp_word, "cour_9_red"), -15);
                            }
                            else if (creditamount > 0)
                            {
                                temp_word = Convert.ToString(creditamount);
                                temp_word = String.Format("{0:0.00}", temp_word);
                                print_pdf_line(cour_9_red, temp_word, para_IndentationLeft_position(200, temp_word, "cour_9_red"), -10);
                                print_pdf_line(cour_9_red, temp_word, para_IndentationLeft_position(470, temp_word, "cour_9_red"), -15);
                            }
                            temp_word = "=========";
                            print_pdf_line(cour_7_bold, temp_word, 230, -10);
                            print_pdf_line(cour_7_bold, temp_word, 500, -15);
                        }
                        skip_balance_page_in_pdf();
                        // Capital account finish from hear Balance Sheet
                        debitamount = 0;
                        creditamount = 0;
                        for (int i = 0; i < 6; i++)
                        {
                            temp_word = ConnectionWithAccess.company_details[i + 1];
                            print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
                        }
                        temp_word = "-------------------------------------------------------";
                        print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
                        temp_word = Convert.ToString(Convert.ToInt32(Convert.ToString(dtBalShFrom.Text).Substring(dtBalShFrom.Text.Length - 4, 4)) + 1);
                        temp_word2 = Convert.ToString(Convert.ToInt32(Convert.ToString(dtBalShTo.Text).Substring(dtBalShTo.Text.Length - 4, 4)) + 1);
                        temp_word = "Assesment Year   #   " + temp_word + " - " + temp_word2;
                        print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
                        temp_word = "-------------------------------------------------------";
                        print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
                        temp_word = "Status : " + ConnectionWithAccess.company_details[24];
                        print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
                        temp_word = "Source of Income : " + ConnectionWithAccess.company_details[14];
                        print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
                        temp_word = ConnectionWithAccess.company_details[15];
                        print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
                        temp_word = ConnectionWithAccess.company_details[16];
                        print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
                        temp_word = "Period :" + dtBalShFrom.Text + "   -   " + dtBalShTo.Text;
                        print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
                        temp_word = "Books of Account's  : Regular Books of Account's";
                        print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
                        temp_word = "************************";
                        print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
                        temp_word = "Balance Sheet";
                        print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
                        temp_word = "************************";
                        print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");

                        strQuery = new StringBuilder();
                        ConnectionWithAccess.query = query_contains_for_balance_sheet_union(mprd); ;// strQuery.ToString();
                        dtNewTable = ConnectionCommand.fGetDataTable();
                        move_assets_inner_value_outside(dtNewTable);
                        if (dtNewTable != null)
                        {
                            move_records_upward_to_empty_places(dtNewTable);
                            for (int i = 0; i < dtNewTable.Rows.Count; i++)
                            {
                                if (dtNewTable.Rows[i][3].ToString() != "")
                                {
                                    temp_word = dtNewTable.Rows[i][3].ToString();
                                    print_pdf_line(cour_7_bold, temp_word, 15, 0);
                                    temp_word = dtNewTable.Rows[i][5].ToString();
                                    temp_word = String.Format("{0:0.00}", temp_word);
                                    print_pdf_line(cour_9_bold, temp_word, para_IndentationLeft_position(200, temp_word, "cour_9"), -17);
                                    debitamount = debitamount + Convert.ToDouble(temp_word);
                                }
                                if (dtNewTable.Rows[i][6].ToString() != "")
                                {
                                    if (dtNewTable.Rows[i][7].ToString() != "" && dtNewTable.Rows[i][8].ToString() != "")
                                    {
                                        if (Convert.ToDouble(dtNewTable.Rows[i][7].ToString()) == 0 && Convert.ToDouble(dtNewTable.Rows[i][8].ToString()) == 0)
                                        {
                                            temp_word = dtNewTable.Rows[i][7].ToString();
                                            temp_word = dtNewTable.Rows[i][8].ToString();
                                        }
                                        else
                                        {
                                            //temp_word = dtNewTable.Rows[i][7].ToString();
                                            //temp_word = dtNewTable.Rows[i][8].ToString();
                                            temp_word = dtNewTable.Rows[i][6].ToString();
                                            if (dtNewTable.Rows[i][3].ToString() != "")
                                                print_pdf_line(cour_7_bold, temp_word, 290, -17);
                                            else
                                                print_pdf_line(cour_7_bold, temp_word, 290, 0);
                                        }
                                    }
                                    if (dtNewTable.Rows[i][7].ToString() != "" && dtNewTable.Rows[i][8].ToString() != "")
                                    {
                                        if (Convert.ToDouble(dtNewTable.Rows[i][7].ToString()) != Convert.ToDouble(dtNewTable.Rows[i][8].ToString()))
                                        {
                                            if (dtNewTable.Rows[i][7].ToString() != "0.00")
                                            {
                                                temp_word = dtNewTable.Rows[i][7].ToString();
                                                temp_word = String.Format("{0:0.00}", temp_word);
                                                print_pdf_line(cour_9_bold, temp_word, para_IndentationLeft_position(410, temp_word, "cour_9"), -17);
                                            }
                                        }
                                    }
                                    if (dtNewTable.Rows[i][8].ToString() != "" && dtNewTable.Rows[i][8].ToString() != "0")
                                    {
                                        temp_word = dtNewTable.Rows[i][8].ToString();
                                        temp_word = String.Format("{0:0.00}", temp_word);
                                        print_pdf_line(cour_9_bold, temp_word, para_IndentationLeft_position(470, temp_word, "cour_9"), -17);
                                        creditamount = creditamount + Convert.ToDouble(temp_word);
                                    }
                                }
                                if (dtNewTable.Rows[i][1].ToString() != null && dtNewTable.Rows[i][1].ToString() != "")
                                {
                                    if (dtNewTable.Rows[i][1].ToString() == "719999")
                                    {
                                        temp_int = i;
                                        i = dtNewTable.Rows.Count;
                                    }
                                }
                            }
                            debitamount = Math.Round(debitamount, 0);
                            creditamount = Math.Round(creditamount, 0);
                            if (debitamount != creditamount)
                            {
                                if (debitamount > creditamount)
                                {
                                    temp_word = "difference";
                                    print_pdf_line(cour_7_bold, temp_word, 290, 0);
                                    temp_word = Convert.ToString(debitamount - creditamount);
                                    //insertGrossAmount(creditamount - debitamount);
                                    temp_word = String.Format("{0:0.00}", temp_word);
                                    print_pdf_line(cour_9_red, temp_word, para_IndentationLeft_position(470, temp_word, "cour_9_red"), -17);
                                    creditamount = debitamount;
                                }
                                else if (creditamount > debitamount)
                                {
                                    temp_word = "difference";
                                    print_pdf_line(cour_7_bold, temp_word, 15, 0);
                                    temp_word = Convert.ToString(creditamount - debitamount);
                                    //insertGrossAmount("719999", " ", "Gross Profit", (debitamount - creditamount));
                                    temp_word = String.Format("{0:0.00}", temp_word);
                                    print_pdf_line(cour_9_red, temp_word, para_IndentationLeft_position(200, temp_word, "cour_9_red"), -17);
                                    debitamount = creditamount;
                                }
                            }
                            temp_word = "----------------";
                            print_pdf_line(cour_7_bold, temp_word, 230, -10);
                            print_pdf_line(cour_7_bold, temp_word, 500, -15);
                            if (debitamount > 0)
                            {
                                temp_word = Convert.ToString(debitamount);
                                temp_word = String.Format("{0:0.00}", temp_word);
                                print_pdf_line(cour_9_red, temp_word, para_IndentationLeft_position(200, temp_word, "cour_9_red"), -10);
                                print_pdf_line(cour_9_red, temp_word, para_IndentationLeft_position(470, temp_word, "cour_9_red"), -15);
                            }
                            else if (creditamount > 0)
                            {
                                temp_word = Convert.ToString(creditamount);
                                temp_word = String.Format("{0:0.00}", temp_word);
                                print_pdf_line(cour_9_red, temp_word, para_IndentationLeft_position(200, temp_word, "cour_9_red"), -10);
                                print_pdf_line(cour_9_red, temp_word, para_IndentationLeft_position(470, temp_word, "cour_9_red"), -15);
                            }
                            temp_word = "=========";
                            print_pdf_line(cour_7_bold, temp_word, 230, -10);
                            print_pdf_line(cour_7_bold, temp_word, 500, -15);
                        }
                        */
            doc1.Close();
            require_header_footer = true;
        }

        private DataTable AddRowNumbersToDataTable(DataTable dtInput)
        {
            DataTable dtOutput = dtInput;
            DataColumn dc = new DataColumn("Sr.No");
            dc.AutoIncrement = true;
            dc.AutoIncrementSeed = 1;
            dc.AutoIncrementStep = 1;
            dtOutput.Columns.Add(dc);
            dc.SetOrdinal(0);

            //Set values for existing rows  
            for (int i = 0; i <= dtOutput.Rows.Count - 1; i++)
            {
                dtOutput.Rows[i]["Sr.No"] = i + 1;
            }

            return dtOutput;
        }

        private void generate_outstanding_list_only_auto_boxes(DataTable dtOutstandingData)
        {
            DataTable dtReport = AddRowNumbersToDataTable(dtOutstandingData);// (DataTable)gdvreport.DataSource;
            List<int> lColumn_number_for_data = new List<int>();
            lColumn_number_for_data.Add(0);
            lColumn_number_for_data.Add(6);
            lColumn_number_for_data.Add(10);
            lColumn_number_for_data.Add(4);
            //lColumn_number_for_data.Add(2);
            //lColumn_number_for_data.Add(4);
            //lColumn_number_for_data.Add(5);
            //lColumn_number_for_data.Add(6);

            float[] columnWidths = { 5, 39, 12, 9 };

            List<string> column_header_text = new List<string>();
            column_header_text.Add("Sr.No");
            //column_header_text.Add("Doc.");
            column_header_text.Add("Name");
            column_header_text.Add("City");
            //column_header_text.Add("Credit");
            column_header_text.Add("Balance");

            List<string> column_alignment = new List<string>();
            column_alignment.Add("RIGHT");
            column_alignment.Add("LEFT");
            column_alignment.Add("LEFT");
            column_alignment.Add("RIGHT");
            //column_alignment.Add("RIGHT");
            //column_alignment.Add("RIGHT");

            bool isTotalRequired = true;
            int iTotal_Column_no = 4;
            //string strreport_filetype = cbRepType.Text + " " + cbRepSubType.Text + " " + cbRepFormat.Text;
            string strreport_filetype = cbRepType.Text;
            string strHeader_text_message = " " + " From : " + RepFrom.Text + " to " + RepTo.Text;
            bool bAdd_date_time_in_output = true;
            List<int> cell_font_change_length = new List<int>();
            cell_font_change_length.Add(0);
            cell_font_change_length.Add(30);
            cell_font_change_length.Add(10);
            cell_font_change_length.Add(10);
            //cell_font_change_length.Add(0);
            //cell_font_change_length.Add(0);

            fGenerate_PDF_Report_From_DataTable(dtReport, lColumn_number_for_data, columnWidths, column_header_text, column_alignment,
                isTotalRequired, iTotal_Column_no, strreport_filetype, strHeader_text_message, bAdd_date_time_in_output, cell_font_change_length, false, 4);

        }

        private void item_batch_list_auto_boxes()
        {
            //report_filetype = "Item Batch List - " + ibl_title.Text.Trim();
            //pdf_filename = ConnectionWithAccess.report_file_location + (report_filetype).Replace(" ", "");
            //if (chb_add_datetime_in_output.Checked)
            //    pdf_filename += "_" + DateTime.Now.Day + "_" + DateTime.Now.Month + "_" + DateTime.Now.Year + "_" + DateTime.Now.TimeOfDay.Hours + "_" + DateTime.Now.TimeOfDay.Minutes;
            //pdf_filename += ".pdf";
            //pdf_filename = ConnectionWithAccess.remove_filename_error(pdf_filename);
            StringBuilder strQuery = new StringBuilder();
            ConnectionWithAccess.query = "select  b.[type], b.item_code,b.[title],a.qty,a.cat,a.price,a.amount, b.clo_stk, a.[user], a.insert_dt_tm from " +
                    ConnectionWithAccess.tablename[16] + " a inner join " + ConnectionWithAccess.tablename[05] +
                    " b on b.[Type] = a.BType and b.Item_Code = a.BITEM_CD " +
                    " where a.[type] = '" + ibl_type.Text + "' and a.item_code = '" + ibl_itemcode.Text + "' and a.qty > 0 order by b.[title]";
            DataTable dtNewTable = ConnectionCommand.fGetDataTable();
            if (dtNewTable != null)
            {
                DataRow drTotalRow = dtNewTable.NewRow();
                string strPaymentTotal = dtNewTable.Compute("Sum(amount)", "").ToString();
                drTotalRow[0] = dtNewTable.Rows[dtNewTable.Rows.Count - 1][0].ToString();
                drTotalRow[3] = "999999";
                drTotalRow[4] = "Total";
                drTotalRow[6] = strPaymentTotal;
                dtNewTable.Rows.Add(drTotalRow);
                DataTable dtReport = dtNewTable.Copy();
                List<int> lColumn_number_for_data = new List<int>();
                lColumn_number_for_data.Add(1);
                lColumn_number_for_data.Add(2);
                lColumn_number_for_data.Add(3);
                lColumn_number_for_data.Add(5);
                lColumn_number_for_data.Add(6);
                lColumn_number_for_data.Add(7);

                float[] columnWidths = { 4, 28, 9, 9, 9, 9 };

                List<string> column_header_text = new List<string>();
                column_header_text.Add("Sr No.");
                column_header_text.Add("Product Name");
                column_header_text.Add("Quantity");
                column_header_text.Add("Price");
                column_header_text.Add("Amount");
                column_header_text.Add("Cur. Stock");

                List<string> column_alignment = new List<string>();
                column_alignment.Add("RIGHT");
                column_alignment.Add("LEFT");
                column_alignment.Add("RIGHT");
                column_alignment.Add("RIGHT");
                column_alignment.Add("RIGHT");
                column_alignment.Add("RIGHT");

                bool isTotalRequired = true;
                int iTotal_Column_no = 6;
                string strreport_filetype = "Item Batch List - " + ibl_title.Text.Trim();
                string strHeader_text_message = "";
                bool bAdd_date_time_in_output = true;
                List<int> cell_font_change_length = new List<int>();
                cell_font_change_length.Add(0);
                cell_font_change_length.Add(30);
                cell_font_change_length.Add(10);
                cell_font_change_length.Add(0);
                cell_font_change_length.Add(0);
                cell_font_change_length.Add(0);
                cell_font_change_length.Add(0);

                fGenerate_PDF_Report_From_DataTable(dtReport, lColumn_number_for_data, columnWidths, column_header_text, column_alignment,
                    isTotalRequired, iTotal_Column_no, strreport_filetype, strHeader_text_message, bAdd_date_time_in_output, cell_font_change_length, true, 5);
            }
        }

        #endregion auto_boxes_pdf

        # region gst_csv_reports


        private void Convert_CSV_To_Excel(string strcsvFilePath, string strExcelFilePath)
        {
            Excel.Application app = new Excel.Application();
            Excel.Workbook wb = app.Workbooks.Open(strcsvFilePath);
            wb.SaveAs(strExcelFilePath, Excel.XlFileFormat.xlOpenXMLWorkbook);
            wb.Close();
            app.Quit();
        }

        private void generate_item_list()
        {
            report_filetype = cbRepType.Text + " " + cbRepSubType.Text + " " + cbRepFormat.Text;
            pdf_filename = ConnectionWithAccess.report_file_location + (report_filetype).Replace(" ", "");
            if (chb_add_datetime_in_output.Checked)
                pdf_filename += "_" + DateTime.Now.Day + "_" + DateTime.Now.Month + "_" + DateTime.Now.Year + "_" + DateTime.Now.TimeOfDay.Hours + "_" + DateTime.Now.TimeOfDay.Minutes;
            pdf_filename += ".pdf";
            //pdf_filename = ConnectionWithAccess.remove_filename_error(pdf_filename);
            ConnectionWithAccess.create_file_folder(pdf_filename);
            doc1 = new Document(PageSize.A4, 5, 5, 5, 5);
            FileStream FS1 = File.Create(pdf_filename);
            writer = PdfWriter.GetInstance(doc1, FS1);
            doc1.Open();
            current_pdf_page_number = 1;
            add_header_footer = false;
            //header_text_message = report_filetype + " " + " From : " + RepFrom.Text + " to " + RepTo.Text;
            header_text_message = report_filetype + " From " + ConnectionWithAccess.msdate + " to " + ConnectionWithAccess.medate + " as on " + RepTo.Text;
            pdf_top_heading = "Sr. No                Name                                                                                          City                                  Amount";
            Paragraph para = new Paragraph();


            //pdf_file = filepath + "//component_stack.pdf";
            //Document doc1 = new Document(PageSize.A4, 40, 45, 40, 25);
            //FileStream FS1 = File.Create(pdf_file);
            //PdfWriter writer = PdfWriter.GetInstance(doc1, FS1);
            //doc1.Open();



            //PdfContentByte cb = writer.DirectContent;
            //Paragraph para = new Paragraph("");
            //para = new Paragraph("Components Stack in Machine");
            //para.SpacingBefore = spacebefore;
            //para.Font.Size = fontsize;
            //para.IndentationLeft = 0;
            //doc1.Add(para);

            //PdfPTable table = new PdfPTable(3);
            //PdfPCell cell = new PdfPCell(new Phrase("Components Stack in Machine"));
            //cell.Colspan = 3;
            //cell.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
            //table.AddCell(cell);
            //table.AddCell("Col 1 Row 1");
            //table.AddCell("Col 2 Row 1");
            //table.AddCell("Col 3 Row 1");
            //table.AddCell("Col 1 Row 2");
            //table.AddCell("Col 2 Row 2");
            //table.AddCell("Col 3 Row 2");
            //doc1.Add(table);



            //PdfPTable table2 = new PdfPTable(3);
            //table.TotalWidth = 144f;
            //table.LockedWidth = true;
            //table.HorizontalAlignment = 0;
            //PdfPCell left = new PdfPCell(new Paragraph("Rotated"));
            //left.Rotation = 90;
            //table.AddCell(left);
            //PdfPCell middle = new PdfPCell(new Paragraph("Rotated"));
            //middle.Rotation = -90;
            //table.AddCell(middle);
            //table.AddCell("Not Rotated");
            //doc1.Add(table2);




            //PdfPTable table3 = new PdfPTable(4);
            //table.TotalWidth = 400f;
            //table.LockedWidth = true;
            //PdfPCell header = new PdfPCell(new Phrase("Header"));
            //header.Colspan = 4;
            //table.AddCell(header);
            //table.AddCell("Cell 1");
            //table.AddCell("Cell 2");
            //table.AddCell("Cell 3");
            //table.AddCell("Cell 4");
            //PdfPTable nested = new PdfPTable(1);
            //nested.AddCell("Nested Row 1");
            //nested.AddCell("Nested Row 2");
            //nested.AddCell("Nested Row 3");
            //PdfPCell nesthousing = new PdfPCell(nested);
            //nesthousing.Padding = 0f;
            //table.AddCell(nesthousing);
            //PdfPCell bottom = new PdfPCell(new Phrase("bottom"));
            //bottom.Colspan = 3;
            //table.AddCell(bottom);
            //doc1.Add(table3);

            PdfPTable table = new PdfPTable(6);
            PdfPCell cell = new PdfPCell(new Phrase("Item List"));

            cell.Colspan = 6;
            cell.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
            table.TotalWidth = 570f;
            table.LockedWidth = true;
            float[] widths = new float[] { 30f, 70f, 300f, 70f, 70f, 70f };
            table.SetWidths(widths);
            table.HorizontalAlignment = 0;
            table.AddCell(cell);
            table.AddCell("Type");
            table.AddCell("Item Code");
            table.AddCell("Title                   .");
            table.AddCell("Price");
            table.AddCell("Open Stock");
            table.AddCell("Clos Stock");
            //doc1.Add(table);


            for (row_counter = 0; row_counter < gdvreport.Rows.Count - 1; row_counter++)
            {
                //table.AddCell(new Phrase(gdvreport["itemName"].ToString(), tableFont));
                //double price = Convert.ToDouble(gdvreport["price"]);
                //PdfPCell pcell = new PdfPCell();
                //pcell.HorizontalAlignment = PdfPCell.ALIGN_RIGHT;
                //pcell.AddElement(new Phrase(price.ToString("0.00"), tableFont));
                //table.AddCell(pcell);




                table.AddCell(gdvreport.Rows[row_counter].Cells[0].Value.ToString());
                table.AddCell(gdvreport.Rows[row_counter].Cells[1].Value.ToString());
                table.AddCell(gdvreport.Rows[row_counter].Cells[2].Value.ToString());
                cell.HorizontalAlignment = Element.ALIGN_RIGHT;
                table.AddCell(gdvreport.Rows[row_counter].Cells[3].Value.ToString());
                table.HorizontalAlignment = 2;
                table.AddCell(gdvreport.Rows[row_counter].Cells[4].Value.ToString());
                table.HorizontalAlignment = 2;
                table.AddCell(gdvreport.Rows[row_counter].Cells[5].Value.ToString());
            }
            doc1.Add(table);
            doc1.Close();
        }

        private void generate_Sales_Register_Excel_file()
        {
            // f21.d_d >= @From and f21.d_d <= @To
            temporary_list_array.Clear();
            ConnectionWithAccess.query = "select f21.d_n,f21.D_D,f1.state, f1.gst_number, f1.[desc] as [Desc], 'N','Regular', '',f21.bamt,f21.sgst_amt,f21.cgst_amt,f21.IGST_AMT, f21.gamt,f21.prd,f21.d_c,f21.a_n,f21.s_a, " +
                " f3.[type], f3.item_code, f3.[title], f3.q_cs, [box], f3.qty, f3.price, f3.amount,f3.cat,f3.igst_per,f3.hsn_code,f3.cgst_amt,f3.sgst_amt,f3.igst_amt " +
                " from " + ConnectionWithAccess.tablename[1] + " f1, " + ConnectionWithAccess.tablename[21] + " f21, " + ConnectionWithAccess.tablename[1] + " f3 " +
                " where f1.a_n = f21.a_n and f1.s_a = f21.s_a and f3.d_c = f21.d_c and f3.d_n = f21.d_n " +
                " and f21.prd = '" + ConnectionWithAccess.mprd + "' and f3.prd = '" + ConnectionWithAccess.mprd + "' and f21.d_n <> 999999 and f21.d_d >= @From and f21.d_d <= @To and f3.amount > 0 order by f21.d_n asc ";

            parameters_for_date_range(dtp_rg_from_date.Text, dtp_rg_to_date.Text);
            DataTable dtData1 = ConnectionCommand.fGetDataTable();
            if (dtData1 != null && dtData1.Rows.Count > 0)
            {
            }
        }

        private void gst_tax_brief_sale_list(string book, string mprd, string md_c, string md_n, string ma_n, string ms_a)
        {
            temp_word1 = "";
            gst_tax_brief_sale_list_array.Clear();
            if (book == "S")
            {
                ConnectionWithAccess.query = "select d_n, sum(amount) as Amount,igst_per,sum(igst_amt) as igst_amt from " + ConnectionWithAccess.tablename[03] + " where prd = '" + mprd + "' and d_c = " + md_c + " and d_n = " + md_n + " and amount > 0 group by d_n, igst_per ";
                //ConnectionWithAccess.query = "select d_n, sum(amount) as Amount,igst_per,sum(igst_amt) as igst_amt from " + ConnectionWithAccess.tablename[03] + " where prd = '" + mprd + "' and d_c = " + md_c + " and d_n = " + md_n + " and amount > 0";
            }
            else if (book == "P")
                ConnectionWithAccess.query = "select d_n, sum(amount) as Amount,igst_per,sum(igst_amt) as igst_amt from " + ConnectionWithAccess.tablename[03] + " where prd = '" + mprd + "' and d_c = " + md_c + " and d_n = " + md_n + " and a_n = '" + ma_n + "' and s_a = '" + ms_a + "' and amount > 0 group by d_n, igst_per ";
            DataTable dtData1 = ConnectionCommand.fGetDataTable();
            if (dtData1 != null && dtData1.Rows.Count > 0)
            {
                if (dtData1.Rows.Count >= 1)
                {
                    temp_word = "";
                    for (int iRowCount = 0; iRowCount < dtData1.Rows.Count; iRowCount++)
                    {
                        temp_word = temp_word1 + String.Format("{0:0.00}", dtData1.Rows[iRowCount]["igst_per"].ToString()) + " ," + String.Format("{0:0.00}", dtData1.Rows[iRowCount]["igst_amt"].ToString()).ToString() + " ," + String.Format("{0:0.00}", dtData1.Rows[iRowCount]["amount"].ToString()).ToString() + ",";
                        gst_tax_brief_sale_list_array.Add(temp_word);
                    }
                }
            }
        }

        private void generate_Sales_Register_csv_file()
        {
            // f21.d_d >= @From and f21.d_d <= @To
            temporary_list_array.Clear();
            ConnectionWithAccess.query = "select f21.d_n,f21.D_D,f1.state, f1.gst_number, f1.[desc] as [Desc], 'N','Regular', '',f21.bamt,f21.sgst_amt,f21.cgst_amt,f21.IGST_AMT, f21.gamt,f21.prd,f21.d_c,f21.a_n,f21.s_a from " + ConnectionWithAccess.tablename[1] + " f1, " + ConnectionWithAccess.tablename[21] + " f21 where f1.a_n = f21.a_n and f1.s_a = f21.s_a and f21.prd = '" + ConnectionWithAccess.mprd + "' and f21.d_n <> 999999 and f21.d_d >= @From and f21.d_d <= @To order by d_n asc ";
            parameters_for_date_range(dtp_rg_from_date.Text, dtp_rg_to_date.Text);
            DataTable dtData1 = ConnectionCommand.fGetDataTable();
            if (dtData1 != null && dtData1.Rows.Count > 0)
            {
                int mcolumncount = dtData1.Columns.Count;
                for (int iRowCount = 0; iRowCount < dtData1.Rows.Count; iRowCount++)
                {
                    temp_word = "";
                    for (int i = 0; i <= mcolumncount - 1; i++)
                    {
                        if (i == 1)
                        {
                            temp_word1 = dtData1.Rows[iRowCount][i].ToString();
                            temp_word1 = temp_word1.Substring(0, temp_word1.IndexOf(" "));
                            temp_word += temp_word1 + ",";
                        }
                        else if (i == 2)
                        {
                            temp_word1 = dtData1.Rows[iRowCount][i].ToString();
                            for (row_counter = 0; row_counter < State_gst_code.Count; row_counter++)
                            {
                                if (State_gst_code[row_counter].Trim().ToUpper() == dtData1.Rows[iRowCount][i].ToString().ToUpper())
                                {
                                    temp_word2 = row_counter.ToString() + " - " + dtData1.Rows[iRowCount][i].ToString();
                                    row_counter = State_gst_code.Count;
                                }
                            }
                            temp_word += temp_word2 + ",";
                        }
                        else
                            temp_word += dtData1.Rows[iRowCount][i].ToString() + ",";
                    }
                    temp_word = temp_word.Substring(0, temp_word.Length - 1);
                    temporary_list_array.Add(temp_word);
                }
            }
            gst_csv_list.Clear();
            temp_count = 1;
            for (row_counter = 0; row_counter < temporary_list_array.Count; row_counter++)
            {
                temp_word = "";
                var cellArray = temporary_list_array[row_counter].Split(new[] { ',' });
                get_account_details_from_01(cellArray[15], cellArray[16]);
                temp_word1 = cellArray[0] + " ," + cellArray[1];
                ConnectionWithAccess.query = "select [type], item_code, [title], q_cs, [box], qty, price, amount,cat,igst_per,hsn_code,cgst_amt,sgst_amt,igst_amt from " + ConnectionWithAccess.tablename[03] + " where prd = '" + cellArray[13] + "' and d_c = " + cellArray[14] + " and d_n = " + cellArray[0] + " and amount > 0";
                dtData1 = ConnectionCommand.fGetDataTable();
                if (dtData1 != null && dtData1.Rows.Count > 0)
                {
                    temp_word = "";
                    for (int iRowCount = 0; iRowCount < dtData1.Rows.Count; iRowCount++)
                    {
                        if (ConnectionWithAccess.company_details[5].Trim() != account_detail_from_01[12].Trim())
                            temp_word = "Sales," + cellArray[0] + " ," + temp_count.ToString() + " ," + cellArray[3] + " ," + dtData1.Rows[iRowCount][10].ToString() + " ," + dtData1.Rows[iRowCount][2].ToString() + " ," + dtData1.Rows[iRowCount][5].ToString() + " ," + dtData1.Rows[iRowCount][8].ToString() + " ," + cellArray[2] + " ," + dtData1.Rows[iRowCount][9].ToString() + " ," + dtData1.Rows[iRowCount][7].ToString() + " ," + dtData1.Rows[iRowCount][11].ToString() + " ," + dtData1.Rows[iRowCount][12].ToString() + " ," + (Convert.ToDouble(dtData1.Rows[iRowCount][7].ToString()) + Convert.ToDouble(dtData1.Rows[iRowCount][11].ToString()) + Convert.ToDouble(dtData1.Rows[iRowCount][12].ToString())).ToString();
                        else
                            temp_word = cellArray[1] + " ," + cellArray[4] + " " + account_detail_from_01[8] + " ," + "Sales," + cellArray[0] + " ," + temp_count.ToString() + " ," + cellArray[3] + " ," + dtData1.Rows[iRowCount][5].ToString() + " " + dtData1.Rows[iRowCount][8].ToString() + " ," + dtData1.Rows[iRowCount][6].ToString() + "/" + dtData1.Rows[iRowCount][8].ToString() + " ," + (Convert.ToDouble(dtData1.Rows[iRowCount][7].ToString()) + Convert.ToDouble(dtData1.Rows[iRowCount][11].ToString()) + Convert.ToDouble(dtData1.Rows[iRowCount][12].ToString())).ToString() + " ," + dtData1.Rows[iRowCount][7].ToString() + " ," + dtData1.Rows[iRowCount][11].ToString() + " ," + dtData1.Rows[iRowCount][12].ToString();
                        gst_csv_list.Add(temp_word);
                        temp_count++;
                    }
                }
            }
            csv_filename = ConnectionWithAccess.data_drive + "acc\\" + ConnectionWithAccess.mNIK + "\\gst_reports\\" + ConnectionWithAccess.mNIK + "_gst_" + ConnectionWithAccess.mprd + "_Sales_Register";
            csv_filename += "_" + DateTime.Now.Day + "_" + DateTime.Now.Month + "_" + DateTime.Now.Year + "_" + DateTime.Now.TimeOfDay.Hours + "_" + DateTime.Now.TimeOfDay.Minutes;
            csv_filename += ".csv";
            ConnectionWithAccess.create_file_folder(csv_filename);
            if (File.Exists(csv_filename))
                File.Delete(csv_filename);
            StringBuilder sb = new StringBuilder();
            string strPeriod = Convert.ToDateTime(dtp_rg_from_date.Text).ToString("dd-MMM-yyyy") + " to " + Convert.ToDateTime(dtp_rg_to_date.Text).ToString("dd-MMM-yyyy");
            temp_word = "List of All Sales Vouchers, " + strPeriod + " ,,,,,,,,,,";
            sb.AppendLine(temp_word);
            temp_word = ",,,,,,,,,,,";
            sb.AppendLine(temp_word);
            temp_word = "Date,Particulars,Voucher Type,Vch No.,Voucher Ref.,TIN/Sales Tax No.,Quantity,Rate,Gross Total,GST SALES,SGST @ 9%,CGST @ 9%";
            sb.AppendLine(temp_word);
            for (row_counter = 0; row_counter < gst_csv_list.Count; row_counter++)
            {
                sb.AppendLine(gst_csv_list[row_counter]);
            }
            TextWriter writer = new StreamWriter(csv_filename);
            writer.WriteLine(sb);
            writer.Flush();
            //MessageBox.Show("File Created Successfully");
            writer.Close();

            string strExcelFileName = ConnectionWithAccess.data_drive + "acc\\" + ConnectionWithAccess.mNIK + "\\gst_reports\\" + ConnectionWithAccess.mNIK + "_gst_" + ConnectionWithAccess.mprd + "_Sales_Register";
            strExcelFileName += "_" + DateTime.Now.Day + "_" + DateTime.Now.Month + "_" + DateTime.Now.Year + "_" + DateTime.Now.TimeOfDay.Hours + "_" + DateTime.Now.TimeOfDay.Minutes;
            strExcelFileName += ".xlsx";
            Convert_CSV_To_Excel(csv_filename, strExcelFileName);
            MergeColumns(strExcelFileName);
            if (File.Exists(csv_filename))
                File.Delete(csv_filename);
        }

        private void MergeColumns(string strFilePath)
        {
            Excel.Application xlApp = new Excel.Application();
            Excel.Workbook xlWorkbook = xlApp.Workbooks.Open(strFilePath);

            Excel._Worksheet xlWorksheet = xlWorkbook.Sheets[1];
            xlWorksheet.Name = "Sales Register";
            xlWorksheet.Columns.AutoFit();
            xlWorksheet.get_Range("A1", "B2").Cells.HorizontalAlignment = Microsoft.Office.Interop.Excel.XlHAlign.xlHAlignLeft;
            //xlWorksheet.Columns[0].ColumnWidth = 12;
            //xlWorksheet.Columns[1].ColumnWidth = 12;
            //xlWorksheet.Columns[2].ColumnWidth = 12;
            //xlWorksheet.Columns[3].ColumnWidth = 12;
            //xlWorksheet.Columns[4].ColumnWidth = 12;
            //xlWorksheet.Columns[5].ColumnWidth = 12;
            //xlWorksheet.Columns[6].ColumnWidth = 12;
            //xlWorksheet.Columns[7].ColumnWidth = 12;
            xlWorksheet.Range["B1:L1"].Merge();
            xlWorksheet.Range["B1:L1"].HorizontalAlignment = Excel.XlHAlign.xlHAlignRight;
            xlWorkbook.Save();
            xlWorkbook.Close();
        }

        private void generate_gstr1_csv_file()
        {
            generate_gstr1_b2b_csv_file();
            generate_gstr1_b2cs_csv_file();
            //generate_gstr1_json_file();
        }

        private void generate_gstr1_b2b_csv_file()
        {
            if (State_gst_code.Count == 0)
                load_std_code_in_datatable();
            temporary_list_array.Clear();
            ConnectionWithAccess.query = "select f1.gst_number,f21.D_N, f21.D_D, f1.[desc] as [Desc],f1.state, 'N','Regular', '',f21.bamt,f21.sgst_amt,f21.cgst_amt,f21.IGST_AMT, f21.gamt,f21.prd,f21.d_c from " + ConnectionWithAccess.tablename[1] + " f1, " + ConnectionWithAccess.tablename[21] + " f21 where f1.a_n = f21.a_n and f1.s_a = f21.s_a and f21.prd = '" + ConnectionWithAccess.mprd + "' and f21.d_n <> 999999 and f21.d_d >= @From and f21.d_d <= @To order by d_n asc ";
            parameters_for_date_range(dtp_rg_from_date.Text, dtp_rg_to_date.Text);
            DataTable dtData1 = ConnectionCommand.fGetDataTable();
            if (dtData1 != null && dtData1.Rows.Count > 0)
            {
                int mcolumncount = dtData1.Columns.Count;
                for (int iRowCount = 0; iRowCount < dtData1.Rows.Count; iRowCount++)
                {
                    temp_word = "";
                    for (int i = 0; i <= mcolumncount - 1; i++)
                    {
                        if (i == 2)
                        {
                            temp_word1 = dtData1.Rows[iRowCount][i].ToString();
                            temp_word1 = temp_word1.Substring(0, temp_word1.IndexOf(" "));
                            temp_word1 = Convert.ToDateTime(temp_word1).ToString("dd-MMM-yy");
                            temp_word += temp_word1 + ",";
                        }
                        else if (i == 4)
                        {
                            temp_word1 = dtData1.Rows[iRowCount][i].ToString();
                            for (row_counter = 0; row_counter < State_gst_code.Count; row_counter++)
                            {
                                if (State_gst_code[row_counter].Trim().ToUpper() == dtData1.Rows[iRowCount][i].ToString().ToUpper())
                                {
                                    temp_word2 = row_counter.ToString() + " - " + dtData1.Rows[iRowCount][i].ToString();
                                    row_counter = State_gst_code.Count;
                                }
                            }
                            temp_word += temp_word2 + ",";
                        }
                        else
                            temp_word += dtData1.Rows[iRowCount][i].ToString() + ",";
                    }
                    //temp_word = temp_word.Substring(0, temp_word.Length - 1);
                    temp_word += ",";
                    temporary_list_array.Add(temp_word);
                }
            }
            gst_csv_list_b2b.Clear();
            basicamount = 0;
            grossamount = 0;
            cessamount = 0;
            tax_rate = 0;
            temp_int = 0;
            for (row_counter = 0; row_counter < temporary_list_array.Count; row_counter++)
            {
                temp_word = "";
                var cellArray = temporary_list_array[row_counter].Split(new[] { ',' });
                if (cellArray[0].Trim() != "")
                {
                    basicamount += Convert.ToDouble(cellArray[8]);
                    temp_int++;
                    //ConnectionWithAccess.query = "select [type], item_code, [title], q_cs, [box], qty, price, amount,cat,igst_per,hsn_code from " + ConnectionWithAccess.tablename[03] + " where prd = '" + cellArray[13] + "' and d_c = " + cellArray[14] + " and d_n = " + cellArray[1] + " and amount > 0";
                    ConnectionWithAccess.query = "select d_n, sum(amount) as Amount,igst_per from " + ConnectionWithAccess.tablename[03] + " where prd = '" + cellArray[13] + "' and d_c = " + cellArray[14] + " and d_n = " + cellArray[1] + " and amount > 0 group by d_n, igst_per ";
                    dtData1 = ConnectionCommand.fGetDataTable();
                    if (dtData1 != null && dtData1.Rows.Count > 0)
                    {
                        if (dtData1.Rows.Count > 1)
                        {
                            temporary_list_1.Clear();
                            temp_word = "";
                            temp_int = 0;
                            temp_double = 0;
                            for (int iRowCount = 0; iRowCount < dtData1.Rows.Count; iRowCount++)
                            {
                                temp_double = Convert.ToDouble(dtData1.Rows[iRowCount]["amount"].ToString()) + (Convert.ToDouble(dtData1.Rows[iRowCount]["amount"].ToString()) * Convert.ToDouble(dtData1.Rows[iRowCount]["igst_per"].ToString()) / 100);
                                if (iRowCount == 0)
                                    temp_word1 = cellArray[0] + " ," + cellArray[1] + " ," + cellArray[2] + " ," + String.Format("{0:0.00}", temp_double) + " ," + cellArray[4] + " ," + cellArray[5] + " ," + cellArray[6] + " ," + ",";
                                else
                                    temp_word1 = cellArray[0] + " ," + cellArray[1] + "/" + temp_int + " ," + cellArray[2] + " ," + String.Format("{0:0.00}", temp_double) + " ," + cellArray[4] + " ," + cellArray[5] + " ," + cellArray[6] + " ," + ",";
                                temp_word = temp_word1 + String.Format("{0:0.00}", dtData1.Rows[iRowCount]["igst_per"].ToString()) + " ," + String.Format("{0:0.00}", dtData1.Rows[iRowCount]["amount"].ToString()).ToString() + ",";
                                temp_word = temp_word.Replace(" ", "");
                                temporary_list_1.Add(temp_word);
                                gst_csv_list_b2b.Add(temp_word);
                                grossamount += temp_double;
                                temp_int++;
                            }
                        }
                        else
                        {
                            temp_word = "";
                            for (int iRowCount = 0; iRowCount < dtData1.Rows.Count; iRowCount++)
                            {
                                temp_double = Convert.ToDouble(cellArray[8]) + (Convert.ToDouble(cellArray[8]) * Convert.ToDouble(dtData1.Rows[iRowCount]["igst_per"].ToString()) / 100);
                                temp_word1 = cellArray[0] + " ," + cellArray[1] + " ," + cellArray[2] + " ," + String.Format("{0:0.00}", temp_double) + " ," + cellArray[4] + " ," + cellArray[5] + " ," + cellArray[6] + " ," + ",";
                                temp_word = temp_word1 + String.Format("{0:0.00}", dtData1.Rows[iRowCount]["igst_per"].ToString()) + " ," + String.Format("{0:0.00}", dtData1.Rows[iRowCount]["amount"].ToString()) + ",";
                                temp_word = temp_word.Replace(" ", "");
                                temp_word += ",";
                                grossamount += temp_double;
                                gst_csv_list_b2b.Add(temp_word);
                            }
                        }
                    }
                }
            }
            if (cmbDateRangeGST.Text != "Custom Range")
                csv_filename = ConnectionWithAccess.data_drive + "acc\\" + ConnectionWithAccess.mNIK + "\\gst_reports\\" + cmbDateRangeGST.Text + "_" + Convert.ToDateTime(dtp_rg_from_date.Text).Year + "-" + (Convert.ToDateTime(dtp_rg_from_date.Text).Year + 1).ToString().Substring(2, 2) + "_GSTR1_" + ConnectionWithAccess.company_details[32] + "_b2b";
            else
            {
                csv_filename = ConnectionWithAccess.data_drive + "acc\\" + ConnectionWithAccess.mNIK + "\\gst_reports\\" + ConnectionWithAccess.mNIK + "_gst_" + ConnectionWithAccess.mprd + "_gtr1_b2b";
                csv_filename += "_" + DateTime.Now.Day + "_" + DateTime.Now.Month + "_" + DateTime.Now.Year + "_" + DateTime.Now.TimeOfDay.Hours + "_" + DateTime.Now.TimeOfDay.Minutes;
            }
            csv_filename += ".csv";
            ConnectionWithAccess.create_file_folder(csv_filename);
            if (File.Exists(csv_filename))
                File.Delete(csv_filename);
            StringBuilder sb = new StringBuilder();
            temp_word = "GSTIN/UIN of Recipient,Invoice Number,Invoice date,Invoice Value,Place Of Supply,Reverse Charge,Invoice Type,E-Commerce GSTIN,Rate,Taxable Value,Cess Amount";
            sb.AppendLine(temp_word);
            for (row_counter = 0; row_counter < gst_csv_list_b2b.Count; row_counter++)
            {
                sb.AppendLine(gst_csv_list_b2b[row_counter]);
            }
            TextWriter writer = new StreamWriter(csv_filename);
            writer.WriteLine(sb);
            writer.Flush();
            writer.Close();
        }

        private void generate_gstr1_b2cs_csv_file()
        {
            if (temporary_list_array.Count > 1)
            {
                gst_csv_list_b2cs.Clear();
                //ConnectionWithAccess.query = "select sum(amount) as Amount,igst_per from " + ConnectionWithAccess.tablename[03] + " where prd = '" + cellArray[13] + "' and d_c = " + cellArray[14] + " and d_n = " + cellArray[1] + " and amount > 0 group by igst_per";
                ConnectionWithAccess.query = " select f1.state,f3.igst_per, sum(amount) as Amount " +
                    "from " + ConnectionWithAccess.tablename[1] + " f1, " + ConnectionWithAccess.tablename[21] + " f21, " + ConnectionWithAccess.tablename[03] + " f3 " +
                    "where f1.a_n = f21.a_n and f1.s_a = f21.s_a and f21.prd =  '" + ConnectionWithAccess.mprd + "' and f21.d_n <> 999999  " +
                    "and f3.d_n  = f21.d_n and f3.d_c = f21.d_c and f3.prd = f21.prd and f3.amount > 0 " +
                    "and f21.d_d >= @From and f21.d_d <= @To  and f1.gst_number = '' " +
                    "group by f1.state,f3.igst_per ";

                parameters_for_date_range(dtp_rg_from_date.Text, dtp_rg_to_date.Text);
                DataTable dtData1 = ConnectionCommand.fGetDataTable();
                if (dtData1 != null && dtData1.Rows.Count > 0)
                {
                    temp_word = "";
                    for (int iRowCount = 0; iRowCount < dtData1.Rows.Count; iRowCount++)
                    {
                        temp_word1 = dtData1.Rows[iRowCount]["State"].ToString();
                        for (row_counter = 0; row_counter < State_gst_code.Count; row_counter++)
                        {
                            if (State_gst_code[row_counter].Trim().ToUpper() == dtData1.Rows[iRowCount]["State"].ToString().ToUpper())
                            {
                                temp_word2 = row_counter.ToString() + " - " + dtData1.Rows[iRowCount]["State"].ToString();
                                row_counter = State_gst_code.Count;
                            }
                        }
                        temp_word = "OE," + temp_word2 + " ," + dtData1.Rows[iRowCount]["igst_per"].ToString() + " ," + dtData1.Rows[iRowCount]["Amount"].ToString() + " ,,,";
                        gst_csv_list_b2cs.Add(temp_word);
                    }
                }

                if (cmbDateRangeGST.Text != "Custom Range")
                    csv_filename = ConnectionWithAccess.data_drive + "acc\\" + ConnectionWithAccess.mNIK + "\\gst_reports\\" + cmbDateRangeGST.Text + "_" + Convert.ToDateTime(dtp_rg_from_date.Text).Year + "-" + (Convert.ToDateTime(dtp_rg_from_date.Text).Year + 1).ToString().Substring(2, 2) + "_GSTR1_" + ConnectionWithAccess.company_details[32] + "_b2cs";
                else
                {
                    csv_filename = ConnectionWithAccess.data_drive + "acc\\" + ConnectionWithAccess.mNIK + "\\gst_reports\\" + ConnectionWithAccess.mNIK + "_gst_" + ConnectionWithAccess.mprd + "_gtr1_b2cs";
                    csv_filename += "_" + DateTime.Now.Day + "_" + DateTime.Now.Month + "_" + DateTime.Now.Year + "_" + DateTime.Now.TimeOfDay.Hours + "_" + DateTime.Now.TimeOfDay.Minutes;
                }
                csv_filename += ".csv";
                ConnectionWithAccess.create_file_folder(csv_filename);
                if (File.Exists(csv_filename))
                    File.Delete(csv_filename);
                StringBuilder sb = new StringBuilder();
                temp_word = "Type,Place Of Supply,Rate,Taxable Value,Cess Amount,E-Commerce GSTIN,";
                sb.AppendLine(temp_word);
                for (row_counter = 0; row_counter < gst_csv_list_b2cs.Count; row_counter++)
                {
                    sb.AppendLine(gst_csv_list_b2cs[row_counter]);
                }
                TextWriter writer = new StreamWriter(csv_filename);
                writer.WriteLine(sb);
                writer.Flush();
                writer.Close();
            }
        }

        private void generate_gstr1_b2cs_csv_fileold()
        {
            if (temporary_list_array.Count > 1)
            {
                gst_csv_list.Clear();
                for (row_counter = 0; row_counter < temporary_list_array.Count; row_counter++)
                {
                    var cellArray = temporary_list_array[row_counter].Split(new[] { ',' });
                    if (cellArray[0] == "")
                    {
                        temp_int++;
                        temp_word1 = "OE," + cellArray[4] + ",";
                        //ConnectionWithAccess.query = "select f1.state, f21.bamt from " + ConnectionWithAccess.tablename[1] + " f1, " + ConnectionWithAccess.tablename[21] + " f21 where f1.a_n = f21.a_n and f1.s_a = f21.s_a and f21.prd = '" + ConnectionWithAccess.mprd + "' and f21.d_n <> 999999 and f21.d_d >= @From and f21.d_d <= @To " + " and gamt > 0 group by igst_per";
                        //ConnectionWithAccess.query = "select f1.gst_number,f21.D_N, f21.D_D, f1.[desc] as [Desc],f1.state, 'N','Regular', '',f21.bamt,f21.sgst_amt,f21.cgst_amt,f21.IGST_AMT, f21.gamt,f21.prd,f21.d_c from " + ConnectionWithAccess.tablename[1] + " f1, " + ConnectionWithAccess.tablename[21] + " f21 where f1.a_n = f21.a_n and f1.s_a = f21.s_a and f21.prd = '" + ConnectionWithAccess.mprd + "' and f21.d_n <> 999999 and f21.d_d >= @From and f21.d_d <= @To " + " and gamt > 0 group by igst_per";
                        ConnectionWithAccess.query = "select sum(amount) as Amount,igst_per from " + ConnectionWithAccess.tablename[03] + " where prd = '" + cellArray[13] + "' and d_c = " + cellArray[14] + " and d_n = " + cellArray[1] + " and amount > 0 group by igst_per";
                        DataTable dtData1 = ConnectionCommand.fGetDataTable();
                        if (dtData1 != null && dtData1.Rows.Count > 0)
                        {
                            temp_word = "";
                            for (int iRowCount = 0; iRowCount < dtData1.Rows.Count; iRowCount++)
                            {
                                temp_word = temp_word1 + dtData1.Rows[iRowCount]["igst_per"].ToString() + " ," + dtData1.Rows[iRowCount]["amount"].ToString() + " ,,,";
                                gst_csv_list.Add(temp_word);
                            }
                        }
                    }
                }
                if (cmbDateRangeGST.Text != "Custom Range")
                    csv_filename = ConnectionWithAccess.data_drive + "acc\\" + ConnectionWithAccess.mNIK + "\\gst_reports\\" + cmbDateRangeGST.Text + "_" + Convert.ToDateTime(dtp_rg_from_date.Text).Year + "-" + (Convert.ToDateTime(dtp_rg_from_date.Text).Year + 1).ToString().Substring(2, 2) + "_GSTR1_" + ConnectionWithAccess.company_details[32] + "_b2cs";
                else
                {
                    csv_filename = ConnectionWithAccess.data_drive + "acc\\" + ConnectionWithAccess.mNIK + "\\gst_reports\\" + ConnectionWithAccess.mNIK + "_gst_" + ConnectionWithAccess.mprd + "_gtr1";
                    csv_filename += "_" + DateTime.Now.Day + "_" + DateTime.Now.Month + "_" + DateTime.Now.Year + "_" + DateTime.Now.TimeOfDay.Hours + "_" + DateTime.Now.TimeOfDay.Minutes;
                }
                csv_filename += ".csv";
                ConnectionWithAccess.create_file_folder(csv_filename);
                if (File.Exists(csv_filename))
                    File.Delete(csv_filename);
                StringBuilder sb = new StringBuilder();
                temp_word = "Type,Place Of Supply,Rate,Taxable Value,Cess Amount,E-Commerce GSTIN,";
                sb.AppendLine(temp_word);
                for (row_counter = 0; row_counter < gst_csv_list.Count; row_counter++)
                {
                    sb.AppendLine(gst_csv_list[row_counter]);
                }
                TextWriter writer = new StreamWriter(csv_filename);
                writer.WriteLine(sb);
                writer.Flush();
                writer.Close();
            }
        }

        private void generate_gstr1_json_file()
        {
            temporary_list_array.Clear();
            if (cmbDateRangeGST.Text != "Custom Range")
                csv_filename = ConnectionWithAccess.data_drive + "acc\\" + ConnectionWithAccess.mNIK + "\\gst_reports\\" + cmbDateRangeGST.Text + "_" + Convert.ToDateTime(dtp_rg_from_date.Text).Year + "-" + (Convert.ToDateTime(dtp_rg_from_date.Text).Year + 1).ToString().Substring(2, 2) + "_GSTR1_" + ConnectionWithAccess.company_details[32];
            else
            {
                csv_filename = ConnectionWithAccess.data_drive + "acc\\" + ConnectionWithAccess.mNIK + "\\gst_reports\\" + ConnectionWithAccess.mNIK + "_gst_" + ConnectionWithAccess.mprd + "_gtr1";
                csv_filename += "_" + DateTime.Now.Day + "_" + DateTime.Now.Month + "_" + DateTime.Now.Year + "_" + DateTime.Now.TimeOfDay.Hours + "_" + DateTime.Now.TimeOfDay.Minutes;
            }
            csv_filename += ".json";
            ConnectionWithAccess.create_file_folder(csv_filename);
            if (File.Exists(csv_filename))
                File.Delete(csv_filename);
            temp_d_n = 0;
            StringBuilder sb = new StringBuilder();
            add_b2b_data_for_json();
            temp_gst_company_details = "\"gstin\":\"" + ConnectionWithAccess.company_details[32] + "\",";
            temp_word1 = dtp_rg_from_date.Text.Substring(3, 2) + dtp_rg_from_date.Text.Substring(6, 4);
            temp_gst_company_details += "\"fp\":\"" + temp_word1 + "\",\"gt\":1,\"cur_gt\":2,\"version\":\"GST1.1\",\"hash\":\"hash\",";
            temp_gst_b2b_details = "\"b2b\":[";
            for (row_counter = 0; row_counter < gst_csv_list_b2b.Count; row_counter++)
            {
                var cellArray = gst_csv_list_b2b[row_counter].Split(new[] { ',' });
                if (cellArray[3].Contains("."))
                {
                    if (cellArray[3].Length > cellArray[3].IndexOf(".") + 3)
                        cellArray[3] = cellArray[3].Substring(0, cellArray[3].IndexOf(".") + 3);

                }
                if (cellArray[8].Contains("."))
                {
                    if (cellArray[8].Length > cellArray[8].IndexOf(".") + 3)
                        cellArray[8] = cellArray[8].Substring(0, cellArray[8].IndexOf(".") + 3);

                }
                if (cellArray[9].Contains("."))
                {
                    if (cellArray[9].Length > cellArray[9].IndexOf(".") + 3)
                        cellArray[9] = cellArray[9].Substring(0, cellArray[9].IndexOf(".") + 3);

                }
                //if (!cellArray[1].Contains("/"))
                //{
                temp_word += "{";
                temp_d_n = Convert.ToInt32(cellArray[1]);
                if (cellArray[0] != old_gstnumber)
                    temp_gst_number_details = "\"ctin\":\"" + cellArray[0] + "\",\"inv\":";
                temp_gst_invoice_details = "\"inum\":\"" + cellArray[1] + "\",\"idt\":\"" + cellArray[2] + "\",\"val\":" + cellArray[3].Replace(".00", "") + " ,\"pos\":\"" + cellArray[4].Substring(0, cellArray[4].IndexOf(" ")) + "\",\"rchrg\":\"" + cellArray[5] + "\",\"inv_typ\":\"" + cellArray[6].Substring(0, 1) + "\",\"itms\":";
                temp_gst_tax_details = "\"num\":1,\"itm_det\":";
                temp_gst_tax_details += "{\"txval\":" + cellArray[9].Replace(".00", "") + " ,\"rt\":" + cellArray[8].Replace(".00", "") + " ,\"camt\":" + (Convert.ToDouble(cellArray[9]) * Convert.ToDouble(cellArray[8]) / 2 / 100).ToString().Replace(".00", "") + " ,\"samt\":" + (Convert.ToDouble(cellArray[9]) * Convert.ToDouble(cellArray[8]) / 2 / 100).ToString().Replace(".00", "") + " ,\"csamt\":" + cellArray[10] + "}";

                temp_word = "{" + temp_gst_number_details + "{" + "[" + temp_gst_invoice_details + "[" + temp_gst_tax_details + "]" + "]" + "}";
                if (cellArray[0] != old_gstnumber)
                    temp_word += "}";
                old_gstnumber = cellArray[0];
                //}
                //else
                //{
                //    temp_word1 = cellArray[1].Substring(0,cellArray[1].IndexOf("/"));
                //    if (temp_d_n == Convert.ToInt32(cellArray[1].Substring(0, cellArray[1].IndexOf("/"))))
                //    {
                //        temp_word += "{\"inum\":\"" + cellArray[1] + "\",\"idt\":\"" + cellArray[2] + "\",\"val\":" + cellArray[3].Replace(".00", "") + " ,\"pos\":\"" + cellArray[4].Substring(0, cellArray[4].IndexOf(" ")) + "\",\"rchrg\":\"" + cellArray[5] + "\",\"inv_typ\":\"" + cellArray[6].Substring(0, 1) + "\",\"itms\":";
                //        temp_word += "{\"num\":1,\"itm_det\":{\"txval\":" + cellArray[9].Replace(".00", "") + " ,\"rt\":" + cellArray[8].Replace(".00", "") + " ,\"camt\":" + (Convert.ToDouble(cellArray[9]) * Convert.ToDouble(cellArray[8]) / 2 / 100).ToString().Replace(".00", "") + " ,\"samt\":" + (Convert.ToDouble(cellArray[9]) * Convert.ToDouble(cellArray[8]) / 2 / 100).ToString().Replace(".00", "") + " ,\"csamt\":" + cellArray[10] + "}";
                //        temp_word += "}";
                //        temp_word += "]}]},";
                //    }
                //}
            }
            //temp_word = temp_word.Substring(0, temp_word.Length - 1);
            temp_gst_b2b_details += temp_word + "]";
            temp_gst_json_full_details = "{" + temp_gst_company_details + temp_gst_b2b_details + "}";

            sb.AppendLine(temp_gst_json_full_details);
            TextWriter writer = new StreamWriter(csv_filename);
            writer.WriteLine(sb);
            writer.Flush();
            writer.Close();
        }

        private void add_b2b_data_for_json()
        {
            ConnectionWithAccess.query = "select f1.gst_number,f21.D_N, f21.D_D, f1.[desc] as [Desc],f1.state, 'N','Regular', '',f21.bamt,f21.sgst_amt,f21.cgst_amt,f21.IGST_AMT, f21.gamt,f21.prd,f21.d_c from " + ConnectionWithAccess.tablename[1] + " f1, " + ConnectionWithAccess.tablename[21] + " f21 where f1.a_n = f21.a_n and f1.s_a = f21.s_a and f21.prd = '" + ConnectionWithAccess.mprd + "' and f21.d_n <> 999999 and f21.d_d >= @From and f21.d_d <= @To order by d_n asc ";
            parameters_for_date_range(dtp_rg_from_date.Text, dtp_rg_to_date.Text);
            DataTable dtData1 = ConnectionCommand.fGetDataTable();
            if (dtData1 != null && dtData1.Rows.Count > 0)
            {
                int mcolumncount = dtData1.Columns.Count;
                for (int iRowCount = 0; iRowCount < dtData1.Rows.Count; iRowCount++)
                {
                    temp_word = "";
                    for (int i = 0; i <= mcolumncount - 1; i++)
                    {
                        if (i == 2)
                        {
                            temp_word1 = dtData1.Rows[iRowCount][i].ToString();
                            temp_word1 = temp_word1.Substring(0, temp_word1.IndexOf(" "));
                            temp_word1 = Convert.ToDateTime(temp_word1).ToString("dd-MM-yyyy");
                            temp_word += temp_word1 + ",";
                        }
                        else if (i == 4)
                        {
                            temp_word1 = dtData1.Rows[iRowCount][i].ToString();
                            for (row_counter = 0; row_counter < State_gst_code.Count; row_counter++)
                            {
                                if (State_gst_code[row_counter].Trim().ToUpper() == dtData1.Rows[iRowCount][i].ToString().ToUpper())
                                {
                                    temp_word2 = row_counter.ToString() + " - " + dtData1.Rows[iRowCount][i].ToString();
                                    row_counter = State_gst_code.Count;
                                }
                            }
                            temp_word += temp_word2 + ",";
                        }
                        else
                            temp_word += dtData1.Rows[iRowCount][i].ToString() + ",";
                    }
                    temp_word = temp_word.Substring(0, temp_word.Length - 1);
                    temporary_list_array.Add(temp_word);
                }
            }
            gst_csv_list_b2b.Clear();
            basicamount = 0;
            grossamount = 0;
            cessamount = 0;
            tax_rate = 0;
            temp_int = 0;
            for (row_counter = 0; row_counter < temporary_list_array.Count; row_counter++)
            {
                temp_word = "";
                var cellArray = temporary_list_array[row_counter].Split(new[] { ',' });
                if (cellArray[0] != "")
                {
                    basicamount += Convert.ToDouble(cellArray[8]);
                    temp_int++;
                    //ConnectionWithAccess.query = "select [type], item_code, [title], q_cs, [box], qty, price, amount,cat,igst_per,hsn_code from " + ConnectionWithAccess.tablename[03] + " where prd = '" + cellArray[13] + "' and d_c = " + cellArray[14] + " and d_n = " + cellArray[1] + " and amount > 0";
                    ConnectionWithAccess.query = "select d_n, sum(amount) as Amount,igst_per from " + ConnectionWithAccess.tablename[03] + " where prd = '" + cellArray[13] + "' and d_c = " + cellArray[14] + " and d_n = " + cellArray[1] + " and amount > 0 group by d_n, igst_per ";
                    dtData1 = ConnectionCommand.fGetDataTable();
                    if (dtData1 != null && dtData1.Rows.Count > 0)
                    {
                        if (dtData1.Rows.Count > 1)
                        {
                            temporary_list_1.Clear();
                            temp_word = "";
                            temp_int = 0;
                            temp_double = 0;
                            for (int iRowCount = 0; iRowCount < dtData1.Rows.Count; iRowCount++)
                            {
                                temp_double = Convert.ToDouble(dtData1.Rows[iRowCount]["amount"].ToString()) + (Convert.ToDouble(dtData1.Rows[iRowCount]["amount"].ToString()) * Convert.ToDouble(dtData1.Rows[iRowCount]["igst_per"].ToString()) / 100);
                                if (iRowCount == 0)
                                    temp_word1 = cellArray[0] + " ," + cellArray[1] + " ," + cellArray[2] + " ," + temp_double + " ," + cellArray[4] + " ," + cellArray[5] + " ," + cellArray[6] + " ," + ",";
                                else
                                    temp_word1 = cellArray[0] + " ," + cellArray[1] + "/" + temp_int + " ," + cellArray[2] + " ," + temp_double + " ," + cellArray[4] + " ," + cellArray[5] + " ," + cellArray[6] + " ," + ",";
                                temp_word = temp_word1 + dtData1.Rows[iRowCount]["igst_per"].ToString() + " ," + dtData1.Rows[iRowCount]["amount"].ToString().ToString() + " ,0";
                                temporary_list_1.Add(temp_word);
                                gst_csv_list_b2b.Add(temp_word);
                                grossamount += temp_double;
                                temp_int++;
                            }
                        }
                        else
                        {
                            temp_word = "";
                            for (int iRowCount = 0; iRowCount < dtData1.Rows.Count; iRowCount++)
                            {
                                temp_double = Convert.ToDouble(cellArray[8]) + (Convert.ToDouble(cellArray[8]) * Convert.ToDouble(dtData1.Rows[iRowCount]["igst_per"].ToString()) / 100);
                                temp_word1 = cellArray[0] + " ," + cellArray[1] + " ," + cellArray[2] + " ," + temp_double + " ," + cellArray[4] + " ," + cellArray[5] + " ," + cellArray[6] + " ," + ",";
                                temp_word = temp_word1 + dtData1.Rows[iRowCount]["igst_per"].ToString() + " ," + dtData1.Rows[iRowCount]["amount"].ToString() + " ,0";
                                grossamount += temp_double;
                                gst_csv_list_b2b.Add(temp_word);
                            }
                        }
                    }
                }
            }
        }

        private void generate_gstr2_jason_file()
        {
            if (State_gst_code.Count == 0)
                load_std_code_in_datatable();
            temporary_list_array.Clear();
            ConnectionWithAccess.query = "select f1.gst_number,f21.D_N, f21.D_D, f1.[desc] as [Desc],f1.state, 'N','Regular', '',f21.bamt,f21.sgst_amt,f21.cgst_amt,f21.IGST_AMT, f21.gamt,f21.prd,f21.d_c from " + ConnectionWithAccess.tablename[1] + " f1, " + ConnectionWithAccess.tablename[21] + " f21 where f1.a_n = f21.a_n and f1.s_a = f21.s_a and f21.prd = '" + ConnectionWithAccess.mprd + "' and f21.d_n <> 999999 and f21.d_d >= @From and f21.d_d <= @To order by d_n asc ";
            parameters_for_date_range(dtp_rg_from_date.Text, dtp_rg_to_date.Text);
            DataTable dtData1 = ConnectionCommand.fGetDataTable();
            if (dtData1 != null && dtData1.Rows.Count > 0)
            {
                int mcolumncount = dtData1.Columns.Count;
                for (int iRowCount = 0; iRowCount < dtData1.Rows.Count; iRowCount++)
                {
                    temp_word = "";
                    for (int i = 0; i <= mcolumncount - 1; i++)
                    {
                        if (i == 2)
                        {
                            temp_word1 = dtData1.Rows[iRowCount][i].ToString();
                            temp_word1 = temp_word1.Substring(0, temp_word1.IndexOf(" "));
                            temp_word1 = temp_word1.Replace("/", "-");
                            //temp_word1 = Convert.ToDateTime(temp_word1).ToString("dd-m-yy");
                            temp_word += temp_word1 + ",";
                        }
                        else if (i == 4)
                        {
                            temp_word1 = dtData1.Rows[iRowCount][i].ToString();
                            for (row_counter = 0; row_counter < State_gst_code.Count; row_counter++)
                            {
                                if (State_gst_code[row_counter].Trim().ToUpper() == dtData1.Rows[iRowCount][i].ToString().ToUpper())
                                {
                                    temp_word2 = row_counter.ToString() + " - " + dtData1.Rows[iRowCount][i].ToString();
                                    row_counter = State_gst_code.Count;
                                }
                            }
                            temp_word += temp_word2 + ",";
                        }
                        else
                            temp_word += dtData1.Rows[iRowCount][i].ToString() + ",";
                    }
                    //temp_word = temp_word.Substring(0, temp_word.Length - 1);
                    temp_word += ",";
                    temporary_list_array.Add(temp_word);
                }
            }
            gst_csv_list_b2b.Clear();
            basicamount = 0;
            grossamount = 0;
            cessamount = 0;
            tax_rate = 0;
            temp_int = 0;
            for (row_counter = 0; row_counter < temporary_list_array.Count; row_counter++)
            {
                temp_word = "";
                var cellArray = temporary_list_array[row_counter].Split(new[] { ',' });
                if (cellArray[0].Trim() != "")
                {
                    basicamount += Convert.ToDouble(cellArray[8]);
                    temp_int++;
                    //ConnectionWithAccess.query = "select [type], item_code, [title], q_cs, [box], qty, price, amount,cat,igst_per,hsn_code from " + ConnectionWithAccess.tablename[03] + " where prd = '" + cellArray[13] + "' and d_c = " + cellArray[14] + " and d_n = " + cellArray[1] + " and amount > 0";
                    ConnectionWithAccess.query = "select d_n, sum(amount) as Amount,igst_per from " + ConnectionWithAccess.tablename[03] + " where prd = '" + cellArray[13] + "' and d_c = " + cellArray[14] + " and d_n = " + cellArray[1] + " and amount > 0 group by d_n, igst_per ";
                    dtData1 = ConnectionCommand.fGetDataTable();
                    if (dtData1 != null && dtData1.Rows.Count > 0)
                    {
                        if (dtData1.Rows.Count > 1)
                        {
                            temporary_list_1.Clear();
                            temp_word = "";
                            temp_int = 0;
                            temp_double = 0;
                            for (int iRowCount = 0; iRowCount < dtData1.Rows.Count; iRowCount++)
                            {
                                temp_double = Convert.ToDouble(dtData1.Rows[iRowCount]["amount"].ToString()) + (Convert.ToDouble(dtData1.Rows[iRowCount]["amount"].ToString()) * Convert.ToDouble(dtData1.Rows[iRowCount]["igst_per"].ToString()) / 100);
                                if (iRowCount == 0)
                                    temp_word1 = cellArray[0] + " ," + cellArray[1] + " ," + cellArray[2] + " ," + String.Format("{0:0.00}", temp_double) + " ," + cellArray[4] + " ," + cellArray[5] + " ," + cellArray[6] + " ," + ",";
                                else
                                    temp_word1 = cellArray[0] + " ," + cellArray[1] + "/" + temp_int + " ," + cellArray[2] + " ," + String.Format("{0:0.00}", temp_double) + " ," + cellArray[4] + " ," + cellArray[5] + " ," + cellArray[6] + " ," + ",";
                                temp_word = temp_word1 + String.Format("{0:0.00}", dtData1.Rows[iRowCount]["igst_per"].ToString()) + " ," + String.Format("{0:0.00}", dtData1.Rows[iRowCount]["amount"].ToString()).ToString() + ",";
                                temp_word = temp_word.Replace(" ", "");
                                temporary_list_1.Add(temp_word);
                                gst_csv_list_b2b.Add(temp_word);
                                grossamount += temp_double;
                                temp_int++;
                            }
                        }
                        else
                        {
                            temp_word = "";
                            for (int iRowCount = 0; iRowCount < dtData1.Rows.Count; iRowCount++)
                            {
                                temp_double = Convert.ToDouble(cellArray[8]) + (Convert.ToDouble(cellArray[8]) * Convert.ToDouble(dtData1.Rows[iRowCount]["igst_per"].ToString()) / 100);
                                temp_word1 = cellArray[0] + " ," + cellArray[1] + " ," + cellArray[2] + " ," + String.Format("{0:0.00}", temp_double) + " ," + cellArray[4] + " ," + cellArray[5] + " ," + cellArray[6] + " ," + ",";
                                temp_word = temp_word1 + String.Format("{0:0.00}", dtData1.Rows[iRowCount]["igst_per"].ToString()) + " ," + String.Format("{0:0.00}", dtData1.Rows[iRowCount]["amount"].ToString()) + ",";
                                temp_word = temp_word.Replace(" ", "");
                                temp_word += ",";
                                grossamount += temp_double;
                                gst_csv_list_b2b.Add(temp_word);
                            }
                        }
                    }
                }
            }

            if (temporary_list_array.Count > 1)
            {
                gst_csv_list_b2cs.Clear();
                //ConnectionWithAccess.query = "select sum(amount) as Amount,igst_per from " + ConnectionWithAccess.tablename[03] + " where prd = '" + cellArray[13] + "' and d_c = " + cellArray[14] + " and d_n = " + cellArray[1] + " and amount > 0 group by igst_per";
                ConnectionWithAccess.query = " select f1.state,f3.igst_per, sum(amount) as Amount " +
                    "from " + ConnectionWithAccess.tablename[1] + " f1, " + ConnectionWithAccess.tablename[21] + " f21, " + ConnectionWithAccess.tablename[03] + " f3 " +
                    "where f1.a_n = f21.a_n and f1.s_a = f21.s_a and f21.prd =  '" + ConnectionWithAccess.mprd + "' and f21.d_n <> 999999  " +
                    "and f3.d_n  = f21.d_n and f3.d_c = f21.d_c and f3.prd = f21.prd and f3.amount > 0 " +
                    "and f21.d_d >= @From and f21.d_d <= @To  and f1.gst_number = '' " +
                    "group by f1.state,f3.igst_per ";

                parameters_for_date_range(dtp_rg_from_date.Text, dtp_rg_to_date.Text);
                dtData1 = ConnectionCommand.fGetDataTable();
                if (dtData1 != null && dtData1.Rows.Count > 0)
                {
                    temp_word = "";
                    for (int iRowCount = 0; iRowCount < dtData1.Rows.Count; iRowCount++)
                    {
                        temp_word1 = dtData1.Rows[iRowCount]["State"].ToString();
                        for (row_counter = 0; row_counter < State_gst_code.Count; row_counter++)
                        {
                            if (State_gst_code[row_counter].Trim().ToUpper() == dtData1.Rows[iRowCount]["State"].ToString().ToUpper())
                            {
                                temp_word2 = row_counter.ToString() + " - " + dtData1.Rows[iRowCount]["State"].ToString();
                                row_counter = State_gst_code.Count;
                            }
                        }
                        temp_word = "OE," + temp_word2 + " ," + dtData1.Rows[iRowCount]["igst_per"].ToString() + " ," + dtData1.Rows[iRowCount]["Amount"].ToString() + " ,,,";
                        gst_csv_list_b2cs.Add(temp_word);
                    }
                }
            }
            GSTJsonDetails objGSTDetails = new GSTJsonDetails();
            List<B2b> objListB2b = new List<B2b>();
            List<B2cs> objListB2cs = new List<B2cs>();
            #region Main
            objGSTDetails.gstin = ConnectionWithAccess.company_details[32];
            objGSTDetails.fp = dtp_rg_from_date.Value.Month.ToString() + dtp_rg_from_date.Value.Year.ToString();
            if (dtp_rg_from_date.Value.Month.ToString().Length == 1)
                objGSTDetails.fp = "0" + objGSTDetails.fp;
            objGSTDetails.gt = 0;
            objGSTDetails.cur_gt = 0;
            objGSTDetails.version = "GST2.0";
            objGSTDetails.hash = "hash";
            objGSTDetails.b2b = objListB2b;
            objGSTDetails.b2cs = objListB2cs;
            #endregion Main

            #region b2b
            //b2b 1
            B2b objB2b = null;
            List<Inv> objListInv = null;
            for (row_counter = 0; row_counter < gst_csv_list_b2b.Count; row_counter++)
            {
                var cellArray = gst_csv_list_b2b[row_counter].Split(new[] { ',' });

                if (row_counter == 0 || cellArray[0].Trim() != gst_csv_list_b2b[row_counter - 1].Split(new[] { ',' })[0].Trim())
                {
                    objB2b = new B2b();
                    objListInv = new List<Inv>();
                }
                List<Itm> objListitms = new List<Itm>();

                ItmDet objItmDet = new ItmDet();
                objItmDet.txval = Convert.ToDouble(cellArray[9]);
                objItmDet.rt = Convert.ToInt32(cellArray[8].ToString().Replace(".00", ""));
                temp_double = ((Convert.ToDouble(cellArray[3]) - Convert.ToDouble(cellArray[9])) / 2);
                temp_double = Math.Round(temp_double, 0);
                objItmDet.camt = temp_double;
                objItmDet.samt = temp_double;
                objItmDet.csamt = 0;

                Itm objItm = new Itm();
                objItm.num = 1;
                objItm.itm_det = objItmDet;
                objListitms.Add(objItm);

                Inv objInv = new Inv();
                objInv.inum = cellArray[1];
                objInv.idt = cellArray[2];
                temp_double = Convert.ToDouble(cellArray[3]);
                temp_double = Math.Round(temp_double, 0);
                objInv.val = Convert.ToDouble(cellArray[3]);
                if (cellArray[4].Trim().Length > 2)
                    objInv.pos = cellArray[4].Substring(0, 2);
                objInv.rchrg = "N";
                objInv.cfs = "N";
                objInv.itms = objListitms;
                objInv.inv_typ = "R";
                objListInv.Add(objInv);

                objB2b.ctin = cellArray[0];
                objB2b.inv = objListInv;
                objListB2b.Add(objB2b);
            }

            #endregion b2b 1

            #region b2cs
            //b2cs
            for (row_counter = 0; row_counter < gst_csv_list_b2cs.Count; row_counter++)
            {
                var cellArray = gst_csv_list_b2cs[row_counter].Split(new[] { ',' });
                B2cs objB2cs = new B2cs();
                objB2cs.sply_ty = "INTRA";
                if (cellArray[1].Trim().Length > 2)
                    objB2cs.pos = cellArray[1].Substring(0, 2);
                objB2cs.typ = cellArray[0];
                temp_double = Convert.ToDouble(cellArray[3]) + (Convert.ToDouble(cellArray[3]) * Convert.ToDouble(cellArray[2]) / 100);
                objB2cs.txval = Convert.ToInt32(temp_double.ToString().Substring(0, temp_double.ToString().IndexOf(".")));
                objB2cs.rt = Convert.ToInt32(cellArray[2].ToString().Replace(".00", ""));
                objB2cs.iamt = 0;
                objB2cs.camt = (Convert.ToDouble(cellArray[3]) * Convert.ToDouble(cellArray[2]) / 100) / 2;
                objB2cs.samt = (Convert.ToDouble(cellArray[3]) * Convert.ToDouble(cellArray[2]) / 100) / 2;
                objB2cs.csamt = 0;
                objListB2cs.Add(objB2cs);
            }
            #endregion b2cs

            string srtJSON = GSTJsonClasses.ToJSON(objGSTDetails);

            if (cmbDateRangeGST.Text != "Custom Range")
                jason_filename = ConnectionWithAccess.data_drive + "acc\\" + ConnectionWithAccess.mNIK + "\\gst_reports\\" + cmbDateRangeGST.Text + "_" + Convert.ToDateTime(dtp_rg_from_date.Text).Year + "-" + (Convert.ToDateTime(dtp_rg_from_date.Text).Year + 1).ToString().Substring(2, 2) + "_GSTR1_" + ConnectionWithAccess.company_details[32];
            else
            {
                jason_filename = ConnectionWithAccess.data_drive + "acc\\" + ConnectionWithAccess.mNIK + "\\gst_reports\\" + ConnectionWithAccess.mNIK + "_gst_" + ConnectionWithAccess.mprd + "_gtr1_b2cs";
                jason_filename += "_" + DateTime.Now.Day + "_" + DateTime.Now.Month + "_" + DateTime.Now.Year + "_" + DateTime.Now.TimeOfDay.Hours + "_" + DateTime.Now.TimeOfDay.Minutes;
            }
            jason_filename += ".json";
            ConnectionWithAccess.create_file_folder(jason_filename);
            if (File.Exists(jason_filename))
                File.Delete(jason_filename);
            StringBuilder sb = new StringBuilder();
            sb.AppendLine(srtJSON);
            TextWriter writer = new StreamWriter(jason_filename);
            writer.WriteLine(sb);
            writer.Flush();
            writer.Close();
        }

        #endregion

        # region gst_excel_format
        private void generate_GSTR1_excel_file()
        {
            temporary_list_array.Clear();
            ConnectionWithAccess.query = "select f1.gst_number,f21.D_N, f21.D_D, f1.[desc] as [Desc],f1.state, 'N','Regular', '',f21.bamt,f21.sgst_amt,f21.cgst_amt,f21.IGST_AMT, f21.gamt,f21.prd,f21.d_c from " + ConnectionWithAccess.tablename[1] + " f1, " + ConnectionWithAccess.tablename[21] + " f21 where f1.a_n = f21.a_n and f1.s_a = f21.s_a and f21.prd = '" + ConnectionWithAccess.mprd + "' and f21.d_n <> 999999 and f21.d_d >= @From and f21.d_d <= @To order by d_n asc ";
            parameters_for_date_range(dtp_rg_from_date.Text, dtp_rg_to_date.Text);
            DataTable dtData1 = ConnectionCommand.fGetDataTable();
            if (dtData1 != null && dtData1.Rows.Count > 0)
            {
                int mcolumncount = dtData1.Columns.Count;
                for (int iRowCount = 0; iRowCount < dtData1.Rows.Count; iRowCount++)
                {
                    temp_word = "";
                    for (int i = 0; i <= mcolumncount - 1; i++)
                    {
                        if (i == 2)
                        {
                            temp_word1 = dtData1.Rows[iRowCount][i].ToString();
                            temp_word1 = temp_word1.Substring(0, temp_word1.IndexOf(" "));
                            temp_word1 = Convert.ToDateTime(temp_word1).ToString("dd-MMM-yyyy");
                            temp_word += temp_word1 + ",";
                        }
                        else if (i == 4)
                        {
                            temp_word1 = dtData1.Rows[iRowCount][i].ToString();
                            for (row_counter = 0; row_counter < State_gst_code.Count; row_counter++)
                            {
                                if (State_gst_code[row_counter].Trim().ToUpper() == dtData1.Rows[iRowCount][i].ToString().ToUpper())
                                {
                                    temp_word2 = row_counter.ToString() + " - " + dtData1.Rows[iRowCount][i].ToString();
                                    row_counter = State_gst_code.Count;
                                }
                            }
                            temp_word += temp_word2 + ",";
                        }
                        else
                            temp_word += dtData1.Rows[iRowCount][i].ToString() + ",";
                    }
                    temp_word = temp_word.Substring(0, temp_word.Length - 1);
                    temporary_list_array.Add(temp_word);
                }
            }
            gst_csv_list.Clear();
            basicamount = 0;
            grossamount = 0;
            cessamount = 0;
            temp_int = 0;
            for (row_counter = 0; row_counter < temporary_list_array.Count; row_counter++)
            {
                temp_word = "";
                var cellArray = temporary_list_array[row_counter].Split(new[] { ',' });
                if (cellArray[0] != "")
                {
                    basicamount += Convert.ToDouble(cellArray[8]);
                    temp_int++;
                    //ConnectionWithAccess.query = "select [type], item_code, [title], q_cs, [box], qty, price, amount,cat,igst_per,hsn_code from " + ConnectionWithAccess.tablename[03] + " where prd = '" + cellArray[13] + "' and d_c = " + cellArray[14] + " and d_n = " + cellArray[1] + " and amount > 0";
                    ConnectionWithAccess.query = "select d_n, sum(amount) as Amount,igst_per from " + ConnectionWithAccess.tablename[03] + " where prd = '" + cellArray[13] + "' and d_c = " + cellArray[14] + " and d_n = " + cellArray[1] + " and amount > 0 group by d_n, igst_per ";
                    dtData1 = ConnectionCommand.fGetDataTable();
                    if (dtData1 != null && dtData1.Rows.Count > 0)
                    {
                        if (dtData1.Rows.Count > 1)
                        {
                            temporary_list_1.Clear();
                            temp_word = "";
                            temp_int = 0;
                            temp_double = 0;
                            for (int iRowCount = 0; iRowCount < dtData1.Rows.Count; iRowCount++)
                            {
                                temp_double = Convert.ToDouble(dtData1.Rows[iRowCount]["amount"].ToString()) + (Convert.ToDouble(dtData1.Rows[iRowCount]["amount"].ToString()) * Convert.ToDouble(dtData1.Rows[iRowCount]["igst_per"].ToString()) / 100);

                                if (iRowCount == 0)
                                    temp_word1 = cellArray[0] + " ," + cellArray[1] + " ," + cellArray[2] + " ," + temp_double + " ," + cellArray[4] + " ," + cellArray[5] + " ," + cellArray[6] + " ," + cellArray[0] + ",";
                                else
                                    temp_word1 = cellArray[0] + " ,=\"" + cellArray[1] + "/" + temp_int + "\"," + cellArray[2] + " ," + temp_double + " ," + cellArray[4] + " ," + cellArray[5] + " ," + cellArray[6] + " ," + cellArray[0] + ",";
                                temp_word = temp_word1 + dtData1.Rows[iRowCount]["igst_per"].ToString() + " ," + dtData1.Rows[iRowCount]["amount"].ToString();
                                //gst_csv_list.Add(temp_word);
                                temporary_list_1.Add(temp_word);
                                gst_csv_list.Add(temp_word);
                                grossamount += temp_double;
                                temp_int++;
                            }
                        }
                        else
                        {
                            temp_word = "";
                            for (int iRowCount = 0; iRowCount < dtData1.Rows.Count; iRowCount++)
                            {
                                temp_double = Convert.ToDouble(cellArray[8]) + (Convert.ToDouble(cellArray[8]) * Convert.ToDouble(dtData1.Rows[iRowCount]["igst_per"].ToString()) / 100);
                                temp_word1 = cellArray[0] + " ," + cellArray[1] + " ," + cellArray[2] + " ," + temp_double + " ," + cellArray[4] + " ," + cellArray[5] + " ," + cellArray[6] + " ," + cellArray[0] + ",";
                                temp_word = temp_word1 + dtData1.Rows[iRowCount]["igst_per"].ToString() + " ," + dtData1.Rows[iRowCount]["amount"].ToString();
                                grossamount += temp_double;
                                gst_csv_list.Add(temp_word);
                            }
                        }
                    }
                }
            }
            csv_filename = ConnectionWithAccess.data_drive + "acc\\" + ConnectionWithAccess.mNIK + "\\gst_reports\\" + ConnectionWithAccess.mNIK + "_gst_" + ConnectionWithAccess.mprd + "_GSTR1";
            csv_filename += "_" + DateTime.Now.Day + "_" + DateTime.Now.Month + "_" + DateTime.Now.Year + "_" + DateTime.Now.TimeOfDay.Hours + "_" + DateTime.Now.TimeOfDay.Minutes;
            csv_filename += ".csv";
            ConnectionWithAccess.create_file_folder(csv_filename);
            //if (File.Exists(csv_filename))
            //    File.Delete(csv_filename);
            StringBuilder sb = new StringBuilder();
            temp_word = "Summary for B2B(4)";
            sb.AppendLine(temp_word);
            temp_word = "No. of Recipents, No of Invoices,, Total Invoice Value,,,,,,Total Taxable Value, Total Cess";
            sb.AppendLine(temp_word);
            temp_word = "1," + temp_int.ToString() + " ,," + Convert.ToDouble(grossamount) + " ,,,,,," + Convert.ToDouble(basicamount) + " ," + cessamount.ToString();
            sb.AppendLine(temp_word);
            temp_word = "GSTIN/UIN of Recipient,Invoice Number,Invoice date,Invoice Value,Place Of Supply,Reverse Charge,Invoice Type,E-Commerce GSTIN,Rate,Taxable Value,Cess Amount,";
            sb.AppendLine(temp_word);
            for (row_counter = 0; row_counter < gst_csv_list.Count; row_counter++)
            {
                sb.AppendLine(gst_csv_list[row_counter]);
            }
            TextWriter writer = new StreamWriter(csv_filename);
            writer.WriteLine(sb);
            writer.Flush();
            writer.Close();
            string strExcelFileName = ConnectionWithAccess.data_drive + "acc\\" + ConnectionWithAccess.mNIK + "\\gst_reports\\" + ConnectionWithAccess.mNIK + "_gst_" + ConnectionWithAccess.mprd + "_GSTR1";
            if (cmbDateRangeGST.Text != "Custom Range")
                strExcelFileName += "_" + cmbDateRangeGST.Text;
            else
                strExcelFileName += "_" + DateTime.Now.Day + "_" + DateTime.Now.Month + "_" + DateTime.Now.Year + "_" + DateTime.Now.TimeOfDay.Hours + "_" + DateTime.Now.TimeOfDay.Minutes;
            strExcelFileName += ".xlsx";
            Convert_CSV_To_Excel(csv_filename, strExcelFileName);
            //if (File.Exists(csv_filename))
            //    File.Delete(csv_filename);
            Excel.Application xlApp = new Excel.Application();
            Excel.Workbook xlWorkbook = xlApp.Workbooks.Open(strExcelFileName);
            Excel._Worksheet xlWorksheet = xlWorkbook.Sheets[1];
            xlWorksheet.Name = "B2B";
            xlWorksheet.Columns.AutoFit();
            xlWorksheet.get_Range("A1", "B2").Cells.HorizontalAlignment = Microsoft.Office.Interop.Excel.XlHAlign.xlHAlignLeft;
            xlWorksheet.get_Range("A1").Cells.Interior.Color = System.Drawing.Color.FromArgb(140, 200, 220);
            xlWorksheet.get_Range("A2", "K2").Cells.Interior.Color = System.Drawing.Color.FromArgb(140, 200, 220);
            xlWorksheet.get_Range("A4", "K4").Cells.Interior.Color = System.Drawing.Color.FromArgb(250, 192, 144);
            xlWorksheet.get_Range("A2", "K2").Cells.Font.Color = Color.White;
            xlWorksheet.Cells.Style.HorizontalAlignment = Microsoft.Office.Interop.Excel.XlHAlign.xlHAlignCenter;
            xlWorksheet.Range["D3"].HorizontalAlignment = Excel.XlHAlign.xlHAlignRight;
            xlWorksheet.Range["J3"].HorizontalAlignment = Excel.XlHAlign.xlHAlignRight;
            xlWorksheet.Range["K3"].HorizontalAlignment = Excel.XlHAlign.xlHAlignRight;
            xlWorksheet.Range["A5", "A" + gst_csv_list.Count + 4].HorizontalAlignment = Excel.XlHAlign.xlHAlignLeft;
            xlWorksheet.Range["B5", "B" + gst_csv_list.Count + 4].HorizontalAlignment = Excel.XlHAlign.xlHAlignLeft;
            xlWorksheet.Range["B5", "B" + gst_csv_list.Count + 4].NumberFormat = "@";
            xlWorksheet.Range["C4", "C" + gst_csv_list.Count + 4].NumberFormat = "dd-mmm-yyyy";
            xlWorksheet.Range["D2", "D" + gst_csv_list.Count + 4].HorizontalAlignment = Excel.XlHAlign.xlHAlignRight;
            xlWorksheet.Range["D2", "D" + gst_csv_list.Count + 4].NumberFormat = "0.00";
            xlWorksheet.Range["J2", "I" + gst_csv_list.Count + 4].HorizontalAlignment = Excel.XlHAlign.xlHAlignRight;
            xlWorksheet.Range["J2", "I" + gst_csv_list.Count + 4].NumberFormat = "0.00";
            xlWorksheet.Range["J2", "J" + gst_csv_list.Count + 4].HorizontalAlignment = Excel.XlHAlign.xlHAlignRight;
            xlWorksheet.Range["J2", "J" + gst_csv_list.Count + 4].NumberFormat = "0.00";
            xlWorksheet.Range["K2", "K" + gst_csv_list.Count + 4].HorizontalAlignment = Excel.XlHAlign.xlHAlignRight;
            //xlWorksheet.Columns[0].ColumnWidth = 12;
            xlWorkbook.Save();
            xlWorkbook.Close();
            add_b2cl_sheet_in_GSTR1_excel_sheet(strExcelFileName);
            add_b2cs_sheet_in_GSTR1_excel_sheet(strExcelFileName);
            add_cdnr_sheet_in_GSTR1_excel_sheet(strExcelFileName);
            add_cdnur_sheet_in_GSTR1_excel_sheet(strExcelFileName);
            add_exp_sheet_in_GSTR1_excel_sheet(strExcelFileName);
            add_at_sheet_in_GSTR1_excel_sheet(strExcelFileName);
            add_atadj_sheet_in_GSTR1_excel_sheet(strExcelFileName);
            add_exemp_sheet_in_GSTR1_excel_sheet(strExcelFileName);
            add_hsn_sheet_in_GSTR1_excel_sheet(strExcelFileName);
            add_docs_sheet_in_GSTR1_excel_sheet(strExcelFileName);
            add_master_sheet_in_GSTR1_excel_sheet(strExcelFileName);
        }

        private void add_b2cl_sheet_in_GSTR1_excel_sheet(string strExcelFileName)
        {
            gst_csv_list.Clear();
            basicamount = 0;
            grossamount = 0;
            cessamount = 0;
            temp_int = 0;
            temp_word = "Summary for B2CL(5),,,,,,,,,,";
            gst_csv_list.Add(temp_word);
            temp_word = "No of Invoices,, Total Invoice Value,,,Total Taxable Value, Total Cess,";
            gst_csv_list.Add(temp_word);
            temp_word = temp_int.ToString() + " ,," + Convert.ToDouble(grossamount) + " ,,," + Convert.ToDouble(basicamount) + " ," + Convert.ToDouble(cessamount) + ",";
            gst_csv_list.Add(temp_word);
            temp_word = "Invoice Number,Invoice date,Invoice Value,Place Of Supply,Rate,Taxable Value,Cess Amount,E-Commerce GSTIN";
            gst_csv_list.Add(temp_word);
            Excel.Application xlApp = new Excel.Application();
            Excel.Workbook xlWorkbook = xlApp.Workbooks.Open(strExcelFileName);
            var xlSheets = xlWorkbook.Sheets as Excel.Sheets;
            var xlNewSheet = (Excel.Worksheet)xlSheets.Add(After: xlWorkbook.Sheets[xlWorkbook.Sheets.Count]);
            xlNewSheet.Name = "B2CL";
            xlNewSheet.get_Range("A1", "B2").Cells.HorizontalAlignment = Microsoft.Office.Interop.Excel.XlHAlign.xlHAlignLeft;
            xlNewSheet.get_Range("A1").Cells.Interior.Color = System.Drawing.Color.FromArgb(140, 200, 220);
            xlNewSheet.get_Range("A2", "H2").Cells.Interior.Color = System.Drawing.Color.FromArgb(140, 200, 220);
            xlNewSheet.get_Range("A4", "H4").Cells.Interior.Color = System.Drawing.Color.FromArgb(250, 192, 144);
            xlNewSheet.get_Range("A2", "H2").Cells.Font.Color = Color.White;
            xlNewSheet.Cells.Style.HorizontalAlignment = Microsoft.Office.Interop.Excel.XlHAlign.xlHAlignCenter;
            xlNewSheet.Range["D2", "D" + gst_csv_list.Count + 4].HorizontalAlignment = Excel.XlHAlign.xlHAlignRight;
            AddDataInNewExcelSheet(xlNewSheet);
            xlNewSheet.Columns.AutoFit();
            xlWorkbook.Save();
            xlWorkbook.Close();
        }

        private void add_b2cs_sheet_in_GSTR1_excel_sheet(string strExcelFileName)
        {
            gst_csv_list.Clear();
            basicamount = 0;
            grossamount = 0;
            cessamount = 0;
            temp_int = 0;
            for (row_counter = 0; row_counter < temporary_list_array.Count; row_counter++)
            {
                var cellArray = temporary_list_array[row_counter].Split(new[] { ',' });
                if (cellArray[0] == "")
                {
                    basicamount += Convert.ToDouble(cellArray[8]);
                    temp_int++;
                }
            }
            temp_word = "Summary for B2CS(7)";
            gst_csv_list.Add(temp_word);
            temp_word = ",,,Total Taxable Value, Total Cess";
            gst_csv_list.Add(temp_word);
            temp_word = ",,," + Convert.ToDouble(basicamount) + " ," + Convert.ToDouble(cessamount) + ",";
            gst_csv_list.Add(temp_word);
            temp_word = "Type,Place Of Supply,Rate,Taxable Value,Cess Amount,E-Commerce GSTIN";
            gst_csv_list.Add(temp_word);
            for (row_counter = 0; row_counter < temporary_list_array.Count; row_counter++)
            {
                var cellArray = temporary_list_array[row_counter].Split(new[] { ',' });
                if (cellArray[0] == "")
                {
                    temp_int++;
                    temp_word1 = "OE," + cellArray[4] + ",";
                    //ConnectionWithAccess.query = "select [type], item_code, [title], q_cs, [box], qty, price, amount,cat,igst_per,hsn_code from " + ConnectionWithAccess.tablename[03] + " where prd = '" + cellArray[13] + "' and d_c = " + cellArray[14] + " and d_n = " + cellArray[1] + " and amount > 0";
                    ConnectionWithAccess.query = "select d_n, sum(amount) as Amount,igst_per from " + ConnectionWithAccess.tablename[03] + " where prd = '" + cellArray[13] + "' and d_c = " + cellArray[14] + " and d_n = " + cellArray[1] + " and amount > 0 group by d_n, igst_per";
                    DataTable dtData1 = ConnectionCommand.fGetDataTable();
                    if (dtData1 != null && dtData1.Rows.Count > 0)
                    {
                        temp_word = "";
                        for (int iRowCount = 0; iRowCount < dtData1.Rows.Count; iRowCount++)
                        {
                            temp_word = temp_word1 + dtData1.Rows[iRowCount]["igst_per"].ToString() + " ," + dtData1.Rows[iRowCount]["amount"].ToString();
                            gst_csv_list.Add(temp_word);
                        }
                    }
                }
            }
            Excel.Application xlApp = new Excel.Application();
            Excel.Workbook xlWorkbook = xlApp.Workbooks.Open(strExcelFileName);
            var xlSheets = xlWorkbook.Sheets as Excel.Sheets;
            var xlNewSheet = (Excel.Worksheet)xlSheets.Add(After: xlWorkbook.Sheets[xlWorkbook.Sheets.Count]);
            xlNewSheet.Name = "b2cs";
            xlNewSheet.get_Range("A1", "B2").Cells.HorizontalAlignment = Microsoft.Office.Interop.Excel.XlHAlign.xlHAlignLeft;
            xlNewSheet.get_Range("A1").Cells.Interior.Color = System.Drawing.Color.FromArgb(140, 200, 220);
            xlNewSheet.get_Range("A2", "F2").Cells.Interior.Color = System.Drawing.Color.FromArgb(140, 200, 220);
            xlNewSheet.get_Range("A4", "F4").Cells.Interior.Color = System.Drawing.Color.FromArgb(250, 192, 144);
            xlNewSheet.get_Range("A2", "F2").Cells.Font.Color = Color.White;
            xlNewSheet.Cells.Style.HorizontalAlignment = Microsoft.Office.Interop.Excel.XlHAlign.xlHAlignCenter;
            xlNewSheet.Range["C2", "C" + gst_csv_list.Count].HorizontalAlignment = Excel.XlHAlign.xlHAlignRight;
            xlNewSheet.Range["C2", "C" + gst_csv_list.Count].NumberFormat = "0.00";
            xlNewSheet.Range["D2", "D" + gst_csv_list.Count].HorizontalAlignment = Excel.XlHAlign.xlHAlignRight;
            xlNewSheet.Range["D2", "D" + gst_csv_list.Count].NumberFormat = "0.00";
            AddDataInNewExcelSheet(xlNewSheet);
            xlNewSheet.Columns.AutoFit();
            xlWorkbook.Save();
            xlWorkbook.Close();
        }

        private void add_cdnr_sheet_in_GSTR1_excel_sheet(string strExcelFileName)
        {
            gst_csv_list.Clear();
            basicamount = 0;
            grossamount = 0;
            cessamount = 0;
            temp_int = 0;
            temp_word = "Summary for CDNR(9B)";
            gst_csv_list.Add(temp_word);
            temp_word = "No. of Recipients,No of Invoices,,No of Notes/Vouchers, Total Note Value,Total Taxable Value, Total Cess";
            gst_csv_list.Add(temp_word);
            temp_word = "1," + temp_int.ToString() + " ,," + Convert.ToDouble(grossamount) + " ,,,,,," + Convert.ToDouble(basicamount) + " ," + Convert.ToDouble(cessamount) + ",";
            gst_csv_list.Add(temp_word);
            temp_word = "UR Type,Note/Refund Voucher Number,Note/Refund Voucher date,Document Type,Invoice/Advance Receipt Number,Invoice/Advance Receipt Date,Reason of issuing document,Place Of Supply,Note/Refund Voucher Value,Rate,Taxable Value,Cess Amount,Pre GST";
            gst_csv_list.Add(temp_word);
            //for (row_counter = 0; row_counter < temporary_list_array.Count; row_counter++)
            //{
            //    temp_word = "";
            //    var cellArray = temporary_list_array[row_counter].Split(new[] { ',' });
            //    if (cellArray[0] == "")
            //    {
            //        basicamount += Convert.ToDouble(cellArray[8]);
            //        grossamount += Convert.ToDouble(cellArray[12]);
            //        temp_int++;
            //        temp_word1 = cellArray[0] + " ," + cellArray[1] + " ," + cellArray[2] + " ," + cellArray[12] + " ," + cellArray[4] + " ," + cellArray[5] + " ," + cellArray[6] + " ," + cellArray[0]+ ",";
            //        ConnectionWithAccess.query = "select [type], item_code, [title], q_cs, [box], qty, price, amount,cat,igst_per,hsn_code from " + ConnectionWithAccess.tablename[03] + " where prd = '" + cellArray[13] + "' and d_c = " + cellArray[14] + " and d_n = " + cellArray[1] + " and amount > 0";
            //        DataTable dtData1 = ConnectionCommand.fGetDataTable();
            //        if (dtData1 != null && dtData1.Rows.Count > 0)
            //        {
            //            temp_word = "";
            //            for (int iRowCount = 0; iRowCount < dtData1.Rows.Count; iRowCount++)
            //            {
            //                temp_word = temp_word1 + dtData1.Rows[iRowCount][9].ToString() + " ," + dtData1.Rows[iRowCount][7].ToString();
            //                gst_csv_list.Add(temp_word);
            //            }
            //        }
            //    }
            //}
            Excel.Application xlApp = new Excel.Application();
            Excel.Workbook xlWorkbook = xlApp.Workbooks.Open(strExcelFileName);
            var xlSheets = xlWorkbook.Sheets as Excel.Sheets;
            var xlNewSheet = (Excel.Worksheet)xlSheets.Add(After: xlWorkbook.Sheets[xlWorkbook.Sheets.Count]);
            xlNewSheet.Name = "cdnr";
            xlNewSheet.get_Range("A1", "B2").Cells.HorizontalAlignment = Microsoft.Office.Interop.Excel.XlHAlign.xlHAlignLeft;
            xlNewSheet.get_Range("A1").Cells.Interior.Color = System.Drawing.Color.FromArgb(140, 200, 220);
            xlNewSheet.get_Range("A2", "M2").Cells.Interior.Color = System.Drawing.Color.FromArgb(140, 200, 220);
            xlNewSheet.get_Range("A4", "M4").Cells.Interior.Color = System.Drawing.Color.FromArgb(250, 192, 144);
            xlNewSheet.get_Range("A2", "M2").Cells.Font.Color = Color.White;
            xlNewSheet.Cells.Style.HorizontalAlignment = Microsoft.Office.Interop.Excel.XlHAlign.xlHAlignCenter;
            xlNewSheet.Range["D2", "D" + gst_csv_list.Count].HorizontalAlignment = Excel.XlHAlign.xlHAlignRight;
            AddDataInNewExcelSheet(xlNewSheet);
            xlNewSheet.Columns.AutoFit();
            xlWorkbook.Save();
            xlWorkbook.Close();
        }

        private void add_cdnur_sheet_in_GSTR1_excel_sheet(string strExcelFileName)
        {
            gst_csv_list.Clear();
            basicamount = 0;
            grossamount = 0;
            cessamount = 0;
            temp_int = 0;
            temp_word = "Summary for CDNUR(9B)";
            gst_csv_list.Add(temp_word);
            temp_word = "No. of Recipients,No of Invoices,,No of Notes/Vouchers, Total Note Value,Total Taxable Value, Total Cess";
            gst_csv_list.Add(temp_word);
            temp_word = "1," + temp_int.ToString() + " ,," + Convert.ToDouble(grossamount) + " ,,,,,," + Convert.ToDouble(basicamount) + " ," + Convert.ToDouble(cessamount) + ",";
            gst_csv_list.Add(temp_word);
            temp_word = "UR Type,Note/Refund Voucher Number,Note/Refund Voucher date,Document Type,Invoice/Advance Receipt Number,Invoice/Advance Receipt Date,Reason of issuing document,Place Of Supply,Note/Refund Voucher Value,Rate,Taxable Value,Cess Amount,Pre GST";
            gst_csv_list.Add(temp_word);
            //for (row_counter = 0; row_counter < temporary_list_array.Count; row_counter++)
            //{
            //    temp_word = "";
            //    var cellArray = temporary_list_array[row_counter].Split(new[] { ',' });
            //    if (cellArray[0] == "")
            //    {
            //        basicamount += Convert.ToDouble(cellArray[8]);
            //        grossamount += Convert.ToDouble(cellArray[12]);
            //        temp_int++;
            //        temp_word1 = cellArray[0] + " ," + cellArray[1] + " ," + cellArray[2] + " ," + cellArray[12] + " ," + cellArray[4] + " ," + cellArray[5] + " ," + cellArray[6] + " ," + cellArray[0]+ ",";
            //        ConnectionWithAccess.query = "select [type], item_code, [title], q_cs, [box], qty, price, amount,cat,igst_per,hsn_code from " + ConnectionWithAccess.tablename[03] + " where prd = '" + cellArray[13] + "' and d_c = " + cellArray[14] + " and d_n = " + cellArray[1] + " and amount > 0";
            //        DataTable dtData1 = ConnectionCommand.fGetDataTable();
            //        if (dtData1 != null && dtData1.Rows.Count > 0)
            //        {
            //            temp_word = "";
            //            for (int iRowCount = 0; iRowCount < dtData1.Rows.Count; iRowCount++)
            //            {
            //                temp_word = temp_word1 + dtData1.Rows[iRowCount][9].ToString() + " ," + dtData1.Rows[iRowCount][7].ToString();
            //                gst_csv_list.Add(temp_word);
            //            }
            //        }
            //    }
            //}
            Excel.Application xlApp = new Excel.Application();
            Excel.Workbook xlWorkbook = xlApp.Workbooks.Open(strExcelFileName);
            var xlSheets = xlWorkbook.Sheets as Excel.Sheets;
            var xlNewSheet = (Excel.Worksheet)xlSheets.Add(After: xlWorkbook.Sheets[xlWorkbook.Sheets.Count]);
            xlNewSheet.Name = "cdnur";
            xlNewSheet.get_Range("A1", "B2").Cells.HorizontalAlignment = Microsoft.Office.Interop.Excel.XlHAlign.xlHAlignLeft;
            xlNewSheet.get_Range("A1").Cells.Interior.Color = System.Drawing.Color.FromArgb(140, 200, 220);
            xlNewSheet.get_Range("A2", "M2").Cells.Interior.Color = System.Drawing.Color.FromArgb(140, 200, 220);
            xlNewSheet.get_Range("A4", "M4").Cells.Interior.Color = System.Drawing.Color.FromArgb(250, 192, 144);
            xlNewSheet.get_Range("A2", "M2").Cells.Font.Color = Color.White;
            xlNewSheet.Cells.Style.HorizontalAlignment = Microsoft.Office.Interop.Excel.XlHAlign.xlHAlignCenter;
            xlNewSheet.Range["D2", "D" + gst_csv_list.Count].HorizontalAlignment = Excel.XlHAlign.xlHAlignRight;
            AddDataInNewExcelSheet(xlNewSheet);
            xlNewSheet.Columns.AutoFit();
            xlWorkbook.Save();
            xlWorkbook.Close();
        }

        private void add_exp_sheet_in_GSTR1_excel_sheet(string strExcelFileName)
        {
            gst_csv_list.Clear();
            basicamount = 0;
            grossamount = 0;
            temp_int = 0;
            //for (row_counter = 0; row_counter < temporary_list_array.Count; row_counter++)
            //{
            //    temp_word = "";
            //    var cellArray = temporary_list_array[row_counter].Split(new[] { ',' });
            //    if (cellArray[0] == "")
            //    {
            //        basicamount += Convert.ToDouble(cellArray[8]);
            //        grossamount += Convert.ToDouble(cellArray[12]);
            //        temp_int++;
            //        temp_word1 = cellArray[0] + " ," + cellArray[1] + " ," + cellArray[2] + " ," + cellArray[12] + " ," + cellArray[4] + " ," + cellArray[5] + " ," + cellArray[6] + " ," + cellArray[0]+ ",";
            //        ConnectionWithAccess.query = "select [type], item_code, [title], q_cs, [box], qty, price, amount,cat,igst_per,hsn_code from " + ConnectionWithAccess.tablename[03] + " where prd = '" + cellArray[13] + "' and d_c = " + cellArray[14] + " and d_n = " + cellArray[1] + " and amount > 0";
            //        DataTable dtData1 = ConnectionCommand.fGetDataTable();
            //        if (dtData1 != null && dtData1.Rows.Count > 0)
            //        {
            //            temp_word = "";
            //            for (int iRowCount = 0; iRowCount < dtData1.Rows.Count; iRowCount++)
            //            {
            //                temp_word = temp_word1 + dtData1.Rows[iRowCount][9].ToString() + " ," + dtData1.Rows[iRowCount][7].ToString();
            //                gst_csv_list.Add(temp_word);
            //            }
            //        }
            //    }
            //}
            StringBuilder sb = new StringBuilder();
            temp_word = "Summary For EXP(6)";
            gst_csv_list.Add(temp_word);
            temp_word = ",No of Invoices,, Total Invoice Value,,No of Shipping Bill,, Total Taxable Value";
            gst_csv_list.Add(temp_word);
            temp_word = "," + temp_int.ToString() + " ," + Convert.ToDouble(grossamount) + " ," + Convert.ToDouble(basicamount);
            gst_csv_list.Add(temp_word);
            temp_word = "Export Type,Invoice Number,Invoice date,Invoice Value,Part Code,Shipping Bill Number,Shipping Bill Date,Rate,Taxable Value";
            gst_csv_list.Add(temp_word);
            Excel.Application xlApp = new Excel.Application();
            Excel.Workbook xlWorkbook = xlApp.Workbooks.Open(strExcelFileName);
            var xlSheets = xlWorkbook.Sheets as Excel.Sheets;
            //var xlNewSheet = (Excel.Worksheet)xlSheets.Add(xlSheets[1], Type.Missing, Type.Missing, Type.Missing);
            var xlNewSheet = (Excel.Worksheet)xlSheets.Add(After: xlWorkbook.Sheets[xlWorkbook.Sheets.Count]);//, Type.Missing, Type.Missing, Type.Missing);
            xlNewSheet.Name = "exp";
            xlNewSheet.Columns.AutoFit();
            xlNewSheet.get_Range("A1", "B2").Cells.HorizontalAlignment = Microsoft.Office.Interop.Excel.XlHAlign.xlHAlignLeft;
            xlNewSheet.get_Range("A1").Cells.Interior.Color = System.Drawing.Color.FromArgb(140, 200, 220);
            xlNewSheet.get_Range("A2", "I2").Cells.Interior.Color = System.Drawing.Color.FromArgb(140, 200, 220);
            xlNewSheet.get_Range("A4", "I4").Cells.Interior.Color = System.Drawing.Color.FromArgb(250, 192, 144);
            xlNewSheet.get_Range("A2", "I2").Cells.Font.Color = Color.White;
            xlNewSheet.Cells.Style.HorizontalAlignment = Microsoft.Office.Interop.Excel.XlHAlign.xlHAlignCenter;
            xlNewSheet.Range["D2", "D" + gst_csv_list.Count].HorizontalAlignment = Excel.XlHAlign.xlHAlignRight;
            AddDataInNewExcelSheet(xlNewSheet);
            xlNewSheet.Columns.AutoFit();
            xlWorkbook.Save();
            xlWorkbook.Close();
        }

        private void add_at_sheet_in_GSTR1_excel_sheet(string strExcelFileName)
        {
            gst_csv_list.Clear();
            basicamount = 0;
            grossamount = 0;
            temp_int = 0;
            //for (row_counter = 0; row_counter < temporary_list_array.Count; row_counter++)
            //{
            //    temp_word = "";
            //    var cellArray = temporary_list_array[row_counter].Split(new[] { ',' });
            //    if (cellArray[0] == "")
            //    {
            //        basicamount += Convert.ToDouble(cellArray[8]);
            //        grossamount += Convert.ToDouble(cellArray[12]);
            //        temp_int++;
            //        temp_word1 = cellArray[0] + " ," + cellArray[1] + " ," + cellArray[2] + " ," + cellArray[12] + " ," + cellArray[4] + " ," + cellArray[5] + " ," + cellArray[6] + " ," + cellArray[0]+ ",";
            //        ConnectionWithAccess.query = "select [type], item_code, [title], q_cs, [box], qty, price, amount,cat,igst_per,hsn_code from " + ConnectionWithAccess.tablename[03] + " where prd = '" + cellArray[13] + "' and d_c = " + cellArray[14] + " and d_n = " + cellArray[1] + " and amount > 0";
            //        DataTable dtData1 = ConnectionCommand.fGetDataTable();
            //        if (dtData1 != null && dtData1.Rows.Count > 0)
            //        {
            //            temp_word = "";
            //            for (int iRowCount = 0; iRowCount < dtData1.Rows.Count; iRowCount++)
            //            {
            //                temp_word = temp_word1 + dtData1.Rows[iRowCount][9].ToString() + " ," + dtData1.Rows[iRowCount][7].ToString();
            //                gst_csv_list.Add(temp_word);
            //            }
            //        }
            //    }
            //}
            StringBuilder sb = new StringBuilder();
            temp_word = "Summary For Advance Received (11B)";
            gst_csv_list.Add(temp_word);
            temp_word = ",,Total Advance Received, Total Cess";
            gst_csv_list.Add(temp_word);
            temp_word = ",," + Convert.ToDouble(grossamount) + " ," + Convert.ToDouble(basicamount);
            gst_csv_list.Add(temp_word);
            temp_word = "Place Of Supply,Rate,Gross Advance Received,Cess Amount";
            gst_csv_list.Add(temp_word);
            Excel.Application xlApp = new Excel.Application();
            Excel.Workbook xlWorkbook = xlApp.Workbooks.Open(strExcelFileName);
            var xlSheets = xlWorkbook.Sheets as Excel.Sheets;
            //var xlNewSheet = (Excel.Worksheet)xlSheets.Add(xlSheets[1], Type.Missing, Type.Missing, Type.Missing);
            var xlNewSheet = (Excel.Worksheet)xlSheets.Add(After: xlWorkbook.Sheets[xlWorkbook.Sheets.Count]);//, Type.Missing, Type.Missing, Type.Missing);
            xlNewSheet.Name = "at";
            xlNewSheet.Columns.AutoFit();
            xlNewSheet.get_Range("A1", "B2").Cells.HorizontalAlignment = Microsoft.Office.Interop.Excel.XlHAlign.xlHAlignLeft;
            xlNewSheet.get_Range("A1").Cells.Interior.Color = System.Drawing.Color.FromArgb(140, 200, 220);
            xlNewSheet.get_Range("A2", "D2").Cells.Interior.Color = System.Drawing.Color.FromArgb(140, 200, 220);
            xlNewSheet.get_Range("A4", "D4").Cells.Interior.Color = System.Drawing.Color.FromArgb(250, 192, 144);
            xlNewSheet.get_Range("A2", "D2").Cells.Font.Color = Color.White;
            xlNewSheet.Cells.Style.HorizontalAlignment = Microsoft.Office.Interop.Excel.XlHAlign.xlHAlignCenter;
            xlNewSheet.Range["D2", "D" + gst_csv_list.Count].HorizontalAlignment = Excel.XlHAlign.xlHAlignRight;
            AddDataInNewExcelSheet(xlNewSheet);
            xlNewSheet.Columns.AutoFit();
            xlWorkbook.Save();
            xlWorkbook.Close();
        }

        private void add_atadj_sheet_in_GSTR1_excel_sheet(string strExcelFileName)
        {
            gst_csv_list.Clear();
            basicamount = 0;
            grossamount = 0;
            temp_int = 0;
            //for (row_counter = 0; row_counter < temporary_list_array.Count; row_counter++)
            //{
            //    temp_word = "";
            //    var cellArray = temporary_list_array[row_counter].Split(new[] { ',' });
            //    if (cellArray[0] == "")
            //    {
            //        basicamount += Convert.ToDouble(cellArray[8]);
            //        grossamount += Convert.ToDouble(cellArray[12]);
            //        temp_int++;
            //        temp_word1 = cellArray[0] + " ," + cellArray[1] + " ," + cellArray[2] + " ," + cellArray[12] + " ," + cellArray[4] + " ," + cellArray[5] + " ," + cellArray[6] + " ," + cellArray[0]+ ",";
            //        ConnectionWithAccess.query = "select [type], item_code, [title], q_cs, [box], qty, price, amount,cat,igst_per,hsn_code from " + ConnectionWithAccess.tablename[03] + " where prd = '" + cellArray[13] + "' and d_c = " + cellArray[14] + " and d_n = " + cellArray[1] + " and amount > 0";
            //        DataTable dtData1 = ConnectionCommand.fGetDataTable();
            //        if (dtData1 != null && dtData1.Rows.Count > 0)
            //        {
            //            temp_word = "";
            //            for (int iRowCount = 0; iRowCount < dtData1.Rows.Count; iRowCount++)
            //            {
            //                temp_word = temp_word1 + dtData1.Rows[iRowCount][9].ToString() + " ," + dtData1.Rows[iRowCount][7].ToString();
            //                gst_csv_list.Add(temp_word);
            //            }
            //        }
            //    }
            //}
            StringBuilder sb = new StringBuilder();
            temp_word = "Summary For Advance Adjusted (11B)";
            gst_csv_list.Add(temp_word);
            temp_word = ",,Total Advance Adjusted, Total Cess";
            gst_csv_list.Add(temp_word);
            temp_word = ",," + Convert.ToDouble(grossamount) + " ," + Convert.ToDouble(basicamount);
            gst_csv_list.Add(temp_word);
            temp_word = "Place Of Supply,Rate,Gross Advance Adjusted,Cess Amount";
            gst_csv_list.Add(temp_word);
            Excel.Application xlApp = new Excel.Application();
            Excel.Workbook xlWorkbook = xlApp.Workbooks.Open(strExcelFileName);
            var xlSheets = xlWorkbook.Sheets as Excel.Sheets;
            var xlNewSheet = (Excel.Worksheet)xlSheets.Add(After: xlWorkbook.Sheets[xlWorkbook.Sheets.Count]);
            xlNewSheet.Name = "atadj";
            xlNewSheet.Columns.AutoFit();
            xlNewSheet.get_Range("A1", "B2").Cells.HorizontalAlignment = Microsoft.Office.Interop.Excel.XlHAlign.xlHAlignLeft;
            xlNewSheet.get_Range("A1").Cells.Interior.Color = System.Drawing.Color.FromArgb(140, 200, 220);
            xlNewSheet.get_Range("A2", "D2").Cells.Interior.Color = System.Drawing.Color.FromArgb(140, 200, 220);
            xlNewSheet.get_Range("A4", "D4").Cells.Interior.Color = System.Drawing.Color.FromArgb(250, 192, 144);
            xlNewSheet.get_Range("A2", "D2").Cells.Font.Color = Color.White;
            xlNewSheet.Cells.Style.HorizontalAlignment = Microsoft.Office.Interop.Excel.XlHAlign.xlHAlignCenter;
            xlNewSheet.Range["D2", "D" + gst_csv_list.Count].HorizontalAlignment = Excel.XlHAlign.xlHAlignRight;
            AddDataInNewExcelSheet(xlNewSheet);
            xlNewSheet.Columns.AutoFit();
            xlWorkbook.Save();
            xlWorkbook.Close();
        }

        private void add_exemp_sheet_in_GSTR1_excel_sheet(string strExcelFileName)
        {
            gst_csv_list.Clear();
            basicamount = 0;
            grossamount = 0;
            temp_int = 0;
            //for (row_counter = 0; row_counter < temporary_list_array.Count; row_counter++)
            //{
            //    temp_word = "";
            //    var cellArray = temporary_list_array[row_counter].Split(new[] { ',' });
            //    if (cellArray[0] == "")
            //    {
            //        basicamount += Convert.ToDouble(cellArray[8]);
            //        grossamount += Convert.ToDouble(cellArray[12]);
            //        temp_int++;
            //        temp_word1 = cellArray[0] + " ," + cellArray[1] + " ," + cellArray[2] + " ," + cellArray[12] + " ," + cellArray[4] + " ," + cellArray[5] + " ," + cellArray[6] + " ," + cellArray[0]+ ",";
            //        ConnectionWithAccess.query = "select [type], item_code, [title], q_cs, [box], qty, price, amount,cat,igst_per,hsn_code from " + ConnectionWithAccess.tablename[03] + " where prd = '" + cellArray[13] + "' and d_c = " + cellArray[14] + " and d_n = " + cellArray[1] + " and amount > 0";
            //        DataTable dtData1 = ConnectionCommand.fGetDataTable();
            //        if (dtData1 != null && dtData1.Rows.Count > 0)
            //        {
            //            temp_word = "";
            //            for (int iRowCount = 0; iRowCount < dtData1.Rows.Count; iRowCount++)
            //            {
            //                temp_word = temp_word1 + dtData1.Rows[iRowCount][9].ToString() + " ," + dtData1.Rows[iRowCount][7].ToString();
            //                gst_csv_list.Add(temp_word);
            //            }
            //        }
            //    }
            //}
            StringBuilder sb = new StringBuilder();
            temp_word = "[Summary For Nil rated, exempted and non GST outward supplies (8)]";
            gst_csv_list.Add(temp_word);
            temp_word = ",Total Nil Rated Supplies,Total Exempted Supplies,Total Non-GST Supplies";
            gst_csv_list.Add(temp_word);
            temp_word = ",," + Convert.ToDouble(grossamount) + " ," + Convert.ToDouble(basicamount);
            gst_csv_list.Add(temp_word);
            temp_word = "Description,Nil Rated Supplies,Exempted (other than nil rated/non GST supply ),Non-GST supplies";
            gst_csv_list.Add(temp_word);
            Excel.Application xlApp = new Excel.Application();
            Excel.Workbook xlWorkbook = xlApp.Workbooks.Open(strExcelFileName);
            var xlSheets = xlWorkbook.Sheets as Excel.Sheets;
            var xlNewSheet = (Excel.Worksheet)xlSheets.Add(After: xlWorkbook.Sheets[xlWorkbook.Sheets.Count]);
            xlNewSheet.Name = "exemp";
            xlNewSheet.Columns.AutoFit();
            xlNewSheet.get_Range("A1", "B2").Cells.HorizontalAlignment = Microsoft.Office.Interop.Excel.XlHAlign.xlHAlignLeft;
            xlNewSheet.get_Range("A1").Cells.Interior.Color = System.Drawing.Color.FromArgb(140, 200, 220);
            xlNewSheet.get_Range("A2", "D2").Cells.Interior.Color = System.Drawing.Color.FromArgb(140, 200, 220);
            xlNewSheet.get_Range("A4", "D4").Cells.Interior.Color = System.Drawing.Color.FromArgb(250, 192, 144);
            xlNewSheet.get_Range("A2", "D2").Cells.Font.Color = Color.White;
            xlNewSheet.Cells.Style.HorizontalAlignment = Microsoft.Office.Interop.Excel.XlHAlign.xlHAlignCenter;
            xlNewSheet.Range["D2", "D" + gst_csv_list.Count].HorizontalAlignment = Excel.XlHAlign.xlHAlignRight;
            AddDataInNewExcelSheet(xlNewSheet);
            xlNewSheet.Columns.AutoFit();
            xlWorkbook.Save();
            xlWorkbook.Close();
        }

        private void add_hsn_sheet_in_GSTR1_excel_sheet(string strExcelFileName)
        {
            gst_csv_list.Clear();
            basicamount = 0;
            grossamount = 0;
            temp_int = 0;
            total_value = 0;
            total_taxable_value = 0;
            total_integerated_tax = 0;
            total_central_tax = 0;
            total_state_ut_tax = 0;
            total_cess = 0;
            //for (row_counter = 0; row_counter < temporary_list_array.Count; row_counter++)
            //{
            //    temp_word = "";
            //    var cellArray = temporary_list_array[row_counter].Split(new[] { ',' });
            //    if (cellArray[0] == "")
            //    {
            //        basicamount += Convert.ToDouble(cellArray[8]);
            //        grossamount += Convert.ToDouble(cellArray[12]);
            //        temp_int++;
            //        temp_word1 = cellArray[0] + " ," + cellArray[1] + " ," + cellArray[2] + " ," + cellArray[12] + " ," + cellArray[4] + " ," + cellArray[5] + " ," + cellArray[6] + " ," + cellArray[0]+ ",";
            //        ConnectionWithAccess.query = "select [type], item_code, [title], q_cs, [box], qty, price, amount,cat,igst_per,hsn_code from " + ConnectionWithAccess.tablename[03] + " where prd = '" + cellArray[13] + "' and d_c = " + cellArray[14] + " and d_n = " + cellArray[1] + " and amount > 0";
            //        DataTable dtData1 = ConnectionCommand.fGetDataTable();
            //        if (dtData1 != null && dtData1.Rows.Count > 0)
            //        {
            //            temp_word = "";
            //            for (int iRowCount = 0; iRowCount < dtData1.Rows.Count; iRowCount++)
            //            {
            //                temp_word = temp_word1 + dtData1.Rows[iRowCount][9].ToString() + " ," + dtData1.Rows[iRowCount][7].ToString();
            //                gst_csv_list.Add(temp_word);
            //            }
            //        }
            //    }
            //}
            StringBuilder sb = new StringBuilder();
            temp_word = "Summary for HSN(12)";
            gst_csv_list.Add(temp_word);

            temp_word = "No. of HSN,,,, Total Value,Total Taxable Value,Total Integerated Tax,Total Central Tax,Total State/UT Tax,Total Cess";
            gst_csv_list.Add(temp_word);
            temp_word = temp_int.ToString() + " ,,," + total_value.ToString() + " ," + total_taxable_value.ToString() + " ," + total_integerated_tax.ToString() + " ," + total_central_tax.ToString() + " ," + total_state_ut_tax.ToString() + " ," + total_cess.ToString();
            gst_csv_list.Add(temp_word);
            temp_word = "HSN,Description,UQC,Total Quantity,Total Value,Total Taxable Value,Total Integrated Tax Value,Total Central Tax,Total State/UT Tax,Cess Amount,";
            gst_csv_list.Add(temp_word);
            Excel.Application xlApp = new Excel.Application();
            Excel.Workbook xlWorkbook = xlApp.Workbooks.Open(strExcelFileName);
            var xlSheets = xlWorkbook.Sheets as Excel.Sheets;
            var xlNewSheet = (Excel.Worksheet)xlSheets.Add(After: xlWorkbook.Sheets[xlWorkbook.Sheets.Count]);
            xlNewSheet.Name = "hsn";
            xlNewSheet.Columns.AutoFit();
            xlNewSheet.get_Range("A1", "B2").Cells.HorizontalAlignment = Microsoft.Office.Interop.Excel.XlHAlign.xlHAlignLeft;
            xlNewSheet.get_Range("A1").Cells.Interior.Color = System.Drawing.Color.FromArgb(140, 200, 220);
            xlNewSheet.get_Range("A2", "J2").Cells.Interior.Color = System.Drawing.Color.FromArgb(140, 200, 220);
            xlNewSheet.get_Range("A4", "J4").Cells.Interior.Color = System.Drawing.Color.FromArgb(250, 192, 144);
            xlNewSheet.get_Range("A2", "J2").Cells.Font.Color = Color.White;
            xlNewSheet.Cells.Style.HorizontalAlignment = Microsoft.Office.Interop.Excel.XlHAlign.xlHAlignCenter;
            xlNewSheet.Range["D2", "D" + gst_csv_list.Count].HorizontalAlignment = Excel.XlHAlign.xlHAlignRight;
            AddDataInNewExcelSheet(xlNewSheet);
            xlNewSheet.Columns.AutoFit();
            xlWorkbook.Save();
            xlWorkbook.Close();
        }

        private void add_docs_sheet_in_GSTR1_excel_sheet(string strExcelFileName)
        {
            gst_csv_list.Clear();
            basicamount = 0;
            grossamount = 0;
            temp_int = 0;
            total_number = 0;
            total_cancelled = 0;
            //for (row_counter = 0; row_counter < temporary_list_array.Count; row_counter++)
            //{
            //    temp_word = "";
            //    var cellArray = temporary_list_array[row_counter].Split(new[] { ',' });
            //    if (cellArray[0] == "")
            //    {
            //        basicamount += Convert.ToDouble(cellArray[8]);
            //        grossamount += Convert.ToDouble(cellArray[12]);
            //        temp_int++;
            //        temp_word1 = cellArray[0] + " ," + cellArray[1] + " ," + cellArray[2] + " ," + cellArray[12] + " ," + cellArray[4] + " ," + cellArray[5] + " ," + cellArray[6] + " ," + cellArray[0]+ ",";
            //        ConnectionWithAccess.query = "select [type], item_code, [title], q_cs, [box], qty, price, amount,cat,igst_per,hsn_code from " + ConnectionWithAccess.tablename[03] + " where prd = '" + cellArray[13] + "' and d_c = " + cellArray[14] + " and d_n = " + cellArray[1] + " and amount > 0";
            //        DataTable dtData1 = ConnectionCommand.fGetDataTable();
            //        if (dtData1 != null && dtData1.Rows.Count > 0)
            //        {
            //            temp_word = "";
            //            for (int iRowCount = 0; iRowCount < dtData1.Rows.Count; iRowCount++)
            //            {
            //                temp_word = temp_word1 + dtData1.Rows[iRowCount][9].ToString() + " ," + dtData1.Rows[iRowCount][7].ToString();
            //                gst_csv_list.Add(temp_word);
            //            }
            //        }
            //    }
            //}
            StringBuilder sb = new StringBuilder();
            temp_word = "Summary of documents issued during the tax period (13)";
            gst_csv_list.Add(temp_word);
            temp_word = ",,,Total Number,Total Cancelled";
            gst_csv_list.Add(temp_word);
            temp_word = ",,," + total_number.ToString() + " ," + total_cancelled.ToString();
            gst_csv_list.Add(temp_word);
            temp_word = "Nature of Document,Sr. No. From,Sr. No. To, Total Number,Cancelled";
            gst_csv_list.Add(temp_word);
            Excel.Application xlApp = new Excel.Application();
            Excel.Workbook xlWorkbook = xlApp.Workbooks.Open(strExcelFileName);
            var xlSheets = xlWorkbook.Sheets as Excel.Sheets;
            var xlNewSheet = (Excel.Worksheet)xlSheets.Add(After: xlWorkbook.Sheets[xlWorkbook.Sheets.Count]);
            xlNewSheet.Name = "docs";
            xlNewSheet.Columns.AutoFit();
            xlNewSheet.get_Range("A1", "B2").Cells.HorizontalAlignment = Microsoft.Office.Interop.Excel.XlHAlign.xlHAlignLeft;
            xlNewSheet.get_Range("A1").Cells.Interior.Color = System.Drawing.Color.FromArgb(140, 200, 220);
            xlNewSheet.get_Range("A2", "D2").Cells.Interior.Color = System.Drawing.Color.FromArgb(140, 200, 220);
            xlNewSheet.get_Range("A4", "D4").Cells.Interior.Color = System.Drawing.Color.FromArgb(250, 192, 144);
            xlNewSheet.get_Range("A2", "D2").Cells.Font.Color = Color.White;
            xlNewSheet.Cells.Style.HorizontalAlignment = Microsoft.Office.Interop.Excel.XlHAlign.xlHAlignCenter;
            xlNewSheet.Range["D2", "D" + gst_csv_list.Count].HorizontalAlignment = Excel.XlHAlign.xlHAlignRight;
            AddDataInNewExcelSheet(xlNewSheet);
            xlNewSheet.Columns.AutoFit();
            xlWorkbook.Save();
            xlWorkbook.Close();
        }

        private void add_master_sheet_in_GSTR1_excel_sheet(string strExcelFileName)
        {
            gst_csv_list.Clear();
            basicamount = 0;
            grossamount = 0;
            temp_int = 0;
            //for (row_counter = 0; row_counter < temporary_list_array.Count; row_counter++)
            //{
            //    temp_word = "";
            //    var cellArray = temporary_list_array[row_counter].Split(new[] { ',' });
            //    if (cellArray[0] == "")
            //    {
            //        basicamount += Convert.ToDouble(cellArray[8]);
            //        grossamount += Convert.ToDouble(cellArray[12]);
            //        temp_int++;
            //        temp_word1 = cellArray[0] + " ," + cellArray[1] + " ," + cellArray[2] + " ," + cellArray[12] + " ," + cellArray[4] + " ," + cellArray[5] + " ," + cellArray[6] + " ," + cellArray[0]+ ",";
            //        ConnectionWithAccess.query = "select [type], item_code, [title], q_cs, [box], qty, price, amount,cat,igst_per,hsn_code from " + ConnectionWithAccess.tablename[03] + " where prd = '" + cellArray[13] + "' and d_c = " + cellArray[14] + " and d_n = " + cellArray[1] + " and amount > 0";
            //        DataTable dtData1 = ConnectionCommand.fGetDataTable();
            //        if (dtData1 != null && dtData1.Rows.Count > 0)
            //        {
            //            temp_word = "";
            //            for (int iRowCount = 0; iRowCount < dtData1.Rows.Count; iRowCount++)
            //            {
            //                temp_word = temp_word1 + dtData1.Rows[iRowCount][9].ToString() + " ," + dtData1.Rows[iRowCount][7].ToString();
            //                gst_csv_list.Add(temp_word);
            //            }
            //        }
            //    }
            //}
            StringBuilder sb = new StringBuilder();
            temp_word = "UQC,Export Type,Reverse Charge/Provisional Assessment,Note Type,Type,Tax Rate,POS,Invoice Type,Reason of Issuing Note,Nature of Document,UR Type";
            gst_csv_list.Add(temp_word);
            Excel.Application xlApp = new Excel.Application();
            Excel.Workbook xlWorkbook = xlApp.Workbooks.Open(strExcelFileName);
            var xlSheets = xlWorkbook.Sheets as Excel.Sheets;
            var xlNewSheet = (Excel.Worksheet)xlSheets.Add(After: xlWorkbook.Sheets[xlWorkbook.Sheets.Count]);
            xlNewSheet.Name = "master";
            xlNewSheet.Columns.AutoFit();
            xlNewSheet.get_Range("A1", "K1").Cells.Interior.Color = System.Drawing.Color.FromArgb(140, 200, 220);
            xlNewSheet.Cells.Style.HorizontalAlignment = Microsoft.Office.Interop.Excel.XlHAlign.xlHAlignCenter;
            xlNewSheet.Range["D2", "D" + gst_csv_list.Count].HorizontalAlignment = Excel.XlHAlign.xlHAlignRight;
            AddDataInNewExcelSheet(xlNewSheet);
            xlNewSheet.get_Range("A1", "K1").Cells.RowHeight = 100;
            //xlNewSheet.Columns.AutoFit();
            xlWorkbook.Save();
            xlWorkbook.Close();
        }
        #endregion

        private void AddDataInNewExcelSheet(Excel.Worksheet xlNewSheet1)
        {
            for (int i = 0; i < gst_csv_list.Count; i++)
            {
                String line = gst_csv_list[i];

                Excel.Range c1 = (Excel.Range)xlNewSheet1.Cells[i + 1, 1];
                Excel.Range c2 = (Excel.Range)xlNewSheet1.Cells[i + 1, 1 + line.Length];
                Excel.Range range = xlNewSheet1.get_Range(c1, c2);
                string[] split = line.Split(',');
                for (int c = 1; c <= split.Length; c++)
                {
                    range.Cells[1, c] = split[c - 1];
                }
            }
        }

        private void generate_pdf_for_gst_difference()
        {
            gst_last_month_credit_debit_amount = 0;
            gst_debit_credit_amount = 0;
            gst_amount_list.Clear();
            for (row_counter = 0; row_counter <= 24; row_counter++)
            {
                gst_amount_list.Add("0.00");
            }
            // 0-4 cgst amount (sale,purchase,bank,cash,journal)
            // 5-9 sgst amount (sale,purchase,bank,cash,journal)
            // 10-14 igst amount (sale,purchase,bank,cash,journal)
            // 15-19 balance amount (sale,purchase,bank,cash,journal)
            temporary_list_array.Clear();
            actual_line_number_of_page = 0;
            //report_filename = ConnectionWithAccess.data_drive + "acc\\" + ConnectionWithAccess.mNIK + "\\gst_reports\\" + ConnectionWithAccess.mNIK + "_gst_" + ConnectionWithAccess.mprd + "_difference_report.pdf";
            if (cmbDateRangeGST.Text != "Custom Range")
                report_filename = ConnectionWithAccess.data_drive + "acc\\" + ConnectionWithAccess.mNIK + "\\gst_reports\\" + cmbDateRangeGST.Text + "_" + Convert.ToDateTime(dtp_rg_from_date.Text).Year + "-" + (Convert.ToDateTime(dtp_rg_from_date.Text).Year + 1).ToString().Substring(2, 2) + "_GSTR1_" + ConnectionWithAccess.company_details[32] + "_difference_report.pdf";
            else
            {
                report_filename = ConnectionWithAccess.data_drive + "acc\\" + ConnectionWithAccess.mNIK + "\\gst_reports\\" + ConnectionWithAccess.mNIK + "_gst_" + ConnectionWithAccess.mprd + "_difference_report";
                report_filename += "_" + DateTime.Now.Day + "_" + DateTime.Now.Month + "_" + DateTime.Now.Year + "_" + DateTime.Now.TimeOfDay.Hours + "_" + DateTime.Now.TimeOfDay.Minutes;
                report_filename += ".pdf";
            }

            doc1 = new Document(PageSize.A4, 5, 5, 5, 5);
            ConnectionWithAccess.create_file_folder(report_filename);
            FileStream FS1 = File.Create(report_filename);
            writer = PdfWriter.GetInstance(doc1, FS1);
            // var current_print_line_position = writer.GetVerticalPosition(false);
            doc1.Open();
            current_pdf_page_number = 1;
            require_header_footer = false;
            //if (ckbx_Igst.Checked)
            Paragraph para = new Paragraph("");
            for (int i = 0; i < 6; i++)
            {
                temp_word = ConnectionWithAccess.company_details[i + 1];
                print_pdf_line_at_center(cour_9, temp_word, -5, "cour_9");
                actual_line_number_of_page++;
            }
            temp_word = "Period :" + dtp_rg_from_date.Text + "   -   " + dtp_rg_to_date.Text;
            if (cmbDateRangeGST.Text != "Custom Range")
                temp_word += "     (" + cmbDateRangeGST.Text + "   " + Convert.ToDateTime(dtp_rg_from_date.Text).Year + ")";
            print_pdf_line_at_center(cour_9_bold, temp_word, 0, "cour_9");
            temp_word = "G.S.T Tax Report" + " # " + ConnectionWithAccess.company_details[32];
            print_pdf_line_at_center(cour_9_bold, temp_word, 0, "cour_9");
            if (ckbx_add_gst_open_balance.Checked && cmbDateRangeGST.Text != "Custom Range")
            {
                temp_datetime = Convert.ToDateTime(dtp_rg_from_date.Text);
                temp_datetime = temp_datetime.AddMonths(-1);
                temp_word = temp_datetime.ToString("MMMM") + " " + temp_datetime.Year;
                ConnectionWithAccess.query = "select balance_amt from " + ConnectionWithAccess.tablename[12] + " where month = '" + temp_word + "' and tax_type = 'SGST'";
                //ConnectionWithAccess.query = "select balance_amt from " + ConnectionWithAccess.tablename[12] + " where prd = '" + ConnectionWithAccess.mprd + "' and month = '" + temp_word + "' and tax_type = 'SGST'";
                DataTable dtData1 = ConnectionCommand.fGetDataTable();
                if (dtData1 != null && dtData1.Rows.Count > 0)
                {
                    temp_double = Convert.ToDouble(dtData1.Rows[0][0].ToString());
                    gst_last_month_credit_debit_amount = temp_double;
                    if (temp_double > 0)
                    {
                        temp_word += " GST Credit of Rs.";
                        print_pdf_line(cour_11_bold, temp_word, 300, 10);
                        print_pdf_line(cour_11_bold, temp_double.ToString(), para_IndentationLeft_position(470, temp_double.ToString(), "cour_11_bold"), -16);
                    }
                    else
                    {
                        temp_word += " GST Debit of Rs.";
                        print_pdf_line(cour_11_bold, temp_word, 300, 10);
                        print_pdf_line(cour_11_bold, (temp_double * -1).ToString(), para_IndentationLeft_position(470, (temp_double * -1).ToString(), "cour_11_bold"), -16);
                    }
                }
            }
            temp_word = "G.S.T Sale's Report";
            print_pdf_line_at_center(cour_9_bold, temp_word, 10, "cour_9");
            add_gst_details_in_report_with_tax_details("S");
            add_gst_details_in_report_with_tax_details_Excel("S");
            add_gst_details_in_report_with_Item_details_Excel("S");
            temp_word = "G.S.T Purchase's Report";
            print_pdf_line_at_center(cour_9_bold, temp_word, 10, "cour_9");
            add_gst_details_in_report_with_tax_details("P");
            add_gst_details_in_report_with_tax_details_Excel("P");
            add_gst_details_in_report_with_Item_details_Excel("P");
            temp_word = "G.S.T Bank's Report";
            print_pdf_line_at_center(cour_9_bold, temp_word, 10, "cour_9");
            add_gst_details_in_report("B");
            add_gst_details_in_report_with_tax_details_Excel("B");
            temp_word = "G.S.T Cash's Report";
            print_pdf_line_at_center(cour_9_bold, temp_word, 10, "cour_9");
            add_gst_details_in_report("C");
            add_gst_details_in_report_with_tax_details_Excel("C");
            temp_word = "G.S.T Journal's Report";
            print_pdf_line_at_center(cour_9_bold, temp_word, 10, "cour_9");
            add_gst_details_in_report("J");
            add_gst_details_in_report_with_tax_details_Excel("J");

            //                               9999999999999999999.99,9999999999999999999.99,9999999999999999999.99,9999999999999999999.99,
            temp_word = "Purchase           Bank           Cash           Jour           Sale         Credit          Debit        Balance";
            //        99999999999.99,99999999999.99,99999999999.99,99999999999.99,99999999999.99,99999999999.99,99999999999.99,99999999999.99,
            print_pdf_line(cour_11, temp_word, 60, 0);
            if (gst_last_month_credit_debit_amount != 0)
            {
                if (gst_last_month_credit_debit_amount > 0)
                    temp_word = "Last Month Credit";
                else
                    temp_word = "Last Month Debit";
                print_pdf_line(cour_11_bold, temp_word, 15, 0);
                temp_word = gst_last_month_credit_debit_amount.ToString();
                print_pdf_line(cour_11_bold, temp_word, para_IndentationLeft_position(470, temp_word, "cour_11_bold"), -16);
                gst_debit_credit_amount += gst_last_month_credit_debit_amount;
            }
            temp_word = "IGST";
            print_pdf_line(cour_11_bold, temp_word, 15, 0);
            temp_word = String.Format("{0:0.00}", gst_amount_list[11].ToString());
            if (!temp_word.Contains("."))
                temp_word += ".00";
            print_pdf_line(cour_11_bold, temp_word, para_IndentationLeft_position(35, temp_word, "cour_11_bold"), -16);
            temp_word = String.Format("{0:0.00}", gst_amount_list[12].ToString());
            if (!temp_word.Contains("."))
                temp_word += ".00";
            print_pdf_line(cour_11_bold, temp_word, para_IndentationLeft_position(95, temp_word, "cour_11_bold"), -16);
            temp_word = String.Format("{0:0.00}", gst_amount_list[13].ToString());
            if (!temp_word.Contains("."))
                temp_word += ".00";
            print_pdf_line(cour_11_bold, temp_word, para_IndentationLeft_position(155, temp_word, "cour_11_bold"), -16);
            temp_word = String.Format("{0:0.00}", gst_amount_list[14].ToString());
            if (!temp_word.Contains("."))
                temp_word += ".00";
            print_pdf_line(cour_11_bold, temp_word, para_IndentationLeft_position(215, temp_word, "cour_11_bold"), -16);
            temp_word = String.Format("{0:0.00}", gst_amount_list[10].ToString());
            if (!temp_word.Contains("."))
                temp_word += ".00";
            print_pdf_line(cour_11_bold, temp_word, para_IndentationLeft_position(275, temp_word, "cour_11_bold"), -16);
            temp_double = Convert.ToDouble(gst_amount_list[11]) + Convert.ToDouble(gst_amount_list[12]) + Convert.ToDouble(gst_amount_list[13]) + Convert.ToDouble(gst_amount_list[14]);
            if (temp_double > Convert.ToDouble(gst_amount_list[10]))
            {
                temp_double = temp_double - Convert.ToDouble(gst_amount_list[10]);
                temp_word = String.Format("{0:0.00}", temp_double.ToString());
                if (!temp_word.Contains("."))
                    temp_word += ".00";
                gst_amount_list[15] = temp_word;
                print_pdf_line(cour_11_bold, temp_word, para_IndentationLeft_position(335, temp_word, "cour_11_bold"), -16);
                gst_debit_credit_amount += temp_double;
            }
            else
            {
                temp_double = Convert.ToDouble(gst_amount_list[10]) - temp_double;
                temp_word = String.Format("{0:0.00}", temp_double.ToString());
                if (!temp_word.Contains("."))
                    temp_word += ".00";
                gst_amount_list[16] = temp_word;
                print_pdf_line(cour_11_bold, temp_word, para_IndentationLeft_position(395, temp_word, "cour_11_bold"), -16);
                gst_debit_credit_amount -= temp_double;
            }
            gst_debit_credit_amount = Math.Round(gst_debit_credit_amount, 2);
            temp_word = String.Format("{0:0.00}", gst_debit_credit_amount.ToString());
            if (!temp_word.Contains("."))
                temp_word += ".00";
            gst_amount_list[17] = temp_word;
            print_pdf_line(cour_11_bold, temp_word, para_IndentationLeft_position(470, temp_word, "cour_11_bold"), -16);

            temp_word = "CGST";
            print_pdf_line(cour_11_bold, temp_word, 15, 0);
            temp_word = String.Format("{0:0.00}", gst_amount_list[1].ToString());
            if (!temp_word.Contains("."))
                temp_word += ".00";
            print_pdf_line(cour_11_bold, temp_word, para_IndentationLeft_position(35, temp_word, "cour_11_bold"), -16);
            temp_word = String.Format("{0:0.00}", gst_amount_list[2]);
            if (!temp_word.Contains("."))
                temp_word += ".00";
            print_pdf_line(cour_11_bold, temp_word, para_IndentationLeft_position(95, temp_word, "cour_11_bold"), -16);
            temp_word = String.Format("{0:0.00}", gst_amount_list[3]);
            if (!temp_word.Contains("."))
                temp_word += ".00";
            print_pdf_line(cour_11_bold, temp_word, para_IndentationLeft_position(155, temp_word, "cour_11_bold"), -16);
            temp_word = String.Format("{0:0.00}", gst_amount_list[4]);
            if (!temp_word.Contains("."))
                temp_word += ".00";
            print_pdf_line(cour_11_bold, temp_word, para_IndentationLeft_position(215, temp_word, "cour_11_bold"), -16);
            temp_word = String.Format("{0:0.00}", gst_amount_list[0]);
            if (!temp_word.Contains("."))
                temp_word += ".00";
            print_pdf_line(cour_11_bold, temp_word, para_IndentationLeft_position(275, temp_word, "cour_11_bold"), -16);
            temp_double = Convert.ToDouble(gst_amount_list[1]) + Convert.ToDouble(gst_amount_list[2]) + Convert.ToDouble(gst_amount_list[3]) + Convert.ToDouble(gst_amount_list[4]);
            if (temp_double > Convert.ToDouble(gst_amount_list[0]))
            {
                temp_double = temp_double - Convert.ToDouble(gst_amount_list[0]);
                temp_double = Math.Round(temp_double, 2);
                temp_word = String.Format("{0:0.00}", temp_double.ToString());
                if (!temp_word.Contains("."))
                    temp_word += ".00";
                gst_amount_list[18] = temp_word;
                print_pdf_line(cour_11_bold, temp_word, para_IndentationLeft_position(335, temp_word, "cour_11_bold"), -16);
                gst_debit_credit_amount += temp_double;
            }
            else
            {
                temp_double = Convert.ToDouble(gst_amount_list[0]) - temp_double;
                temp_double = Math.Round(temp_double, 2);
                temp_word = String.Format("{0:0.00}", temp_double.ToString());
                if (!temp_word.Contains("."))
                    temp_word += ".00";
                gst_amount_list[19] = temp_word;
                print_pdf_line(cour_11_bold, temp_word, para_IndentationLeft_position(395, temp_word, "cour_11_bold"), -16);
                gst_debit_credit_amount -= temp_double;
            }
            gst_debit_credit_amount = Math.Round(gst_debit_credit_amount, 2);
            temp_word = String.Format("{0:0.00}", gst_debit_credit_amount.ToString());
            gst_amount_list[20] = temp_word;
            print_pdf_line(cour_11_bold, temp_word, para_IndentationLeft_position(470, temp_word, "cour_11_bold"), -16);
            temp_word = "SGST";
            print_pdf_line(cour_11_bold, temp_word, 15, 0);
            temp_word = String.Format("{0:0.00}", gst_amount_list[6].ToString());
            if (!temp_word.Contains("."))
                temp_word += ".00";
            print_pdf_line(cour_11_bold, temp_word, para_IndentationLeft_position(35, temp_word, "cour_11_bold"), -16);
            temp_word = String.Format("{0:0.00}", gst_amount_list[7].ToString());
            if (!temp_word.Contains("."))
                temp_word += ".00";
            print_pdf_line(cour_11_bold, temp_word, para_IndentationLeft_position(95, temp_word, "cour_11_bold"), -16);
            temp_word = String.Format("{0:0.00}", gst_amount_list[8].ToString());
            if (!temp_word.Contains("."))
                temp_word += ".00";
            print_pdf_line(cour_11_bold, temp_word, para_IndentationLeft_position(155, temp_word, "cour_11_bold"), -16);
            temp_word = String.Format("{0:0.00}", gst_amount_list[9].ToString());
            if (!temp_word.Contains("."))
                temp_word += ".00";
            print_pdf_line(cour_11_bold, temp_word, para_IndentationLeft_position(215, temp_word, "cour_11_bold"), -16);
            temp_word = String.Format("{0:0.00}", gst_amount_list[5].ToString());
            if (!temp_word.Contains("."))
                temp_word += ".00";
            print_pdf_line(cour_11_bold, temp_word, para_IndentationLeft_position(275, temp_word, "cour_11_bold"), -16);
            temp_double = Convert.ToDouble(gst_amount_list[6]) + Convert.ToDouble(gst_amount_list[7]) + Convert.ToDouble(gst_amount_list[8]) + Convert.ToDouble(gst_amount_list[9]);
            if (temp_double > Convert.ToDouble(gst_amount_list[5]))
            {
                temp_double = temp_double - Convert.ToDouble(gst_amount_list[5]);
                temp_double = Math.Round(temp_double, 2);
                temp_word = String.Format("{0:0.00}", temp_double.ToString());
                if (!temp_word.Contains("."))
                    temp_word += ".00";
                gst_amount_list[21] = temp_word;
                print_pdf_line(cour_11_bold, temp_word, para_IndentationLeft_position(335, temp_word, "cour_11_bold"), -16);
                gst_debit_credit_amount += temp_double;
            }
            else
            {
                temp_double = Convert.ToDouble(gst_amount_list[5]) - temp_double;
                temp_double = Math.Round(temp_double, 2);
                temp_word = String.Format("{0:0.00}", temp_double.ToString());
                if (!temp_word.Contains("."))
                    temp_word += ".00";
                gst_amount_list[22] = temp_word;
                print_pdf_line(cour_11_bold, temp_word, para_IndentationLeft_position(395, temp_word, "cour_11_bold"), -16);
                gst_debit_credit_amount -= temp_double;
            }
            gst_debit_credit_amount = Math.Round(gst_debit_credit_amount, 2);
            temp_word = String.Format("{0:0.00}", gst_debit_credit_amount.ToString());
            gst_amount_list[23] = temp_word;
            print_pdf_line(cour_11_bold, temp_word, para_IndentationLeft_position(470, temp_word, "cour_11_bold"), -16);
            if (cmbDateRangeGST.Text != "Custom Range")
            {
                temp_word = cmbDateRangeGST.Text + " " + Convert.ToDateTime(dtp_rg_from_date.Text).Year;
                if (gst_debit_credit_amount > 0)
                    temp_word += " GST Credit of Rs." + gst_debit_credit_amount.ToString();
                else
                    temp_word += " GST Debit of Rs." + (gst_debit_credit_amount * -1).ToString();
                print_pdf_line(cour_15_bold, temp_word, 150, 10);
            }
            temp_double = 0;
            payment_made_in_gst();
            if (temp_double > 0)
            {
                gst_amount_list[23] = (Convert.ToSingle(gst_amount_list[23]) + temp_double).ToString();
                gst_debit_credit_amount = gst_debit_credit_amount + temp_double;
                if (cmbDateRangeGST.Text != "Custom Range")
                {
                    temp_word = cmbDateRangeGST.Text + " " + Convert.ToDateTime(dtp_rg_from_date.Text).Year;
                    if (gst_debit_credit_amount > 0)
                        temp_word += " GST Credit of Rs." + gst_debit_credit_amount.ToString();
                    else
                        temp_word += " GST Debit of Rs." + (gst_debit_credit_amount * -1).ToString();
                    print_pdf_line(cour_15_bold, temp_word, 150, 10);
                }
            }
            temp_word = "For " + ConnectionWithAccess.company_details[1];
            print_pdf_line(cour_9, temp_word, 366 - temp_word.Length, 0);
            temp_word = "Prop.";
            print_pdf_line(cour_9, temp_word, 520, 20);
            doc1.Close();
            require_header_footer = true;
        }

        private void payment_made_in_gst()
        {
            temp_word = "";
            DataTable dtDateData = null;
            StringBuilder strQuery = new StringBuilder();
            ConnectionWithAccess.query = query_contains_for_ledger_account_union("70GT1", "@@@", dtp_rg_to_date.Text);
            dtDateData = ConnectionCommand.fGetDataTable();
            if (dtDateData.Rows.Count > 0)
            {
                if (dtDateData != null)
                {
                    if (Convert.ToDateTime(dtp_rg_from_date.Text) > Convert.ToDateTime(ConnectionWithAccess.com_start_date))
                    {
                        DataView view = new DataView(dtDateData);
                        view.Sort = "[Date] asc";
                        DataTable dtNewTable1 = view.ToTable();
                        for (int i = 0; i < dtNewTable1.Rows.Count; i++)
                        {
                            DataRow dr = dtNewTable1.Rows[i];
                            if (Convert.ToDateTime(dr["date"].ToString()) > Convert.ToDateTime(dtp_rg_from_date.Text))
                            {
                                //temp_word = String.Format("{0:0.00}", gst_amount_list[6].ToString());
                                temp_word = dtNewTable1.Rows[i]["date"].ToString();
                                if (temp_word.Contains(" "))
                                    temp_word = temp_word.Substring(0, temp_word.IndexOf(" "));
                                print_pdf_line(cour_11_bold, temp_word, para_IndentationLeft_position(35, temp_word, "cour_11_bold"), 0);
                                temp_word = "Payment Done ";
                                print_pdf_line(cour_11_bold, temp_word, para_IndentationLeft_position(125, temp_word, "cour_11_bold"), -16);
                                temp_word = String.Format("{0:0.00}", dtNewTable1.Rows[i]["debit"].ToString());
                                print_pdf_line(cour_11_bold, temp_word, para_IndentationLeft_position(470, temp_word, "cour_11_bold"), -16);
                                temp_double += Convert.ToSingle(dtNewTable1.Rows[i]["debit"].ToString());
                            }
                        }
                    }
                }
            }
        }

        private void add_gst_details_in_report_with_tax_details(string book)
        {
            dgv_gst_report.DataSource = null;
            gst_csv_list.Clear();
            if (book == "S")
            {
                ConnectionWithAccess.query = "select distinct d_c from " + ConnectionWithAccess.tablename[21] + " where d_n = 999999";
                ConnectionCommand.retrieval(cb_rg_d_c);
                rg_a_n.Text = get_a_n_from_d_c("S", Convert.ToInt32(cb_rg_d_c.Text));
                ConnectionWithAccess.query = "select distinct f21.D_D, f21.D_N, f1.[desc] as [Desc], f1.city, f1.gst_number, f21.bamt,f21.CGST_AMT, f21.SGST_AMT,f21.IGST_AMT,f21.rund_amt, f21.gamt,f21.prd,f21.d_c,f21.d_n,f21.a_n,f21.s_a,freight_AMT,packing_AMT,insurance_AMT,other_AMT  from " + ConnectionWithAccess.tablename[1] + " f1, " + ConnectionWithAccess.tablename[21] + " f21 where f1.a_n = f21.a_n and f1.s_a = f21.s_a  and f1.d_y = f21.d_y and f21.prd = '" + ConnectionWithAccess.mprd + "' and f21.d_d >= @From and f21.d_d <= @To and f21.d_c = " + cb_rg_d_c.Text + " order by f21.d_n";
                parameters_for_date_range(dtp_rg_from_date.Text, dtp_rg_to_date.Text);
                ConnectionCommand.accountHelp_datatable_Seperate(dgv_gst_report, "Gst Sale List");


                for (row_pointer = 0; row_pointer < dgv_gst_report.Rows.Count; row_pointer++)
                {
                    if ((dgv_gst_report.Rows[row_pointer].Cells[0].Value != System.DBNull.Value) && (dgv_gst_report.Rows[row_pointer].Cells[1].Value != System.DBNull.Value) && (dgv_gst_report.Rows[row_pointer].Cells[0].Value != null) && (dgv_gst_report.Rows[row_pointer].Cells[1].Value != null))
                    {
                        temp_word2 = dgv_gst_report.Rows[row_pointer].Cells[0].Value.ToString();
                        temp_word2 = temp_word2.Substring(0, temp_word2.IndexOf(" "));
                        temp_word = "S," + temp_word2 + "-" + dgv_gst_report.Rows[row_pointer].Cells[1].Value.ToString();
                        temp_word += ",";
                        temp_word += dgv_gst_report.Rows[row_pointer].Cells[2].Value.ToString().Replace(",", "") + " ," + dgv_gst_report.Rows[row_pointer].Cells[3].Value.ToString();
                        temp_word += ",";
                        temp_word += dgv_gst_report.Rows[row_pointer].Cells[4].Value.ToString();
                        temp_word += ",";
                        if (dgv_gst_report.Rows[row_pointer].Cells[5].Value != null && dgv_gst_report.Rows[row_pointer].Cells[5].Value != System.DBNull.Value)
                            temp_word += (dgv_gst_report.Rows[row_pointer].Cells[5].Value.ToString());
                        temp_word += ",";
                        if (dgv_gst_report.Rows[row_pointer].Cells[6].Value != null && dgv_gst_report.Rows[row_pointer].Cells[6].Value != System.DBNull.Value)
                            temp_word += (dgv_gst_report.Rows[row_pointer].Cells[6].Value.ToString());
                        temp_word += ",";
                        if (dgv_gst_report.Rows[row_pointer].Cells[7].Value != null && dgv_gst_report.Rows[row_pointer].Cells[7].Value != System.DBNull.Value)
                            temp_word += (dgv_gst_report.Rows[row_pointer].Cells[7].Value.ToString());
                        temp_word += ",";
                        if (dgv_gst_report.Rows[row_pointer].Cells[8].Value != null && dgv_gst_report.Rows[row_pointer].Cells[8].Value != System.DBNull.Value)
                            temp_word += (dgv_gst_report.Rows[row_pointer].Cells[8].Value.ToString());
                        temp_word += ",";
                        if (dgv_gst_report.Rows[row_pointer].Cells[9].Value != null && dgv_gst_report.Rows[row_pointer].Cells[9].Value != System.DBNull.Value)
                            temp_word += (dgv_gst_report.Rows[row_pointer].Cells[9].Value.ToString());
                        temp_word += ",";
                        temp_word += "," + dgv_gst_report.Rows[row_pointer].Cells[10].Value.ToString();
                        temp_word += "," + dgv_gst_report.Rows[row_pointer].Cells[11].Value.ToString();
                        temp_word += "," + dgv_gst_report.Rows[row_pointer].Cells[12].Value.ToString();
                        temp_word += "," + dgv_gst_report.Rows[row_pointer].Cells[13].Value.ToString();
                        temp_word += "," + dgv_gst_report.Rows[row_pointer].Cells[14].Value.ToString();
                        temp_word += "," + dgv_gst_report.Rows[row_pointer].Cells[15].Value.ToString();
                        temp_word += "," + dgv_gst_report.Rows[row_pointer].Cells[16].Value.ToString();
                        temp_word += "," + dgv_gst_report.Rows[row_pointer].Cells[17].Value.ToString();
                        temp_word += "," + dgv_gst_report.Rows[row_pointer].Cells[18].Value.ToString();
                        temp_word += "," + dgv_gst_report.Rows[row_pointer].Cells[19].Value.ToString();
                        gst_csv_list.Add(temp_word);
                        //temp_word2 = dgv_gst_report.Rows[row_pointer].Cells["freight_AMT"].Value.ToString();
                        double.TryParse(dgv_gst_report.Rows[row_pointer].Cells["freight_AMT"].Value.ToString(), out temp_double);
                        if (temp_double > 0.00)
                        {
                            temp_word = "S,,,Freight Charges,' ',,," + temp_double.ToString() + ",,,,,,,,,,,,,,,,,,,,,,";
                            gst_csv_list.Add(temp_word);
                        }
                    }
                }
            }
            else if (book == "P")
            {
                ConnectionWithAccess.query = "select distinct d_c from " + ConnectionWithAccess.tablename[22] + " where d_n = 999999";
                ConnectionCommand.retrieval(cb_rg_d_c);
                rg_a_n.Text = get_a_n_from_d_c("P", Convert.ToInt32(cb_rg_d_c.Text));
                //ConnectionWithAccess.query = "select tpt, bamt, tamt, rund_amt, gamt, tx_code, d_d,freight_AMT,packing_AMT,insurance_AMT,other_AMT,cgst_amt, sgst_amt,igst_amt,IGST_PACK_PER from " + ConnectionWithAccess.tablename[22] + " f22 where d_n " + (pidocno.Text.Trim() == string.Empty ? "is null" : "= " + pidocno.Text.Trim()) + " and prd = '" + ConnectionWithAccess.mprd + "' and d_c = " + Convert.ToInt32(pidbc.SelectedValue.ToString()) + " and s_a = '" + pis_a.Text + "'";
                ConnectionWithAccess.query = "select distinct f22.D_D, f22.D_N, f1.[desc] as [Desc], f1.city, f1.gst_number, f22.bamt,f22.CGST_AMT, f22.SGST_AMT,f22.IGST_AMT,f22.rund_amt, f22.gamt,f22.prd,f22.d_c,f22.d_n,f22.a_n,f22.s_a,freight_AMT,packing_AMT,insurance_AMT,other_AMT from " + ConnectionWithAccess.tablename[22] + " f22 inner join " + ConnectionWithAccess.tablename[1] + " f1 on f1.A_N = f22.A_N and f1.S_A = f22.S_A and f1.d_y = f22.d_y where f22.prd = '" + ConnectionWithAccess.mprd + "' and f22.d_d >= @From and f22.d_d <= @To and f22.d_c = " + cb_rg_d_c.Text + " order by f22.d_d";
                //ConnectionWithAccess.query = "select distinct f22.D_D, f22.D_N, f1.[desc] as [Desc], f1.city, f1.gst_number, f22.bamt,f22.CGST_AMT, f22.SGST_AMT,f22.IGST_AMT,f22.rund_amt, f22.gamt,f22.prd,f22.d_c,f22.d_n,f22.a_n,f22.s_a,freight_AMT,packing_AMT,insurance_AMT,other_AMT from " + ConnectionWithAccess.tablename[1] + " f1, " + ConnectionWithAccess.tablename[22] + " f22 where f1.a_n = f22.a_n and f1.s_a = f22.s_a and f22.prd = '" + ConnectionWithAccess.mprd + "' and f22.d_d >= @From and f22.d_d <= @To and f22.d_c = " + cb_rg_d_c.Text + " order by f22.d_d";
                parameters_for_date_range(dtp_rg_from_date.Text, dtp_rg_to_date.Text);
                ConnectionCommand.accountHelp_datatable_Seperate(dgv_gst_report, "Gst Purchase List");
                for (row_pointer = 0; row_pointer < dgv_gst_report.Rows.Count; row_pointer++)
                {
                    if ((dgv_gst_report.Rows[row_pointer].Cells[0].Value != System.DBNull.Value) && (dgv_gst_report.Rows[row_pointer].Cells[1].Value != System.DBNull.Value) && (dgv_gst_report.Rows[row_pointer].Cells[0].Value != null) && (dgv_gst_report.Rows[row_pointer].Cells[1].Value != null))
                    {
                        temp_word2 = dgv_gst_report.Rows[row_pointer].Cells[0].Value.ToString();
                        temp_word2 = temp_word2.Substring(0, temp_word2.IndexOf(" "));
                        temp_word = "P," + temp_word2 + "-" + dgv_gst_report.Rows[row_pointer].Cells[1].Value.ToString();
                        temp_word += ",";
                        temp_word += dgv_gst_report.Rows[row_pointer].Cells[2].Value.ToString().Replace(",", "") + " ," + dgv_gst_report.Rows[row_pointer].Cells[3].Value.ToString();
                        temp_word += ",";
                        temp_word += dgv_gst_report.Rows[row_pointer].Cells[4].Value.ToString();
                        temp_word += ",";
                        if (dgv_gst_report.Rows[row_pointer].Cells[5].Value != null && dgv_gst_report.Rows[row_pointer].Cells[5].Value != System.DBNull.Value)
                            temp_word += (dgv_gst_report.Rows[row_pointer].Cells[5].Value.ToString());
                        temp_word += ",";
                        if (dgv_gst_report.Rows[row_pointer].Cells[6].Value != null && dgv_gst_report.Rows[row_pointer].Cells[6].Value != System.DBNull.Value)
                            temp_word += (dgv_gst_report.Rows[row_pointer].Cells[6].Value.ToString());
                        temp_word += ",";
                        if (dgv_gst_report.Rows[row_pointer].Cells[7].Value != null && dgv_gst_report.Rows[row_pointer].Cells[7].Value != System.DBNull.Value)
                            temp_word += (dgv_gst_report.Rows[row_pointer].Cells[7].Value.ToString());
                        temp_word += ",";
                        if (dgv_gst_report.Rows[row_pointer].Cells[8].Value != null && dgv_gst_report.Rows[row_pointer].Cells[8].Value != System.DBNull.Value)
                            temp_word += (dgv_gst_report.Rows[row_pointer].Cells[8].Value.ToString());
                        temp_word += ",";
                        if (dgv_gst_report.Rows[row_pointer].Cells[9].Value != null && dgv_gst_report.Rows[row_pointer].Cells[9].Value != System.DBNull.Value)
                            temp_word += (dgv_gst_report.Rows[row_pointer].Cells[9].Value.ToString());
                        temp_word += "," + dgv_gst_report.Rows[row_pointer].Cells[10].Value.ToString();
                        temp_word += "," + dgv_gst_report.Rows[row_pointer].Cells[11].Value.ToString();
                        temp_word += "," + dgv_gst_report.Rows[row_pointer].Cells[12].Value.ToString();
                        temp_word += "," + dgv_gst_report.Rows[row_pointer].Cells[13].Value.ToString();
                        temp_word += "," + dgv_gst_report.Rows[row_pointer].Cells[14].Value.ToString();
                        temp_word += "," + dgv_gst_report.Rows[row_pointer].Cells[15].Value.ToString();
                        temp_word += "," + dgv_gst_report.Rows[row_pointer].Cells[16].Value.ToString();
                        temp_word += "," + dgv_gst_report.Rows[row_pointer].Cells[17].Value.ToString();
                        temp_word += "," + dgv_gst_report.Rows[row_pointer].Cells[18].Value.ToString();
                        temp_word += "," + dgv_gst_report.Rows[row_pointer].Cells[19].Value.ToString();
                        gst_csv_list.Add(temp_word);
                        //temp_word2 = dgv_gst_report.Rows[row_pointer].Cells["freight_AMT"].Value.ToString();
                        double.TryParse(dgv_gst_report.Rows[row_pointer].Cells["freight_AMT"].Value.ToString(), out temp_double);
                        if (temp_double > 0.00)
                        {
                            temp_word = "P,,,Freight Charges,' ',,," + temp_double.ToString() + ",,,,,,,,,,,,,,,,,,,,,,";
                            gst_csv_list.Add(temp_word);
                        }
                    }
                }
            }
            else if (book == "B")
            {
                ConnectionWithAccess.query = "select distinct d_c from " + ConnectionWithAccess.tablename[23] + " where d_n = 999999";
                ConnectionCommand.retrieval(cb_rg_d_c);
                rg_a_n.Text = get_a_n_from_d_c("B", Convert.ToInt32(cb_rg_d_c.Text));
                //ConnectionWithAccess.query = "select f23.D_D, f23.D_N, f1.[desc] as [Desc], f1.city, f1.gst_number, f23.bamt,f23.CGST_AMT, f23.SGST_AMT,f23.IGST_AMT, f23.gamt from " + ConnectionWithAccess.tablename[1] + " f1, " + ConnectionWithAccess.tablename[23] + " f23 where f1.a_n = f23.a_n and f1.s_a = f23.s_a and f23.prd = '" + ConnectionWithAccess.mprd + "' and f23.d_d >= @From and f23.d_d <= @To and f23.igst_amt > 0 order by f23.d_d";
                ConnectionWithAccess.query = "select f23.D_D, f23.D_N, f1.[desc] as [Desc], f1.city, f1.gst_number, ((-f23.igst_amt - f23.bamt)) ,f23.IGST_AMT, (f23.bamt * -1) from " + ConnectionWithAccess.tablename[1] + " f1, " + ConnectionWithAccess.tablename[23] + " f23 where f1.a_n = f23.a_n and f1.s_a = f23.s_a and f23.prd = '" + ConnectionWithAccess.mprd + "' and f23.d_d >= @From and f23.d_d <= @To and f23.igst_amt > 0 order by f23.d_d";
                parameters_for_date_range(dtp_rg_from_date.Text, dtp_rg_to_date.Text);
                ConnectionCommand.accountHelp_datatable_Seperate(dgv_gst_report, "Gst Bank List");
            }
            else if (book == "C")
            {
                ConnectionWithAccess.query = "select distinct d_c from " + ConnectionWithAccess.tablename[24] + " where d_n = 999999";
                ConnectionCommand.retrieval(cb_rg_d_c);
                rg_a_n.Text = get_a_n_from_d_c("C", Convert.ToInt32(cb_rg_d_c.Text));
                //ConnectionWithAccess.query = "select f23.D_D, f23.D_N, f1.[desc] as [Desc], f1.city, f1.gst_number, f23.bamt,f23.CGST_AMT, f23.SGST_AMT,f23.IGST_AMT, f23.gamt from " + ConnectionWithAccess.tablename[1] + " f1, " + ConnectionWithAccess.tablename[23] + " f23 where f1.a_n = f23.a_n and f1.s_a = f23.s_a and f23.prd = '" + ConnectionWithAccess.mprd + "' and f23.d_d >= @From and f23.d_d <= @To and f23.igst_amt > 0 order by f23.d_d";
                ConnectionWithAccess.query = "select f24.D_D, f24.D_N, f1.[desc] as [Desc], f1.city, f1.gst_number, f24.basic_amt ,f24.IGST_AMT, f24.camt from " + ConnectionWithAccess.tablename[1] + " f1, " + ConnectionWithAccess.tablename[24] + " f24 where f1.a_n = f24.a_n and f1.s_a = f24.s_a and f24.prd = '" + ConnectionWithAccess.mprd + "' and f24.d_d >= @From and f24.d_d <= @To and f24.igst_amt > 0 order by f24.d_d";
                parameters_for_date_range(dtp_rg_from_date.Text, dtp_rg_to_date.Text);
                ConnectionCommand.accountHelp_datatable_Seperate(dgv_gst_report, "Gst Cash List");
            }
            else if (book == "J")
            {
                ConnectionWithAccess.query = "select distinct d_c from " + ConnectionWithAccess.tablename[25] + " where d_n = 999999";
                ConnectionCommand.retrieval(cb_rg_d_c);
                rg_a_n.Text = get_a_n_from_d_c("J", Convert.ToInt32(cb_rg_d_c.Text));
                //ConnectionWithAccess.query = "select f25.D_D, f25.D_N, f1.[desc] as [Desc], f1.city, f1.gst_number, ((-f25.igst_amt - f25.jamt)) ,f25.IGST_AMT, (f25.jamt * -1) from " + ConnectionWithAccess.tablename[25] + " f25 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f25.A_N = f1.A_N and f25.S_A = f1.S_A where f25.prd = '" + ConnectionWithAccess.mprd + "' and f25.igst_amt > 0 order by f25.d_d";
                ConnectionWithAccess.query = "select f25.D_D, f25.D_N, f1.[desc] as [Desc], f1.city, f1.gst_number, f25.basic_amt, f25.IGST_AMT, f25.jamt from " + ConnectionWithAccess.tablename[25] + " f25 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f25.A_N = f1.A_N and f25.S_A = f1.S_A where f25.prd = '" + ConnectionWithAccess.mprd + "' and f25.d_d >= @From and f25.d_d <= @To and f25.igst_amt > 0 order by f25.d_d";
                parameters_for_date_range(dtp_rg_from_date.Text, dtp_rg_to_date.Text);
                ConnectionCommand.accountHelp_datatable_Seperate(dgv_gst_report, "Gst Journal List");
            }
            temp_word = "Date - Inv.                        Party's Name       City                             Gst Number                           Basic Amount       Cgst Amount        Sgst Amount        Igst Amount        Gross Amount";
            pdf_top_heading = temp_word;
            //                                                                                                 x00000000000000x00000000000000x00000000000000x00000000000000x0000000000000
            print_pdf_line(cour_7, temp_word, 10, 0);
            double bamt = 0, cgst_amt = 0, sgst_amt = 0, igst_amt = 0, gamt = 0;
            temp_word1 = "";
            for (row_pointer = 0; row_pointer < gst_csv_list.Count(); row_pointer++)
            {
                temp_double2 = 0;
                if (row_pointer == 13)
                    temp_word = "sanjay";
                var cellArray = gst_csv_list[row_pointer].Split(new[] { ',' });
                if (cellArray[0] == "S" && book == "S")
                {
                    if (cellArray[4] != "")
                        print_pdf_line(cour_7, cellArray[1], 10, -3);
                    else
                        print_pdf_line(cour_9_bold, cellArray[1], 10, -3);
                    temp_word = cellArray[2] + " ," + cellArray[3];
                    if (temp_word.Length > 25)
                        temp_word = temp_word.Substring(0, 25);
                    print_pdf_line(cour_7, temp_word, 90, -16);
                    if (cellArray[4] != "")
                        print_pdf_line(cour_7, cellArray[4], 210, -16);
                    else
                        print_pdf_line(cour_7, "missing", 210, -16);
                    if (cellArray[5] != "")
                    {
                        temp_word = add_comma_to_number(cellArray[5]);
                        print_pdf_line(cour_7, temp_word, para_IndentationLeft_position(270, temp_word, "cour_7"), -16);
                        //bamt += Convert.ToDouble(dgv_gst_report.Rows[row_pointer].Cells[5].Value);
                        bamt += Convert.ToDouble(cellArray[5]);
                        temp_double2 += Convert.ToDouble(cellArray[5]);
                    }
                    if (cellArray[6] != "")
                    {
                        temp_word = add_comma_to_number(cellArray[6]);
                        print_pdf_line(cour_7, temp_word, para_IndentationLeft_position(325, temp_word, "cour_7"), -16);
                        //cgst_amt += Convert.ToDouble(dgv_gst_report.Rows[row_pointer].Cells[6].Value);
                        cgst_amt += Convert.ToDouble(cellArray[6]);
                        temp_double2 += Convert.ToDouble(cellArray[6]);
                    }
                    if (cellArray[7] != "")
                    {
                        temp_word = add_comma_to_number(cellArray[7]);
                        print_pdf_line(cour_7, temp_word, para_IndentationLeft_position(380, temp_word, "cour_7"), -16);
                        //sgst_amt += Convert.ToDouble(dgv_gst_report.Rows[row_pointer].Cells[7].Value);
                        if (cellArray[1] != "")  // empty means its for frieght charges which are not to be included in taxes
                        {
                            sgst_amt += Convert.ToDouble(cellArray[7]);
                            temp_double2 += Convert.ToDouble(cellArray[7]);
                        }
                    }
                    if (cellArray[8] != "")
                    {
                        temp_word = add_comma_to_number(cellArray[8]);
                        if (temp_word == "0.00" && cellArray[6] == "" && cellArray[7] == "")
                            print_pdf_line(cour_9_bold, "Tax Error", 430, -16);
                        else
                        {
                            print_pdf_line(cour_7, temp_word, para_IndentationLeft_position(435, temp_word, "cour_7"), -16);
                            igst_amt += Convert.ToDouble(cellArray[8]);
                        }
                        temp_double2 += Convert.ToDouble(cellArray[8]);
                    }
                    if (cellArray[9] != "" && cellArray[9] != "0.00")
                    {
                        temp_double2 += Convert.ToDouble(cellArray[9]);
                    }
                    if (cellArray[17] != "" && cellArray[17] != "0.00")
                    {
                        temp_double2 += Convert.ToDouble(cellArray[17]);
                    }
                    if (cellArray[18] != "" && cellArray[18] != "0.00")
                    {
                        temp_double2 += Convert.ToDouble(cellArray[18]);
                    }
                    if (cellArray[19] != "" && cellArray[19] != "0.00")
                    {
                        temp_double2 += Convert.ToDouble(cellArray[19]);
                    }
                    if (cellArray[11] != "")
                    {
                        temp_word = add_comma_to_number(cellArray[11]);
                        if (Math.Round(Convert.ToDouble(temp_word), 0) != Math.Round(temp_double2, 0))
                            print_pdf_line(cour_9_bold, temp_word, para_IndentationLeft_position(480, temp_word, "cour_9_bold"), -16);
                        else
                            print_pdf_line(cour_7, temp_word, para_IndentationLeft_position(480, temp_word, "cour_7"), -16);
                        //gamt += Convert.ToDouble(dgv_gst_report.Rows[row_pointer].Cells[10].Value);
                        gamt += Convert.ToDouble(cellArray[11]);
                    }
                    if (ck_gst_report_add_brief_tax.Checked)
                    {
                        //temp_d_n = Convert.ToInt32(cellArray[1].Substring(cellArray[1].IndexOf("-") +1, cellArray[1].Length - cellArray[1].IndexOf("-") -2));
                        if (cellArray[12] != "")
                        {
                            gst_tax_brief_sale_list(cellArray[0], cellArray[12], cellArray[13], cellArray[14], "", "");
                            if (gst_tax_brief_sale_list_array.Count() > 0)
                            {
                                for (row_counter = 0; row_counter < gst_tax_brief_sale_list_array.Count(); row_counter++)
                                {
                                    var cellArray1 = gst_tax_brief_sale_list_array[row_counter].Split(new[] { ',' });
                                    temp_word = cellArray1[0] + " %";
                                    print_pdf_line(cour_7, temp_word, para_IndentationLeft_position(60, temp_word, "cour_7"), -5);
                                    temp_word = cellArray1[1];
                                    print_pdf_line(cour_7, temp_word, para_IndentationLeft_position(120, temp_word, "cour_7"), -16);
                                    temp_word = cellArray1[2];
                                    print_pdf_line(cour_7, temp_word, para_IndentationLeft_position(200, temp_word, "cour_7"), -16);
                                }
                            }
                        }
                    }
                }
                else if (cellArray[0] == "P" && book == "P")
                {
                    temp_double2 = 0;
                    if (cellArray[4] != "")
                        print_pdf_line(cour_7, cellArray[1], 10, -3);
                    else
                        print_pdf_line(cour_9_bold, cellArray[1], 10, -3);
                    temp_word = cellArray[2] + " ," + cellArray[3];
                    if (temp_word.Length > 25)
                        temp_word = temp_word.Substring(0, 25);
                    if ((cellArray[6].ToString() == "" || cellArray[6].ToString() == "0.00") && (cellArray[7].ToString() == "" || cellArray[7].ToString() == "0.00") && (cellArray[8].ToString() == "" || cellArray[8].ToString() == "0.00"))
                        print_pdf_line(cour_9_bold, temp_word, 90, -16);
                    else
                        print_pdf_line(cour_7, temp_word, 90, -16);
                    if (cellArray[4] != "")
                        print_pdf_line(cour_7, cellArray[4], 210, -16);
                    else
                        print_pdf_line(cour_7, "missing", 210, -16);
                    if (cellArray[5] != "")
                    {
                        temp_word = add_comma_to_number(cellArray[5]);
                        print_pdf_line(cour_7, temp_word, para_IndentationLeft_position(270, temp_word, "cour_7"), -16);
                        bamt += Convert.ToDouble(cellArray[5]);
                        temp_double2 += Convert.ToDouble(cellArray[5]);
                    }
                    if (cellArray[6] != "")
                    {
                        temp_word = add_comma_to_number(cellArray[6]);
                        print_pdf_line(cour_7, temp_word, para_IndentationLeft_position(325, temp_word, "cour_7"), -16);
                        cgst_amt += Convert.ToDouble(cellArray[6]);
                        temp_double2 += Convert.ToDouble(cellArray[6]);
                    }
                    if (cellArray[7] != "")
                    {
                        temp_word = add_comma_to_number(cellArray[7]);
                        print_pdf_line(cour_7, temp_word, para_IndentationLeft_position(380, temp_word, "cour_7"), -16);
                        sgst_amt += Convert.ToDouble(cellArray[7]);
                        temp_double2 += Convert.ToDouble(cellArray[7]);
                    }
                    if (cellArray[8] != "" && cellArray[8] != "0.00")
                    {
                        temp_word = add_comma_to_number(cellArray[8]);
                        print_pdf_line(cour_7, temp_word, para_IndentationLeft_position(435, temp_word, "cour_7"), -16);
                        igst_amt += Convert.ToDouble(cellArray[8]);
                        temp_double2 += Convert.ToDouble(cellArray[8]);
                    }
                    if (cellArray[9] != "" && cellArray[9] != "0.00")
                    {
                        temp_double2 += Convert.ToDouble(cellArray[9]);
                    }
                    if (cellArray[16] != "" && cellArray[16] != "0.00")
                    {
                        temp_double2 += Convert.ToDouble(cellArray[16]);
                    }
                    if (cellArray[17] != "" && cellArray[17] != "0.00")
                    {
                        temp_double2 += Convert.ToDouble(cellArray[17]);
                    }
                    if (cellArray[10] != "")
                    {
                        temp_word = add_comma_to_number(cellArray[10]);
                        if (Math.Round(Convert.ToDouble(temp_word), 0) != Math.Round(temp_double2, 0))
                            print_pdf_line(cour_9_bold, temp_word, para_IndentationLeft_position(490, temp_word, "cour_9_bold"), -16);
                        else
                            print_pdf_line(cour_7, temp_word, para_IndentationLeft_position(490, temp_word, "cour_7"), -16);
                        gamt += Convert.ToDouble(cellArray[10]);
                    }
                    if (ck_gst_report_add_brief_tax.Checked)
                    {
                        //temp_d_n = Convert.ToInt32(cellArray[1].Substring(cellArray[1].IndexOf("-") + 1, cellArray[1].Length - cellArray[1].IndexOf("-") - 2));
                        if (cellArray[1].ToString() != "")
                            gst_tax_brief_sale_list(cellArray[0], cellArray[11], cellArray[12], cellArray[13], cellArray[14], cellArray[15]);
                        if (gst_tax_brief_sale_list_array.Count() > 0)
                        {
                            for (row_counter = 0; row_counter < gst_tax_brief_sale_list_array.Count(); row_counter++)
                            {
                                var cellArray1 = gst_tax_brief_sale_list_array[row_counter].Split(new[] { ',' });
                                temp_word = cellArray1[0] + " %";
                                print_pdf_line(cour_7, temp_word, para_IndentationLeft_position(60, temp_word, "cour_7"), -5);
                                temp_word = cellArray1[1];
                                print_pdf_line(cour_7, temp_word, para_IndentationLeft_position(120, temp_word, "cour_7"), -16);
                                temp_word = cellArray1[2];
                                print_pdf_line(cour_7, temp_word, para_IndentationLeft_position(200, temp_word, "cour_7"), -16);
                            }
                        }
                    }
                }
                else if (book == "B")
                {
                    print_pdf_line(cour_7, temp_word, 10, -3);
                    temp_word = dgv_gst_report.Rows[row_pointer].Cells[2].Value.ToString() + " ," + dgv_gst_report.Rows[row_pointer].Cells[3].Value.ToString();
                    if (temp_word.Length > 25)
                        temp_word = temp_word.Substring(0, 25);
                    print_pdf_line(cour_7, temp_word, 96, -16);
                    if (dgv_gst_report.Rows[row_pointer].Cells[5].Value != null && dgv_gst_report.Rows[row_pointer].Cells[5].Value != System.DBNull.Value)
                    {
                        temp_word = add_comma_to_number(dgv_gst_report.Rows[row_pointer].Cells[5].Value.ToString());
                        print_pdf_line(cour_7, temp_word, para_IndentationLeft_position(270, temp_word, "cour_7"), -16);
                        bamt += Convert.ToDouble(dgv_gst_report.Rows[row_pointer].Cells[5].Value);
                    }
                    if (dgv_gst_report.Rows[row_pointer].Cells[6].Value != null && dgv_gst_report.Rows[row_pointer].Cells[6].Value != System.DBNull.Value)
                    {
                        temp_word = add_comma_to_number(dgv_gst_report.Rows[row_pointer].Cells[6].Value.ToString());
                        print_pdf_line(cour_7, temp_word, para_IndentationLeft_position(325, temp_word, "cour_7"), -16);
                        cgst_amt += Convert.ToDouble(dgv_gst_report.Rows[row_pointer].Cells[6].Value);
                    }
                    if (dgv_gst_report.Rows[row_pointer].Cells[7].Value != null && dgv_gst_report.Rows[row_pointer].Cells[7].Value != System.DBNull.Value)
                    {
                        temp_word = add_comma_to_number(dgv_gst_report.Rows[row_pointer].Cells[7].Value.ToString());
                        print_pdf_line(cour_7, temp_word, para_IndentationLeft_position(380, temp_word, "cour_7"), -16);
                        sgst_amt += Convert.ToDouble(dgv_gst_report.Rows[row_pointer].Cells[7].Value);
                    }
                    if (dgv_gst_report.Rows[row_pointer].Cells[8].Value != null && dgv_gst_report.Rows[row_pointer].Cells[8].Value != System.DBNull.Value)
                    {
                        temp_word = add_comma_to_number(dgv_gst_report.Rows[row_pointer].Cells[8].Value.ToString());
                        print_pdf_line(cour_7, temp_word, para_IndentationLeft_position(435, temp_word, "cour_7"), -16);
                        igst_amt += Convert.ToDouble(dgv_gst_report.Rows[row_pointer].Cells[8].Value);
                    }
                    if (dgv_gst_report.Rows[row_pointer].Cells[9].Value != null && dgv_gst_report.Rows[row_pointer].Cells[9].Value != System.DBNull.Value)
                    {
                        temp_word = add_comma_to_number(dgv_gst_report.Rows[row_pointer].Cells[9].Value.ToString());
                        print_pdf_line(cour_7, temp_word, para_IndentationLeft_position(490, temp_word, "cour_7"), -16);
                        gamt += Convert.ToDouble(dgv_gst_report.Rows[row_pointer].Cells[9].Value);
                    }
                }
                else if (book == "J")
                {
                    print_pdf_line(cour_7, temp_word, 10, -3);
                    temp_word = dgv_gst_report.Rows[row_pointer].Cells[2].Value.ToString() + " ," + dgv_gst_report.Rows[row_pointer].Cells[3].Value.ToString();
                    if (temp_word.Length > 25)
                        temp_word = temp_word.Substring(0, 25);
                    print_pdf_line(cour_7, temp_word, 96, -16);
                    if (dgv_gst_report.Rows[row_pointer].Cells[5].Value != null && dgv_gst_report.Rows[row_pointer].Cells[5].Value != System.DBNull.Value)
                    {
                        temp_word = add_comma_to_number(dgv_gst_report.Rows[row_pointer].Cells[5].Value.ToString());
                        print_pdf_line(cour_7, temp_word, para_IndentationLeft_position(270, temp_word, "cour_7"), -16);
                        bamt += Convert.ToDouble(dgv_gst_report.Rows[row_pointer].Cells[5].Value);
                    }
                    if (dgv_gst_report.Rows[row_pointer].Cells[6].Value != null && dgv_gst_report.Rows[row_pointer].Cells[6].Value != System.DBNull.Value)
                    {
                        temp_word = add_comma_to_number(dgv_gst_report.Rows[row_pointer].Cells[6].Value.ToString());
                        print_pdf_line(cour_7, temp_word, para_IndentationLeft_position(435, temp_word, "cour_7"), -16);
                        igst_amt += Convert.ToDouble(dgv_gst_report.Rows[row_pointer].Cells[6].Value);
                    }
                    if (dgv_gst_report.Rows[row_pointer].Cells[7].Value != null && dgv_gst_report.Rows[row_pointer].Cells[7].Value != System.DBNull.Value)
                    {
                        temp_word = add_comma_to_number(dgv_gst_report.Rows[row_pointer].Cells[7].Value.ToString());
                        print_pdf_line(cour_7, temp_word, para_IndentationLeft_position(490, temp_word, "cour_7"), -16);
                        gamt += Convert.ToDouble(dgv_gst_report.Rows[row_pointer].Cells[7].Value);
                    }
                }
                if (actual_line_number_of_page > 55)
                    temp_word = "";
            }
            temp_word = "------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------";
            print_pdf_line(cour_9, temp_word, 10, -5);
            if (book == "S")
                temp_word = "Sale's Book";
            else if (book == "P")
                temp_word = "Purchase's Book";
            else if (book == "B")
                temp_word = "Bank's Book";
            else if (book == "C")
                temp_word = "Cash's Book";
            else if (book == "J")
                temp_word = "Journal's Book";
            temp_word2 = temp_word;
            print_pdf_line(cour_9, temp_word, 10, -5);
            if (!bamt.ToString().Contains("."))
                temp_word = bamt.ToString() + ".00";
            else
                temp_word = bamt.ToString();
            temp_word2 += "," + temp_word;
            temp_word = add_comma_to_number(temp_word);
            print_pdf_line(cour_7, temp_word, para_IndentationLeft_position(270, temp_word, "cour_7"), -16);
            if (!cgst_amt.ToString().Contains("."))
                temp_word = cgst_amt.ToString() + ".00";
            else
                temp_word = cgst_amt.ToString();
            temp_word2 += "," + temp_word;
            temp_word = add_comma_to_number(temp_word);
            print_pdf_line(cour_7, temp_word, para_IndentationLeft_position(325, temp_word, "cour_7"), -16);
            if (!sgst_amt.ToString().Contains("."))
                temp_word = sgst_amt.ToString() + ".00";
            else
                temp_word = sgst_amt.ToString();
            temp_word2 += "," + temp_word;
            temp_word = add_comma_to_number(temp_word);
            print_pdf_line(cour_7, temp_word, para_IndentationLeft_position(380, temp_word, "cour_7"), -16);
            if (book == "S")
            {
                gst_amount_list[0] = cgst_amt.ToString();
                gst_amount_list[5] = sgst_amt.ToString();
                gst_amount_list[10] = igst_amt.ToString();
            }
            else if (book == "P")
            {
                gst_amount_list[1] = cgst_amt.ToString();
                gst_amount_list[6] = sgst_amt.ToString();
                gst_amount_list[11] = igst_amt.ToString();
            }
            else if (book == "B")
            {
                gst_amount_list[2] = cgst_amt.ToString();
                gst_amount_list[7] = sgst_amt.ToString();
                gst_amount_list[12] = igst_amt.ToString();
            }
            else if (book == "C")
            {
                gst_amount_list[3] = cgst_amt.ToString();
                gst_amount_list[8] = sgst_amt.ToString();
                gst_amount_list[13] = igst_amt.ToString();
            }
            else if (book == "J")
            {
                gst_amount_list[4] = cgst_amt.ToString();
                gst_amount_list[9] = sgst_amt.ToString();
                gst_amount_list[14] = igst_amt.ToString();
            }
            if (!igst_amt.ToString().Contains("."))
                temp_word = igst_amt.ToString() + ".00";
            else
                temp_word = igst_amt.ToString();
            temp_word2 += "," + temp_word;
            temp_word = add_comma_to_number(temp_word);
            print_pdf_line(cour_7, temp_word, para_IndentationLeft_position(435, temp_word, "cour_7"), -16);
            if (!gamt.ToString().Contains("."))
                temp_word = gamt.ToString() + ".00";
            else
                temp_word = gamt.ToString();
            temp_word2 += "," + temp_word;
            temp_word = add_comma_to_number(temp_word);
            print_pdf_line(cour_7, temp_word, para_IndentationLeft_position(490, temp_word, "cour_7"), -16);
            temp_word = "------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------";
            print_pdf_line(cour_9, temp_word, 10, -5);
            temporary_list_array.Add(temp_word2);
        }

        private void add_gst_details_in_report_with_tax_details_Excel(string book)
        {
            dgv_gst_report.DataSource = null;
            gst_csv_list.Clear();
            if (book == "S")
            {
                ConnectionWithAccess.query = "select distinct d_c from " + ConnectionWithAccess.tablename[21] + " where d_n = 999999";
                ConnectionCommand.retrieval(cb_rg_d_c);
                rg_a_n.Text = get_a_n_from_d_c("S", Convert.ToInt32(cb_rg_d_c.Text));
                ConnectionWithAccess.query = "select distinct f21.D_D, f21.D_N, f1.[desc] as [Desc], f1.city, f1.gst_number, f21.bamt,f21.CGST_AMT, f21.SGST_AMT,f21.IGST_AMT, f21.gamt  from " + ConnectionWithAccess.tablename[1] + " f1, " + ConnectionWithAccess.tablename[21] + " f21 where f1.a_n = f21.a_n and f1.s_a = f21.s_a  and f1.d_y = f21.d_y and f21.prd = '" + ConnectionWithAccess.mprd + "' and f21.d_d >= @From and f21.d_d <= @To and f21.d_c = " + cb_rg_d_c.Text + " order by f21.d_n";
                parameters_for_date_range(dtp_rg_from_date.Text, dtp_rg_to_date.Text);
                ConnectionCommand.accountHelp_datatable_Seperate(dgv_gst_report, "Gst Sale List");

                ConnectionWithAccess.query = "select distinct d_c from " + ConnectionWithAccess.tablename[21] + " where d_n = 999999";
                ConnectionCommand.retrieval(cb_rg_d_c);
                rg_a_n.Text = get_a_n_from_d_c("S", Convert.ToInt32(cb_rg_d_c.Text));
                ConnectionWithAccess.query = "select distinct f21.D_D, f21.D_N, f1.[desc] as [Desc], f1.city, f1.gst_number," +
                " f21.bamt,f21.CGST_AMT, f21.SGST_AMT,f21.IGST_AMT, f21.gamt  from " + ConnectionWithAccess.tablename[1] +
                " f1, " + ConnectionWithAccess.tablename[21] + " f21 " +
                " where f1.a_n = f21.a_n and f1.s_a = f21.s_a  " +
                " and f1.d_y = f21.d_y " +
                " and f21.prd = '" + ConnectionWithAccess.mprd + "' " +
                " and f21.d_d >= @From and f21.d_d <= @To " +
                " and f21.d_c = " + cb_rg_d_c.Text +
                " order by f21.d_n";
                parameters_for_date_range(dtp_rg_from_date.Text, dtp_rg_to_date.Text);
                ConnectionCommand.accountHelp_datatable_Seperate(dgv_gst_report, "Gst Sale List");
            }
            else if (book == "P")
            {
                ConnectionWithAccess.query = "select distinct d_c from " + ConnectionWithAccess.tablename[22] + " where d_n = 999999";
                ConnectionCommand.retrieval(cb_rg_d_c);
                rg_a_n.Text = get_a_n_from_d_c("P", Convert.ToInt32(cb_rg_d_c.Text));
                //ConnectionWithAccess.query = "select tpt, bamt, tamt, rund_amt, gamt, tx_code, d_d,freight_AMT,packing_AMT,insurance_AMT,other_AMT,cgst_amt, sgst_amt,igst_amt,IGST_PACK_PER from " + ConnectionWithAccess.tablename[22] + " f22 where d_n " + (pidocno.Text.Trim() == string.Empty ? "is null" : "= " + pidocno.Text.Trim()) + " and prd = '" + ConnectionWithAccess.mprd + "' and d_c = " + Convert.ToInt32(pidbc.SelectedValue.ToString()) + " and s_a = '" + pis_a.Text + "'";
                ConnectionWithAccess.query = "select distinct f22.D_D, f22.D_N, f1.[desc] as [Desc], f1.city, f1.gst_number, f22.bamt,f22.CGST_AMT, f22.SGST_AMT,f22.IGST_AMT,f22.gamt from " + ConnectionWithAccess.tablename[22] + " f22 inner join " + ConnectionWithAccess.tablename[1] + " f1 on f1.A_N = f22.A_N and f1.S_A = f22.S_A and f1.d_y = f22.d_y where f22.prd = '" + ConnectionWithAccess.mprd + "' and f22.d_d >= @From and f22.d_d <= @To and f22.d_c = " + cb_rg_d_c.Text + " order by f22.d_d";
                //ConnectionWithAccess.query = "select distinct f22.D_D, f22.D_N, f1.[desc] as [Desc], f1.city, f1.gst_number, f22.bamt,f22.CGST_AMT, f22.SGST_AMT,f22.IGST_AMT,f22.rund_amt, f22.gamt,f22.prd,f22.d_c,f22.d_n,f22.a_n,f22.s_a,freight_AMT,packing_AMT,insurance_AMT,other_AMT from " + ConnectionWithAccess.tablename[1] + " f1, " + ConnectionWithAccess.tablename[22] + " f22 where f1.a_n = f22.a_n and f1.s_a = f22.s_a and f22.prd = '" + ConnectionWithAccess.mprd + "' and f22.d_d >= @From and f22.d_d <= @To and f22.d_c = " + cb_rg_d_c.Text + " order by f22.d_d";
                parameters_for_date_range(dtp_rg_from_date.Text, dtp_rg_to_date.Text);
                ConnectionCommand.accountHelp_datatable_Seperate(dgv_gst_report, "Gst Purchase List");
            }
            else if (book == "B")
            {
                ConnectionWithAccess.query = "select distinct d_c from " + ConnectionWithAccess.tablename[23] + " where d_n = 999999";
                ConnectionCommand.retrieval(cb_rg_d_c);
                rg_a_n.Text = get_a_n_from_d_c("B", Convert.ToInt32(cb_rg_d_c.Text));
                //ConnectionWithAccess.query = "select f23.D_D, f23.D_N, f1.[desc] as [Desc], f1.city, f1.gst_number, f23.bamt,f23.CGST_AMT, f23.SGST_AMT,f23.IGST_AMT, f23.gamt from " + ConnectionWithAccess.tablename[1] + " f1, " + ConnectionWithAccess.tablename[23] + " f23 where f1.a_n = f23.a_n and f1.s_a = f23.s_a and f23.prd = '" + ConnectionWithAccess.mprd + "' and f23.d_d >= @From and f23.d_d <= @To and f23.igst_amt > 0 order by f23.d_d";
                ConnectionWithAccess.query = "select f23.D_D, f23.D_N, f1.[desc] as [Desc], f1.city, f1.gst_number,0,0,0 ,f23.IGST_AMT,0  from " + ConnectionWithAccess.tablename[1] + " f1, " + ConnectionWithAccess.tablename[23] + " f23 where f1.a_n = f23.a_n and f1.s_a = f23.s_a and f23.prd = '" + ConnectionWithAccess.mprd + "' and f23.d_d >= @From and f23.d_d <= @To and f23.igst_amt > 0 order by f23.d_d";
                parameters_for_date_range(dtp_rg_from_date.Text, dtp_rg_to_date.Text);
                ConnectionCommand.accountHelp_datatable_Seperate(dgv_gst_report, "Gst Bank List");
            }
            else if (book == "C")
            {
                ConnectionWithAccess.query = "select distinct d_c from " + ConnectionWithAccess.tablename[24] + " where d_n = 999999";
                ConnectionCommand.retrieval(cb_rg_d_c);
                rg_a_n.Text = get_a_n_from_d_c("C", Convert.ToInt32(cb_rg_d_c.Text));
                //ConnectionWithAccess.query = "select f23.D_D, f23.D_N, f1.[desc] as [Desc], f1.city, f1.gst_number, f23.bamt,f23.CGST_AMT, f23.SGST_AMT,f23.IGST_AMT, f23.gamt from " + ConnectionWithAccess.tablename[1] + " f1, " + ConnectionWithAccess.tablename[23] + " f23 where f1.a_n = f23.a_n and f1.s_a = f23.s_a and f23.prd = '" + ConnectionWithAccess.mprd + "' and f23.d_d >= @From and f23.d_d <= @To and f23.igst_amt > 0 order by f23.d_d";
                ConnectionWithAccess.query = "select f24.D_D, f24.D_N, f1.[desc] as [Desc], f1.city, f1.gst_number, f24.basic_amt ,f24.IGST_AMT, f24.camt from " + ConnectionWithAccess.tablename[1] + " f1, " + ConnectionWithAccess.tablename[24] + " f24 where f1.a_n = f24.a_n and f1.s_a = f24.s_a and f24.prd = '" + ConnectionWithAccess.mprd + "' and f24.d_d >= @From and f24.d_d <= @To and f24.igst_amt > 0 order by f24.d_d";
                parameters_for_date_range(dtp_rg_from_date.Text, dtp_rg_to_date.Text);
                ConnectionCommand.accountHelp_datatable_Seperate(dgv_gst_report, "Gst Cash List");
            }
            else if (book == "J")
            {
                ConnectionWithAccess.query = "select distinct d_c from " + ConnectionWithAccess.tablename[25] + " where d_n = 999999";
                ConnectionCommand.retrieval(cb_rg_d_c);
                rg_a_n.Text = get_a_n_from_d_c("J", Convert.ToInt32(cb_rg_d_c.Text));
                //ConnectionWithAccess.query = "select f25.D_D, f25.D_N, f1.[desc] as [Desc], f1.city, f1.gst_number, ((-f25.igst_amt - f25.jamt)) ,f25.IGST_AMT, (f25.jamt * -1) from " + ConnectionWithAccess.tablename[25] + " f25 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f25.A_N = f1.A_N and f25.S_A = f1.S_A where f25.prd = '" + ConnectionWithAccess.mprd + "' and f25.igst_amt > 0 order by f25.d_d";
                ConnectionWithAccess.query = "select f25.D_D, f25.D_N, f1.[desc] as [Desc], f1.city, f1.gst_number, f25.basic_amt, f25.IGST_AMT, f25.jamt from " + ConnectionWithAccess.tablename[25] + " f25 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f25.A_N = f1.A_N and f25.S_A = f1.S_A where f25.prd = '" + ConnectionWithAccess.mprd + "' and f25.d_d >= @From and f25.d_d <= @To and f25.igst_amt > 0 order by f25.d_d";
                parameters_for_date_range(dtp_rg_from_date.Text, dtp_rg_to_date.Text);
                ConnectionCommand.accountHelp_datatable_Seperate(dgv_gst_report, "Gst Journal List");
            }
            string strReportType = string.Empty;
            switch (book)
            {
                case "S":
                    strReportType = "Sales";
                    break;
                case "P":
                    strReportType = "Purchase";
                    break;
                case "B":
                    strReportType = "Bank";
                    break;
                case "C":
                    strReportType = "Cash";
                    break;
                case "J":
                    strReportType = "Journal";
                    break;
            }
            string strExcel_filename = "GST_Differnce_Report_" + strReportType + "_" + cmbDateRangeGST.Text + "_" + DateTime.Now.Day + "_" + DateTime.Now.Month + "_" + DateTime.Now.Year + "_" + DateTime.Now.TimeOfDay.Hours + "_" + DateTime.Now.TimeOfDay.Minutes;
            ConnectionWithAccess.export(dgv_gst_report, strExcel_filename);
        }

        private void add_gst_details_in_report_with_Item_details_Excel(string book)
        {
            dgv_gst_report.DataSource = null;
            gst_csv_list.Clear();
            if (book == "S")
            {
                ConnectionWithAccess.query = "select distinct d_c from " + ConnectionWithAccess.tablename[21] + " where d_n = 999999";
                ConnectionCommand.retrieval(cb_rg_d_c);
                rg_a_n.Text = get_a_n_from_d_c("S", Convert.ToInt32(cb_rg_d_c.Text));
                //ConnectionWithAccess.query = "select distinct f21.D_D, f21.D_N, f1.[desc] as [Desc], f1.city, f1.gst_number," +
                //" f21.bamt,f21.CGST_AMT, f21.SGST_AMT,f21.IGST_AMT, f21.gamt  from " + ConnectionWithAccess.tablename[1] +
                //" f1, " + ConnectionWithAccess.tablename[21] + " f21 " +
                //" where f1.a_n = f21.a_n and f1.s_a = f21.s_a  " +
                //" and f1.d_y = f21.d_y " +
                //" and f21.prd = '" + ConnectionWithAccess.mprd + "' " +
                //" and f21.d_d >= @From and f21.d_d <= @To " +
                //" and f21.d_c = " + cb_rg_d_c.Text +
                //" order by f21.d_n";
                //parameters_for_date_range(dtp_rg_from_date.Text, dtp_rg_to_date.Text);
                //ConnectionCommand.accountHelp_datatable_Seperate(dgv_gst_report, "Gst Sale List");

                ConnectionWithAccess.query = "select distinct f3.D_D,f3.D_N,f3.TITLE,f3.HSN_CODE,f3.QTY,f3.CAT,f3.PRICE,f3.AMOUNT," +
                " f3.CGST_PER,f3.CGST_AMT,f3.SGST_PER,f3.SGST_AMT,f3.IGST_PER,f3.IGST_AMT,f1.DESC,f1.CITY,f1.STATE " +
                " from (" + ConnectionWithAccess.tablename[3] + " f3 " +
                " inner join " + ConnectionWithAccess.tablename[21] + " f21 on f21.PRD = f3.PRD and f21.D_C = f3.D_C and f21.D_N = f3.D_N )" +
                " inner join " + ConnectionWithAccess.tablename[1] + " f1 on f1.A_N = f21.A_N and f1.S_A = f21.S_A and f1.D_Y = f21.D_Y " +
                " where f3.PRD = '" + ConnectionWithAccess.mprd + "' " +
                " order by f3.D_N";
                //" and f1.d_y = f21.d_y " +
                //" and f21.prd = '" + ConnectionWithAccess.mprd + "' " +
                //" and f21.d_d >= @From and f21.d_d <= @To " +
                //" and f21.d_c = " + cb_rg_d_c.Text +
                //" order by f21.d_n";
                parameters_for_date_range(dtp_rg_from_date.Text, dtp_rg_to_date.Text);
                ConnectionCommand.accountHelp_datatable_Seperate(dgv_gst_report, "Gst Sale List");
            }
            else if (book == "P")
            {
                ConnectionWithAccess.query = "select distinct d_c from " + ConnectionWithAccess.tablename[22] + " where d_n = 999999";
                ConnectionCommand.retrieval(cb_rg_d_c);
                rg_a_n.Text = get_a_n_from_d_c("P", Convert.ToInt32(cb_rg_d_c.Text));
                //ConnectionWithAccess.query = "select tpt, bamt, tamt, rund_amt, gamt, tx_code, d_d,freight_AMT,packing_AMT,insurance_AMT,other_AMT,cgst_amt, sgst_amt,igst_amt,IGST_PACK_PER from " + ConnectionWithAccess.tablename[22] + " f22 where d_n " + (pidocno.Text.Trim() == string.Empty ? "is null" : "= " + pidocno.Text.Trim()) + " and prd = '" + ConnectionWithAccess.mprd + "' and d_c = " + Convert.ToInt32(pidbc.SelectedValue.ToString()) + " and s_a = '" + pis_a.Text + "'";
                //ConnectionWithAccess.query = "select distinct f22.D_D, f22.D_N, f1.[desc] as [Desc], f1.city, f1.gst_number, f22.bamt,f22.CGST_AMT, f22.SGST_AMT,f22.IGST_AMT,f22.gamt from " + ConnectionWithAccess.tablename[22] + " f22 inner join " + ConnectionWithAccess.tablename[1] + " f1 on f1.A_N = f22.A_N and f1.S_A = f22.S_A and f1.d_y = f22.d_y where f22.prd = '" + ConnectionWithAccess.mprd + "' and f22.d_d >= @From and f22.d_d <= @To and f22.d_c = " + cb_rg_d_c.Text + " order by f22.d_d";

                ConnectionWithAccess.query = "select distinct f3.D_D,f3.D_N,f3.TITLE,f3.HSN_CODE,f3.QTY,f3.CAT,f3.PRICE,f3.AMOUNT," +
                " f3.CGST_PER,f3.CGST_AMT,f3.SGST_PER,f3.SGST_AMT,f3.IGST_PER,f3.IGST_AMT,f1.DESC,f1.CITY,f1.STATE " +
                " from (" + ConnectionWithAccess.tablename[3] + " f3 " +
                " inner join " + ConnectionWithAccess.tablename[22] + " f22 on f22.PRD = f3.PRD and f22.D_C = f3.D_C and f22.D_N = f3.D_N and f22.A_N = f3.A_N and f22.S_A = f3.S_A)" +
                " inner join " + ConnectionWithAccess.tablename[1] + " f1 on f1.A_N = f22.A_N and f1.S_A = f22.S_A and f1.D_Y = f22.D_Y " +
                " where f3.PRD = '" + ConnectionWithAccess.mprd + "' " +
                " order by f3.D_N";


                //ConnectionWithAccess.query = "select distinct f22.D_D, f22.D_N, f1.[desc] as [Desc], f1.city, f1.gst_number, f22.bamt,f22.CGST_AMT, f22.SGST_AMT,f22.IGST_AMT,f22.rund_amt, f22.gamt,f22.prd,f22.d_c,f22.d_n,f22.a_n,f22.s_a,freight_AMT,packing_AMT,insurance_AMT,other_AMT from " + ConnectionWithAccess.tablename[1] + " f1, " + ConnectionWithAccess.tablename[22] + " f22 where f1.a_n = f22.a_n and f1.s_a = f22.s_a and f22.prd = '" + ConnectionWithAccess.mprd + "' and f22.d_d >= @From and f22.d_d <= @To and f22.d_c = " + cb_rg_d_c.Text + " order by f22.d_d";
                parameters_for_date_range(dtp_rg_from_date.Text, dtp_rg_to_date.Text);
                ConnectionCommand.accountHelp_datatable_Seperate(dgv_gst_report, "Gst Purchase List");
            }
            else if (book == "B")
            {
                ConnectionWithAccess.query = "select distinct d_c from " + ConnectionWithAccess.tablename[23] + " where d_n = 999999";
                ConnectionCommand.retrieval(cb_rg_d_c);
                rg_a_n.Text = get_a_n_from_d_c("B", Convert.ToInt32(cb_rg_d_c.Text));
                //ConnectionWithAccess.query = "select f23.D_D, f23.D_N, f1.[desc] as [Desc], f1.city, f1.gst_number, f23.bamt,f23.CGST_AMT, f23.SGST_AMT,f23.IGST_AMT, f23.gamt from " + ConnectionWithAccess.tablename[1] + " f1, " + ConnectionWithAccess.tablename[23] + " f23 where f1.a_n = f23.a_n and f1.s_a = f23.s_a and f23.prd = '" + ConnectionWithAccess.mprd + "' and f23.d_d >= @From and f23.d_d <= @To and f23.igst_amt > 0 order by f23.d_d";
                ConnectionWithAccess.query = "select f23.D_D, f23.D_N, f1.[desc] as [Desc], f1.city, f1.gst_number,0,0,0 ,f23.IGST_AMT,0  from " + ConnectionWithAccess.tablename[1] + " f1, " + ConnectionWithAccess.tablename[23] + " f23 where f1.a_n = f23.a_n and f1.s_a = f23.s_a and f23.prd = '" + ConnectionWithAccess.mprd + "' and f23.d_d >= @From and f23.d_d <= @To and f23.igst_amt > 0 order by f23.d_d";
                parameters_for_date_range(dtp_rg_from_date.Text, dtp_rg_to_date.Text);
                ConnectionCommand.accountHelp_datatable_Seperate(dgv_gst_report, "Gst Bank List");
            }
            else if (book == "C")
            {
                ConnectionWithAccess.query = "select distinct d_c from " + ConnectionWithAccess.tablename[24] + " where d_n = 999999";
                ConnectionCommand.retrieval(cb_rg_d_c);
                rg_a_n.Text = get_a_n_from_d_c("C", Convert.ToInt32(cb_rg_d_c.Text));
                //ConnectionWithAccess.query = "select f23.D_D, f23.D_N, f1.[desc] as [Desc], f1.city, f1.gst_number, f23.bamt,f23.CGST_AMT, f23.SGST_AMT,f23.IGST_AMT, f23.gamt from " + ConnectionWithAccess.tablename[1] + " f1, " + ConnectionWithAccess.tablename[23] + " f23 where f1.a_n = f23.a_n and f1.s_a = f23.s_a and f23.prd = '" + ConnectionWithAccess.mprd + "' and f23.d_d >= @From and f23.d_d <= @To and f23.igst_amt > 0 order by f23.d_d";
                ConnectionWithAccess.query = "select f24.D_D, f24.D_N, f1.[desc] as [Desc], f1.city, f1.gst_number, f24.basic_amt ,f24.IGST_AMT, f24.camt from " + ConnectionWithAccess.tablename[1] + " f1, " + ConnectionWithAccess.tablename[24] + " f24 where f1.a_n = f24.a_n and f1.s_a = f24.s_a and f24.prd = '" + ConnectionWithAccess.mprd + "' and f24.d_d >= @From and f24.d_d <= @To and f24.igst_amt > 0 order by f24.d_d";
                parameters_for_date_range(dtp_rg_from_date.Text, dtp_rg_to_date.Text);
                ConnectionCommand.accountHelp_datatable_Seperate(dgv_gst_report, "Gst Cash List");
            }
            else if (book == "J")
            {
                ConnectionWithAccess.query = "select distinct d_c from " + ConnectionWithAccess.tablename[25] + " where d_n = 999999";
                ConnectionCommand.retrieval(cb_rg_d_c);
                rg_a_n.Text = get_a_n_from_d_c("J", Convert.ToInt32(cb_rg_d_c.Text));
                //ConnectionWithAccess.query = "select f25.D_D, f25.D_N, f1.[desc] as [Desc], f1.city, f1.gst_number, ((-f25.igst_amt - f25.jamt)) ,f25.IGST_AMT, (f25.jamt * -1) from " + ConnectionWithAccess.tablename[25] + " f25 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f25.A_N = f1.A_N and f25.S_A = f1.S_A where f25.prd = '" + ConnectionWithAccess.mprd + "' and f25.igst_amt > 0 order by f25.d_d";
                ConnectionWithAccess.query = "select f25.D_D, f25.D_N, f1.[desc] as [Desc], f1.city, f1.gst_number, f25.basic_amt, f25.IGST_AMT, f25.jamt from " + ConnectionWithAccess.tablename[25] + " f25 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f25.A_N = f1.A_N and f25.S_A = f1.S_A where f25.prd = '" + ConnectionWithAccess.mprd + "' and f25.d_d >= @From and f25.d_d <= @To and f25.igst_amt > 0 order by f25.d_d";
                parameters_for_date_range(dtp_rg_from_date.Text, dtp_rg_to_date.Text);
                ConnectionCommand.accountHelp_datatable_Seperate(dgv_gst_report, "Gst Journal List");
            }
            string strReportType = string.Empty;
            switch (book)
            {
                case "S":
                    strReportType = "Sales";
                    break;
                case "P":
                    strReportType = "Purchase";
                    break;
                case "B":
                    strReportType = "Bank";
                    break;
                case "C":
                    strReportType = "Cash";
                    break;
                case "J":
                    strReportType = "Journal";
                    break;
            }
            string strExcel_filename = "GST_ItemDetails_Report_" + strReportType + "_" + cmbDateRangeGST.Text + "_" + DateTime.Now.Day + "_" + DateTime.Now.Month + "_" + DateTime.Now.Year + "_" + DateTime.Now.TimeOfDay.Hours + "_" + DateTime.Now.TimeOfDay.Minutes;
            ConnectionWithAccess.export(dgv_gst_report, strExcel_filename);
        }

        private void add_gst_details_in_report(string book)
        {
            dgv_gst_report.DataSource = null;
            if (book == "S")
            {
                ConnectionWithAccess.query = "select distinct d_c from " + ConnectionWithAccess.tablename[21] + " where d_n = 999999";
                ConnectionCommand.retrieval(cb_rg_d_c);
                rg_a_n.Text = get_a_n_from_d_c("S", Convert.ToInt32(cb_rg_d_c.Text));
                ConnectionWithAccess.query = "select distinct f21.D_D, f21.D_N, f1.[desc] as [Desc], f1.city, f1.gst_number, f21.bamt,f21.CGST_AMT, f21.SGST_AMT,f21.IGST_AMT, f21.gamt from " + ConnectionWithAccess.tablename[1] + " f1, " + ConnectionWithAccess.tablename[21] + " f21 where f1.a_n = f21.a_n and f1.s_a = f21.s_a and f21.prd = '" + ConnectionWithAccess.mprd + "' and f21.d_d >= @From and f21.d_d <= @To and f21.d_c = " + cb_rg_d_c.Text + " order by f21.d_n";
                parameters_for_date_range(dtp_rg_from_date.Text, dtp_rg_to_date.Text);
                ConnectionCommand.accountHelp_datatable_Seperate(dgv_gst_report, "Gst Sale List");
            }
            else if (book == "P")
            {
                ConnectionWithAccess.query = "select distinct d_c from " + ConnectionWithAccess.tablename[22] + " where d_n = 999999";
                ConnectionCommand.retrieval(cb_rg_d_c);
                rg_a_n.Text = get_a_n_from_d_c("P", Convert.ToInt32(cb_rg_d_c.Text));
                ConnectionWithAccess.query = "select distinct f22.D_D, f22.D_N, f1.[desc] as [Desc], f1.city, f1.gst_number, f22.bamt,f22.CGST_AMT, f22.SGST_AMT,f22.IGST_AMT, f22.gamt from " + ConnectionWithAccess.tablename[1] + " f1, " + ConnectionWithAccess.tablename[22] + " f22 where f1.a_n = f22.a_n and f1.s_a = f22.s_a and f22.prd = '" + ConnectionWithAccess.mprd + "' and f22.d_d >= @From and f22.d_d <= @To and f22.d_c = " + cb_rg_d_c.Text + " order by f22.d_d";
                parameters_for_date_range(dtp_rg_from_date.Text, dtp_rg_to_date.Text);
                ConnectionCommand.accountHelp_datatable_Seperate(dgv_gst_report, "Gst Purchase List");
            }
            else if (book == "B")
            {
                ConnectionWithAccess.query = "select distinct d_c from " + ConnectionWithAccess.tablename[23] + " where d_n = 999999";
                ConnectionCommand.retrieval(cb_rg_d_c);
                rg_a_n.Text = get_a_n_from_d_c("B", Convert.ToInt32(cb_rg_d_c.Text));
                //ConnectionWithAccess.query = "select f23.D_D, f23.D_N, f1.[desc] as [Desc], f1.city, f1.gst_number, f23.bamt,f23.CGST_AMT, f23.SGST_AMT,f23.IGST_AMT, f23.gamt from " + ConnectionWithAccess.tablename[1] + " f1, " + ConnectionWithAccess.tablename[23] + " f23 where f1.a_n = f23.a_n and f1.s_a = f23.s_a and f23.prd = '" + ConnectionWithAccess.mprd + "' and f23.d_d >= @From and f23.d_d <= @To and f23.igst_amt > 0 order by f23.d_d";
                ConnectionWithAccess.query = "select f23.D_D, f23.D_N, f1.[desc] as [Desc], f1.city, f1.gst_number,0,0,0 ,f23.IGST_AMT,0  from " + ConnectionWithAccess.tablename[1] + " f1, " + ConnectionWithAccess.tablename[23] + " f23 where f1.a_n = f23.a_n and f1.s_a = f23.s_a and f23.prd = '" + ConnectionWithAccess.mprd + "' and f23.d_d >= @From and f23.d_d <= @To and f23.igst_amt > 0 order by f23.d_d";
                parameters_for_date_range(dtp_rg_from_date.Text, dtp_rg_to_date.Text);
                ConnectionCommand.accountHelp_datatable_Seperate(dgv_gst_report, "Gst Bank List");
            }
            else if (book == "C")
            {
                ConnectionWithAccess.query = "select distinct d_c from " + ConnectionWithAccess.tablename[24] + " where d_n = 999999";
                ConnectionCommand.retrieval(cb_rg_d_c);
                rg_a_n.Text = get_a_n_from_d_c("C", Convert.ToInt32(cb_rg_d_c.Text));
                //ConnectionWithAccess.query = "select f23.D_D, f23.D_N, f1.[desc] as [Desc], f1.city, f1.gst_number, f23.bamt,f23.CGST_AMT, f23.SGST_AMT,f23.IGST_AMT, f23.gamt from " + ConnectionWithAccess.tablename[1] + " f1, " + ConnectionWithAccess.tablename[23] + " f23 where f1.a_n = f23.a_n and f1.s_a = f23.s_a and f23.prd = '" + ConnectionWithAccess.mprd + "' and f23.d_d >= @From and f23.d_d <= @To and f23.igst_amt > 0 order by f23.d_d";
                ConnectionWithAccess.query = "select f24.D_D, f24.D_N, f1.[desc] as [Desc], f1.city, f1.gst_number, f24.basic_amt ,f24.IGST_AMT, f24.camt from " + ConnectionWithAccess.tablename[1] + " f1, " + ConnectionWithAccess.tablename[24] + " f24 where f1.a_n = f24.a_n and f1.s_a = f24.s_a and f24.prd = '" + ConnectionWithAccess.mprd + "' and f24.d_d >= @From and f24.d_d <= @To and f24.igst_amt > 0 order by f24.d_d";
                parameters_for_date_range(dtp_rg_from_date.Text, dtp_rg_to_date.Text);
                ConnectionCommand.accountHelp_datatable_Seperate(dgv_gst_report, "Gst Cash List");
            }
            else if (book == "J")
            {
                ConnectionWithAccess.query = "select distinct d_c from " + ConnectionWithAccess.tablename[25] + " where d_n = 999999";
                ConnectionCommand.retrieval(cb_rg_d_c);
                rg_a_n.Text = get_a_n_from_d_c("J", Convert.ToInt32(cb_rg_d_c.Text));
                //ConnectionWithAccess.query = "select f25.D_D, f25.D_N, f1.[desc] as [Desc], f1.city, f1.gst_number, ((-f25.igst_amt - f25.jamt)) ,f25.IGST_AMT, (f25.jamt * -1) from " + ConnectionWithAccess.tablename[25] + " f25 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f25.A_N = f1.A_N and f25.S_A = f1.S_A where f25.prd = '" + ConnectionWithAccess.mprd + "' and f25.igst_amt > 0 order by f25.d_d";
                ConnectionWithAccess.query = "select f25.D_D, f25.D_N, f1.[desc] as [Desc], f1.city, f1.gst_number, f25.basic_amt, f25.IGST_AMT, f25.jamt from " + ConnectionWithAccess.tablename[25] + " f25 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f25.A_N = f1.A_N and f25.S_A = f1.S_A where f25.prd = '" + ConnectionWithAccess.mprd + "' and f25.d_d >= @From and f25.d_d <= @To and f25.igst_amt > 0 order by f25.d_d";
                parameters_for_date_range(dtp_rg_from_date.Text, dtp_rg_to_date.Text);
                ConnectionCommand.accountHelp_datatable_Seperate(dgv_gst_report, "Gst Journal List");
            }
            if (dgv_gst_report.Rows.Count > 0)
            {
                temp_word = "Date - Inv.                        Party's Name       City                             Gst Number                           Basic Amount       Cgst Amount        Sgst Amount        Igst Amount        Gross Amount";
                print_pdf_line(cour_7, temp_word, 10, 0);

                double bamt = 0, cgst_amt = 0, sgst_amt = 0, igst_amt = 0, gamt = 0;
                for (row_pointer = 0; row_pointer < dgv_gst_report.Rows.Count; row_pointer++)
                {
                    if ((dgv_gst_report.Rows[row_pointer].Cells[0].Value != System.DBNull.Value) && (dgv_gst_report.Rows[row_pointer].Cells[1].Value != System.DBNull.Value) && (dgv_gst_report.Rows[row_pointer].Cells[0].Value != null) && (dgv_gst_report.Rows[row_pointer].Cells[1].Value != null))
                    {
                        temp_word2 = dgv_gst_report.Rows[row_pointer].Cells[0].Value.ToString();
                        temp_word2 = temp_word2.Substring(0, temp_word2.IndexOf(" "));
                        temp_word = temp_word2 + "-" + dgv_gst_report.Rows[row_pointer].Cells[1].Value.ToString();
                        if (book == "S")
                        {
                            print_pdf_line(cour_7, temp_word, 10, -3);
                            temp_word = dgv_gst_report.Rows[row_pointer].Cells[2].Value.ToString() + " ," + dgv_gst_report.Rows[row_pointer].Cells[3].Value.ToString();
                            if (temp_word.Length > 25)
                                temp_word = temp_word.Substring(0, 25);
                            print_pdf_line(cour_7, temp_word, 90, -16);
                            temp_word = dgv_gst_report.Rows[row_pointer].Cells[4].Value.ToString();
                            print_pdf_line(cour_7, temp_word, 210, -16);
                            if (dgv_gst_report.Rows[row_pointer].Cells[5].Value != null && dgv_gst_report.Rows[row_pointer].Cells[5].Value != System.DBNull.Value)
                            {
                                temp_word = add_comma_to_number(dgv_gst_report.Rows[row_pointer].Cells[5].Value.ToString());
                                print_pdf_line(cour_7, temp_word, para_IndentationLeft_position(270, temp_word, "cour_7"), -16);
                                bamt += Convert.ToDouble(dgv_gst_report.Rows[row_pointer].Cells[5].Value);
                            }
                            if (dgv_gst_report.Rows[row_pointer].Cells[6].Value != null && dgv_gst_report.Rows[row_pointer].Cells[6].Value != System.DBNull.Value)
                            {
                                temp_word = add_comma_to_number(dgv_gst_report.Rows[row_pointer].Cells[6].Value.ToString());
                                print_pdf_line(cour_7, temp_word, para_IndentationLeft_position(325, temp_word, "cour_7"), -16);
                                cgst_amt += Convert.ToDouble(dgv_gst_report.Rows[row_pointer].Cells[6].Value);
                            }
                            if (dgv_gst_report.Rows[row_pointer].Cells[7].Value != null && dgv_gst_report.Rows[row_pointer].Cells[7].Value != System.DBNull.Value)
                            {
                                temp_word = add_comma_to_number(dgv_gst_report.Rows[row_pointer].Cells[7].Value.ToString());
                                print_pdf_line(cour_7, temp_word, para_IndentationLeft_position(380, temp_word, "cour_7"), -16);
                                sgst_amt += Convert.ToDouble(dgv_gst_report.Rows[row_pointer].Cells[7].Value);
                            }
                            if (dgv_gst_report.Rows[row_pointer].Cells[8].Value != null && dgv_gst_report.Rows[row_pointer].Cells[8].Value != System.DBNull.Value)
                            {
                                temp_word = add_comma_to_number(dgv_gst_report.Rows[row_pointer].Cells[8].Value.ToString());
                                print_pdf_line(cour_7, temp_word, para_IndentationLeft_position(435, temp_word, "cour_7"), -16);
                                igst_amt += Convert.ToDouble(dgv_gst_report.Rows[row_pointer].Cells[8].Value);
                            }
                            if (dgv_gst_report.Rows[row_pointer].Cells[9].Value != null && dgv_gst_report.Rows[row_pointer].Cells[9].Value != System.DBNull.Value)
                            {
                                temp_word = add_comma_to_number(dgv_gst_report.Rows[row_pointer].Cells[9].Value.ToString());
                                print_pdf_line(cour_7, temp_word, para_IndentationLeft_position(490, temp_word, "cour_7"), -16);
                                gamt += Convert.ToDouble(dgv_gst_report.Rows[row_pointer].Cells[9].Value);
                            }
                        }
                        else if (book == "P")
                        {
                            print_pdf_line(cour_7, temp_word, 10, -3);
                            temp_word = dgv_gst_report.Rows[row_pointer].Cells[2].Value.ToString() + " ," + dgv_gst_report.Rows[row_pointer].Cells[3].Value.ToString();
                            if (temp_word.Length > 25)
                                temp_word = temp_word.Substring(0, 25);
                            print_pdf_line(cour_7, temp_word, 96, -16);
                            temp_word = dgv_gst_report.Rows[row_pointer].Cells[4].Value.ToString();
                            print_pdf_line(cour_7, temp_word, 210, -16);
                            if (dgv_gst_report.Rows[row_pointer].Cells[5].Value != null && dgv_gst_report.Rows[row_pointer].Cells[5].Value != System.DBNull.Value)
                            {
                                temp_word = add_comma_to_number(dgv_gst_report.Rows[row_pointer].Cells[5].Value.ToString());
                                print_pdf_line(cour_7, temp_word, para_IndentationLeft_position(270, temp_word, "cour_7"), -16);
                                bamt += Convert.ToDouble(dgv_gst_report.Rows[row_pointer].Cells[5].Value);
                            }
                            if (dgv_gst_report.Rows[row_pointer].Cells[6].Value != null && dgv_gst_report.Rows[row_pointer].Cells[6].Value != System.DBNull.Value)
                            {
                                temp_word = add_comma_to_number(dgv_gst_report.Rows[row_pointer].Cells[6].Value.ToString());
                                print_pdf_line(cour_7, temp_word, para_IndentationLeft_position(325, temp_word, "cour_7"), -16);
                                cgst_amt += Convert.ToDouble(dgv_gst_report.Rows[row_pointer].Cells[6].Value);
                            }
                            if (dgv_gst_report.Rows[row_pointer].Cells[7].Value != null && dgv_gst_report.Rows[row_pointer].Cells[7].Value != System.DBNull.Value)
                            {
                                temp_word = add_comma_to_number(dgv_gst_report.Rows[row_pointer].Cells[7].Value.ToString());
                                print_pdf_line(cour_7, temp_word, para_IndentationLeft_position(380, temp_word, "cour_7"), -16);
                                sgst_amt += Convert.ToDouble(dgv_gst_report.Rows[row_pointer].Cells[7].Value);
                            }
                            if (dgv_gst_report.Rows[row_pointer].Cells[8].Value != null && dgv_gst_report.Rows[row_pointer].Cells[8].Value != System.DBNull.Value)
                            {
                                temp_word = add_comma_to_number(dgv_gst_report.Rows[row_pointer].Cells[8].Value.ToString());
                                print_pdf_line(cour_7, temp_word, para_IndentationLeft_position(435, temp_word, "cour_7"), -16);
                                igst_amt += Convert.ToDouble(dgv_gst_report.Rows[row_pointer].Cells[8].Value);
                            }
                            if (dgv_gst_report.Rows[row_pointer].Cells[9].Value != null && dgv_gst_report.Rows[row_pointer].Cells[9].Value != System.DBNull.Value)
                            {
                                temp_word = add_comma_to_number(dgv_gst_report.Rows[row_pointer].Cells[9].Value.ToString());
                                print_pdf_line(cour_7, temp_word, para_IndentationLeft_position(490, temp_word, "cour_7"), -16);
                                gamt += Convert.ToDouble(dgv_gst_report.Rows[row_pointer].Cells[9].Value);
                            }
                        }
                        else if (book == "B")
                        {
                            print_pdf_line(cour_7, temp_word, 10, -3);
                            temp_word = dgv_gst_report.Rows[row_pointer].Cells[2].Value.ToString() + " ," + dgv_gst_report.Rows[row_pointer].Cells[3].Value.ToString();
                            if (temp_word.Length > 25)
                                temp_word = temp_word.Substring(0, 25);
                            print_pdf_line(cour_7, temp_word, 96, -16);
                            //if (dgv_gst_report.Rows[row_pointer].Cells[5].Value != null && dgv_gst_report.Rows[row_pointer].Cells[5].Value != System.DBNull.Value)
                            //{
                            //    temp_word = add_comma_to_number(dgv_gst_report.Rows[row_pointer].Cells[5].Value.ToString());
                            //    print_pdf_line(cour_7, temp_word, para_IndentationLeft_position(270, temp_word, "cour_7"), -16);
                            //    bamt += Convert.ToDouble(dgv_gst_report.Rows[row_pointer].Cells[5].Value);
                            //}
                            //if (dgv_gst_report.Rows[row_pointer].Cells[6].Value != null && dgv_gst_report.Rows[row_pointer].Cells[6].Value != System.DBNull.Value)
                            //{
                            //    temp_word = add_comma_to_number(dgv_gst_report.Rows[row_pointer].Cells[6].Value.ToString());
                            //    print_pdf_line(cour_7, temp_word, para_IndentationLeft_position(325, temp_word, "cour_7"), -16);
                            //    cgst_amt += Convert.ToDouble(dgv_gst_report.Rows[row_pointer].Cells[6].Value);
                            //}
                            //if (dgv_gst_report.Rows[row_pointer].Cells[7].Value != null && dgv_gst_report.Rows[row_pointer].Cells[7].Value != System.DBNull.Value)
                            //{
                            //    temp_word = add_comma_to_number(dgv_gst_report.Rows[row_pointer].Cells[7].Value.ToString());
                            //    print_pdf_line(cour_7, temp_word, para_IndentationLeft_position(380, temp_word, "cour_7"), -16);
                            //    sgst_amt += Convert.ToDouble(dgv_gst_report.Rows[row_pointer].Cells[7].Value);
                            //}
                            if (dgv_gst_report.Rows[row_pointer].Cells[8].Value != null && dgv_gst_report.Rows[row_pointer].Cells[8].Value != System.DBNull.Value)
                            {
                                temp_word = add_comma_to_number(dgv_gst_report.Rows[row_pointer].Cells[8].Value.ToString());
                                print_pdf_line(cour_7, temp_word, para_IndentationLeft_position(435, temp_word, "cour_7"), -16);
                                igst_amt += Convert.ToDouble(dgv_gst_report.Rows[row_pointer].Cells[8].Value);
                            }
                            //if (dgv_gst_report.Rows[row_pointer].Cells[9].Value != null && dgv_gst_report.Rows[row_pointer].Cells[9].Value != System.DBNull.Value)
                            //{
                            //    temp_word = add_comma_to_number(dgv_gst_report.Rows[row_pointer].Cells[9].Value.ToString());
                            //    print_pdf_line(cour_7, temp_word, para_IndentationLeft_position(490, temp_word, "cour_7"), -16);
                            //    gamt += Convert.ToDouble(dgv_gst_report.Rows[row_pointer].Cells[9].Value);
                            //}
                        }
                        else if (book == "J")
                        {
                            print_pdf_line(cour_7, temp_word, 10, -3);
                            temp_word = dgv_gst_report.Rows[row_pointer].Cells[2].Value.ToString() + " ," + dgv_gst_report.Rows[row_pointer].Cells[3].Value.ToString();
                            if (temp_word.Length > 25)
                                temp_word = temp_word.Substring(0, 25);
                            print_pdf_line(cour_7, temp_word, 96, -16);
                            if (dgv_gst_report.Rows[row_pointer].Cells[5].Value != null && dgv_gst_report.Rows[row_pointer].Cells[5].Value != System.DBNull.Value)
                            {
                                temp_word = add_comma_to_number(dgv_gst_report.Rows[row_pointer].Cells[5].Value.ToString());
                                print_pdf_line(cour_7, temp_word, para_IndentationLeft_position(270, temp_word, "cour_7"), -16);
                                bamt += Convert.ToDouble(dgv_gst_report.Rows[row_pointer].Cells[5].Value);
                            }
                            if (dgv_gst_report.Rows[row_pointer].Cells[6].Value != null && dgv_gst_report.Rows[row_pointer].Cells[6].Value != System.DBNull.Value)
                            {
                                temp_word = add_comma_to_number(dgv_gst_report.Rows[row_pointer].Cells[6].Value.ToString());
                                print_pdf_line(cour_7, temp_word, para_IndentationLeft_position(435, temp_word, "cour_7"), -16);
                                igst_amt += Convert.ToDouble(dgv_gst_report.Rows[row_pointer].Cells[6].Value);
                            }
                            //if (dgv_gst_report.Rows[row_pointer].Cells[7].Value != null && dgv_gst_report.Rows[row_pointer].Cells[7].Value != System.DBNull.Value)
                            //{
                            //    temp_word = add_comma_to_number(dgv_gst_report.Rows[row_pointer].Cells[7].Value.ToString());
                            //    print_pdf_line(cour_7, temp_word, para_IndentationLeft_position(490, temp_word, "cour_7"), -16);
                            //    gamt += Convert.ToDouble(dgv_gst_report.Rows[row_pointer].Cells[7].Value);
                            //}
                        }
                    }
                    if (actual_line_number_of_page > 55)
                        temp_word = "";
                }
                temp_word = "------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------";
                print_pdf_line(cour_9, temp_word, 10, -5);
                if (book == "S")
                    temp_word = "Sale's Book";
                else if (book == "P")
                    temp_word = "Purchase's Book";
                else if (book == "B")
                    temp_word = "Bank's Book";
                else if (book == "C")
                    temp_word = "Cash's Book";
                else if (book == "J")
                    temp_word = "Journal's Book";
                temp_word2 = temp_word;
                print_pdf_line(cour_9, temp_word, 10, -5);
                if (book == "S")
                {
                    gst_amount_list[0] = cgst_amt.ToString();
                    gst_amount_list[5] = sgst_amt.ToString();
                    gst_amount_list[10] = igst_amt.ToString();
                }
                else if (book == "P")
                {
                    gst_amount_list[1] = cgst_amt.ToString();
                    gst_amount_list[6] = sgst_amt.ToString();
                    gst_amount_list[11] = igst_amt.ToString();
                }
                else if (book == "B")
                {
                    gst_amount_list[2] = cgst_amt.ToString();
                    gst_amount_list[7] = sgst_amt.ToString();
                    gst_amount_list[12] = igst_amt.ToString();
                }
                else if (book == "C")
                {
                    gst_amount_list[3] = cgst_amt.ToString();
                    gst_amount_list[8] = sgst_amt.ToString();
                    gst_amount_list[13] = igst_amt.ToString();
                }
                else if (book == "J")
                {
                    gst_amount_list[4] = cgst_amt.ToString();
                    gst_amount_list[9] = sgst_amt.ToString();
                    gst_amount_list[14] = igst_amt.ToString();
                }
                if (!bamt.ToString().Contains("."))
                    temp_word = bamt.ToString() + ".00";
                else
                    temp_word = bamt.ToString();
                temp_word2 += "," + temp_word;
                temp_word = add_comma_to_number(temp_word);
                print_pdf_line(cour_7, temp_word, para_IndentationLeft_position(270, temp_word, "cour_7"), -16);
                if (!cgst_amt.ToString().Contains("."))
                    temp_word = cgst_amt.ToString() + ".00";
                else
                    temp_word = cgst_amt.ToString();
                temp_word2 += "," + temp_word;
                temp_word = add_comma_to_number(temp_word);
                print_pdf_line(cour_7, temp_word, para_IndentationLeft_position(325, temp_word, "cour_7"), -16);
                if (!sgst_amt.ToString().Contains("."))
                    temp_word = sgst_amt.ToString() + ".00";
                else
                    temp_word = sgst_amt.ToString();
                temp_word2 += "," + temp_word;
                temp_word = add_comma_to_number(temp_word);
                print_pdf_line(cour_7, temp_word, para_IndentationLeft_position(380, temp_word, "cour_7"), -16);
                if (!igst_amt.ToString().Contains("."))
                    temp_word = igst_amt.ToString() + ".00";
                else
                    temp_word = igst_amt.ToString();
                temp_word2 += "," + temp_word;
                temp_word = add_comma_to_number(temp_word);
                print_pdf_line(cour_7, temp_word, para_IndentationLeft_position(435, temp_word, "cour_7"), -16);
                if (!gamt.ToString().Contains("."))
                    temp_word = gamt.ToString() + ".00";
                else
                    temp_word = gamt.ToString();
                temp_word2 += "," + temp_word;
                temp_word = add_comma_to_number(temp_word);
                print_pdf_line(cour_7, temp_word, para_IndentationLeft_position(490, temp_word, "cour_7"), -16);
                temp_word = "------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------";
                print_pdf_line(cour_9, temp_word, 10, -5);
                temporary_list_array.Add(temp_word2);
            }
            else
            {
                print_pdf_line(cour_9_bold, ":  Nil", 330, -16);
            }
        }

        private void parameters_for_date_range(string start_date, string end_date)
        {
            List<ConnectionWithAccess.QueryParams> objParams = new List<ConnectionWithAccess.QueryParams>();
            ConnectionWithAccess.QueryParams ParamFrom = new ConnectionWithAccess.QueryParams();
            ParamFrom.paramName = "@From";
            ParamFrom.paramValue = Convert.ToDateTime(start_date);
            objParams.Add(ParamFrom);

            ConnectionWithAccess.QueryParams ParamTo = new ConnectionWithAccess.QueryParams();
            ParamTo.paramName = "@To";
            ParamTo.paramValue = Convert.ToDateTime(end_date);
            objParams.Add(ParamTo);

            ConnectionWithAccess.QueryParamList = objParams;
        }

        public void alignGridView(DataGridView mDataGridView, int colCount)
        {
            // .ToShortDateString();
            report_columns_size = new string[colCount];
            report_columns_name = new string[colCount];
            report_column_header = new string[colCount];
            report_column_type = new string[colCount];

            for (column_pointer = 0; column_pointer < colCount; column_pointer++)
            {
                for (row_pointer = 0; row_pointer < mDataGridView.RowCount; row_pointer++)
                {
                    if (mDataGridView.Rows[row_pointer].Cells[column_pointer].Value != null)
                    {
                        temp_word = mDataGridView.Rows[row_pointer].Cells[column_pointer].Value.ToString().Trim();
                        if (temp_word != null && temp_word != "")
                        {
                            mDataGridView.Rows[row_pointer].Cells[column_pointer].Value = temp_word;
                            check_data_type(temp_word);
                            if (report_column_type[column_pointer] == null)
                                report_column_type[column_pointer] = data_type;
                        }
                        else
                            temp_word = "abcd";
                    }
                    else
                        temp_word = "abcd";
                }
            }

            for (int i = 0; i < colCount; i++)
            {
                if (report_column_type[i] == "Date")
                {
                    column_pointer = i;
                    for (row_pointer = 0; row_pointer < mDataGridView.RowCount; row_pointer++)
                    {
                        if (mDataGridView.Rows[row_pointer].Cells[column_pointer].Value != null)
                        {
                            temp_word = mDataGridView.Rows[row_pointer].Cells[column_pointer].Value.ToString();
                            if (temp_word.Contains("/"))
                            {
                                if (temp_word.Contains(" "))
                                {
                                    temp_word = temp_word.Substring(0, temp_word.IndexOf(" "));
                                    mDataGridView.Rows[row_pointer].Cells[column_pointer].Value = temp_word;

                                    //mDataGridView.Columns[column_pointer].DefaultCellStyle.Format = "dd/MM/yyyy";
                                }
                            }
                        }
                    }
                }
            }

            for (column_pointer = 0; column_pointer < colCount; column_pointer++)
            {
                for (row_pointer = 0; row_pointer < mDataGridView.RowCount; row_pointer++)
                {
                    if (mDataGridView.Rows[row_pointer].Cells[column_pointer].Value != null)
                    {
                        temp_word = mDataGridView.Rows[row_pointer].Cells[column_pointer].Value.ToString();
                        temp_word = temp_word.Trim();
                        if (temp_word.Trim().Length > Convert.ToInt32((report_columns_size[column_pointer])))
                        {
                            report_columns_size[column_pointer] = temp_word.Length.ToString();
                        }
                    }
                }
            }
            for (column_pointer = 0; column_pointer < colCount; column_pointer++)
            {
                if (report_column_type[column_pointer] == "Date")
                {
                    mDataGridView.Columns[column_pointer].Width = Convert.ToInt32(report_columns_size[column_pointer]) * 8;
                    mDataGridView.Columns[column_pointer].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;
                }
                else if (report_column_type[column_pointer] == "String")
                {
                    if (Convert.ToInt32(report_columns_size[column_pointer]) == 1)
                        mDataGridView.Columns[column_pointer].Width = Convert.ToInt32(report_columns_size[column_pointer]) * 20;
                    else if (Convert.ToInt32(report_columns_size[column_pointer]) == 2)
                        mDataGridView.Columns[column_pointer].Width = Convert.ToInt32(report_columns_size[column_pointer]) * 12;
                    else if (Convert.ToInt32(report_columns_size[column_pointer]) == 3)
                        mDataGridView.Columns[column_pointer].Width = Convert.ToInt32(report_columns_size[column_pointer]) * 12;
                    else if (Convert.ToInt32(report_columns_size[column_pointer]) == 4)
                        mDataGridView.Columns[column_pointer].Width = Convert.ToInt32(report_columns_size[column_pointer]) * 12;
                    else if (Convert.ToInt32(report_columns_size[column_pointer]) == 5)
                        mDataGridView.Columns[column_pointer].Width = Convert.ToInt32(report_columns_size[column_pointer]) * 10;
                    else if (Convert.ToInt32(report_columns_size[column_pointer]) == 6)
                        mDataGridView.Columns[column_pointer].Width = Convert.ToInt32(report_columns_size[column_pointer]) * 10;
                    else if (Convert.ToInt32(report_columns_size[column_pointer]) == 7)
                        mDataGridView.Columns[column_pointer].Width = Convert.ToInt32(report_columns_size[column_pointer]) * 10;
                    else if (Convert.ToInt32(report_columns_size[column_pointer]) == 8)
                        mDataGridView.Columns[column_pointer].Width = Convert.ToInt32(report_columns_size[column_pointer]) * 11;
                    else if (Convert.ToInt32(report_columns_size[column_pointer]) == 9)
                        mDataGridView.Columns[column_pointer].Width = Convert.ToInt32(report_columns_size[column_pointer]) * 11;
                    else if (Convert.ToInt32(report_columns_size[column_pointer]) == 10)
                        mDataGridView.Columns[column_pointer].Width = Convert.ToInt32(report_columns_size[column_pointer]) * 12;
                    else if (Convert.ToInt32(report_columns_size[column_pointer]) > 10 && Convert.ToInt32(report_columns_size[column_pointer]) <= 20)
                        mDataGridView.Columns[column_pointer].Width = Convert.ToInt32(report_columns_size[column_pointer]) * 9;
                    else
                        mDataGridView.Columns[column_pointer].Width = Convert.ToInt32(report_columns_size[column_pointer]) * 9;
                    mDataGridView.Columns[column_pointer].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleLeft;
                }
                else if (report_column_type[column_pointer] == "Numeric")
                {
                    if (Convert.ToInt32(report_columns_size[column_pointer]) == 1)
                        mDataGridView.Columns[column_pointer].Width = Convert.ToInt32(report_columns_size[column_pointer]) * 20;
                    else if (Convert.ToInt32(report_columns_size[column_pointer]) == 2)
                        mDataGridView.Columns[column_pointer].Width = Convert.ToInt32(report_columns_size[column_pointer]) * 12;
                    else if (Convert.ToInt32(report_columns_size[column_pointer]) == 3)
                        mDataGridView.Columns[column_pointer].Width = Convert.ToInt32(report_columns_size[column_pointer]) * 11;
                    else if (Convert.ToInt32(report_columns_size[column_pointer]) == 4)
                        mDataGridView.Columns[column_pointer].Width = Convert.ToInt32(report_columns_size[column_pointer]) * 11;
                    else if (Convert.ToInt32(report_columns_size[column_pointer]) == 5)
                        mDataGridView.Columns[column_pointer].Width = Convert.ToInt32(report_columns_size[column_pointer]) * 10;
                    else if (Convert.ToInt32(report_columns_size[column_pointer]) == 6)
                        mDataGridView.Columns[column_pointer].Width = Convert.ToInt32(report_columns_size[column_pointer]) * 9;
                    else if (Convert.ToInt32(report_columns_size[column_pointer]) == 7)
                        mDataGridView.Columns[column_pointer].Width = Convert.ToInt32(report_columns_size[column_pointer]) * 8;
                    else if (Convert.ToInt32(report_columns_size[column_pointer]) == 8)
                        mDataGridView.Columns[column_pointer].Width = Convert.ToInt32(report_columns_size[column_pointer]) * 8;
                    else if (Convert.ToInt32(report_columns_size[column_pointer]) == 9)
                        mDataGridView.Columns[column_pointer].Width = Convert.ToInt32(report_columns_size[column_pointer]) * 8;
                    else if (Convert.ToInt32(report_columns_size[column_pointer]) == 10)
                        mDataGridView.Columns[column_pointer].Width = Convert.ToInt32(report_columns_size[column_pointer]) * 8;
                    else if (Convert.ToInt32(report_columns_size[column_pointer]) > 10 && Convert.ToInt32(report_columns_size[column_pointer]) <= 20)
                        mDataGridView.Columns[column_pointer].Width = Convert.ToInt32(report_columns_size[column_pointer]) * 9;
                    else
                        mDataGridView.Columns[column_pointer].Width = Convert.ToInt32(report_columns_size[column_pointer]) * 9;
                    mDataGridView.Columns[column_pointer].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;
                    mDataGridView.Columns[column_pointer].ValueType = typeof(double);
                }
            }
        }

        private DataTable update_datatable_balances(DataTable mDataGridView, int debitcolumn, int creditcolumn, int balancecolumn)
        {
            for (row_pointer = 0; row_pointer < mDataGridView.Rows.Count; row_pointer++)
            {
                if (mDataGridView.Rows[row_pointer][debitcolumn].ToString() != null && mDataGridView.Rows[row_pointer][debitcolumn].ToString() != "")
                {
                    if (Convert.ToDouble(mDataGridView.Rows[row_pointer][debitcolumn].ToString()) != 0)
                    {
                        if (row_pointer > 0)
                        {
                            if (mDataGridView.Rows[row_pointer - 1][balancecolumn].ToString() != "")
                                mDataGridView.Rows[row_pointer][balancecolumn] = Math.Round(Convert.ToDouble(mDataGridView.Rows[row_pointer - 1][balancecolumn].ToString()) + Convert.ToDouble(mDataGridView.Rows[row_pointer][debitcolumn].ToString()), 2);
                            else
                                mDataGridView.Rows[row_pointer][balancecolumn] = Math.Round(Convert.ToDouble(mDataGridView.Rows[row_pointer][debitcolumn].ToString()), 2);
                        }
                        else
                            mDataGridView.Rows[row_pointer][balancecolumn] = Math.Round(Convert.ToDouble(mDataGridView.Rows[row_pointer][debitcolumn].ToString()), 2);
                    }
                }
                if (mDataGridView.Rows[row_pointer][creditcolumn].ToString() != null && mDataGridView.Rows[row_pointer][creditcolumn].ToString() != "")
                {
                    if (Convert.ToDouble(mDataGridView.Rows[row_pointer][creditcolumn].ToString()) != 0)
                    {
                        if (row_pointer > 0)
                        {
                            if (mDataGridView.Rows[row_pointer - 1][balancecolumn].ToString() != "")
                                mDataGridView.Rows[row_pointer][balancecolumn] = Math.Round(Convert.ToDouble(mDataGridView.Rows[row_pointer - 1][balancecolumn].ToString()) - Convert.ToDouble(mDataGridView.Rows[row_pointer][creditcolumn].ToString()), 2);
                            else
                                mDataGridView.Rows[row_pointer][balancecolumn] = Math.Round(Convert.ToDouble(mDataGridView.Rows[row_pointer][creditcolumn].ToString()), 2);
                        }
                        else
                            mDataGridView.Rows[row_pointer][balancecolumn] = Math.Round(Convert.ToDouble(mDataGridView.Rows[row_pointer][creditcolumn].ToString()) * -1, 2);
                    }
                }
            }
            return mDataGridView;
        }

        private void update_gridview_balances(DataGridView mDataGridView, int debitcolumn, int creditcolumn, int balancecolumn)
        {
            for (row_pointer = 0; row_pointer < mDataGridView.Rows.Count; row_pointer++)
            {
                if (mDataGridView.Rows[row_pointer].Cells[debitcolumn].Value != null && mDataGridView.Rows[row_pointer].Cells[debitcolumn].Value.ToString() != "")
                {
                    if (Convert.ToDouble(mDataGridView.Rows[row_pointer].Cells[debitcolumn].Value.ToString()) != 0)
                    {
                        if (row_pointer > 0)
                        {
                            if (mDataGridView.Rows[row_pointer - 1].Cells[balancecolumn].Value.ToString() != "")
                                mDataGridView.Rows[row_pointer].Cells[balancecolumn].Value = Math.Round(Convert.ToDouble(mDataGridView.Rows[row_pointer - 1].Cells[balancecolumn].Value.ToString()) + Convert.ToDouble(mDataGridView.Rows[row_pointer].Cells[debitcolumn].Value.ToString()), 2);
                            else
                                mDataGridView.Rows[row_pointer].Cells[balancecolumn].Value = Math.Round(Convert.ToDouble(mDataGridView.Rows[row_pointer].Cells[debitcolumn].Value.ToString()), 2);
                        }
                        else
                            mDataGridView.Rows[row_pointer].Cells[balancecolumn].Value = Math.Round(Convert.ToDouble(mDataGridView.Rows[row_pointer].Cells[debitcolumn].Value.ToString()), 2);
                    }
                }
                if (mDataGridView.Rows[row_pointer].Cells[creditcolumn].Value != null && mDataGridView.Rows[row_pointer].Cells[creditcolumn].Value.ToString() != "")
                {
                    if (Convert.ToDouble(mDataGridView.Rows[row_pointer].Cells[creditcolumn].Value.ToString()) != 0)
                    {
                        if (row_pointer > 0)
                        {
                            if (mDataGridView.Rows[row_pointer - 1].Cells[balancecolumn].Value.ToString() != "")
                                mDataGridView.Rows[row_pointer].Cells[balancecolumn].Value = Math.Round(Convert.ToDouble(mDataGridView.Rows[row_pointer - 1].Cells[balancecolumn].Value.ToString()) - Convert.ToDouble(mDataGridView.Rows[row_pointer].Cells[creditcolumn].Value.ToString()), 2);
                            else
                                mDataGridView.Rows[row_pointer].Cells[balancecolumn].Value = Math.Round(Convert.ToDouble(mDataGridView.Rows[row_pointer].Cells[creditcolumn].Value.ToString()), 2);
                        }
                        else
                            mDataGridView.Rows[row_pointer].Cells[balancecolumn].Value = Math.Round(Convert.ToDouble(mDataGridView.Rows[row_pointer].Cells[creditcolumn].Value.ToString()) * -1, 2);
                    }
                }
            }
        }

        public void check_data_type(string temp_word)
        {
            data_type = null;
            int slash_count = 0;
            if (temp_word.Contains("/"))
            {
                for (int i = 0; i < temp_word.Length; i++)
                {
                    if (temp_word.Substring(i, 1) == "/")
                    {
                        slash_count++;
                    }
                }
                if (slash_count == 2)
                    data_type = "Date";
                else
                    data_type = "String";
            }
            else
            {
                for (int i = 0; i < temp_word.Length; i++)
                {
                    char c = Convert.ToChar(temp_word.Substring(i, 1));
                    asc_value = Convert.ToInt32(c);
                    if (asc_value >= 45 && asc_value <= 57)
                    {
                        if (data_type == null)
                            data_type = "Numeric";
                    }
                    else if (asc_value >= 58 && asc_value <= 130)
                    {
                        data_type = "String";
                    }
                    else
                        if (data_type == null)
                        data_type = "unknown";
                }
            }
        }

        private string getTotal_Datatable(DataTable mDataGridView, int total_of_column)
        {
            temp_double = 0;
            string strReturnValue = "0";
            for (row_pointer = 0; row_pointer < mDataGridView.Rows.Count; row_pointer++)
            {
                if (mDataGridView.Rows[row_pointer][total_of_column].ToString() != null && mDataGridView.Rows[row_pointer][total_of_column].ToString() != "")
                    if (Convert.ToDouble(mDataGridView.Rows[row_pointer][total_of_column].ToString()) != 0)
                        temp_double = temp_double + Convert.ToDouble(mDataGridView.Rows[row_pointer][total_of_column].ToString());
            }
            strReturnValue = temp_double.ToString();

            return strReturnValue;
        }

        private void getTotal(DataGridView mDataGridView, int total_of_column)
        {
            temp_double = 0;
            for (row_pointer = 0; row_pointer < mDataGridView.Rows.Count; row_pointer++)
            {
                if (mDataGridView.Rows[row_pointer].Cells[total_of_column].Value != null && mDataGridView.Rows[row_pointer].Cells[total_of_column].Value.ToString() != "")
                    if (Convert.ToDouble(mDataGridView.Rows[row_pointer].Cells[total_of_column].Value.ToString()) != 0)
                        temp_double = temp_double + Convert.ToDouble(mDataGridView.Rows[row_pointer].Cells[total_of_column].Value.ToString());
            }
            ConnectionWithAccess.connectionStart();
            try
            {
                mDataGridView.Rows.Add();
                mDataGridView.Rows[mDataGridView.Rows.Count - 1].Cells[total_of_column].Value = Convert.ToString(temp_double);
            }
            catch (Exception ex)
            {
            }
        }

        private void ReportGenerator()
        {
        }

        private void DateSort()
        {
            int i, j;

            ConnectionWithAccess.datetemparray = new int[LedDGV.Rows.Count];

            for (i = 0; i < LedDGV.Rows.Count - 1; i++)
            {
                for (j = 0; j <= 0; j++)
                {
                    ConnectionWithAccess.datetemparray[i] = DateTime.Compare(Convert.ToDateTime(LedDGV.Rows[i].Cells[j].Value), Convert.ToDateTime(LedDGV.Rows[i].Cells[j + 1].Value));
                }
            }
        }

        private void generate_sale_balance_report()
        {
            temp_word = null;
            temp_count = 0;
            report_filetype = "Debitors outstanding List";
            pdf_filename = ConnectionWithAccess.report_file_location + (report_filetype).Replace(" ", "");
            if (chb_add_datetime_in_output.Checked)
                pdf_filename += "_" + DateTime.Now.Day + "_" + DateTime.Now.Month + "_" + DateTime.Now.Year + "_" + DateTime.Now.TimeOfDay.Hours + "_" + DateTime.Now.TimeOfDay.Minutes;
            pdf_filename += ".pdf";
            //pdf_filename = ConnectionWithAccess.remove_filename_error(pdf_filename);
            ConnectionWithAccess.create_file_folder(pdf_filename);
            doc1 = new Document(PageSize.A4, 5, 5, 5, 5);
            FileStream FS1 = File.Create(pdf_filename);
            writer = PdfWriter.GetInstance(doc1, FS1);
            doc1.Open();
            current_pdf_page_number = 1;
            add_header_footer = true;
            //header_text_message = report_filetype + " " + " From : " + RepFrom.Text + " to " + RepTo.Text;
            header_text_message = report_filetype + " From " + ConnectionWithAccess.msdate + " to " + ConnectionWithAccess.medate + " as on " + RepTo.Text;
            pdf_top_heading = "Sr. No                Name                                                                                          City                                  Amount";
            Paragraph para = new Paragraph();
            basicamount = 0;
            int lineno = 0;
            temp_int = 0;
            row_counter = 1;
            for (row_pointer = 0; row_pointer < temporary_list_array.Count(); row_pointer++)
            {
                if (temporary_list_array[row_pointer] != "")
                {
                    var cellArray = temporary_list_array[row_pointer].Split(new[] { ',' });
                    if ((Convert.ToDouble(cellArray[4]) * 1) > 0)
                    {
                        temp_word = Convert.ToString(row_counter);
                        print_pdf_line(cour_9, temp_word, para_IndentationLeft_position(-20, temp_word, "cour_9"), -9);
                        temp_word = cellArray[2].ToString();
                        print_pdf_line(cour_9, temp_word, 85, -15);
                        temp_word = cellArray[3].ToString();
                        print_pdf_line(cour_9, temp_word, 320, -15);
                        temp_word = (Convert.ToDouble(cellArray[4]) * 1).ToString();
                        temp_word = add_comma_to_number(temp_word);
                        print_pdf_line(cour_9, temp_word, para_IndentationLeft_position(430, temp_word, "cour_9"), -15);
                        basicamount = basicamount + Convert.ToDouble(temp_word);
                        lineno++;
                        row_counter++;
                    }
                    else if ((Convert.ToDouble(cellArray[4]) * 1) < 0)
                        temp_int++;

                }
            }
            print_pdf_line(cour_9, "----------------", 450, -7);
            temp_word = basicamount.ToString();
            temp_word = add_comma_to_number(temp_word);
            print_pdf_line(cour_9, temp_word, para_IndentationLeft_position(430, temp_word, "cour_9"), -7);
            print_pdf_line(cour_9, "----------------", 450, -7);
            print_footer();
            if (temp_int > 0)
            {
                temp_word = ConnectionWithAccess.company_details[1];
                print_pdf_line(cour_9, temp_word, 85, 0);
                temp_word = "Debitors Advance List as on " + RepTo.Text;
                print_pdf_line(cour_9, temp_word, 85, 0);
                pdf_top_heading = "Sr. No                Name                                                                                          City                                  Amount";
                add_pdf_top_heading(pdf_top_heading);
                basicamount = 0;
                lineno = 0;
                row_counter = 1;
                for (row_pointer = 0; row_pointer < temporary_list_array.Count(); row_pointer++)
                {
                    if (temporary_list_array[row_pointer] != "")
                    {
                        var cellArray = temporary_list_array[row_pointer].Split(new[] { ',' });
                        if ((Convert.ToDouble(cellArray[4]) * 1) < 0)
                        {
                            temp_word = Convert.ToString(row_counter);
                            print_pdf_line(cour_9, temp_word, para_IndentationLeft_position(-20, temp_word, "cour_9"), -9);
                            temp_word = cellArray[2].ToString();
                            print_pdf_line(cour_9, temp_word, 85, -15);
                            temp_word = cellArray[3].ToString();
                            print_pdf_line(cour_9, temp_word, 320, -15);
                            temp_word = (Convert.ToDouble(cellArray[4]) * -1).ToString();
                            temp_word = add_comma_to_number(temp_word);
                            print_pdf_line(cour_9, temp_word, para_IndentationLeft_position(430, temp_word, "cour_9"), -15);
                            basicamount = basicamount + Convert.ToDouble(temp_word);
                            lineno++;
                            row_counter++;
                        }
                    }
                }
                print_pdf_line(cour_9, "----------------", 450, -7);
                temp_word = Convert.ToString(basicamount);
                temp_word = add_comma_to_number(temp_word);
                print_pdf_line(cour_9, temp_word, para_IndentationLeft_position(430, temp_word, "cour_9"), -7);
                print_pdf_line(cour_9, "----------------", 450, -7);
                print_footer();
            }
            doc1.Close();
        }

        public static int GetMonthsBetween(DateTime from, DateTime to)
        {
            if (from > to) return GetMonthsBetween(to, from);

            var monthDiff = Math.Abs((to.Year * 12 + (to.Month - 1)) - (from.Year * 12 + (from.Month - 1)));

            if (from.AddMonths(monthDiff) > to || to.Day < from.Day)
            {
                return monthDiff - 1;
            }
            else
            {
                return monthDiff;
            }
        }

        private void clear_all_master_account_screen_fields()
        {
            tbMNo1.Text = "";
            tbAdd1.Text = "";
            tbAdd2.Text = "";
            tbAdd3.Text = "";
            tbTINNo.Text = "";
            tbMaxLim.Text = "";
            tbPincode.Text = "0";
            tbadharcard.Text = "0";
            tbgst_number.Text = "";
            tbpan.Text = "";
            tb_prop.Text = "";
            tbdistrict.Clear();
            tbTPT.Enabled = true;
            tbTPT.Text = null;
            tbTPT.Items.Add("Hand Delivery");
            tbTaxDesc.Text = "";
            //cbMTC.Text = Convert.ToString(AccountListDG.SelectedCells[10].Value);
            tbStd.Text = "";
            tbMNo2.Text = "";
            tbOPh2.Text = "";
            tbOPh1.Text = "";
            tbRPh2.Text = "";
            tbFax.Text = "";
            tbEmail.Text = "";
            tbWebsite.Text = "";
            tbstate.Text = "";
            tbstate.BackColor = Color.White;
            tbopenbalance.Text = "0.00";
            tbgst_number.Text = "";
            tbdelivery.Text = "";
            tbdelivery_city.Text = "";
        }

        private void master_accounts_process()
        {
            cb_master_d_c.Items.Clear();
            btn_add_sub_account.Visible = false;
            cb_master_d_c.Visible = false;
            cb_master_d_c.Enabled = true;
            lbl_master_d_c.Visible = true;
            tbd_y.Text = null;
            ConnectionWithAccess.ms_a = null;
            if (cbParent.SelectedItem.Equals("BANK ACCOUNT"))
            {
                tbA_N.Text = "2011";
                ConnectionWithAccess.query = "select distinct d_c from " + ConnectionWithAccess.tablename[23] + " where d_n = 999999";
                ConnectionCommand.retrieval(cb_master_d_c);
                if (cb_master_d_c.Items.Count == 1)
                {
                    cb_master_d_c.Enabled = false;
                    cb_master_d_c.SelectedIndex = 0;
                }
                else
                {
                    cb_master_d_c.Visible = true;
                    cb_master_d_c.Enabled = true;
                    lbl_master_d_c.Visible = true;
                }
                get_account_name_from_d_c("B", Convert.ToInt32(cb_master_d_c.Items[0].ToString()));
                get_bank_details();
            }
            else if (cbParent.SelectedItem.Equals("OLD CAPITAL ACCOUNT"))
                tbA_N.Text = "3000";
            else if (cbParent.SelectedItem.Equals("CAPITAL ACCOUNT"))
                tbA_N.Text = "3001";
            else if (cbParent.SelectedItem.Equals("CASH IN HAND"))
            {
                tbA_N.Text = "2010";
                ConnectionWithAccess.query = "select distinct d_c from " + ConnectionWithAccess.tablename[24] + " where d_n = 999999";
                ConnectionCommand.retrieval(cb_master_d_c);
                if (cb_master_d_c.Items.Count == 1)
                {
                    cb_master_d_c.Enabled = false;
                    cb_master_d_c.SelectedIndex = 0;
                }
                else
                {
                    cb_master_d_c.Visible = true;
                    cb_master_d_c.Enabled = true;
                    lbl_master_d_c.Visible = true;
                }
                get_account_name_from_d_c("C", Convert.ToInt32(cb_master_d_c.Items[0].ToString()));
                get_bank_details();
            }
            else if (cbParent.SelectedItem.Equals("INCOMES/EXPENSES(TRADING A/c.)"))
                tbA_N.Text = "70";
            else if (cbParent.SelectedItem.Equals("FIXED ASSETS"))
            {
                tbA_N.Text = "1";
                btn_add_sub_account.Visible = true;
            }
            else if (cbParent.SelectedItem.Equals("INCOMES/EXPENSES(P&L A/c.)"))
                tbA_N.Text = "75";
            else if (cbParent.SelectedItem.Equals("LOANS GIVEN"))
                tbA_N.Text = "3500";
            else if (cbParent.SelectedItem.Equals("LOANS TAKEN"))
                tbA_N.Text = "3501";
            else if (cbParent.SelectedItem.Equals("LOANS"))
                tbA_N.Text = "3555";
            else if (cbParent.SelectedItem.Equals("Taxes and Duties"))
                tbA_N.Text = "3600";
            else if (cbParent.SelectedItem.Equals("Job Work"))
                tbA_N.Text = jb_osm_a_n;
            else if (cbParent.SelectedItem.Equals("SUNDRY CREDITORS"))
            {
                tbA_N.Text = "4002";
                ConnectionWithAccess.query = "select distinct d_c from " + ConnectionWithAccess.tablename[22] + " where d_n = 999999";
                ConnectionCommand.retrieval(cb_master_d_c);
                cb_master_d_c.Visible = true;
                if (cb_master_d_c.Items.Count == 1)
                    cb_master_d_c.Enabled = false;
                if (cb_master_d_c.Items[0].ToString() != "")
                {
                    get_account_name_from_d_c("P", Convert.ToInt32(cb_master_d_c.Items[0].ToString()));
                    ConnectionWithAccess.query = "select [desc] from " + ConnectionWithAccess.tablename[6] + " where d_c = " + Convert.ToInt32(cb_master_d_c.Items[0].ToString()) + " order by tx_code";
                    ConnectionCommand.retrieval(cbMtaxDesc);
                }
            }
            else if (cbParent.SelectedItem.Equals("SUNDRY DEBTORS"))
            {
                tbA_N.Text = "2002";
                ConnectionWithAccess.query = "select distinct d_c from " + ConnectionWithAccess.tablename[21] + " where d_n = 999999";
                ConnectionCommand.retrieval(cb_master_d_c);
                cb_master_d_c.Visible = true;
                if (cb_master_d_c.Items.Count == 1)
                    cb_master_d_c.Enabled = false;
                get_account_name_from_d_c("S", Convert.ToInt32(cb_master_d_c.Text));
                ConnectionWithAccess.query = "select [desc] from " + ConnectionWithAccess.tablename[6] + " where d_c = " + Convert.ToInt32(cb_master_d_c.Items[0].ToString()) + " order by tx_code";
                ConnectionCommand.retrieval(cbMtaxDesc);
            }
        }

        private void TabControl2_MouseClick(object sender, MouseEventArgs e)
        {
            xmouse_point = Convert.ToString(e.X);
            ymouse_point = Convert.ToString(e.Y);
            lblmousex.Text = xmouse_point;
            lblmousey.Text = ymouse_point;
        }

        private void TabPage1_MouseMove(object sender, MouseEventArgs e)
        {
            xmouse_point = Convert.ToString(e.X);
            ymouse_point = Convert.ToString(e.Y);
            lblmousex.Text = xmouse_point;
            lblmousey.Text = ymouse_point;
        }

        private void TabPage1_MouseClick(object sender, MouseEventArgs e)
        {
            //xmouse_point = Convert.ToString(e.X);
            //ymouse_point = Convert.ToString(e.Y);
            //lblmousex.Text = xmouse_point;
            //lblmousey.Text = ymouse_point;
            //if (Convert.ToInt32(xmouse_point) >= 660 && Convert.ToInt32(xmouse_point) <= 853 && Convert.ToInt32(ymouse_point) >= 55 && Convert.ToInt32(ymouse_point) <= 70)
            //{
            //    fill_tax_description();
            //    cbMtaxDesc.Visible = true;
            //}
            //else
            //{
            //    if (cbMtaxDesc.Visible == true)
            //        cbMtaxDesc.Visible = false;
            //}
        }

        private void vClearItemDetails()
        {
            tbItemType.Text = null;
            tbItemCode.Text = null;
            tbCB.Text = "0";
            tbBQ.Text = "0";
            tbItemRate.Text = "0.00";
            tbMinStock.Text = "0";
            master_item_help.Visible = false;
        }

        private void check_if_have_delivery_account(string ma_n, string ms_a)
        {
            ConnectionWithAccess.query = "select [desc], city, a_n,s_a,d_y from " + ConnectionWithAccess.tablename[1] + " where a_n = '" + ma_n + "' and s_a = '" + ms_a + "' and d_y <> '@@@'";
            DataTable dtData1 = ConnectionCommand.fGetDataTable();
            if (dtData1 != null && dtData1.Rows.Count > 0)
            {
                sideliverycode.Visible = true;
                sideliverycity.Visible = true;
                lbl_sideliver.Visible = true;
            }
            else
            {
                sideliverycode.Visible = false;
                sideliverycity.Visible = false;
                lbl_sideliver.Visible = false;
            }
        }

        private void check_for_eway_bill()
        {
            if (Convert.ToDouble(sigrossamt.Text) >= 100000)
            {
                file_folder = ConnectionWithAccess.data_drive + "acc\\" + ConnectionWithAccess.mNIK + "\\eway_bill\\";
                eway_json_filename = file_folder + ConnectionWithAccess.mprd + "_" + sidocno.Text + "_" + account_detail_from_01[28].Trim();
                //if (chb_add_datetime_in_output.Checked)
                //eway_json_filename += "_" + DateTime.Now.Day + "_" + DateTime.Now.Month + "_" + DateTime.Now.Year + "_" + DateTime.Now.TimeOfDay.Hours + "_" + DateTime.Now.TimeOfDay.Minutes;
                eway_json_filename += ".json";
                if (File.Exists(eway_json_filename))
                    pb_eway_bill_url.Visible = true;
                if (cb_si_trans_mode.SelectedIndex == -1)
                    cb_si_trans_mode.SelectedIndex = 0;
                lbl_si_trans_mode.Visible = true;
                lbl_si_kilometers.Visible = true;
                cb_si_trans_mode.Visible = true;
                tb_si_kilometers.Visible = true;
            }
        }

        private void si_party_help_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                ConnectionWithAccess.query = "select a_n,s_a,d_y,[desc], city from " + ConnectionWithAccess.tablename[1] + " where a_n = (select distinct a_n from " + ConnectionWithAccess.tablename[21] + " where d_c = " + sidbc.SelectedValue.ToString() + " and d_n = 999999) and s_a <> '@@@' and (d_y is null or d_y ='') and ([desc] like '%" + si_party_help.SelectedCells[0].Value + "%')";
                DataTable dtData1 = ConnectionCommand.fGetDataTable();
                if (dtData1 != null && dtData1.Rows.Count > 0)
                {
                    if (dtData1.Rows[0][0] != null)
                    {
                        sia_n.Text = dtData1.Rows[0][0].ToString();
                        sis_a.Text = dtData1.Rows[0][1].ToString();
                        sid_y.Text = dtData1.Rows[0][2].ToString();
                        show_images();
                    }
                }
                fill_transport(sia_n.Text, sicity.Text, sitransport);
                sitransport.Enabled = true;
                populate_screen();
                ConnectionWithAccess.query = "select tx_code,tax_rate, [desc] from " + ConnectionWithAccess.tablename[6] + " where d_c = " + Convert.ToInt32(sidbc.SelectedValue.ToString()) + " and tx_code = " + sitaxcode.Text;
                dtData1 = ConnectionCommand.fGetDataTable();
                if (dtData1 != null && dtData1.Rows.Count > 0)
                {
                    if (dtData1.Rows[0][0] != null)
                    {
                        sitaxrate.Text = dtData1.Rows[0][1].ToString();
                        sitaxdesc.Text = dtData1.Rows[0][2].ToString();
                    }
                    else
                    {
                        sitaxdesc.Text = "";
                        sitaxrate.Text = "0.00";
                    }
                }
                else
                {
                    sitaxdesc.Text = "";
                    sitaxrate.Text = "0.00";
                }
                si_party_help.Visible = false;
                sipartycode.Text = sipartyname.Text;
            }
            else
            {
                if (e.KeyCode == Keys.Down)
                {
                    rowIndex = si_party_help.CurrentRow.Index + 1;
                }
                else
                    if (e.KeyCode == Keys.Up)
                {
                    rowIndex = si_party_help.CurrentRow.Index - 1;
                }
                show_images();
            }
        }

        private void truncate(string tablename)
        {
            ConnectionWithAccess.query = "delete from " + ConnectionWithAccess.mNIK + "_0" + tablename;
            ConnectionCommand.fUpdateInsertDeleteData();
        }

        private void insert_table_data(string tablename, string colnames, string data)
        {
            if (tablename != "001")
            {
                ConnectionWithAccess.query = "insert into " + ConnectionWithAccess.mNIK + "_0" + tablename + "(" + colnames + ") values(" + data + ")";
                ConnectionCommand.fUpdateInsertDeleteData();
            }
            else
            {
                var cellArray = data.Split(new[] { ',' });
                temp_a_n = cellArray[3];
                add_update_record_in_01_and_04(cellArray[3].Replace("'", ""), cellArray[4].Replace("'", ""), cellArray[5].Replace("'", ""), cellArray[6].Replace("'", ""), cellArray[10].Replace("'", ""));

            }
        }

        private void add_contains_of_trading_account_in_gridviewold(bool dont_cleargridview = false)
        {
            ConnectionWithAccess.query = "select '', f1.a_n, f1.s_a, f1.[DESC], '', f51.AMT , '' , '', '' from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and  f51.S_A = f1.S_A where f51.prd = '" + cbBalShPer.Text + "' and f51.D_D = #01-01-1901# and f51.s_a = '@@@' and f51.amt > 0 and f51.a_n = '2001'";
            if (dont_cleargridview)
                ConnectionCommand.multiplerows(BalShDGV, "Trading Account");
            else
            {
                ConnectionCommand.accountHelp(BalShDGV, "Trading Account");
                BalShDGV.Columns[0].HeaderText = "Sort";
                BalShDGV.Columns[1].HeaderText = "A_n";
                BalShDGV.Columns[2].HeaderText = "S_a";
                BalShDGV.Columns[3].HeaderText = "Particular's";
                BalShDGV.Columns[4].HeaderText = "Debit_extra";
                BalShDGV.Columns[5].HeaderText = "Debit";
                BalShDGV.Columns[6].HeaderText = "Particular's";
                BalShDGV.Columns[7].HeaderText = "Credit_extra";
                BalShDGV.Columns[8].HeaderText = "Credit";
                BalShDGV.Columns[4].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;
                BalShDGV.Columns[5].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;
                BalShDGV.Columns[7].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;
                BalShDGV.Columns[8].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;

            }
            ConnectionWithAccess.query = "select '', f1.a_n, f1.s_a, f1.[DESC], '', f51.AMT , '' , '', '' from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and  f51.S_A = f1.S_A where f51.prd = '" + cbBalShPer.Text + "' and f51.D_D = #01-01-1901# and f51.s_a = '@@@' and f51.amt > 0 and f51.a_n like '6000%'";
            ConnectionCommand.multiplerows(BalShDGV, "Trading Account");
            ConnectionWithAccess.query = "select '', f1.a_n, f1.s_a, f1.[DESC], '', f51.AMT , '' , '', '' from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and  f51.S_A = f1.S_A where f51.prd = '" + cbBalShPer.Text + "' and f51.D_D = #01-01-1901# and f51.s_a = '@@@' and f51.amt > 0 and f51.a_n like '61%'";
            ConnectionCommand.multiplerows(BalShDGV, "Trading Account");
            ConnectionWithAccess.query = "select '', f1.a_n, f1.s_a, f1.[DESC], '', f51.AMT , '' , '', '' from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and  f51.S_A = f1.S_A where f51.prd = '" + cbBalShPer.Text + "' and f51.D_D = #01-01-1901# and f51.s_a = '@@@' and f51.amt > 0 and f51.a_n like '65%'";
            ConnectionCommand.multiplerows(BalShDGV, "Trading Account");
            ConnectionWithAccess.query = "select '', f1.a_n, f1.s_a, f1.[DESC], '', f51.AMT , '' , '', '' from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and  f51.S_A = f1.S_A where f51.prd = '" + cbBalShPer.Text + "' and f51.D_D = #01-01-1901# and f51.s_a = '@@@' and f51.amt > 0 and f51.a_n like '70%'";
            ConnectionCommand.multiplerows(BalShDGV, "Trading Account");
            ConnectionWithAccess.query = "select '', f1.a_n, f1.s_a, '', '', '', f1.[DESC], '', (f51.AMT * -1) from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and  f51.S_A = f1.S_A where f51.prd = '" + cbBalShPer.Text + "' and f51.D_D = #01-01-1901# and f51.s_a = '@@@' and f51.amt < 0 and f51.a_n like '5000%'";
            ConnectionCommand.multiplerows(BalShDGV, "Trading Account");
            ConnectionWithAccess.query = "select '', f1.a_n, f1.s_a, '', '', '', f1.[DESC], '', (f51.AMT * -1) from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and  f51.S_A = f1.S_A where f51.prd = '" + cbBalShPer.Text + "' and f51.D_D = #01-01-1901# and f51.s_a = '@@@' and f51.amt < 0 and f51.a_n like '6000%'";
            ConnectionCommand.multiplerows(BalShDGV, "Trading Account");
            ConnectionWithAccess.query = "select '', f1.a_n, f1.s_a, '', '', '', f1.[DESC], '', (f51.AMT * -1) from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and  f51.S_A = f1.S_A where f51.prd = '" + cbBalShPer.Text + "' and f51.D_D = #01-01-1901# and f51.s_a = '@@@' and f51.amt < 0 and f51.a_n like '65%'";
            ConnectionCommand.multiplerows(BalShDGV, "Trading Account");
            ConnectionWithAccess.query = "select '', f1.a_n, f1.s_a, '', '', '', f1.[DESC], '', (f51.AMT * -1) from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and  f51.S_A = f1.S_A where f51.prd = '" + cbBalShPer.Text + "' and f51.D_D = #01-01-1901# and f51.s_a = '@@@' and f51.amt < 0 and f51.a_n like '70%'";
            ConnectionCommand.multiplerows(BalShDGV, "Trading Account");
            ConnectionWithAccess.query = "select '', f1.a_n, f1.s_a, f1.[DESC], '', f51.AMT , '' , '', '' from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and  f51.S_A = f1.S_A where f51.prd = '" + cbBalShPer.Text + "' and f51.D_D = #01-01-1901# and f51.s_a = '@@@' and f51.amt > 0 and f51.a_n = '719999'";
            ConnectionCommand.multiplerows(BalShDGV, "Trading Account");
        }

        private void add_contains_of_profit_and_loss_in_gridviewold(bool dont_cleargridview = false)
        {
            ConnectionWithAccess.query = "select '', f1.a_n, f1.s_a, '', '', '', f1.[DESC], '', f51.AMT from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and f51.S_A = f1.S_A where f51.prd = '" + cbBalShPer.Text + "' and f51.D_D = #01-01-1901# and f51.s_a = '@@@' and f51.amt > 0 and f51.a_n = '719999'";
            if (dont_cleargridview)
                ConnectionCommand.multiplerows(BalShDGV, "Profit and Loss Account");
            else
            {
                ConnectionCommand.accountHelp(BalShDGV, "Profit and Loss Account");
                BalShDGV.Columns[0].HeaderText = "Sort";
                BalShDGV.Columns[1].HeaderText = "A_n";
                BalShDGV.Columns[2].HeaderText = "S_a";
                BalShDGV.Columns[3].HeaderText = "Particular's";
                BalShDGV.Columns[4].HeaderText = "Debit_extra";
                BalShDGV.Columns[5].HeaderText = "Debit";
                BalShDGV.Columns[6].HeaderText = "Particular's";
                BalShDGV.Columns[7].HeaderText = "Credit_extra";
                BalShDGV.Columns[8].HeaderText = "Credit";
                BalShDGV.Columns[4].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;
                BalShDGV.Columns[5].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;
                BalShDGV.Columns[7].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;
                BalShDGV.Columns[8].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;
            }
            ConnectionWithAccess.query = "select '', f1.a_n,f1.s_a,f1.[DESC], '', f51.AMT , '' , '' , '' from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and f51.S_A = f1.S_A where f51.prd = '" + cbBalShPer.Text + "' and f51.D_D = #01-01-1901# and f51.s_a = '@@@' and f51.amt > 0 and f51.a_n like '75%'";
            ConnectionCommand.multiplerows(BalShDGV, "Profit and Loss Account");
            ConnectionWithAccess.query = "select '', f1.a_n, f1.s_a, '', '', '', f1.[DESC], '', (f51.AMT * -1) from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and f51.S_A = f1.S_A where f51.prd = '" + cbBalShPer.Text + "' and f51.D_D = #01-01-1901# and f51.s_a = '@@@' and f51.amt < 0 and f51.a_n like '75%'";
            ConnectionCommand.multiplerows(BalShDGV, "Profit and Loss Account");
            ConnectionWithAccess.query = "select '', f1.a_n,f1.s_a,f1.[DESC], '', f51.AMT , '' , '' , '' from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and f51.S_A = f1.S_A where f51.prd = '" + cbBalShPer.Text + "' and f51.D_D = #01-01-1901# and f51.s_a = '@@@' and f51.amt > 0 and f51.a_n = '7998'";
            ConnectionCommand.multiplerows(BalShDGV, "Profit and Loss Account");
            ConnectionWithAccess.query = "select '', f1.a_n,f1.s_a,'', '', '' , 'Net Loss' , '' , (f51.AMT * -1) from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and f51.S_A = f1.S_A where f51.prd = '" + cbBalShPer.Text + "' and f51.D_D = #01-01-1901# and f51.s_a = '@@@' and f51.amt < 0 and f51.a_n = '7998'";
            ConnectionCommand.multiplerows(BalShDGV, "Profit and Loss Account");
        }

        private void fTradingAllReports(string mprd)
        {
            StringBuilder strQuery = new StringBuilder();

            //Trading
            strQuery.Append(" select '', f1.a_n, f1.s_a, f1.[DESC] as [Desc], '' as [City], f51.AMT as [amt_debit] , '' as [Desc1] , (amt-amt) as [credit_extra], 0 as [amt_credit] from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and  f51.S_A = f1.S_A where f51.prd = '" + cbBalShPer.Text + "' and f51.D_D = #01-01-1901# and f51.s_a = '@@@' and f51.amt > 0 and f51.a_n = '2001' UNION ALL");
            strQuery.Append(" select '', f1.a_n, f1.s_a, f1.[DESC] as [Desc], '' as [City], f51.AMT as [amt_debit] , '' as [Desc1] , (amt-amt) as [credit_extra], 0 as [amt_credit] from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and  f51.S_A = f1.S_A where f51.prd = '" + cbBalShPer.Text + "' and f51.D_D = #01-01-1901# and f51.s_a = '@@@' and f51.amt > 0 and f51.a_n like '6000%' UNION ALL");
            strQuery.Append(" select '', f1.a_n, f1.s_a, f1.[DESC] as [Desc], '' as [City], f51.AMT as [amt_debit] , '' as [Desc1] , (amt-amt) as [credit_extra], 0 as [amt_credit] from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and  f51.S_A = f1.S_A where f51.prd = '" + cbBalShPer.Text + "' and f51.D_D = #01-01-1901# and f51.s_a = '@@@' and f51.amt > 0 and f51.a_n like '61%' UNION ALL");
            strQuery.Append(" select '', f1.a_n, f1.s_a, f1.[DESC] as [Desc], '' as [City], f51.AMT as [amt_debit] , '' as [Desc1] , (amt-amt) as [credit_extra], 0 as [amt_credit] from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and  f51.S_A = f1.S_A where f51.prd = '" + cbBalShPer.Text + "' and f51.D_D = #01-01-1901# and f51.s_a = '@@@' and f51.amt > 0 and f51.a_n like '65%' UNION ALL");
            strQuery.Append(" select '', f1.a_n, f1.s_a, f1.[DESC] as [Desc], '' as [City], f51.AMT as [amt_debit] , '' as [Desc1] , (amt-amt) as [credit_extra], 0 as [amt_credit] from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and  f51.S_A = f1.S_A where f51.prd = '" + cbBalShPer.Text + "' and f51.D_D = #01-01-1901# and f51.s_a = '@@@' and f51.amt > 0 and f51.a_n like '70%' UNION ALL");

            strQuery.Append(" select '', f1.a_n, f1.s_a, '' as [Desc], '' as [City], 0 as [amt_debit], f1.[DESC] as [Desc1], (amt-amt) as [credit_extra], (f51.AMT * -1) as [amt_credit] from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and  f51.S_A = f1.S_A where f51.prd = '" + cbBalShPer.Text + "' and f51.D_D = #01-01-1901# and f51.s_a = '@@@' and f51.amt < 0 and f51.a_n like '5000%' UNION ALL");
            strQuery.Append(" select '', f1.a_n, f1.s_a, '' as [Desc], '' as [City], 0 as [amt_debit], f1.[DESC] as [Desc1], (amt-amt) as [credit_extra], (f51.AMT * -1) as [amt_credit] from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and  f51.S_A = f1.S_A where f51.prd = '" + cbBalShPer.Text + "' and f51.D_D = #01-01-1901# and f51.s_a = '@@@' and f51.amt < 0 and f51.a_n like '6000%' UNION ALL");
            strQuery.Append(" select '', f1.a_n, f1.s_a, '' as [Desc], '' as [City], 0 as [amt_debit], f1.[DESC] as [Desc1], (amt-amt) as [credit_extra], (f51.AMT * -1) as [amt_credit] from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and  f51.S_A = f1.S_A where f51.prd = '" + cbBalShPer.Text + "' and f51.D_D = #01-01-1901# and f51.s_a = '@@@' and f51.amt < 0 and f51.a_n like '65%' UNION ALL");
            strQuery.Append(" select '', f1.a_n, f1.s_a, '' as [Desc], '' as [City], 0 as [amt_debit], f1.[DESC] as [Desc1], (amt-amt) as [credit_extra], (f51.AMT * -1) as [amt_credit] from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and  f51.S_A = f1.S_A where f51.prd = '" + cbBalShPer.Text + "' and f51.D_D = #01-01-1901# and f51.s_a = '@@@' and f51.amt < 0 and f51.a_n like '70%' UNION ALL");
            strQuery.Append(" select '', f1.a_n, f1.s_a, f1.[DESC] as [Desc], '' as [City], f51.AMT as [amt_debit] , '' as [Desc1] , (amt-amt) as [credit_extra], 0 as [amt_credit] from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and  f51.S_A = f1.S_A where f51.prd = '" + cbBalShPer.Text + "' and f51.D_D = #01-01-1901# and f51.s_a = '@@@' and f51.amt > 0 and f51.a_n = '719999' ");
            ConnectionWithAccess.query = strQuery.ToString();
            DataTable dtTrading = ConnectionCommand.fReturnDataTable();
            strQuery.Clear();

            //Profit Loss/
            strQuery.Append(" select '', f1.a_n, f1.s_a, '' as [Desc], '' as [City], 0 as [amt_debit], f1.[DESC] as [Desc1], (amt-amt) as [credit_extra], f51.AMT as [amt_credit] from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and f51.S_A = f1.S_A where f51.prd = '" + cbBalShPer.Text + "' and f51.D_D = #01-01-1901# and f51.s_a = '@@@' and f51.amt > 0 and f51.a_n = '719999' UNION ALL");
            strQuery.Append(" select '', f1.a_n, f1.s_a, f1.[DESC] as [Desc], '' as [City], f51.AMT as [amt_debit] , '' as [Desc1] , (amt-amt) as [credit_extra] , 0 as [amt_credit] from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and f51.S_A = f1.S_A where f51.prd = '" + cbBalShPer.Text + "' and f51.D_D = #01-01-1901# and f51.s_a = '@@@' and f51.amt > 0 and f51.a_n like '75%' UNION ALL");
            strQuery.Append(" select '', f1.a_n, f1.s_a, '' as [Desc], '' as [City], 0 as [amt_debit], f1.[DESC] as [Desc1], (amt-amt) as [credit_extra], (f51.AMT * -1) as [amt_credit] from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and f51.S_A = f1.S_A where f51.prd = '" + cbBalShPer.Text + "' and f51.D_D = #01-01-1901# and f51.s_a = '@@@' and f51.amt < 0 and f51.a_n like '75%' UNION ALL");
            strQuery.Append(" select '', f1.a_n, f1.s_a, f1.[DESC] as [Desc], '' as [City], f51.AMT as [amt_debit], '' as [Desc1] , (amt-amt) as [credit_extra] , 0 as [amt_credit] from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and f51.S_A = f1.S_A where f51.prd = '" + cbBalShPer.Text + "' and f51.D_D = #01-01-1901# and f51.s_a = '@@@' and f51.amt > 0 and f51.a_n = '7998' UNION ALL");
            strQuery.Append(" select '', f1.a_n, f1.s_a, '' as [Desc], '' as [City], 0 as [amt_debit], 'Net Loss' as [Desc1] , (amt-amt) as [credit_extra] , (f51.AMT * -1) as [amt_credit] from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and f51.S_A = f1.S_A where f51.prd = '" + cbBalShPer.Text + "' and f51.D_D = #01-01-1901# and f51.s_a = '@@@' and f51.amt < 0 and f51.a_n = '7998' ");

            ConnectionWithAccess.query = strQuery.ToString();
            DataTable dtProfitLoss = ConnectionCommand.fReturnDataTable();
            strQuery.Clear();

            //Capital
            strQuery.Append(" select '', f1.a_n, f1.s_a, '' as [Desc], '' as [City], 0 as [amt_debit],f1.[DESC] as [Desc1] , (amt-amt) as [credit_extra], (f51.AMT * -1) as [amt_credit] from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and  f51.S_A = f1.S_A where f51.prd = '" + mprd + "' and f51.D_D = #01-01-1901# and f51.amt < 0 and f51.a_n = '3000' UNION ALL");

            strQuery.Append(" select '', f1.a_n, f1.s_a, '' as [Desc], '' as [City], 0 as [amt_debit], f1.[DESC] as [Desc1] , (amt-amt) as [credit_extra], f51.AMT as [amt_credit] from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and f51.S_A = f1.S_A where f51.prd = '" + mprd + "' and f51.D_D = #01-01-1901# and f51.amt > 0 and f51.a_n = '7998' UNION ALL");
            strQuery.Append(" select '', f1.a_n, f1.s_a, 'Net Loss' as [Desc], '' as [City], (f51.AMT * -1) as [amt_debit], '' as [Desc1] , (amt-amt) as [credit_extra] , 0 as [amt_credit] from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and f51.S_A = f1.S_A where f51.prd = '" + cbBalShPer.Text + "' and f51.D_D = #01-01-1901# and f51.s_a = '@@@' and f51.amt < 0 and f51.a_n = '7998' UNION ALL");
            strQuery.Append(" select '', f1.a_n, f1.s_a, f1.[DESC] as [Desc], '' as [City], f51.AMT as [amt_debit],'' as [Desc1] , (amt-amt) as [credit_extra] , 0 as [amt_credit] from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and f51.S_A = f1.S_A where f51.prd = '" + mprd + "' and f51.D_D = #01-01-1901# and f51.amt > 0 and f51.s_a <> '@@@' and f51.a_n like '3001%' UNION ALL");
            strQuery.Append(" select '', f1.a_n, f1.s_a, '' as [Desc], '' as [City], 0 as [amt_debit], f1.[DESC] as [Desc1] , (amt-amt) as [credit_extra], (f51.AMT * -1) as [amt_credit] from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and  f51.S_A = f1.S_A where f51.prd = '" + mprd + "' and f51.D_D = #01-01-1901# and f51.amt < 0 and f51.a_n like '3001%' UNION ALL");
            strQuery.Append(" select '', f1.a_n, f1.s_a, f1.[DESC] as [Desc], '' as [City], f51.AMT as [amt_debit],'' as [Desc1] , (amt-amt) as [credit_extra] , 0 as [amt_credit] from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and  f51.S_A = f1.S_A where f51.prd = '" + mprd + "' and f51.D_D = #01-01-1901# and f51.amt > 0 and f51.a_n = '3001' and f51.s_a = '@@@'  ");

            ConnectionWithAccess.query = strQuery.ToString();
            DataTable dtCapital = ConnectionCommand.fReturnDataTable();
            strQuery.Clear();

            //Balance Sheet
            strQuery.Append(" select '', f1.a_n, f1.s_a, '' as [Desc],'' as [City] , 0 as [amt_debit] , f1.[DESC] as [Desc1], f51.AMT as [credit_extra], 0 as [amt_credit] from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + "  f1 on f51.A_N = f1.A_N and f51.S_A = f1.S_A where f51.prd = '" + mprd + "' and f51.D_D = #01-01-1901# and f51.a_n like '1%' union all select '', f1.a_n, f1.s_a, '' as [Desc],'' as [City] , (JAMT-JAMT) as [amt_debit] , f1.[DESC] as [Desc1], f25.JAMT as [credit_extra], (JAMT-JAMT) as [amt_credit]  from " + ConnectionWithAccess.tablename[25] + " f25 inner join " + ConnectionWithAccess.tablename[1] + " f1 on f1.A_n = f25.NA_n where f25.prd = '" + mprd + "' and f25.a_n = '75Dep' and f25.s_a = 'DEP' UNION ALL");

            strQuery.Append(" select '', f1.a_n, f1.s_a, '' as [Desc],'' as [City] , 0 as [amt_debit] , f1.[DESC] as [Desc1], (amt-amt) as [credit_extra], f51.AMT as [amt_credit] from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and f51.S_A = f1.S_A where f51.prd = '" + mprd + "' and f51.D_D = #01-01-1901# and f51.amt > 0 and f51.s_a = '@@@' and f51.a_n like '2%' and f51.a_n <> '2001' UNION ALL");
            strQuery.Append(" select '', f1.a_n, f1.s_a, '' as [Desc],'' as [City] , 0 as [amt_debit] , f1.[DESC] as [Desc1], (amt-amt) as [credit_extra], f51.AMT as [amt_credit] from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and f51.S_A = f1.S_A where f51.prd = '" + mprd + "' and f51.D_D = #01-01-1901# and f51.amt > 0 and f51.s_a = '@@@' and f51.a_n like '3%' and f51.a_n <> '3001'and f51.a_n <> '3500' and f51.a_n <> '3501' UNION ALL");
            strQuery.Append(" select '', f1.a_n, f1.s_a, '' as [Desc],'' as [City] , 0 as [amt_debit]  , f1.[DESC] as [Desc1], (amt-amt) as [credit_extra], f51.AMT as [amt_credit] from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and f51.S_A = f1.S_A where f51.prd = '" + mprd + "' and f51.D_D = #01-01-1901# and f51.amt > 0 and f51.s_a <> '@@@' and f51.a_n LIKE '35%' UNION ALL");
            strQuery.Append(" select '', f1.a_n, f1.s_a, '' as [Desc],'' as [City] , 0 as [amt_debit]  , f1.[DESC] as [Desc1], (amt-amt) as [credit_extra], f51.AMT as [amt_credit] from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and f51.S_A = f1.S_A where f51.prd = '" + mprd + "' and f51.D_D = #01-01-1901# and f51.amt > 0 and f51.s_a = '@@@' and f51.a_n like '4%' UNION ALL");

            strQuery.Append(" select '', f1.a_n, f1.s_a, '' as [Desc],'' as [City] , 0 as [amt_debit] , f1.[DESC] as [Desc1], (amt-amt) as [credit_extra], f51.AMT as [amt_credit] from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and f51.S_A = f1.S_A where f51.prd = '" + mprd + "' and f51.D_D = #01-01-1901# and f51.amt > 0 and f51.s_a = '@@@' and f51.a_n like '65%' UNION ALL");

            strQuery.Append(" select '', f1.a_n, f1.s_a, f1.[DESC] as [Desc] , '' as [City], f51.AMT as [amt_debit], '' as [Desc1], (amt-amt) as [credit_extra],0 as [amt_credit] from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and f51.S_A = f1.S_A where f51.prd = '" + mprd + "' and f51.D_D = #01-01-1901# and f51.amt > 0 and f51.s_a = '@@@' and f51.a_n = '3001' UNION ALL");
            strQuery.Append(" select '', f1.a_n, f1.s_a, '' as [Desc],'' as [City] , 0 as [amt_debit] , f1.[DESC] as [Desc1], (amt-amt) as [credit_extra], (f51.AMT * -1) as [amt_credit] from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and f51.S_A = f1.S_A where f51.prd = '" + mprd + "' and f51.D_D = #01-01-1901# and f51.amt < 0 and f51.s_a = '@@@' and f51.a_n like '5%' UNION ALL");
            strQuery.Append(" select '', f1.a_n, f1.s_a, f1.[DESC] as [Desc] , '' as [City], (f51.AMT * -1) as [amt_debit], '' as [Desc1], (amt-amt) as [credit_extra],0 as [amt_credit] from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and f51.S_A = f1.S_A where f51.prd = '" + mprd + "' and f51.D_D = #01-01-1901# and f51.amt < 0 and f51.s_a = '@@@' and f51.a_n like '2%' UNION ALL");
            strQuery.Append(" select '', f1.a_n, f1.s_a, f1.[DESC] as [Desc] , '' as [City], (f51.AMT * -1) as [amt_debit], '' as [Desc1], (amt-amt) as [credit_extra],0 as [amt_credit] from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and f51.S_A = f1.S_A where f51.prd = '" + mprd + "' and f51.D_D = #01-01-1901# and f51.amt < 0 and f51.s_a = '@@@' and f51.a_n like '3%' and f51.a_n <> '3000' and f51.a_n <> '3500' and f51.a_n <> '3501' UNION ALL");
            strQuery.Append(" select '', f1.a_n, f1.s_a, f1.[DESC] as [Desc] , '' as [City], (f51.AMT * -1) as [amt_debit], '' as [Desc1], (amt-amt) as [credit_extra],0 as [amt_credit] from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and f51.S_A = f1.S_A where f51.prd = '" + mprd + "' and f51.D_D = #01-01-1901# and f51.amt < 0 and (f51.s_a <> '@@@' and f51.s_a <> '') and f51.a_n LIKE '35%' and f51.a_n <> '3500' UNION ALL");
            strQuery.Append(" select '', f1.a_n, f1.s_a, f1.[DESC] as [Desc] , '' as [City], (f51.AMT * -1) as [amt_debit], '' as [Desc1], (amt-amt) as [credit_extra],0 as [amt_credit] from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and f51.S_A = f1.S_A where f51.prd = '" + mprd + "' and f51.D_D = #01-01-1901# and f51.amt < 0 and f51.s_a = '@@@' and f51.a_n like '4%'  ");

            ConnectionWithAccess.query = strQuery.ToString();
            DataTable dtBalanceSheet = ConnectionCommand.fReturnDataTable();
            strQuery.Clear();

            //debitors_outstanding
            //strQuery.Append(" select '', f1.a_n, f1.s_a, f1.[DESC],f1.[CITY], f51.AMT as [amt_debit], '', 0.00,0.00 as [amt_credit]  from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and  f51.S_A = f1.S_A where f51.prd = '" + cbBalShPer.Text + "' and f51.D_D = #01-01-1901# and f51.s_a <> '@@@' and f51.amt > 0 and f51.a_n like '2002%' order by f1.a_n + f1.s_a ");
            strQuery.Append(" select '', f1.a_n, f1.s_a, f1.[DESC] as [Desc],f1.[CITY] as [City], f51.AMT as [amt_debit], '' as [Desc1],  (amt-amt) as [credit_extra],  (amt-amt) as [amt_credit]  from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and  f51.S_A = f1.S_A where f51.prd = '" + cbBalShPer.Text + "' and f51.D_D = #01-01-1901# and f51.s_a <> '@@@' and f51.amt > 0 and f51.a_n like '2002%' order by f1.a_n + f1.s_a ");

            ConnectionWithAccess.query = strQuery.ToString();
            DataTable dtDebitorsOutstanding = ConnectionCommand.fReturnDataTable();
            strQuery.Clear();

            //creditors_outstanding
            strQuery.Append(" select '', f1.a_n, f1.s_a, f1.[DESC] as [Desc],f1.[CITY] as [City], (f51.AMT *-1) as [amt_debit], '' as [Desc1],  (amt-amt) as [credit_extra], (amt-amt) as [amt_credit]  from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and  f51.S_A = f1.S_A where f51.prd = '" + cbBalShPer.Text + "' and f51.D_D = #01-01-1901# and f51.s_a <> '@@@' and f51.amt < 0 and f51.a_n = '4002'  ");

            ConnectionWithAccess.query = strQuery.ToString();
            DataTable dtCreditorsOutstanding = ConnectionCommand.fReturnDataTable();
            strQuery.Clear();

            //debitors_advances
            strQuery.Append(" select '', f1.a_n, f1.s_a, f1.[DESC] as [Desc],f1.[CITY] as [City], (f51.AMT * -1) as [amt_debit], '' as [Desc1],  (amt-amt) as [credit_extra], (amt-amt) as [amt_credit]  from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and  f51.S_A = f1.S_A where f51.prd = '" + cbBalShPer.Text + "' and f51.D_D = #01-01-1901# and f51.s_a <> '@@@' and f51.amt < 0 and f51.a_n = '2002' ");

            ConnectionWithAccess.query = strQuery.ToString();
            DataTable dtDebitorsAdvances = ConnectionCommand.fReturnDataTable();
            strQuery.Clear();

            //creditors_deposits
            strQuery.Append(" select '', f1.a_n, f1.s_a, f1.[DESC] as [Desc],f1.[CITY] as [City], f51.AMT as [amt_debit], '' as [Desc1],  (amt-amt) as [credit_extra] , (amt-amt) as [amt_credit]  from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and  f51.S_A = f1.S_A where f51.prd = '" + cbBalShPer.Text + "' and f51.D_D = #01-01-1901# and f51.s_a <> '@@@' and f51.amt > 0 and f51.a_n = '4002' ");

            ConnectionWithAccess.query = strQuery.ToString();
            DataTable dtCreditorsDeposits = ConnectionCommand.fReturnDataTable();
            strQuery.Clear();

            DataTable dtAll = new DataTable();
            dtAll.Merge(dtTrading);
            dtAll.Merge(dtProfitLoss);
            dtAll.Merge(dtCapital);
            dtAll.Merge(dtBalanceSheet);
            dtAll.Merge(dtDebitorsOutstanding);
            dtAll.Merge(dtCreditorsOutstanding);
            dtAll.Merge(dtDebitorsAdvances);
            dtAll.Merge(dtCreditorsDeposits);

            BalShDGV.AutoGenerateColumns = true;
            BalShDGV.DataSource = null;
            BalShDGV.DataSource = dtAll;

            //ConnectionCommand.accountHelp_datatable_Seperate(BalShDGV, "Balance Sheet");

        }

        private void generate_all_period_tr_pl_ca_blst()
        {
            list_of_period_array.Clear();
            ConnectionWithAccess.query = "select prd from " + ConnectionWithAccess.tablename[50] + " order by prd";
            DataTable dtData1 = ConnectionCommand.fGetDataTable();
            if (dtData1 != null && dtData1.Rows.Count > 0)
            {
                int mcolumncount = dtData1.Columns.Count;
                for (int iRowCount = 1; iRowCount < dtData1.Rows.Count; iRowCount++)
                {
                    list_of_period_array.Add(dtData1.Rows[iRowCount][0].ToString());
                }
            }
            if (list_of_period_array.Count > 1)
            {
                temp_int = 1;
                for (int array_count = 0; array_count < list_of_period_array.Count(); array_count++)
                {
                    if (list_of_period_array[array_count] == ConnectionWithAccess.mprd)
                    {
                        temp_int = array_count;
                        array_count = list_of_period_array.Count();
                    }
                }
                for (int array_count = temp_int; array_count < list_of_period_array.Count(); array_count++)
                {
                    cbBalShPer.Text = list_of_period_array[array_count];
                    generate_full_balance_sheet_report(list_of_period_array[array_count]);
                }
            }

        }

        private void save_gridview_lines(DataGridView mDataGridView, int column_number, int column_number2)
        {
            for (row_pointer = 0; row_pointer < mDataGridView.Rows.Count; row_pointer++)
            {
                if (mDataGridView.Rows[row_pointer].Cells[column_number].Value == null || mDataGridView.Rows[row_pointer].Cells[column_number].Value.ToString() == " ")
                {
                    for (int i = 0; i < mDataGridView.Rows.Count; i++)
                    {
                        if (mDataGridView.Rows[i].Cells[column_number].Value != null && mDataGridView.Rows[i].Cells[column_number].Value.ToString() != "")
                        {
                            temp_word = mDataGridView.Rows[i].Cells[column_number].Value.ToString();
                            temp_double = Convert.ToDouble(mDataGridView.Rows[i].Cells[column_number2].Value.ToString());
                            mDataGridView.Rows[i].Cells[column_number].Value = null;
                            mDataGridView.Rows[i].Cells[column_number2].Value = null;
                            mDataGridView.Rows[row_pointer].Cells[column_number].Value = temp_word;
                            mDataGridView.Rows[row_pointer].Cells[column_number2].Value = Convert.ToString(temp_double);
                            i = mDataGridView.Rows.Count;
                        }
                    }
                }
            }
            mDataGridView.Refresh();
        }

        #region add_contains_in_gridview
        private void add_contains_of_trial_balance_in_gridview()
        {
            StringBuilder strQuery = new StringBuilder();

            strQuery.Append(" select f1.a_n, f1.s_a, f1.[DESC], f51.AMT as [amt_debit], 0 as [amt_credit] from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and  f51.S_A = f1.S_A where f51.prd = '" + cbBalShPer.Text + "' and f51.D_D = #01-01-1901# and f51.s_a = '@@@' and f51.amt > 0 and f51.a_n = '2001' UNION ALL");
            strQuery.Append(" select f1.a_n, f1.s_a, f1.[DESC], f51.AMT as [amt_debit], 0 as [amt_credit] from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and  f51.S_A = f1.S_A where f51.prd = '" + cbBalShPer.Text + "' and f51.D_D = #01-01-1901# and f51.s_a = '@@@' and f51.amt > 0 and f51.a_n like '6000%' UNION ALL");
            strQuery.Append(" select f1.a_n, f1.s_a, f1.[DESC], f51.AMT as [amt_debit], 0 as [amt_credit] from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and  f51.S_A = f1.S_A where f51.prd = '" + cbBalShPer.Text + "' and f51.D_D = #01-01-1901# and f51.s_a = '@@@' and f51.amt > 0 and f51.a_n like '61%' UNION ALL");
            strQuery.Append(" select f1.a_n, f1.s_a, f1.[DESC], f51.AMT as [amt_debit], 0 as [amt_credit] from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and  f51.S_A = f1.S_A where f51.prd = '" + cbBalShPer.Text + "' and f51.D_D = #01-01-1901# and f51.s_a = '@@@' and f51.amt > 0 and f51.a_n like '65%' UNION ALL");
            strQuery.Append(" select f1.a_n, f1.s_a, f1.[DESC], f51.AMT as [amt_debit], 0 as [amt_credit] from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and  f51.S_A = f1.S_A where f51.prd = '" + cbBalShPer.Text + "' and f51.D_D = #01-01-1901# and f51.s_a = '@@@' and f51.amt > 0 and f51.a_n like '70%' UNION ALL");
            strQuery.Append(" select f1.a_n, f1.s_a, f1.[DESC], 0 as [amt_debit], (f51.amt * -1) as [amt_credit] from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and  f51.S_A = f1.S_A where f51.prd = '" + cbBalShPer.Text + "' and f51.D_D = #01-01-1901# and f51.s_a = '@@@' and f51.amt < 0 and f51.a_n like '70%' UNION ALL");
            strQuery.Append(" select f1.a_n, f1.s_a, f1.[DESC], 0 as [amt_debit], (f51.AMT * -1) as [amt_credit] from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and  f51.S_A = f1.S_A where f51.prd = '" + cbBalShPer.Text + "' and f51.D_D = #01-01-1901# and f51.s_a = '@@@' and f51.amt < 0 and f51.a_n like '6000%' UNION ALL");
            strQuery.Append(" select f1.a_n, f1.s_a, f1.[DESC], 0 as [amt_debit], (f51.AMT * -1) as [amt_credit] from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and  f51.S_A = f1.S_A where f51.prd = '" + cbBalShPer.Text + "' and f51.D_D = #01-01-1901# and f51.s_a = '@@@' and f51.amt < 0 and f51.a_n like '65%' UNION ALL");

            // ACTUALLY NOT NEEDED IN REPORT ONLY NEEDED TO TALLY LIST
            strQuery.Append(" select f1.a_n, f1.s_a, f1.[DESC], 0 as [amt_debit], (f51.AMT * -1) as [amt_credit] from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and  f51.S_A = f1.S_A where f51.prd = '" + cbBalShPer.Text + "' and f51.D_D = #01-01-1901# and f51.s_a = '@@@' and f51.amt < 0 and f51.a_n like '5000%' UNION ALL");
            //strQuery.Append(" select f1.a_n, f1.s_a, f1.[DESC], f51.AMT as [amt_debit], 0 as [amt_credit] from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and  f51.S_A = f1.S_A where f51.prd = '" + cbBalShPer.Text + "' and f51.D_D = #01-01-1901# and f51.s_a = '@@@' and f51.amt > 0 and f51.a_n like '719999%'UNION ALL ");
            //strQuery.Append(" select f1.a_n, f1.s_a, f1.[DESC], 0 as [amt_debit], (f51.AMT) as [amt_credit] from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and  f51.S_A = f1.S_A where f51.prd = '" + cbBalShPer.Text + "' and f51.D_D = #01-01-1901# and f51.s_a = '@@@' and f51.amt > 0 and f51.a_n like '719999%'UNION ALL ");
            // ACTUALLY NOT NEEDED IN REPORT ONLY NEEDED TO TALLY LIST

            strQuery.Append(" select f1.a_n, f1.s_a, f1.[DESC], f51.AMT as [amt_debit], 0 as [amt_credit] from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and f51.S_A = f1.S_A where f51.prd = '" + cbBalShPer.Text + "' and f51.D_D = #01-01-1901# and f51.s_a = '@@@' and f51.amt > 0 and f51.a_n like '75%' UNION ALL");
            strQuery.Append(" select f1.a_n, f1.s_a, f1.[DESC], 0 as [amt_debit], (f51.AMT * -1) as [amt_credit] from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and f51.S_A = f1.S_A where f51.prd = '" + cbBalShPer.Text + "' and f51.D_D = #01-01-1901# and f51.s_a = '@@@' and f51.amt < 0 and f51.a_n like '75%' UNION ALL");

            strQuery.Append(" select f1.a_n, f1.s_a, f1.[DESC], f51.AMT as [amt_debit], 0 as [amt_credit] from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and  f51.S_A = f1.S_A where f51.prd = '" + cbBalShPer.Text + "' and f51.D_D = #01-01-1901# and f51.s_a = '@@@' and f51.amt > 0 and f51.a_n like '7998%' UNION ALL");


            strQuery.Append(" select f1.a_n, f1.s_a, f1.[DESC], 0 as [amt_debit], (f51.AMT * -1) as [amt_credit] from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and  f51.S_A = f1.S_A where f51.prd = '" + cbBalShPer.Text + "' and f51.D_D = #01-01-1901# and f51.amt < 0 and f51.a_n = '3000' UNION ALL");

            strQuery.Append(" select f1.a_n, f1.s_a, f1.[DESC], 0 as [amt_debit], (f51.AMT) as [amt_credit] from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and  f51.S_A = f1.S_A where f51.prd = '" + cbBalShPer.Text + "' and f51.D_D = #01-01-1901# and f51.s_a = '@@@' and f51.amt > 0 and f51.a_n like '7998%'UNION ALL ");
            strQuery.Append(" select f1.a_n, f1.s_a, f1.[DESC], f51.AMT as [amt_debit], 0 as [amt_credit] from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and f51.S_A = f1.S_A where f51.prd = '" + cbBalShPer.Text + "' and f51.D_D = #01-01-1901# and f51.amt > 0 and f51.s_a <> '@@@' and f51.a_n like '3001%' UNION ALL");
            strQuery.Append(" select f1.a_n, f1.s_a, f1.[DESC], 0 as [amt_debit], (f51.AMT * -1) as [amt_credit] from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and  f51.S_A = f1.S_A where f51.prd = '" + cbBalShPer.Text + "' and f51.D_D = #01-01-1901# and f51.amt < 0 and f51.a_n like '3001%' UNION ALL");

            //strQuery.Append(" select f1.a_n, f1.s_a, f1.[DESC], f51.AMT as [amt_debit], 0 as [amt_credit] from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and  f51.S_A = f1.S_A where f51.prd = '" + cbBalShPer.Text + "' and f51.D_D = #01-01-1901# and f51.amt > 0 and f51.s_a = '@@@' and f51.a_n like '3001%' UNION ALL");


            strQuery.Append(" select f1.a_n, f1.s_a, f1.[DESC], f51.AMT as [amt_debit], 0 as [amt_credit] from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and f51.S_A = f1.S_A where f51.prd = '" + cbBalShPer.Text + "' and f51.s_a = '@@@' and f51.amt > 0 and f51.a_n like '1%' UNION ALL");
            strQuery.Append(" select f1.a_n, f1.s_a, f1.[DESC], 0 as [amt_debit], (f51.AMT * -1) as [amt_credit] from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and f51.S_A = f1.S_A where f51.prd = '" + cbBalShPer.Text + "' and f51.s_a = '@@@' and f51.amt < 0 and f51.a_n like '1%' UNION ALL");
            strQuery.Append(" select f1.a_n, f1.s_a, f1.[DESC], f51.AMT as [amt_debit], 0 as [amt_credit] from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and f51.S_A = f1.S_A where f51.prd = '" + cbBalShPer.Text + "' and f51.D_D = #01-01-1901# and f51.amt > 0 and f51.s_a = '@@@' and f51.a_n like '2%' and f51.a_n <> '2001' UNION ALL");

            strQuery.Append(" select f1.a_n, f1.s_a, f1.[DESC], 0 as [amt_debit], (f51.AMT * -1) as [amt_credit] from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and f51.S_A = f1.S_A where f51.prd = '" + cbBalShPer.Text + "' and f51.D_D = #01-01-1901# and f51.amt < 0 and f51.s_a = '@@@' and f51.a_n like '2%' UNION ALL");
            strQuery.Append(" select f1.a_n, f1.s_a, f1.[DESC], f51.AMT as [amt_debit], 0 as [amt_credit] from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and f51.S_A = f1.S_A where f51.prd = '" + cbBalShPer.Text + "' and f51.D_D = #01-01-1901# and f51.amt > 0 and f51.s_a = '@@@' and f51.a_n like '3%' and f51.a_n <> '3001'and f51.a_n <> '3555' UNION ALL");
            strQuery.Append(" select f1.a_n, f1.s_a, f1.[DESC], 0 as [amt_debit], f51.AMT as [amt_credit] from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and f51.S_A = f1.S_A where f51.prd = '" + cbBalShPer.Text + "' and f51.D_D = #01-01-1901# and f51.amt > 0 and f51.s_a = '@@@' and f51.a_n like '4%' UNION ALL");
            strQuery.Append(" select f1.a_n, f1.s_a, f1.[DESC], 0 as [amt_debit], (f51.AMT * -1) as [amt_credit] from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and f51.S_A = f1.S_A where f51.prd = '" + cbBalShPer.Text + "' and f51.D_D = #01-01-1901# and f51.amt < 0 and f51.s_a = '@@@' and f51.a_n like '3%' and f51.a_n <> '3000' and f51.a_n <> '3001' and f51.a_n <> '3555' UNION ALL");
            strQuery.Append(" select f1.a_n, f1.s_a, f1.[DESC], 0 as [amt_debit], (f51.AMT * -1) as [amt_credit] from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and f51.S_A = f1.S_A where f51.prd = '" + cbBalShPer.Text + "' and f51.D_D = #01-01-1901# and f51.amt < 0 and (f51.s_a <> '@@@' and f51.s_a <> '') and f51.a_n LIKE '35%' UNION ALL");
            strQuery.Append(" select f1.a_n, f1.s_a, f1.[DESC], f51.AMT as [amt_debit], 0 as [amt_credit] from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and f51.S_A = f1.S_A where f51.prd = '" + cbBalShPer.Text + "' and f51.D_D = #01-01-1901# and f51.amt > 0 and (f51.s_a <> '@@@' and f51.s_a <> '') and f51.a_n LIKE '35%' UNION ALL");
            strQuery.Append(" select f1.a_n, f1.s_a, f1.[DESC], 0 as [amt_debit], (f51.AMT * -1) as [amt_credit] from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and f51.S_A = f1.S_A where f51.prd = '" + cbBalShPer.Text + "' and f51.D_D = #01-01-1901# and f51.amt < 0 and f51.s_a = '@@@' and f51.a_n like '4%' UNION ALL");
            //strQuery.Append(" select f1.a_n, f1.s_a, f1.[DESC], 0 as [amt_debit], f51.AMT as [amt_credit] from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and  f51.S_A = f1.S_A where f51.prd = '" + cbBalShPer.Text + "' and f51.D_D = #01-01-1901# and f51.amt > 0 and f51.s_a = '@@@' and f51.a_n like '3001%' UNION ALL");
            strQuery.Append(" select f1.a_n, f1.s_a, f1.[DESC], (f51.AMT * -1) as [amt_debit], 0 as [amt_credit] from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and  f51.S_A = f1.S_A where f51.prd = '" + cbBalShPer.Text + "' and f51.D_D = #01-01-1901# and f51.s_a = '@@@' and f51.amt < 0 and f51.a_n like '5000%' ");

            ConnectionWithAccess.query = strQuery.ToString();

            ConnectionCommand.accountHelp_datatable_Seperate(BalShDGV, "Trading Account");

            fAdd_trial_balance_Report_Totals();

            BalShDGV.Columns[0].HeaderText = "A_n";
            BalShDGV.Columns[1].HeaderText = "S_a";
            BalShDGV.Columns[2].HeaderText = "Particular's";
            BalShDGV.Columns[3].HeaderText = "Debit";
            BalShDGV.Columns[4].HeaderText = "Credit";

            BalShDGV.Columns[3].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;
            BalShDGV.Columns[4].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;
        }

        private void add_contains_of_trading_account_in_gridview(bool dont_cleargridview = false)
        {
            StringBuilder strQuery = new StringBuilder();
            ConnectionWithAccess.query = query_contains_for_trading_account_union(cbBalShPer.Text); ;// strQuery.ToString();
            ConnectionCommand.accountHelp_datatable_Seperate(BalShDGV, "Trading Account");
            fAdd_Trading_Report_Totals();

            BalShDGV.Columns[0].HeaderText = "Sort";
            BalShDGV.Columns[1].HeaderText = "A_n";
            BalShDGV.Columns[2].HeaderText = "S_a";
            BalShDGV.Columns[3].HeaderText = "Particular's";
            BalShDGV.Columns[4].HeaderText = "Debit_extra";
            BalShDGV.Columns[5].HeaderText = "Debit";
            BalShDGV.Columns[6].HeaderText = "Particular's";
            BalShDGV.Columns[7].HeaderText = "Credit_extra";
            BalShDGV.Columns[8].HeaderText = "Credit";

            BalShDGV.Columns[4].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;
            BalShDGV.Columns[5].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;
            BalShDGV.Columns[7].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;
            BalShDGV.Columns[8].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;
            //BalShDGV.Columns[4].DefaultCellStyle.Format = "N2";
            //BalShDGV.Columns[5].DefaultCellStyle.Format = "N2";
            //BalShDGV.Columns[7].DefaultCellStyle.Format = "N2";
            //BalShDGV.Columns[8].DefaultCellStyle.Format = "N2";
            BalShDGV.Columns[0].Visible = false;
            BalShDGV.Columns[1].Visible = false;
            BalShDGV.Columns[2].Visible = false;
            BalShDGV.Columns[4].Visible = false;
            BalShDGV.Columns[7].Visible = false;
        }

        private void add_contains_of_profit_and_loss_in_gridview(bool dont_cleargridview = false)
        {
            StringBuilder strQuery = new StringBuilder();
            ConnectionWithAccess.query = query_contains_for_profit_and_loss_account_union(cbBalShPer.Text); ;// strQuery.ToString();
            ConnectionCommand.accountHelp_datatable_Seperate(BalShDGV, "Profit and Loss Account");
            fAdd_ProfitLoss_Report_Totals();

            BalShDGV.Columns[0].HeaderText = "Sort";
            BalShDGV.Columns[1].HeaderText = "A_n";
            BalShDGV.Columns[2].HeaderText = "S_a";
            BalShDGV.Columns[3].HeaderText = "Particular's";
            BalShDGV.Columns[4].HeaderText = "Debit_extra";
            BalShDGV.Columns[5].HeaderText = "Debit";
            BalShDGV.Columns[6].HeaderText = "Particular's";
            BalShDGV.Columns[7].HeaderText = "Credit_extra";
            BalShDGV.Columns[8].HeaderText = "Credit";

            BalShDGV.Columns[0].Visible = false;
            BalShDGV.Columns[1].Visible = false;
            BalShDGV.Columns[2].Visible = false;
            BalShDGV.Columns[4].Visible = false;
            BalShDGV.Columns[7].Visible = false;

            BalShDGV.Columns[4].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;
            BalShDGV.Columns[5].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;
            BalShDGV.Columns[7].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;
            BalShDGV.Columns[8].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;

        }

        private void add_contains_of_capital_account_in_gridview(string emerg_prd, bool dont_cleargridview = false)
        {
            StringBuilder strQuery = new StringBuilder();
            ConnectionWithAccess.query = query_contains_for_capital_account_union(emerg_prd); ;// strQuery.ToString();
            ConnectionCommand.accountHelp_datatable_Seperate(BalShDGV, "Capital Account");
            fAdd_CapitalAccount_Report_Totals();  // dont remove this its compulsory (sanjay)
        }

        private void add_contains_of_capital_account_in_gridviewold(string emerg_prd, bool dont_cleargridview = false)
        {
            ConnectionWithAccess.query = "select '', f1.a_n, f1.s_a, '', '', '',f1.[DESC] , '', f51.AMT * -1 from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and  f51.S_A = f1.S_A where f51.prd = '" + emerg_prd + "' and f51.D_D = #01-01-1901# and f51.amt < 0 and f51.a_n = '3000'";
            if (dont_cleargridview)
                ConnectionCommand.multiplerows(BalShDGV, "Capital Account");
            else
            {
                ConnectionCommand.accountHelp(BalShDGV, "Capital Account");
                BalShDGV.Columns[0].HeaderText = "Sort";
                BalShDGV.Columns[1].HeaderText = "A_n";
                BalShDGV.Columns[2].HeaderText = "S_a";
                BalShDGV.Columns[3].HeaderText = "Particular's";
                BalShDGV.Columns[4].HeaderText = "Debit_extra";
                BalShDGV.Columns[5].HeaderText = "Debit";
                BalShDGV.Columns[6].HeaderText = "Particular's";
                BalShDGV.Columns[7].HeaderText = "Credit_extra";
                BalShDGV.Columns[8].HeaderText = "Credit";
                BalShDGV.Columns[4].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;
                BalShDGV.Columns[5].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;
                BalShDGV.Columns[7].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;
                BalShDGV.Columns[8].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;
            }
            ConnectionWithAccess.query = "select '', f1.a_n, f1.s_a, '', '', '',f1.[DESC] , '', f51.AMT from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and f51.S_A = f1.S_A where f51.prd = '" + emerg_prd + "' and f51.D_D = #01-01-1901# and f51.amt > 0 and f51.a_n = '7998'";
            ConnectionCommand.multiplerows(BalShDGV, "Capital Account");
            ConnectionWithAccess.query = "select '', f1.a_n,f1.s_a,'Net Loss','', (f51.AMT * -1), '' , '' , '' from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and f51.S_A = f1.S_A where f51.prd = '" + cbBalShPer.Text + "' and f51.D_D = #01-01-1901# and f51.s_a = '@@@' and f51.amt < 0 and f51.a_n = '7998'";
            ConnectionCommand.multiplerows(BalShDGV, "Profit and Loss Account");
            ConnectionWithAccess.query = "select '', f1.a_n, f1.s_a, f1.[DESC], '', f51.AMT,'' , '' , '' from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and f51.S_A = f1.S_A where f51.prd = '" + emerg_prd + "' and f51.D_D = #01-01-1901# and f51.amt > 0 and f51.s_a <> '@@@' and f51.a_n like '3001%'";
            ConnectionCommand.multiplerows(BalShDGV, "Capital Account");
            ConnectionWithAccess.query = "select '', f1.a_n, f1.s_a, '', '', '',f1.[DESC] , '', (f51.AMT * -1) from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and  f51.S_A = f1.S_A where f51.prd = '" + emerg_prd + "' and f51.D_D = #01-01-1901# and f51.amt < 0 and f51.a_n like '3001%'";
            ConnectionCommand.multiplerows(BalShDGV, "Capital Account");
            ConnectionWithAccess.query = "select '', f1.a_n, f1.s_a, f1.[DESC], '', f51.AMT,'' , '' , '' from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and  f51.S_A = f1.S_A where f51.prd = '" + emerg_prd + "' and f51.D_D = #01-01-1901# and f51.amt > 0 and f51.a_n = '3001' and f51.s_a = '@@@'";
            ConnectionCommand.multiplerows(BalShDGV, "Capital Account");
        }

        private void add_contains_of_balance_sheet_in_gridview(string mprd, bool dont_cleargridview = false)
        {
            StringBuilder strQuery = new StringBuilder();
            ConnectionWithAccess.query = query_contains_for_balance_sheet_union(mprd); ;// strQuery.ToString();
            ConnectionCommand.accountHelp_datatable_Seperate(BalShDGV, "Balance Sheet");
            //fAdd_Balance_Report_Totals();
            add_difference_record_in_trading_pl_balance_sheet(mprd);

            BalShDGV.Columns[0].HeaderText = "Sort";
            BalShDGV.Columns[1].HeaderText = "A_n";
            BalShDGV.Columns[2].HeaderText = "S_a";
            BalShDGV.Columns[3].HeaderText = "Particular's";
            BalShDGV.Columns[4].HeaderText = "Debit_extra";
            BalShDGV.Columns[5].HeaderText = "Debit";
            BalShDGV.Columns[6].HeaderText = "Particular's";
            BalShDGV.Columns[7].HeaderText = "Credit_extra";
            BalShDGV.Columns[8].HeaderText = "Credit";
            BalShDGV.Columns[4].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;
            BalShDGV.Columns[5].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;
            BalShDGV.Columns[7].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;
            BalShDGV.Columns[8].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;
            temp_double = 0;
            temp_word = null;
        }

        private void add_contains_of_balance_sheet_in_gridviewold(string mprd, bool dont_cleargridview = false)
        {
            ConnectionWithAccess.query = "select '', f1.a_n, f1.s_a, '','' , '' , f1.[DESC], f51.AMT, '' from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + "  f1 on f51.A_N = f1.A_N and f51.S_A = f1.S_A where f51.prd = '" + mprd + "' and f51.D_D = #01-01-1901# and f51.a_n like '1%' union  select '', f1.a_n, f1.s_a, '','' , '' , f1.[DESC], f25.JAMT, ''  from " + ConnectionWithAccess.tablename[25] + " f25 inner join " + ConnectionWithAccess.tablename[1] + " f1 on f1.A_n = f25.NA_n where f25.prd = '" + mprd + "' and f25.a_n = '75Dep' and f25.s_a = 'DEP'";
            if (dont_cleargridview)
                ConnectionCommand.multiplerows(BalShDGV, "Balance Sheet");
            else
            {
                BalShDGV.Rows.Clear();
                ConnectionCommand.accountHelp(BalShDGV, "Balance Sheet");
                BalShDGV.Columns[0].HeaderText = "Sort";
                BalShDGV.Columns[1].HeaderText = "A_n";
                BalShDGV.Columns[2].HeaderText = "S_a";
                BalShDGV.Columns[3].HeaderText = "Particular's";
                BalShDGV.Columns[4].HeaderText = "Debit_extra";
                BalShDGV.Columns[5].HeaderText = "Debit";
                BalShDGV.Columns[6].HeaderText = "Particular's";
                BalShDGV.Columns[7].HeaderText = "Credit_extra";
                BalShDGV.Columns[8].HeaderText = "Credit";
                BalShDGV.Columns[4].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;
                BalShDGV.Columns[5].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;
                BalShDGV.Columns[7].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;
                BalShDGV.Columns[8].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;
            }
            ConnectionWithAccess.query = "select '', f1.a_n, f1.s_a, '','' , '' , f1.[DESC], '', f51.AMT from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and f51.S_A = f1.S_A where f51.prd = '" + mprd + "' and f51.D_D = #01-01-1901# and f51.amt > 0 and f51.s_a = '@@@' and f51.a_n like '2%' and f51.a_n <> '2001'";
            ConnectionCommand.multiplerows(BalShDGV, "Balance Sheet");
            ConnectionWithAccess.query = "select '', f1.a_n, f1.s_a, '','' , '' , f1.[DESC], '', f51.AMT from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and f51.S_A = f1.S_A where f51.prd = '" + mprd + "' and f51.D_D = #01-01-1901# and f51.amt > 0 and f51.s_a = '@@@' and f51.a_n like '3%' and f51.a_n <> '3001'and f51.a_n <> '3500' and f51.a_n <> '3501'";
            ConnectionCommand.multiplerows(BalShDGV, "Balance Sheet");
            ConnectionWithAccess.query = "select '', f1.a_n, f1.s_a, '','' , ''  , f1.[DESC], '', f51.AMT from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and f51.S_A = f1.S_A where f51.prd = '" + mprd + "' and f51.D_D = #01-01-1901# and f51.amt > 0 and f51.s_a <> '@@@' and f51.a_n LIKE '35%'";
            ConnectionCommand.multiplerows(BalShDGV, "Balance Sheet");
            ConnectionWithAccess.query = "select '', f1.a_n, f1.s_a, '','' , ''  , f1.[DESC], '', f51.AMT from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and f51.S_A = f1.S_A where f51.prd = '" + mprd + "' and f51.D_D = #01-01-1901# and f51.amt > 0 and f51.s_a = '@@@' and f51.a_n like '4%'";
            ConnectionCommand.multiplerows(BalShDGV, "Balance Sheet");
            // added new 
            ConnectionWithAccess.query = "select '', f1.a_n, f1.s_a, '','' , ''  , f1.[DESC], '', f51.AMT from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and f51.S_A = f1.S_A where f51.prd = '" + mprd + "' and f51.D_D = #01-01-1901# and f51.amt > 0 and f51.s_a = '@@@' and f51.a_n like '65%'";
            ConnectionCommand.multiplerows(BalShDGV, "Balance Sheet");
            // added new 
            ConnectionWithAccess.query = "select '', f1.a_n, f1.s_a, f1.[DESC] , '', f51.AMT, '', '','' from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and f51.S_A = f1.S_A where f51.prd = '" + mprd + "' and f51.D_D = #01-01-1901# and f51.amt > 0 and f51.s_a = '@@@' and f51.a_n = '3001'";
            ConnectionCommand.multiplerows(BalShDGV, "Balance Sheet");
            ConnectionWithAccess.query = "select '', f1.a_n, f1.s_a, '','' , ''  , f1.[DESC], '', (f51.AMT * -1) from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and f51.S_A = f1.S_A where f51.prd = '" + mprd + "' and f51.D_D = #01-01-1901# and f51.amt < 0 and f51.s_a = '@@@' and f51.a_n like '5%'";
            ConnectionCommand.multiplerows(BalShDGV, "Balance Sheet");
            ConnectionWithAccess.query = "select '', f1.a_n, f1.s_a, f1.[DESC] , '', (f51.AMT * -1), '', '','' from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and f51.S_A = f1.S_A where f51.prd = '" + mprd + "' and f51.D_D = #01-01-1901# and f51.amt < 0 and f51.s_a = '@@@' and f51.a_n like '2%'";
            ConnectionCommand.multiplerows(BalShDGV, "Balance Sheet");
            ConnectionWithAccess.query = "select '', f1.a_n, f1.s_a, f1.[DESC] , '', (f51.AMT * -1), '', '','' from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and f51.S_A = f1.S_A where f51.prd = '" + mprd + "' and f51.D_D = #01-01-1901# and f51.amt < 0 and f51.s_a = '@@@' and f51.a_n like '3%' and f51.a_n <> '3000' and f51.a_n <> '3500' and f51.a_n <> '3501'";
            ConnectionCommand.multiplerows(BalShDGV, "Balance Sheet");
            ConnectionWithAccess.query = "select '', f1.a_n, f1.s_a, f1.[DESC] , '', (f51.AMT * -1), '', '','' from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and f51.S_A = f1.S_A where f51.prd = '" + mprd + "' and f51.D_D = #01-01-1901# and f51.amt < 0 and (f51.s_a <> '@@@' and f51.s_a <> '') and f51.a_n LIKE '35%' and f51.a_n <> '3500'";
            ConnectionCommand.multiplerows(BalShDGV, "Balance Sheet");
            ConnectionWithAccess.query = "select '', f1.a_n, f1.s_a, f1.[DESC] , '', (f51.AMT * -1), '', '','' from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and f51.S_A = f1.S_A where f51.prd = '" + mprd + "' and f51.D_D = #01-01-1901# and f51.amt < 0 and f51.s_a = '@@@' and f51.a_n like '4%'";
            ConnectionCommand.multiplerows(BalShDGV, "Balance Sheet");
            //BalShDGV.Sort(BalShDGV.Columns[1], ListSortDirection.Ascending);
            temp_double = 0;
            temp_word = null;
            add_difference_record_in_trading_pl_balance_sheet(mprd);
        }

        bool balance_sheet_tally = true;
        private void add_difference_record_in_trading_pl_balance_sheet(string mprd)
        {
            ConnectionWithAccess.ma_n = "";
            temp_word = "";
            temp_double = 0;
            balance_sheet_tally = true;
            try
            {
                if (BalShDGV.Rows.Count > 0)
                {
                    for (int i = 0; i < BalShDGV.Rows.Count; i++)
                    {
                        if (BalShDGV.Rows[i].Cells[1].Value != null)
                        {
                            if (BalShDGV.Rows[i].Cells[1].Value.ToString().Trim() != "")
                            {
                                ConnectionWithAccess.ma_n = BalShDGV.Rows[i].Cells[1].Value.ToString().Trim();
                                if (BalShDGV.Rows[i].Cells[1].Value.ToString().Substring(0, 1) == "1")
                                {
                                    if (temp_word == null || temp_word == "")
                                        temp_word = BalShDGV.Rows[i].Cells[1].Value.ToString();
                                    if (BalShDGV.Rows[i].Cells[1].Value.ToString().Trim() != temp_word)
                                    {
                                        if (i > 0)
                                        {
                                            BalShDGV.Rows[i - 1].Cells[8].Value = Math.Round(temp_double, 2);
                                            temp_word = BalShDGV.Rows[i].Cells[1].Value.ToString();
                                            temp_double = 0;
                                            if (BalShDGV.Rows[i].Cells[7].Value.ToString() != "0.0")
                                                temp_double = temp_double + Convert.ToDouble(BalShDGV.Rows[i].Cells[7].Value.ToString());
                                            else if (BalShDGV.Rows[i].Cells[8].Value.ToString() != "0.0")
                                                temp_double = temp_double + Convert.ToDouble(BalShDGV.Rows[i].Cells[8].Value.ToString());
                                            //BalShDGV.Rows[i - 1].Cells[8].Value = (Convert.ToDouble(BalShDGV.Rows[i + 1].Cells[7].Value.ToString())) + temp_double;
                                        }
                                        else
                                        {
                                            temp_double = Convert.ToDouble(BalShDGV.Rows[0].Cells[8].Value.ToString());
                                            //BalShDGV.Rows[0].Cells[8].Value = Math.Round(temp_double, 2);
                                            //temp_word = BalShDGV.Rows[0].Cells[1].Value.ToString();
                                            //temp_double = Convert.ToDouble(BalShDGV.Rows[i].Cells[7].Value.ToString());
                                        }
                                    }
                                    else
                                    {
                                        if (BalShDGV.Rows[i].Cells[7].Value.ToString() != "0.0")
                                            temp_double = temp_double + Convert.ToDouble(BalShDGV.Rows[i].Cells[7].Value.ToString());
                                        else if (BalShDGV.Rows[i].Cells[8].Value.ToString() != "0.0")
                                            temp_double = temp_double + Convert.ToDouble(BalShDGV.Rows[i].Cells[8].Value.ToString());
                                        BalShDGV.Rows[i].Cells[8].Value = 0;
                                    }
                                }
                                else if (temp_double != 0)
                                {
                                    if (i > 0)
                                        BalShDGV.Rows[i - 1].Cells[8].Value = Math.Round(temp_double, 2);
                                    temp_double = 0;
                                }
                            }
                        }
                    }
                    debitamount = 0;
                    creditamount = 0;
                    for (int i = 0; i < BalShDGV.Rows.Count; i++)
                    {
                        if (BalShDGV.Rows[i].Cells[5].Value != null)
                        {
                            if (BalShDGV.Rows[i].Cells[5].Value.ToString().Trim() != "0")
                            {
                                debitamount = debitamount + (Convert.ToDouble(BalShDGV.Rows[i].Cells[5].Value.ToString()));
                            }
                        }
                        if (BalShDGV.Rows[i].Cells[8].Value != null)
                        {
                            if (BalShDGV.Rows[i].Cells[8].Value.ToString().Trim() != "0")
                            {
                                creditamount = creditamount + (Convert.ToDouble(BalShDGV.Rows[i].Cells[8].Value.ToString()));
                            }
                        }
                    }
                    DataTable dtReport = (DataTable)BalShDGV.DataSource;
                    if (creditamount != debitamount)
                    {
                        temp_double2 = creditamount - debitamount;
                        if (temp_double2 == -1 || temp_double2 == -2)
                        {
                            temp_double = get_account_balance_from_51(mprd, "5000", "@@@");
                            temp_double = Math.Round(temp_double);
                            update_amount_in_51(emerg_prd, "5000", "@@@", temp_double + temp_double2);
                            creditamount = debitamount;
                        }
                        //else if (temp_double2 == -2)
                        //{
                        //    temp_double = get_account_balance_from_51(mprd, "5000", "@@@");
                        //    update_amount_in_51(emerg_prd, "5000", "@@@", temp_double + temp_double2);
                        //}
                        //else if (temp_double2 == 2)
                        //{
                        //    temp_double = get_account_balance_from_51(mprd, "5000", "@@@");
                        //    update_amount_in_51(emerg_prd, "5000", "@@@", temp_double + temp_double2);
                        //}
                        else if (temp_double2 == 1 || temp_double2 == 2)
                        {
                            temp_double = get_account_balance_from_51(mprd, "5000", "@@@");
                            update_amount_in_51(emerg_prd, "5000", "@@@", temp_double + temp_double2);
                            debitamount = creditamount;
                        }
                        //else if (temp_double2 == 3)
                        //{
                        //    temp_double = get_account_balance_from_51(mprd, "5000", "@@@");
                        //    update_amount_in_51(emerg_prd, "5000", "@@@", temp_double - temp_double2);
                        //}
                        //else if (temp_double2 == 5)
                        //{
                        //    temp_double = get_account_balance_from_51(mprd, "5000", "@@@");
                        //    update_amount_in_51(emerg_prd, "5000", "@@@", temp_double - temp_double2);
                        //}
                        //else if (temp_double2 == 6)
                        //{
                        //    temp_double = get_account_balance_from_51(mprd, "5000", "@@@");
                        //    update_amount_in_51(emerg_prd, "5000", "@@@", temp_double - temp_double2);
                        //}
                        //else if (temp_double2 == 10)
                        //{
                        //    temp_double = get_account_balance_from_51(mprd, "5000", "@@@");
                        //    update_amount_in_51(emerg_prd, "5000", "@@@", temp_double + temp_double2);
                        //}
                        //else
                        //{
                        if (Math.Round(creditamount, 2) < Math.Round(debitamount, 2))
                        {
                            DataRow drTotalRow = dtReport.NewRow();

                            drTotalRow[6] = "Difference";
                            drTotalRow[8] = Math.Round((debitamount - creditamount), 2);
                            dtReport.Rows.Add(drTotalRow);
                            creditamount = debitamount;
                            balance_sheet_tally = false;
                        }
                        else if (Math.Round(creditamount, 2) > Math.Round(debitamount, 2))
                        {
                            DataRow drTotalRow = dtReport.NewRow();

                            drTotalRow[2] = "Difference";
                            drTotalRow[5] = Math.Round(creditamount - debitamount, 2);
                            drTotalRow[8] = "0";
                            dtReport.Rows.Add(drTotalRow);
                            debitamount = creditamount;
                            balance_sheet_tally = false;
                        }
                        //}
                    }
                    DataRow drTotalRow1 = dtReport.NewRow();

                    drTotalRow1[3] = "Total";
                    drTotalRow1[5] = Math.Round(debitamount, 2);
                    drTotalRow1[6] = "Total";
                    drTotalRow1[8] = Math.Round(creditamount, 2);
                    dtReport.Rows.Add(drTotalRow1);

                    BalShDGV.DataSource = null;
                    BalShDGV.DataSource = dtReport;
                }
            }
            catch (Exception ex)
            {
            }
        }

        private void add_difference_record_in_trading_pl_balance_sheetold()
        {
            balance_sheet_tally = true;
            try
            {
                if (BalShDGV.Rows.Count > 0)
                {
                    for (int i = 0; i < BalShDGV.Rows.Count; i++)
                    {
                        if (BalShDGV.Rows[i].Cells[1].Value != null)
                        {
                            if (BalShDGV.Rows[i].Cells[1].Value.ToString().Trim() != "")
                            {
                                if (BalShDGV.Rows[i].Cells[1].Value.ToString().Substring(0, 1) == "1")
                                {
                                    if (temp_word == null)
                                        temp_word = BalShDGV.Rows[i].Cells[1].Value.ToString();
                                    if (BalShDGV.Rows[i].Cells[1].Value.ToString().Trim() != temp_word)
                                    {
                                        BalShDGV.Rows[i - 1].Cells[8].Value = Math.Round(temp_double, 2);
                                        temp_word = BalShDGV.Rows[i].Cells[1].Value.ToString();
                                        temp_double = Convert.ToDouble(BalShDGV.Rows[i].Cells[7].Value.ToString());
                                        //BalShDGV.Rows[i - 1].Cells[8].Value = (Convert.ToDouble(BalShDGV.Rows[i + 1].Cells[7].Value.ToString())) + temp_double;
                                    }
                                    else
                                    {
                                        temp_double = temp_double + Convert.ToDouble(BalShDGV.Rows[i].Cells[7].Value.ToString());
                                    }
                                }
                                else if (temp_double != 0)
                                {
                                    if (i > 0)
                                        BalShDGV.Rows[i - 1].Cells[8].Value = Math.Round(temp_double, 2);
                                    temp_double = 0;
                                }
                            }
                        }
                    }
                    debitamount = 0;
                    creditamount = 0;
                    for (int i = 0; i < BalShDGV.Rows.Count; i++)
                    {
                        if (BalShDGV.Rows[i].Cells[5].Value != null)
                        {
                            if (BalShDGV.Rows[i].Cells[5].Value.ToString().Trim() != "")
                            {
                                debitamount = debitamount + (Convert.ToDouble(BalShDGV.Rows[i].Cells[5].Value.ToString()));
                            }
                        }
                        if (BalShDGV.Rows[i].Cells[8].Value != null)
                        {
                            if (BalShDGV.Rows[i].Cells[8].Value.ToString().Trim() != "")
                            {
                                creditamount = creditamount + (Convert.ToDouble(BalShDGV.Rows[i].Cells[8].Value.ToString()));
                            }
                        }
                    }
                    if (Math.Round(creditamount, 2) < Math.Round(debitamount, 2))
                    {
                        BalShDGV.Rows.Add();
                        BalShDGV.Rows[BalShDGV.Rows.Count - 1].Cells[0].Value = "";
                        BalShDGV.Rows[BalShDGV.Rows.Count - 1].Cells[1].Value = "";
                        BalShDGV.Rows[BalShDGV.Rows.Count - 1].Cells[2].Value = "";
                        BalShDGV.Rows[BalShDGV.Rows.Count - 1].Cells[3].Value = "";
                        BalShDGV.Rows[BalShDGV.Rows.Count - 1].Cells[4].Value = "";
                        BalShDGV.Rows[BalShDGV.Rows.Count - 1].Cells[5].Value = "0";
                        BalShDGV.Rows[BalShDGV.Rows.Count - 1].Cells[6].Value = "Difference";
                        BalShDGV.Rows[BalShDGV.Rows.Count - 1].Cells[7].Value = "";
                        BalShDGV.Rows[BalShDGV.Rows.Count - 1].Cells[8].Value = Math.Round((debitamount - creditamount), 2);
                        creditamount = debitamount;
                        balance_sheet_tally = false;
                    }
                    else if (Math.Round(creditamount, 2) > Math.Round(debitamount, 2))
                    {
                        BalShDGV.Rows.Add();
                        BalShDGV.Rows[BalShDGV.Rows.Count - 1].Cells[0].Value = "";
                        BalShDGV.Rows[BalShDGV.Rows.Count - 1].Cells[1].Value = "";
                        BalShDGV.Rows[BalShDGV.Rows.Count - 1].Cells[2].Value = "Difference";
                        BalShDGV.Rows[BalShDGV.Rows.Count - 1].Cells[3].Value = "";
                        BalShDGV.Rows[BalShDGV.Rows.Count - 1].Cells[4].Value = "";
                        BalShDGV.Rows[BalShDGV.Rows.Count - 1].Cells[5].Value = Math.Round(creditamount - debitamount, 2);
                        BalShDGV.Rows[BalShDGV.Rows.Count - 1].Cells[6].Value = "";
                        BalShDGV.Rows[BalShDGV.Rows.Count - 1].Cells[7].Value = "";
                        BalShDGV.Rows[BalShDGV.Rows.Count - 1].Cells[8].Value = "0.00";
                        debitamount = creditamount;
                        balance_sheet_tally = false;
                    }
                    BalShDGV.Rows.Add();
                    BalShDGV.Rows[BalShDGV.Rows.Count - 1].Cells[0].Value = "";
                    BalShDGV.Rows[BalShDGV.Rows.Count - 1].Cells[1].Value = "";
                    BalShDGV.Rows[BalShDGV.Rows.Count - 1].Cells[2].Value = "";
                    BalShDGV.Rows[BalShDGV.Rows.Count - 1].Cells[3].Value = "Total";
                    BalShDGV.Rows[BalShDGV.Rows.Count - 1].Cells[4].Value = "";
                    BalShDGV.Rows[BalShDGV.Rows.Count - 1].Cells[5].Value = Math.Round(debitamount, 2);
                    BalShDGV.Rows[BalShDGV.Rows.Count - 1].Cells[6].Value = "Total";
                    BalShDGV.Rows[BalShDGV.Rows.Count - 1].Cells[7].Value = "";
                    BalShDGV.Rows[BalShDGV.Rows.Count - 1].Cells[8].Value = Math.Round(creditamount, 2);
                }
            }
            catch (Exception ex)
            {
            }
        }

        private void add_contains_of_debitors_outstanding_in_gridview(bool dont_cleargridview = false)
        {
            ConnectionWithAccess.query = "select '', f1.a_n, f1.s_a, f1.[DESC],f1.[CITY], f51.AMT from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and  f51.S_A = f1.S_A where f51.prd = '" + cbBalShPer.Text + "' and f51.D_D = #01-01-1901# and f51.s_a <> '@@@' and f51.amt > 0 and f51.a_n like '2002%' order by f1.a_n + f1.s_a ";
            if (dont_cleargridview)
                ConnectionCommand.multiplerows(BalShDGV, "Debitors Outstanding");
            else
            {
                ConnectionCommand.accountHelp(BalShDGV, "Debitors Outstanding");
                //getTotal(BalShDGV, 5);
                BalShDGV.Columns[0].HeaderText = "Sort";
                BalShDGV.Columns[1].HeaderText = "A_n";
                BalShDGV.Columns[2].HeaderText = "S_a";
                BalShDGV.Columns[3].HeaderText = "Name";
                BalShDGV.Columns[4].HeaderText = "City";
                BalShDGV.Columns[5].HeaderText = "Amount";
                BalShDGV.Columns[0].Visible = false;
                BalShDGV.Columns[5].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;
            }
        }

        private void add_contains_of_creditors_outstanding_in_gridview(bool dont_cleargridview = false)
        {
            ConnectionWithAccess.query = "select '', f1.a_n, f1.s_a, f1.[DESC],f1.[CITY], (f51.AMT *-1) from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and  f51.S_A = f1.S_A where f51.prd = '" + cbBalShPer.Text + "' and f51.D_D = #01-01-1901# and f51.s_a <> '@@@' and f51.amt < 0 and f51.a_n = '4002'";
            if (dont_cleargridview)
                ConnectionCommand.multiplerows(BalShDGV, "Creditors Balance");
            else
            {
                ConnectionCommand.accountHelp(BalShDGV, "Creditors Balance");
                //getTotal(BalShDGV, 5);
                BalShDGV.Columns[0].HeaderText = "Sort";
                BalShDGV.Columns[1].HeaderText = "A_n";
                BalShDGV.Columns[2].HeaderText = "S_a";
                BalShDGV.Columns[3].HeaderText = "Name";
                BalShDGV.Columns[4].HeaderText = "City";
                BalShDGV.Columns[5].HeaderText = "Amount";
                BalShDGV.Columns[0].Visible = false;
                BalShDGV.Columns[5].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;
            }
        }

        private void add_contains_of_debitors_advances_in_gridview(bool dont_cleargridview = false)
        {
            ConnectionWithAccess.query = "select '', f1.a_n, f1.s_a, f1.[DESC],f1.[CITY], (f51.AMT * -1) from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and  f51.S_A = f1.S_A where f51.prd = '" + cbBalShPer.Text + "' and f51.D_D = #01-01-1901# and f51.s_a <> '@@@' and f51.amt < 0 and f51.a_n = '2002'";
            if (dont_cleargridview)
                ConnectionCommand.multiplerows(BalShDGV, "Debitors Outstanding");
            else
            {
                ConnectionCommand.accountHelp(BalShDGV, "Debitors Outstanding");
                //getTotal(BalShDGV, 5);
                BalShDGV.Columns[0].HeaderText = "Sort";
                BalShDGV.Columns[1].HeaderText = "A_n";
                BalShDGV.Columns[2].HeaderText = "S_a";
                BalShDGV.Columns[3].HeaderText = "Name";
                BalShDGV.Columns[4].HeaderText = "City";
                BalShDGV.Columns[5].HeaderText = "Amount";
                BalShDGV.Columns[0].Visible = false;
                BalShDGV.Columns[5].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;
            }
        }

        private void add_contains_of_creditors_deposits_in_gridview(bool dont_cleargridview = false)
        {
            ConnectionWithAccess.query = "select '', f1.a_n, f1.s_a, f1.[DESC],f1.[CITY], f51.AMT from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and  f51.S_A = f1.S_A where f51.prd = '" + cbBalShPer.Text + "' and f51.D_D = #01-01-1901# and f51.s_a <> '@@@' and f51.amt > 0 and f51.a_n = '4002'";
            if (dont_cleargridview)
                ConnectionCommand.multiplerows(BalShDGV, "Creditors Balance");
            else
            {
                ConnectionCommand.accountHelp(BalShDGV, "Creditors Balance");
                //getTotal(BalShDGV, 5);
                BalShDGV.Columns[0].HeaderText = "Sort";
                BalShDGV.Columns[1].HeaderText = "A_n";
                BalShDGV.Columns[2].HeaderText = "S_a";
                BalShDGV.Columns[3].HeaderText = "Name";
                BalShDGV.Columns[4].HeaderText = "City";
                BalShDGV.Columns[5].HeaderText = "Amount";
                BalShDGV.Columns[0].Visible = false;
                BalShDGV.Columns[5].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;
            }
        }

        private string query_contains_for_trading_account_union(string mprd)
        {
            StringBuilder strQuery = new StringBuilder();
            strQuery.Append(" select '', f1.a_n, f1.s_a, f1.[DESC], '', round(f51.AMT) as [amt_debit] , '' , '' as [desc], 0 as [amt_credit] from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and  f51.S_A = f1.S_A where f51.prd = '" + mprd + "' and f51.D_D = #01-01-1901# and f51.s_a = '@@@' and f51.amt > 0 and f51.a_n = '2001' UNION ALL");
            strQuery.Append(" select '', f1.a_n, f1.s_a, f1.[DESC], '', round(f51.AMT) as [amt_debit] , '' , '' as [desc], 0 as [amt_credit] from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and  f51.S_A = f1.S_A where f51.prd = '" + mprd + "' and f51.D_D = #01-01-1901# and f51.s_a = '@@@' and f51.amt > 0 and f51.a_n like '6000%' UNION ALL");
            strQuery.Append(" select '', f1.a_n, f1.s_a, f1.[DESC], '', round(f51.AMT) as [amt_debit] , '' , '' as [desc], 0 as [amt_credit] from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and  f51.S_A = f1.S_A where f51.prd = '" + mprd + "' and f51.D_D = #01-01-1901# and f51.s_a = '@@@' and f51.amt > 0 and f51.a_n like '61%' UNION ALL");
            strQuery.Append(" select '', f1.a_n, f1.s_a, f1.[DESC], '', round(f51.AMT) as [amt_debit] , '' , '' as [desc], 0 as [amt_credit] from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and  f51.S_A = f1.S_A where f51.prd = '" + mprd + "' and f51.D_D = #01-01-1901# and f51.s_a = '@@@' and f51.amt > 0 and f51.a_n like '65%' UNION ALL");
            strQuery.Append(" select '', f1.a_n, f1.s_a, f1.[DESC], '', round(f51.AMT) as [amt_debit] , '' , '' as [desc], 0 as [amt_credit] from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and  f51.S_A = f1.S_A where f51.prd = '" + mprd + "' and f51.D_D = #01-01-1901# and f51.s_a = '@@@' and f51.amt > 0 and f51.a_n like '70%' UNION ALL");
            strQuery.Append(" select '', f1.a_n, f1.s_a, '', '', 0 as [amt_debit], f1.[DESC], '', round(f51.AMT * -1) as [amt_credit] from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and  f51.S_A = f1.S_A where f51.prd = '" + mprd + "' and f51.D_D = #01-01-1901# and f51.s_a = '@@@' and f51.amt < 0 and f51.a_n like '5000%' UNION ALL");
            strQuery.Append(" select '', f1.a_n, f1.s_a, '', '', 0 as [amt_debit], f1.[DESC], '', round(f51.AMT * -1) as [amt_credit] from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and  f51.S_A = f1.S_A where f51.prd = '" + mprd + "' and f51.D_D = #01-01-1901# and f51.s_a = '@@@' and f51.amt < 0 and f51.a_n like '6000%' UNION ALL");
            strQuery.Append(" select '', f1.a_n, f1.s_a, '', '', 0 as [amt_debit], f1.[DESC], '', round(f51.AMT * -1) as [amt_credit] from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and  f51.S_A = f1.S_A where f51.prd = '" + mprd + "' and f51.D_D = #01-01-1901# and f51.s_a = '@@@' and f51.amt < 0 and f51.a_n like '65%' UNION ALL");
            strQuery.Append(" select '', f1.a_n, f1.s_a, '', '', 0 as [amt_debit], f1.[DESC], '', round(f51.AMT * -1) as [amt_credit] from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and  f51.S_A = f1.S_A where f51.prd = '" + mprd + "' and f51.D_D = #01-01-1901# and f51.s_a = '@@@' and f51.amt < 0 and f51.a_n like '70%' UNION ALL");
            strQuery.Append(" select '', f1.a_n, f1.s_a, '', '', 0 as [amt_debit], 'Gross Loss', '', round(f51.AMT * -1) as [amt_credit] from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and  f51.S_A = f1.S_A where f51.prd = '" + mprd + "' and f51.D_D = #01-01-1901# and f51.s_a = '@@@' and f51.amt < 0 and f51.a_n = '719999' UNION ALL");
            strQuery.Append(" select '', f1.a_n, f1.s_a, f1.[DESC], '', round(f51.AMT) as [amt_debit] , '' , '', 0 as [amt_credit] from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and  f51.S_A = f1.S_A where f51.prd = '" + mprd + "' and f51.D_D = #01-01-1901# and f51.s_a = '@@@' and f51.amt > 0 and f51.a_n = '719999' order by a_n,s_a");
            ConnectionWithAccess.query = strQuery.ToString();
            return strQuery.ToString();
        }

        private string query_contains_for_profit_and_loss_account_union(string mprd)
        {
            StringBuilder strQuery = new StringBuilder();
            strQuery.Append(" select '', f1.a_n, f1.s_a, '', '', 0 as [amt_debit], f1.[DESC], '', round(f51.AMT) as [amt_credit] from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and f51.S_A = f1.S_A where f51.prd = '" + mprd + "' and f51.D_D = #01-01-1901# and f51.s_a = '@@@' and f51.amt > 0 and f51.a_n = '719999' UNION ALL");
            strQuery.Append(" select '', f1.a_n, f1.s_a, f1.[DESC], '', round(f51.AMT * -1) as [amt_debit] , '' , '' , 0 as [amt_credit] from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and f51.S_A = f1.S_A where f51.prd = '" + mprd + "' and f51.D_D = #01-01-1901# and f51.s_a = '@@@' and f51.amt < 0 and f51.a_n = '719999' UNION ALL");
            strQuery.Append(" select '', f1.a_n, f1.s_a, f1.[DESC], '', round(f51.AMT) as [amt_debit] , '' , '' , 0 as [amt_credit] from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and f51.S_A = f1.S_A where f51.prd = '" + mprd + "' and f51.D_D = #01-01-1901# and f51.s_a = '@@@' and f51.amt > 0 and f51.a_n like '75%' UNION ALL");
            strQuery.Append(" select '', f1.a_n, f1.s_a, '', '', 0 as [amt_debit], f1.[DESC], '', round(f51.AMT * -1) as [amt_credit] from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and f51.S_A = f1.S_A where f51.prd = '" + mprd + "' and f51.D_D = #01-01-1901# and f51.s_a = '@@@' and f51.amt < 0 and f51.a_n like '75%' UNION ALL");
            strQuery.Append(" select '', f1.a_n, f1.s_a, f1.[DESC], '', round(f51.AMT) as [amt_debit], '' , '' , 0 as [amt_credit] from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and f51.S_A = f1.S_A where f51.prd = '" + mprd + "' and f51.D_D = #01-01-1901# and f51.s_a = '@@@' and f51.amt > 0 and f51.a_n = '7998' UNION ALL");
            strQuery.Append(" select '', f1.a_n, f1.s_a, '', '', 0 as [amt_debit], 'Net Loss' , '' , round(f51.AMT * -1) as [amt_credit] from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and f51.S_A = f1.S_A where f51.prd = '" + mprd + "' and f51.D_D = #01-01-1901# and f51.s_a = '@@@' and f51.amt < 0 and f51.a_n = '7998' order by a_n,s_a");
            ConnectionWithAccess.query = strQuery.ToString();
            return strQuery.ToString();
        }

        private string query_contains_for_capital_account_union(string mprd)
        {
            StringBuilder strQuery = new StringBuilder();
            strQuery.Append(" select '', f1.a_n, f1.s_a, '', '', 0 as [amt_debit],f1.[DESC] as [desc1] , '', round(f51.AMT * -1) as [amt_credit] from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and  f51.S_A = f1.S_A where f51.prd = '" + mprd + "' and f51.D_D = #01-01-1901# and f51.amt < 0 and f51.a_n = '3000' UNION ALL");
            strQuery.Append(" select '', f1.a_n, f1.s_a, '' as [desc1], '', 0 as [amt_debit], f1.[DESC] as [desc], '', round(f51.AMT) as [amt_credit] from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and f51.S_A = f1.S_A where f51.prd = '" + mprd + "' and f51.D_D = #01-01-1901# and f51.amt > 0 and f51.a_n = '7998' UNION ALL");
            strQuery.Append(" select '', f1.a_n, f1.s_a, 'Net Loss' as [desc1], '', round(f51.AMT * -1) as [amt_debit], '' as [desc] , '' , 0 as [amt_credit] from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and f51.S_A = f1.S_A where f51.prd = '" + mprd + "' and f51.D_D = #01-01-1901# and f51.s_a = '@@@' and f51.amt < 0 and f51.a_n = '7998' UNION ALL");
            strQuery.Append(" select '', f1.a_n, f1.s_a, f1.[DESC] as [desc1], '', round(f51.AMT) as [amt_debit],'' as [desc] , '' , 0 as [amt_credit] from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and f51.S_A = f1.S_A where f51.prd = '" + mprd + "' and f51.D_D = #01-01-1901# and f51.amt > 0 and f51.s_a <> '@@@' and f51.a_n like '3001%' UNION ALL");
            strQuery.Append(" select '', f1.a_n, f1.s_a, '' as [desc1], '', 0 as [amt_debit], f1.[DESC] as [desc] , '', round(f51.AMT * -1) as [amt_credit] from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and  f51.S_A = f1.S_A where f51.prd = '" + mprd + "' and f51.D_D = #01-01-1901# and f51.amt < 0 and f51.a_n like '3001%' UNION ALL");
            strQuery.Append(" select '', f1.a_n, f1.s_a, f1.[DESC] as [desc1], '', round(f51.AMT) as [amt_debit],''  as [desc], '' , 0 as [amt_credit] from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and  f51.S_A = f1.S_A where f51.prd = '" + mprd + "' and f51.D_D = #01-01-1901# and f51.amt > 0 and f51.a_n = '3001' and f51.s_a = '@@@' ");
            ConnectionWithAccess.query = strQuery.ToString();
            return strQuery.ToString();
        }

        private string query_contains_for_balance_sheet_union(string mprd)
        {
            ConnectionWithAccess.moprd = ConnectionWithAccess.get_old_prd_name(mprd);
            StringBuilder strQuery = new StringBuilder();
            strQuery.Append(" select '', f1.a_n, f1.s_a, '','' , 0 as [amt_debit] , f1.[DESC],  Round(f51.AMT), 0 as [amt_credit] from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and f51.S_A = f1.S_A where f51.prd = '" + ConnectionWithAccess.moprd + "' and f51.D_D = #01-01-1901# and f51.amt > 0 and f51.s_a = '@@@' and f51.a_n like '1%' UNION ALL");
            strQuery.Append(" select '', f1.a_n, f1.s_a, '','' , 0 as [amt_debit] , f1.[DESC], Round(f51.AMT),0 as [amt_credit] from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and f51.S_A = f1.S_A where f51.prd = '" + mprd + "' and f51.D_D = #01-01-1901# and f51.amt > 0 and f51.s_a <> '@@@' and f51.a_n like '1%' UNION ALL");
            strQuery.Append(" select '', f1.a_n, f1.s_a, '','' , 0 as [amt_debit] , f1.[DESC], Round(f51.AMT),0 as [amt_credit] from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and f51.S_A = f1.S_A where f51.prd = '" + mprd + "' and f51.D_D = #01-01-1901# and f51.amt < 0 and f51.s_a <> '@@@' and f51.a_n like '1%' UNION ALL");
            strQuery.Append(" select '', f1.a_n, f1.s_a,  f1.[DESC] , '', Round((f51.AMT * -1)) as [amt_debit], '', 0,0 as [amt_credit] from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and f51.S_A = f1.S_A where f51.prd = '" + ConnectionWithAccess.moprd + "' and f51.D_D = #01-01-1901# and f51.amt < 0 and f51.s_a = '@@@' and f51.a_n like '1%' and f51.a_n > '14' UNION ALL");
            strQuery.Append(" select '', f1.a_n, f1.s_a, '','' , 0 as [amt_debit] , f1.[DESC], 0, Round(f51.AMT) as [amt_credit] from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and f51.S_A = f1.S_A where f51.prd = '" + mprd + "' and f51.D_D = #01-01-1901# and f51.amt > 0 and f51.s_a = '@@@' and f51.a_n like '2%' and f51.a_n <> '2001' UNION ALL");
            strQuery.Append(" select '', f1.a_n, f1.s_a, '','' , 0 as [amt_debit] , f1.[DESC], 0, Round(f51.AMT) as [amt_credit] from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and f51.S_A = f1.S_A where f51.prd = '" + mprd + "' and f51.D_D = #01-01-1901# and f51.amt > 0 and f51.s_a = '@@@' and f51.a_n like '3%' and f51.a_n <> '3001' UNION ALL");
            //strQuery.Append(" select '', f1.a_n, f1.s_a, '','' , 0 as [amt_debit]  , f1.[DESC], 0, Round(f51.AMT) as [amt_credit] from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and f51.S_A = f1.S_A where f51.prd = '" + mprd + "' and f51.D_D = #01-01-1901# and f51.amt > 0 and f51.s_a <> '@@@' and f51.a_n = '3500' UNION ALL");
            //strQuery.Append(" select '', f1.a_n, f1.s_a,  f1.[DESC] , '', Round((f51.AMT * -1)) as [amt_debit], '', 0,0 as [amt_credit] from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and f51.S_A = f1.S_A where f51.prd = '" + mprd + "' and f51.D_D = #01-01-1901# and f51.amt < 0 and f51.s_a <> '@@@' and f51.a_n = '3500' UNION ALL");// LOANS GIVEN but figure in minus 
            strQuery.Append(" select '', f1.a_n, f1.s_a, '','' , 0 as [amt_debit]  , f1.[DESC], 0, Round(f51.AMT) as [amt_credit] from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and f51.S_A = f1.S_A where f51.prd = '" + mprd + "' and f51.D_D = #01-01-1901# and f51.amt > 0 and f51.s_a = '@@@' and f51.a_n like '4%' UNION ALL");
            strQuery.Append(" select '', f1.a_n, f1.s_a, '','' , 0 as [amt_debit] , f1.[DESC], 0, Round((f51.AMT * -1)) as [amt_credit] from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and f51.S_A = f1.S_A where f51.prd = '" + mprd + "' and f51.D_D = #01-01-1901# and f51.amt < 0 and f51.s_a = '@@@' and f51.a_n = '3001' UNION ALL");
            strQuery.Append(" select '', f1.a_n, f1.s_a, '','' , 0 as [amt_debit] , f1.[DESC], 0, Round((f51.AMT * -1)) as [amt_credit] from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and f51.S_A = f1.S_A where f51.prd = '" + mprd + "' and f51.D_D = #01-01-1901# and f51.amt < 0 and f51.s_a = '@@@' and f51.a_n like '5%' UNION ALL");
            strQuery.Append(" select '', f1.a_n, f1.s_a, '','' , 0 as [amt_debit] , f1.[DESC], 0, Round(f51.AMT) as [amt_credit] from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and f51.S_A = f1.S_A where f51.prd = '" + mprd + "' and f51.D_D = #01-01-1901# and f51.amt > 0 and f51.s_a = '@@@' and f51.a_n like '65%' UNION ALL");
            strQuery.Append(" select '', f1.a_n, f1.s_a, f1.[DESC] , '', Round((f51.AMT * -1)) as [amt_debit], '', 0,0 as [amt_credit] from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and f51.S_A = f1.S_A where f51.prd = '" + mprd + "' and f51.D_D = #01-01-1901# and f51.amt < 0 and f51.s_a = '@@@' and f51.a_n like '2%' UNION ALL");
            strQuery.Append(" select '', f1.a_n, f1.s_a, f1.[DESC] , '', Round((f51.AMT * -1)) as [amt_debit], '', 0,0 as [amt_credit] from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and f51.S_A = f1.S_A where f51.prd = '" + mprd + "' and f51.D_D = #01-01-1901# and f51.amt < 0 and f51.s_a = '@@@' and f51.a_n like '3%' and f51.a_n <> '3000' and f51.a_n <> '3001' UNION ALL");
            strQuery.Append(" select '', f1.a_n, f1.s_a, f1.[DESC] , '', Round((f51.AMT * 1))  as [amt_debit], '', 0,0 as [amt_credit] from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and f51.S_A = f1.S_A where f51.prd = '" + mprd + "' and f51.D_D = #01-01-1901# and f51.amt > 0 and f51.s_a = '@@@' and f51.a_n = '3001' UNION ALL");
            //strQuery.Append(" select '', f1.a_n, f1.s_a, f1.[DESC] , '', Round((f51.AMT * -1)) as [amt_debit], '', 0,0 as [amt_credit] from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and f51.S_A = f1.S_A where f51.prd = '" + mprd + "' and f51.D_D = #01-01-1901# and f51.amt < 0 and (f51.s_a <> '@@@' and f51.s_a <> '') and f51.a_n LIKE '35%' and f51.a_n <> '3500' UNION ALL");
            strQuery.Append(" select '', f1.a_n, f1.s_a, f1.[DESC] , '', Round((f51.AMT * -1)) as [amt_debit], '', 0,0 as [amt_credit] from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and f51.S_A = f1.S_A where f51.prd = '" + mprd + "' and f51.D_D = #01-01-1901# and f51.amt < 0 and f51.s_a = '@@@' and f51.a_n like '4%'  order by a_n,s_a");
            ConnectionWithAccess.query = strQuery.ToString();
            return strQuery.ToString();

            // old working perfect with all loan account detailed.

            //strQuery.Append(" select '', f1.a_n, f1.s_a, '','' , 0 as [amt_debit] , f1.[DESC],  Round(f51.AMT), 0 as [amt_credit] from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and f51.S_A = f1.S_A where f51.prd = '" + ConnectionWithAccess.moprd + "' and f51.D_D = #01-01-1901# and f51.amt > 0 and f51.s_a = '@@@' and f51.a_n like '1%' UNION ALL");
            //strQuery.Append(" select '', f1.a_n, f1.s_a, '','' , 0 as [amt_debit] , f1.[DESC], Round(f51.AMT),0 as [amt_credit] from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and f51.S_A = f1.S_A where f51.prd = '" + mprd + "' and f51.D_D = #01-01-1901# and f51.amt > 0 and f51.s_a <> '@@@' and f51.a_n like '1%' UNION ALL");
            //strQuery.Append(" select '', f1.a_n, f1.s_a, '','' , 0 as [amt_debit] , f1.[DESC], Round(f51.AMT),0 as [amt_credit] from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and f51.S_A = f1.S_A where f51.prd = '" + mprd + "' and f51.D_D = #01-01-1901# and f51.amt < 0 and f51.s_a <> '@@@' and f51.a_n like '1%' UNION ALL");
            //strQuery.Append(" select '', f1.a_n, f1.s_a,  f1.[DESC] , '', Round((f51.AMT * -1)) as [amt_debit], '', 0,0 as [amt_credit] from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and f51.S_A = f1.S_A where f51.prd = '" + ConnectionWithAccess.moprd + "' and f51.D_D = #01-01-1901# and f51.amt < 0 and f51.s_a = '@@@' and f51.a_n like '1%' and f51.a_n > '14' UNION ALL");
            //strQuery.Append(" select '', f1.a_n, f1.s_a, '','' , 0 as [amt_debit] , f1.[DESC], 0, Round(f51.AMT) as [amt_credit] from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and f51.S_A = f1.S_A where f51.prd = '" + mprd + "' and f51.D_D = #01-01-1901# and f51.amt > 0 and f51.s_a = '@@@' and f51.a_n like '2%' and f51.a_n <> '2001' UNION ALL");
            //strQuery.Append(" select '', f1.a_n, f1.s_a, '','' , 0 as [amt_debit] , f1.[DESC], 0, Round(f51.AMT) as [amt_credit] from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and f51.S_A = f1.S_A where f51.prd = '" + mprd + "' and f51.D_D = #01-01-1901# and f51.amt > 0 and f51.s_a = '@@@' and f51.a_n like '3%' and f51.a_n <> '3001'and f51.a_n <> '3500' and f51.a_n <> '3501' UNION ALL");
            //strQuery.Append(" select '', f1.a_n, f1.s_a, '','' , 0 as [amt_debit]  , f1.[DESC], 0, Round(f51.AMT) as [amt_credit] from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and f51.S_A = f1.S_A where f51.prd = '" + mprd + "' and f51.D_D = #01-01-1901# and f51.amt > 0 and f51.s_a <> '@@@' and f51.a_n = '3500' UNION ALL");
            //strQuery.Append(" select '', f1.a_n, f1.s_a,  f1.[DESC] , '', Round((f51.AMT * -1)) as [amt_debit], '', 0,0 as [amt_credit] from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and f51.S_A = f1.S_A where f51.prd = '" + mprd + "' and f51.D_D = #01-01-1901# and f51.amt < 0 and f51.s_a <> '@@@' and f51.a_n = '3500' UNION ALL");// LOANS GIVEN but figure in minus 
            //strQuery.Append(" select '', f1.a_n, f1.s_a, '','' , 0 as [amt_debit]  , f1.[DESC], 0, Round(f51.AMT) as [amt_credit] from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and f51.S_A = f1.S_A where f51.prd = '" + mprd + "' and f51.D_D = #01-01-1901# and f51.amt > 0 and f51.s_a = '@@@' and f51.a_n like '4%' UNION ALL");
            //strQuery.Append(" select '', f1.a_n, f1.s_a, '','' , 0 as [amt_debit] , f1.[DESC], 0, Round((f51.AMT * -1)) as [amt_credit] from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and f51.S_A = f1.S_A where f51.prd = '" + mprd + "' and f51.D_D = #01-01-1901# and f51.amt < 0 and f51.s_a = '@@@' and f51.a_n = '3001' UNION ALL");
            //strQuery.Append(" select '', f1.a_n, f1.s_a, '','' , 0 as [amt_debit] , f1.[DESC], 0, Round((f51.AMT * -1)) as [amt_credit] from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and f51.S_A = f1.S_A where f51.prd = '" + mprd + "' and f51.D_D = #01-01-1901# and f51.amt < 0 and f51.s_a = '@@@' and f51.a_n like '5%' UNION ALL");
            //strQuery.Append(" select '', f1.a_n, f1.s_a, '','' , 0 as [amt_debit] , f1.[DESC], 0, Round(f51.AMT) as [amt_credit] from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and f51.S_A = f1.S_A where f51.prd = '" + mprd + "' and f51.D_D = #01-01-1901# and f51.amt > 0 and f51.s_a = '@@@' and f51.a_n like '65%' UNION ALL");
            //strQuery.Append(" select '', f1.a_n, f1.s_a, f1.[DESC] , '', Round((f51.AMT * -1)) as [amt_debit], '', 0,0 as [amt_credit] from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and f51.S_A = f1.S_A where f51.prd = '" + mprd + "' and f51.D_D = #01-01-1901# and f51.amt < 0 and f51.s_a = '@@@' and f51.a_n like '2%' UNION ALL");
            //strQuery.Append(" select '', f1.a_n, f1.s_a, f1.[DESC] , '', Round((f51.AMT * -1)) as [amt_debit], '', 0,0 as [amt_credit] from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and f51.S_A = f1.S_A where f51.prd = '" + mprd + "' and f51.D_D = #01-01-1901# and f51.amt < 0 and f51.s_a = '@@@' and f51.a_n like '3%' and f51.a_n <> '3000' and f51.a_n <> '3001' and f51.a_n <> '3500' and f51.a_n <> '3501' UNION ALL");
            //strQuery.Append(" select '', f1.a_n, f1.s_a, f1.[DESC] , '', Round((f51.AMT * 1))  as [amt_debit], '', 0,0 as [amt_credit] from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and f51.S_A = f1.S_A where f51.prd = '" + mprd + "' and f51.D_D = #01-01-1901# and f51.amt > 0 and f51.s_a = '@@@' and f51.a_n = '3001' UNION ALL");
            //strQuery.Append(" select '', f1.a_n, f1.s_a, f1.[DESC] , '', Round((f51.AMT * -1)) as [amt_debit], '', 0,0 as [amt_credit] from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and f51.S_A = f1.S_A where f51.prd = '" + mprd + "' and f51.D_D = #01-01-1901# and f51.amt < 0 and (f51.s_a <> '@@@' and f51.s_a <> '') and f51.a_n LIKE '35%' and f51.a_n <> '3500' UNION ALL");
            //strQuery.Append(" select '', f1.a_n, f1.s_a, f1.[DESC] , '', Round((f51.AMT * -1)) as [amt_debit], '', 0,0 as [amt_credit] from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and f51.S_A = f1.S_A where f51.prd = '" + mprd + "' and f51.D_D = #01-01-1901# and f51.amt < 0 and f51.s_a = '@@@' and f51.a_n like '4%'  order by a_n,s_a");
        }

        private string query_contains_for_ledger_account_union(string ma_n, string ms_a, string end_date)
        {
            StringBuilder strQuery = new StringBuilder();
            if (ms_a != "@@@")
            {
                //(string book, string mprd, int md_c, string ma_n, string ms_a, string md_n)
                strQuery.Append(" select distinct '' as [DATE_SORT],f51.a_n as [ACC_NAME], f51.s_a as [SUB_ACC_NAME], f51.d_d as [DATE], 'Open' as [DOCUMENTS], 'O' as [ACC_TYPE], f51.amt as [DEBIT], 0 as [CREDIT], f51.amt as [BALANCE], 0 as [d_c], '' as [prd],'' as [a_n], '' as [s_a], '' as bank_nara,'' as [na_n], '' as [ns_a]  from " + ConnectionWithAccess.tablename[51] + " f51 where f51.prd = '@' and f51.a_n = '" + ma_n + "' and f51.s_a = '" + ms_a + "' and f51.amt <> 0 and d_d = #01-01-1901# UNION ALL");
                strQuery.Append(" select '' as [DATE_SORT],f21.a_n as [ACC_NAME], f21.s_a as [SUB_ACC_NAME], f21.d_d as [DATE] ,f21.d_n as [DOCUMENTS],'Sale' as [ACC_TYPE], f21.gamt as [DEBIT],0 as [CREDIT],0 as [BALANCE], f21.d_c as [d_c], f21.prd as [mprd], f21.a_n as [a_n], f21.s_a as [s_a], '' as bank_nara,'' as [na_n], '' as [ns_a] from " + ConnectionWithAccess.tablename[21] + " f21 where f21.a_n = '" + ma_n + "' and f21.s_a = '" + ms_a + "' and f21.d_d <= @From UNION ALL");
                strQuery.Append(" select '' as [DATE_SORT],f22.a_n as [ACC_NAME], f22.s_a as [SUB_ACC_NAME], f22.d_d as [DATE], f22.d_n as [DOCUMENTS],'Purc' as [ACC_TYPE], 0 as [DEBIT], f22.gamt as [CREDIT] ,0 as [BALANCE], f22.d_c as [d_c], f22.prd as [mprd], f22.a_n as [a_n], f22.s_a as [s_a], '' as bank_nara,'' as [na_n], '' as [ns_a] from " + ConnectionWithAccess.tablename[22] + " f22 where f22.a_n = '" + ma_n + "' and f22.s_a = '" + ms_a + "' and f22.d_d <= @From UNION ALL");
                strQuery.Append(" select '' as [DATE_SORT],f23.a_n as [ACC_NAME], f23.s_a as [SUB_ACC_NAME], f23.d_d as [DATE], f23.d_n as [DOCUMENTS],'Bank' as [ACC_TYPE], 0 as [DEBIT], f23.bamt as [CREDIT],0 as [BALANCE], f23.d_c as [d_c], f23.prd as [mprd], f23.a_n as [a_n], f23.s_a as [s_a], f23.bank_nara,'' as [na_n], '' as [ns_a] from " + ConnectionWithAccess.tablename[23] + " f23 where f23.a_n = '" + ma_n + "' and f23.s_a = '" + ms_a + "'" + " and f23.b_t = '3' and f23.bamt > 0  and f23.d_d <= @From UNION ALL");
                strQuery.Append(" select '' as [DATE_SORT],f23.a_n as [ACC_NAME], f23.s_a as [SUB_ACC_NAME], f23.d_d as [DATE], f23.d_n as [DOCUMENTS],'Bank' as [ACC_TYPE], (f23.bamt * -1) as [DEBIT], 0 as [CREDIT],0 as [BALANCE], f23.d_c as [d_c], f23.prd as [mprd], f23.a_n as [a_n], f23.s_a as [s_a], f23.bank_nara,'' as [na_n], '' as [ns_a] from " + ConnectionWithAccess.tablename[23] + " f23 where f23.a_n = '" + ma_n + "' and f23.s_a = '" + ms_a + "'" + " and f23.b_t = '3' and f23.bamt < 0  and f23.d_d <= @From UNION ALL");
                strQuery.Append(" select '' as [DATE_SORT],f24.a_n as [ACC_NAME], f24.s_a as [SUB_ACC_NAME], f24.d_d as [DATE], f24.d_n as [DOCUMENTS],'Cash' as [ACC_TYPE], 0 as [DEBIT], f24.Camt as [CREDIT],0 as [BALANCE], f24.d_c as [d_c], f24.prd as [mprd], f24.a_n as [a_n], f24.s_a as [s_a], '' as bank_nara,'' as [na_n], '' as [ns_a] from " + ConnectionWithAccess.tablename[24] + " f24 where f24.a_n = '" + ma_n + "' and f24.s_a = '" + ms_a + "' and f24.camt > 0  and f24.d_d <= @From UNION ALL");
                strQuery.Append(" select '' as [DATE_SORT],f24.a_n as [ACC_NAME], f24.s_a as [SUB_ACC_NAME], f24.d_d as [DATE], f24.d_n as [DOCUMENTS],'Cash' as [ACC_TYPE], (f24.Camt * -1) as [DEBIT],0 as [CREDIT], 0 as [BALANCE] , f24.d_c as [d_c], f24.prd as [mprd], f24.a_n as [a_n], f24.s_a as [s_a], '' as bank_nara,'' as [na_n], '' as [ns_a]  from " + ConnectionWithAccess.tablename[24] + " f24 where f24.a_n = '" + ma_n + "' and f24.s_a = '" + ms_a + "' and f24.camt < 0  and f24.d_d <= @From UNION ALL");
                strQuery.Append(" select '' as [DATE_SORT],f25.a_n as [ACC_NAME], f25.s_a as [SUB_ACC_NAME], f25.d_d as [DATE], f25.d_n as [DOCUMENTS],'Jour' as [ACC_TYPE], f25.jamt as [DEBIT], 0 as [CREDIT], 0 as [BALANCE], f25.d_c as [d_c], f25.prd as [mprd], f25.a_n as [a_n], f25.s_a as [s_a], '' as bank_nara, f25.na_n as [na_n], f25.ns_a as [ns_a] from " + ConnectionWithAccess.tablename[25] + " f25 where f25.a_n = '" + ma_n + "' and f25.s_a = '" + ms_a + "'  and f25.d_d <= @From UNION ALL");
                strQuery.Append(" select '' as [DATE_SORT],f25.a_n as [ACC_NAME], f25.s_a as [SUB_ACC_NAME], f25.d_d as [DATE], f25.d_n as [DOCUMENTS],'Jour' as [ACC_TYPE], 0 as [DEBIT], f25.jamt as [CREDIT], 0 as [BALANCE], f25.d_c as [d_c], f25.prd as [mprd], f25.a_n as [a_n], f25.s_a as [s_a], '' as bank_nara, f25.na_n as [na_n], f25.ns_a as [ns_a] from " + ConnectionWithAccess.tablename[25] + " f25 where f25.na_n = '" + ma_n + "' and f25.ns_a = '" + ms_a + "' and f25.d_d <= @From UNION ALL");
                strQuery.Append(" select '' as [DATE_SORT],f30.a_n as [ACC_NAME], f30.s_a as [SUB_ACC_NAME], f30.d_d as [DATE], f30.d_n as [DOCUMENTS],'Repl' as [ACC_TYPE], 0 as [DEBIT], f30.gamt as [CREDIT], 0 as [BALANCE], f30.d_c as [d_c], f30.prd as [mprd], f30.a_n as [a_n], f30.s_a as [s_a], '' as bank_nara,'' as [na_n], '' as [ns_a] from " + ConnectionWithAccess.tablename[30] + " f30 where f30.a_n = '" + ma_n + "' and f30.s_a = '" + ms_a + "' and f30.d_d <= @From ");
            }
            else
            {
                if (ma_n.Substring(0, 2) == "70")
                    strQuery.Append(" select distinct '' as [DATE_SORT],f51.a_n as [ACC_NAME], f51.s_a as [SUB_ACC_NAME], f51.d_d as [DATE], 'Open' as [DOCUMENTS], 'O' as [ACC_TYPE], 0.00 as [DEBIT], 0.00 as [CREDIT], 0.00 as [BALANCE], '' as [d_c], '' as [prd],'' as [a_n], '' as [s_a], '' as bank_nara,'' as [na_n], '' as [ns_a] from " + ConnectionWithAccess.tablename[51] + " f51 where f51.prd = '@' and f51.a_n = '" + ma_n + "' and f51.amt <> 0 and d_d = #01-01-1901# UNION ALL");
                else if (ma_n.Substring(0, 1) == "1")
                    strQuery.Append(" select distinct '' as [DATE_SORT],f51.a_n as [ACC_NAME], f51.s_a as [SUB_ACC_NAME], f51.d_d as [DATE], 'Open' as [DOCUMENTS], 'O' as [ACC_TYPE], f51.amt as [DEBIT], 0 as [CREDIT], f51.amt as [BALANCE], '' as [d_c], '' as [prd],'' as [a_n], '' as [s_a], '' as bank_nara,'' as [na_n], '' as [ns_a] from " + ConnectionWithAccess.tablename[51] + " f51 where f51.prd = '?' and f51.a_n = '" + ma_n + "' and f51.amt <> 0 and d_d = #01-01-1901# UNION ALL");
                else
                    strQuery.Append(" select distinct '' as [DATE_SORT],f51.a_n as [ACC_NAME], f51.s_a as [SUB_ACC_NAME], f51.d_d as [DATE], 'Open' as [DOCUMENTS], 'O' as [ACC_TYPE], f51.amt as [DEBIT], 0 as [CREDIT], f51.amt as [BALANCE], '' as [d_c], '' as [prd],'' as [a_n], '' as [s_a], '' as bank_nara,'' as [na_n], '' as [ns_a] from " + ConnectionWithAccess.tablename[51] + " f51 where f51.prd = '@' and f51.a_n = '" + ma_n + "' and f51.amt <> 0 and d_d = #01-01-1901# UNION ALL");
                strQuery.Append(" select '' as [DATE_SORT],f21.a_n as [ACC_NAME], f21.s_a as [SUB_ACC_NAME], f21.d_d as [DATE] ,f21.d_n as [DOCUMENTS],'Sale' as [ACC_TYPE], f21.gamt as [DEBIT],0 as [CREDIT],0 as [BALANCE],f21.d_c as [d_c], f21.prd as [mprd], f21.a_n as [a_n], f21.s_a as [s_a], '' as bank_nara,'' as [na_n], '' as [ns_a] from " + ConnectionWithAccess.tablename[21] + " f21 where f21.a_n = '" + ma_n + "' and f21.d_d <= @From UNION ALL");
                strQuery.Append(" select '' as [DATE_SORT],f22.a_n as [ACC_NAME], f22.s_a as [SUB_ACC_NAME], f22.d_d as [DATE], f22.d_n as [DOCUMENTS],'Purc' as [ACC_TYPE], 0 as [DEBIT], f22.gamt as [CREDIT] ,0 as [BALANCE], f22.d_c as [d_c], f22.prd as [mprd], f22.a_n as [a_n], f22.s_a as [s_a], '' as bank_nara,'' as [na_n], '' as [ns_a]  from " + ConnectionWithAccess.tablename[22] + " f22 where f22.a_n = '" + ma_n + "' and f22.d_d <= @From UNION ALL");
                strQuery.Append(" select '' as [DATE_SORT],f23.a_n as [ACC_NAME], f23.s_a as [SUB_ACC_NAME], f23.d_d as [DATE], f23.d_n as [DOCUMENTS],'Bank' as [ACC_TYPE], 0 as [DEBIT], f23.bamt as [CREDIT],0 as [BALANCE], f23.d_c as [d_c], f23.prd as [mprd], f23.a_n as [a_n], f23.s_a as [s_a], f23.bank_nara,'' as [na_n], '' as [ns_a] from " + ConnectionWithAccess.tablename[23] + " f23 where f23.a_n = '" + ma_n + "'" + " and f23.b_t = '3' and f23.bamt > 0  and f23.d_d <= @From UNION ALL");
                strQuery.Append(" select '' as [DATE_SORT],f23.a_n as [ACC_NAME], f23.s_a as [SUB_ACC_NAME], f23.d_d as [DATE], f23.d_n as [DOCUMENTS],'Bank' as [ACC_TYPE], (f23.bamt * -1) as [DEBIT], 0 as [CREDIT],0 as [BALANCE], f23.d_c as [d_c], f23.prd as [mprd], f23.a_n as [a_n], f23.s_a as [s_a], f23.bank_nara,'' as [na_n], '' as [ns_a] from " + ConnectionWithAccess.tablename[23] + " f23 where f23.a_n = '" + ma_n + "'" + " and f23.b_t = '3' and f23.bamt < 0  and f23.d_d <= @From UNION ALL");
                strQuery.Append(" select '' as [DATE_SORT],f24.a_n as [ACC_NAME], f24.s_a as [SUB_ACC_NAME], f24.d_d as [DATE], f24.d_n as [DOCUMENTS],'Cash' as [ACC_TYPE], 0 as [DEBIT], f24.Camt as [CREDIT],0 as [BALANCE], f24.d_c as [d_c], f24.prd as [mprd], f24.a_n as [a_n], f24.s_a as [s_a], '' as bank_nara, '' as [na_n], '' as [ns_a] from " + ConnectionWithAccess.tablename[24] + " f24 where f24.a_n = '" + ma_n + "' and f24.camt > 0  and f24.d_d <= @From UNION ALL");
                strQuery.Append(" select '' as [DATE_SORT],f24.a_n as [ACC_NAME], f24.s_a as [SUB_ACC_NAME], f24.d_d as [DATE], f24.d_n as [DOCUMENTS],'Cash' as [ACC_TYPE], (f24.Camt * -1) as [DEBIT],0 as [CREDIT], 0 as [BALANCE] , f24.d_c as [d_c], f24.prd as [mprd], f24.a_n as [a_n], f24.s_a as [s_a], '' as bank_nara, '' as [na_n], '' as [ns_a] from " + ConnectionWithAccess.tablename[24] + " f24 where f24.a_n = '" + ma_n + "' and f24.camt < 0  and f24.d_d <= @From UNION ALL");
                strQuery.Append(" select '' as [DATE_SORT],f25.a_n as [ACC_NAME], f25.s_a as [SUB_ACC_NAME], f25.d_d as [DATE], f25.d_n as [DOCUMENTS],'Jour' as [ACC_TYPE], f25.jamt as [DEBIT], 0 as [CREDIT], 0 as [BALANCE], f25.d_c as [d_c], f25.prd as [mprd], f25.a_n as [a_n], f25.s_a as [s_a], '' as bank_nara, f25.na_n as [na_n], f25.ns_a as [ns_a] from " + ConnectionWithAccess.tablename[25] + " f25 where f25.a_n = '" + ma_n + "'  and f25.d_d <= @From UNION ALL");
                strQuery.Append(" select '' as [DATE_SORT],f25.a_n as [ACC_NAME], f25.s_a as [SUB_ACC_NAME], f25.d_d as [DATE], f25.d_n as [DOCUMENTS],'Jour' as [ACC_TYPE], 0 as [DEBIT], f25.jamt as [CREDIT], 0 as [BALANCE], f25.d_c as [d_c], f25.prd as [mprd], f25.a_n as [a_n], f25.s_a as [s_a], '' as bank_nara, f25.na_n as [na_n], f25.ns_a as [ns_a] from " + ConnectionWithAccess.tablename[25] + " f25 where f25.na_n = '" + ma_n + "' and f25.d_d <= @From UNION ALL");
                strQuery.Append(" select '' as [DATE_SORT],f30.a_n as [ACC_NAME], f30.s_a as [SUB_ACC_NAME], f30.d_d as [DATE], f30.d_n as [DOCUMENTS],'Repl' as [ACC_TYPE], 0 as [DEBIT], f30.gamt as [CREDIT], 0 as [BALANCE], f30.d_c as [d_c], f30.prd as [mprd], f30.a_n as [a_n], f30.s_a as [s_a], '' as bank_nara, '' as [na_n], '' as [ns_a] from " + ConnectionWithAccess.tablename[30] + " f30 where f30.a_n = '" + ma_n + "' and f30.d_d <= @From ");
            }

            List<ConnectionWithAccess.QueryParams> objParams = new List<ConnectionWithAccess.QueryParams>();
            ConnectionWithAccess.QueryParams ParamFrom = new ConnectionWithAccess.QueryParams();
            ParamFrom.paramName = "@From";
            ParamFrom.paramValue = Convert.ToDateTime(end_date);
            objParams.Add(ParamFrom);
            ConnectionWithAccess.QueryParamList = objParams;
            //add_user_date_time_function_compulsory_program();
            return strQuery.ToString();
        }

        private void contains_for_ledger_account_union(string ma_n, string ms_a, string end_date)
        {
            StringBuilder strQuery = new StringBuilder();
            ConnectionWithAccess.query = query_contains_for_ledger_account_union(ma_n, ms_a, end_date);// strQuery.ToString();
            ConnectionCommand.accountHelp_datatable_Seperate(LedDGV, "LEDGER");
        }

        private string query_contains_for_ledger_item_union(string mtype, string mitem_code, string end_date)
        {
            StringBuilder strQuery = new StringBuilder();
            //if (mtype != "" && mitem_code != "")
            //{
            //(string book, string mprd, int md_c, string ma_n, string ms_a, string md_n)
            strQuery.Append(" select '' as [DATE_SORT],'' as [ACC_NAME], '' as [SUB_ACC_NAME],   #01/01/1901# as [DATE], 'Open' as [DOCUMENTS], 'O' as [ACC_TYPE], 0 as [DEBIT], 0 as [CREDIT], f5.opn_stk as [BALANCE], 0 as [d_c], '' as [prd],'' as [a_n], '' as [s_a] from " + ConnectionWithAccess.tablename[05] + " f5 where f5.type = '" + mtype + "' and f5.item_code = '" + mitem_code + "' UNION ALL");
            strQuery.Append(" select '' as [DATE_SORT],f3.a_n as [ACC_NAME], f3.s_a as [SUB_ACC_NAME], f3.d_d as [DATE] ,f3.d_n as [DOCUMENTS],'Purc' as [ACC_TYPE], f3.qty as [DEBIT],0 as [CREDIT],0 as [BALANCE], f3.d_c as [d_c], f3.prd as [mprd], f3.a_n as [a_n], f3.s_a as [s_a] from " + ConnectionWithAccess.tablename[03] + " f3 where F3.A_N LIKE '4002%' AND f3.type = '" + mtype + "' and f3.item_code = '" + mitem_code + "' UNION ALL");
            strQuery.Append(" select '' as [DATE_SORT],f3.a_n as [ACC_NAME], f3.s_a as [SUB_ACC_NAME], f3.d_d as [DATE] ,f3.d_n as [DOCUMENTS],'Sale' as [ACC_TYPE], 0 as [DEBIT],F3.QTY as [CREDIT],0 as [BALANCE], f3.d_c as [d_c], f3.prd as [mprd], f3.a_n as [a_n], f3.s_a as [s_a] from " + ConnectionWithAccess.tablename[03] + " f3 where F3.A_N LIKE '2002%' AND f3.type = '" + mtype + "' and f3.item_code = '" + mitem_code + "' order by DATE");
            List<ConnectionWithAccess.QueryParams> objParams = new List<ConnectionWithAccess.QueryParams>();
            ConnectionWithAccess.QueryParams ParamFrom = new ConnectionWithAccess.QueryParams();
            ParamFrom.paramName = "@From";
            ParamFrom.paramValue = Convert.ToDateTime(end_date);
            objParams.Add(ParamFrom);
            ConnectionWithAccess.QueryParamList = objParams;
            //add_user_date_time_function_compulsory_program();
            //}
            return strQuery.ToString();
        }

        private void contains_for_ledger_item_union(string mtype, string mitem_code, string end_date)
        {
            StringBuilder strQuery = new StringBuilder();

            ConnectionWithAccess.query = query_contains_for_ledger_item_union(mtype, mitem_code, end_date);// strQuery.ToString();
            ConnectionCommand.accountHelp_datatable_Seperate(LedDGV, "LEDGER");
        }

        #endregion

        private void go_to_selected_period(string mprd)
        {
            get_period_details_from_50(mprd);
            if (DateTime.Today > Convert.ToDateTime(ConnectionWithAccess.msdate))
            {
                if (DateTime.Today <= Convert.ToDateTime(ConnectionWithAccess.medate))
                {
                    ConnectionWithAccess.medate = (DateTime.Today.ToShortDateString()).ToString();
                }
            }
            try
            {
                RepFrom.MinDate = Convert.ToDateTime(ConnectionWithAccess.com_start_date).Date;
                RepFrom.MaxDate = Convert.ToDateTime(ConnectionWithAccess.com_end_date).Date;
                RepTo.MinDate = Convert.ToDateTime(ConnectionWithAccess.com_start_date).Date;
                RepTo.MaxDate = Convert.ToDateTime(ConnectionWithAccess.com_end_date).Date;
                ConnectionWithAccess.moprd = ConnectionWithAccess.get_old_prd_name(ConnectionWithAccess.mprd);
                ConnectionWithAccess.mnew_prd = ConnectionWithAccess.get_next_prd_name(ConnectionWithAccess.mprd);
                RepFrom.Value = Convert.ToDateTime(ConnectionWithAccess.msdate);
                RepTo.Value = Convert.ToDateTime(ConnectionWithAccess.medate);
            }
            catch (Exception ex)
            { }
            text_to_display_on_top_function();
            check_save_button();
        }

        #region generate_pdf_files
        private void generate_balance_sheet_summary()
        {
            //if (ConnectionWithAccess.period_array == null)
            //    fill_period_array();
            if (period_array == null || period_array.Count == 0)
                fill_period_array();
            temporary_list_array.Clear();
            for (int i = 0; i < period_array.Count; i++)
            {
                var cellArray = period_array[i].Split(new[] { ',' });
                emerg_prd = cellArray[0].ToString();
                temp_word = emerg_prd + ",";
                temp_word2 = Convert.ToString(get_account_balance_from_51(emerg_prd, "2001", "@@@"));
                if (temp_word2.Contains("."))
                {
                    if (temp_word2.Substring(temp_word2.Length - 2, 1) == ".")
                        temp_word2 = temp_word2 + "0";
                }
                else
                    temp_word2 = temp_word2 + ".00";
                temp_word = temp_word + temp_word2 + ",";
                temp_word2 = Convert.ToString(get_account_balance_from_51(emerg_prd, "7000", "@@@"));
                if (temp_word2.Contains("."))
                {
                    if (temp_word2.Substring(temp_word2.Length - 2, 1) == ".")
                        temp_word2 = temp_word2 + "0";
                }
                else
                    temp_word2 = temp_word2 + ".00";
                temp_word = temp_word + temp_word2 + ",";
                temp_word2 = Convert.ToString(get_account_balance_from_51(emerg_prd, "6000", "@@@"));
                if (temp_word2.Contains("."))
                {
                    if (temp_word2.Substring(temp_word2.Length - 2, 1) == ".")
                        temp_word2 = temp_word2 + "0";
                }
                else
                    temp_word2 = temp_word2 + ".00";
                temp_word = temp_word + temp_word2 + ",";
                temp_word2 = Convert.ToString(get_account_balance_from_51(emerg_prd, "6000R1", "@@@"));
                if (temp_word2.Contains("."))
                {
                    if (temp_word2.Substring(temp_word2.Length - 2, 1) == ".")
                        temp_word2 = temp_word2 + "0";
                }
                else
                    temp_word2 = temp_word2 + ".00";
                temp_word = temp_word + temp_word2 + ",";
                temp_word2 = Convert.ToString(get_account_balance_from_51(emerg_prd, "719999", "@@@"));
                if (temp_word2.Contains("."))
                {
                    if (temp_word2.Substring(temp_word2.Length - 2, 1) == ".")
                        temp_word2 = temp_word2 + "0";
                }
                else
                    temp_word2 = temp_word2 + ".00";
                temp_word = temp_word + temp_word2 + ",";
                temp_word2 = Convert.ToString(get_account_balance_from_51(emerg_prd, "7998", "@@@"));
                if (temp_word2.Contains("."))
                {
                    if (temp_word2.Substring(temp_word2.Length - 2, 1) == ".")
                        temp_word2 = temp_word2 + "0";
                }
                else
                    temp_word2 = temp_word2 + ".00";
                temp_word = temp_word + temp_word2 + ",";
                temp_word2 = Convert.ToString(get_gp_percent_from_file_fifty(emerg_prd));
                if (temp_word2.Contains("."))
                {
                    if (temp_word2.Substring(temp_word2.Length - 2, 1) == ".")
                        temp_word2 = temp_word2 + "0";
                }
                else
                    temp_word2 = temp_word2 + ".00";
                temp_word = temp_word + temp_word2 + ",";
                temporary_list_array.Add(temp_word.Trim());
            }
            print_balance_sheet_summary();
            //doc.SetPageSize(iTextSharp.text.PageSize.A4.Rotate()); // for horizontal layout
        }

        private void print_balance_sheet_summary()
        {
            report_filetype = cbBalShAc.Text + "_";
            trading_filename = ConnectionWithAccess.report_file_location + (report_filetype).Replace(" ", "");
            if (chb_add_datetime_in_output.Checked)
                trading_filename += "_" + DateTime.Now.Day + "_" + DateTime.Now.Month + "_" + DateTime.Now.Year + "_" + DateTime.Now.TimeOfDay.Hours + "_" + DateTime.Now.TimeOfDay.Minutes;
            trading_filename += ".pdf";
            ConnectionWithAccess.create_file_folder(trading_filename);
            doc1 = new Document(PageSize.A4.Rotate(), 10, 10, 35, 20);
            FileStream FS1 = File.Create(trading_filename);
            writer = PdfWriter.GetInstance(doc1, FS1);
            doc1.Open();
            current_pdf_page_number = 1;
            add_header_footer = true;
            header_text_message = report_filetype + " " + " From : " + RepFrom.Text + " to " + RepTo.Text;
            pdf_top_heading = "Period   Open. Stock          Purchase                  Sales                  Repairs               Gross.Profit                 Net.Profit                Gp.Per";
            Paragraph para = new Paragraph();
            basicamount = 0; taxamount = 0; grossamount = 0;
            for (int i = 0; i < temporary_list_array.Count; i++)
            {
                var cellArray = temporary_list_array[i].Split(new[] { ',' });
                temp_word = cellArray[0];
                print_pdf_line(cour_9, temp_word, para_IndentationLeft_position(-20, temp_word, "cour_9"), -9);
                temp_word = cellArray[1];
                print_pdf_line(cour_9, temp_word, para_IndentationLeft_position(40, temp_word, "cour_9"), -15);
                temp_word = cellArray[2];
                print_pdf_line(cour_9, temp_word, para_IndentationLeft_position(120, temp_word, "cour_9"), -15);
                temp_word = cellArray[3];
                print_pdf_line(cour_9, temp_word, para_IndentationLeft_position(200, temp_word, "cour_9"), -15);
                temp_word = cellArray[4];
                print_pdf_line(cour_9, temp_word, para_IndentationLeft_position(280, temp_word, "cour_9"), -15);
                temp_word = cellArray[5];
                print_pdf_line(cour_9, temp_word, para_IndentationLeft_position(360, temp_word, "cour_9"), -15);
                temp_word = cellArray[6];
                print_pdf_line(cour_9, temp_word, para_IndentationLeft_position(440, temp_word, "cour_9"), -15);
                temp_word = cellArray[7];
                print_pdf_line(cour_9, temp_word, para_IndentationLeft_position(520, temp_word, "cour_9"), -15);
            }
            print_footer();
            doc1.Close();
        }

        private double get_gp_percent_from_file_fifty(string mprd)
        {
            get_period_details_from_50(mprd);
            return ConnectionWithAccess.gp_percent;
            //ConnectionWithAccess.gp_percent = 0;
            //temp_double = 0;
            //ConnectionWithAccess.query = "select gp from " + ConnectionWithAccess.tablename[50] + " where prd = '" + mprd + "' and gp <> 0";
            //DataTable dtData1 = ConnectionCommand.fGetDataTable();
            //if (dtData1 != null && dtData1.Rows.Count > 0)
            //{
            //    if (dtData1.Rows[0][0] != null)
            //        ConnectionWithAccess.gp_percent = Convert.ToDouble(dtData1.Rows[0][0].ToString());
            //    temp_double = ConnectionWithAccess.gp_percent;
            //}
            //if (cb_emerg_full_period.Checked)
            //    blstgp_per.Text = Convert.ToString(ConnectionWithAccess.gp_percent);
            //return temp_double;
        }

        private void print_pdf_line(iTextSharp.text.Font pdf_font, string temp_word, int indentation_left, int spacingbefore)
        {
            if (maintab.SelectedIndex != 1)
            {
                var current_print_line_position = writer.GetVerticalPosition(false);
                if (add_header_footer == true && require_header_footer == true)
                {
                    temp_int = indentation_left;
                    if (pdf_top_heading != null && pdf_top_heading != "")
                    {
                        temp_word1 = " ";
                        print_pdf_line_inside_another_line(cour_9, temp_word1, 40, 40);
                        temp_word1 = "-----------------------------------------------------------------------------------------------------------------------------------------------------------------------";
                        print_pdf_line_inside_another_line(cour_9, temp_word1, 40, 20);
                        print_pdf_line_inside_another_line(cour_9, pdf_top_heading, 40, -7);
                        temp_word1 = "-----------------------------------------------------------------------------------------------------------------------------------------------------------------------";
                        print_pdf_line_inside_another_line(cour_9, temp_word1, 40, -8);
                        temp_word1 = " ";
                    }
                    print_header_footer();
                    add_header_footer = false;
                    indentation_left = temp_int;
                    //spacingbefore = -9;
                }
                if (current_print_line_position < 75 && spacingbefore <= 0 && spacingbefore > -10)
                {
                    //print_header_footer();
                    temp_int = indentation_left;
                    if (pdf_top_heading != null && pdf_top_heading != "")
                    {
                        //spacingbefore += 40;
                        //para = new Paragraph();
                        //para.Font = cour_7;
                        //para.Add("Page # " + current_pdf_page_number.ToString());
                        //para.IndentationLeft = 480;
                        //para.SpacingBefore = 0;
                        //doc1.Add(para);                        //spacingbefore += 70;

                        //current_pdf_page_number++;
                        temp_word1 = " ";
                        print_pdf_line_inside_another_line(cour_9, temp_word1, 40, 60);
                        //temp_word1 = "-----------------------------------------------------------------------------------------------------------------------------------------------------------------------";
                        //print_pdf_line_inside_another_line(cour_9, temp_word1, 40, 20);
                        //print_pdf_line_inside_another_line(cour_9, pdf_top_heading, 40, -7);
                        //temp_word1 = "-----------------------------------------------------------------------------------------------------------------------------------------------------------------------";
                        //print_pdf_line_inside_another_line(cour_9, temp_word1, 40, -8);
                        temp_word1 = "----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------";
                        print_pdf_line_inside_another_line(cour_9, temp_word1, 10, 20);
                        print_pdf_line_inside_another_line(cour_7, pdf_top_heading, 10, -7);
                        temp_word1 = "----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------";
                        print_pdf_line_inside_another_line(cour_9, temp_word1, 10, -8);
                        print_header_footer();
                    }
                    else
                    {
                        para = new Paragraph();
                        para.Font = cour_7;
                        para.Add("Page # " + current_pdf_page_number.ToString());
                        para.IndentationLeft = 480;
                        para.SpacingBefore = 0;
                        doc1.Add(para);
                        spacingbefore += 100;
                        current_pdf_page_number++;
                        add_header_footer = true;
                    }
                }
            }
            temp_word = temp_word.Trim();
            if (temp_word == "" || temp_word == null) { temp_word = " "; }
            para = new Paragraph();
            para.Font = pdf_font;
            para.Add(temp_word);
            para.IndentationLeft = indentation_left;
            para.SpacingBefore = spacingbefore;
            doc1.Add(para);
            last_pdf_line_print_number = Convert.ToInt32(writer.GetVerticalPosition(false).ToString());
            //if (spacingbefore >= 0)
            //    actual_line_number_of_page++;
            if (start_new_line_in_pdf == true)
            {
                actual_line_number_of_page++;
                start_new_line_in_pdf = false;
            }
            if (actual_line_number_of_page >= 74)
            {
                add_header_footer = true;
                actual_line_number_of_page = 0;
            }

        }

        private void add_page_number_on_bottom_of_pdf()
        {
            para = new Paragraph();
            para.Font = cour_7;
            para.Add("Page # " + current_pdf_page_number.ToString());
            para.IndentationLeft = 480;
            para.SpacingBefore = 0;
            doc1.Add(para);
        }

        private void print_pdf_line_inside_another_line(iTextSharp.text.Font pdf_font, string temp_word, int indentation_left, int spacingbefore)
        {
            //temp_word = temp_word.Trim();
            if (temp_word == "" || temp_word == null) { temp_word = " "; }
            para = new Paragraph();
            para.Font = pdf_font;
            para.Add(temp_word);
            para.IndentationLeft = indentation_left;
            para.SpacingBefore = spacingbefore;
            doc1.Add(para);
            if (spacingbefore >= 0)
                actual_line_number_of_page++;
        }

        private void print_pdf_line_at_center(iTextSharp.text.Font pdf_font, string temp_word, int spacingbefore, string font_type)
        {
            var current_print_line_position = writer.GetVerticalPosition(false);
            if (current_print_line_position < 90)
            {
                para = new Paragraph();
                para.Font = cour_7;
                // para.Add("For " +  + ConnectionWithAccess.company_details[1]);
                para.Add("Page # " + current_pdf_page_number.ToString());
                para.IndentationLeft = 480;
                para.SpacingBefore = 0;
                doc1.Add(para);
                spacingbefore += 40;
                current_pdf_page_number++;
                add_header_footer = true;
                //print_header_footer();
                //add_header_footer = false;
            }
            else
                if (add_header_footer == true && require_header_footer == true)
            {
                print_header_footer();
                add_header_footer = false;
            }

            if (temp_word != null)
                temp_word = temp_word.Trim();
            if (temp_word == "" || temp_word == null) { temp_word = " "; }
            para = new Paragraph();
            para.Font = pdf_font;
            para.Add(temp_word);
            para.SpacingBefore = spacingbefore;
            para.Alignment = iTextSharp.text.Image.ALIGN_CENTER;
            doc1.Add(para);
            actual_line_number_of_page++;
        }

        private void add_logo_image_in_pdf()
        {
            ////Company Logo
            //cell = ImageCell("~/images/northwindlogo.gif", 30f, PdfPCell.ALIGN_CENTER);
            //table.AddCell(cell);
        }

        private void print_header_footer()
        {
            //PdfContentByte cb;
            cb = writer.DirectContent;
            //PdfTemplate headerTemplate, footerTemplate;
            //BaseFont bf = BaseFont.CreateFont(Environment.GetEnvironmentVariable("windir") + @"\fonts\cour.ttf", BaseFont.IDENTITY_H, true);
            //headerTemplate = cb.CreateTemplate(10, 10);
            //footerTemplate = cb.CreateTemplate(50, 50);
            BaseFont bf11 = BaseFont.CreateFont(BaseFont.COURIER_BOLD, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);

            //Add paging to header
            cb.BeginText();
            cb.SetFontAndSize(bf11, 9);
            //cb.SetTextMatrix(0, doc1.PageSize.GetTop(header_top_location));

            cb.ShowTextAligned(PdfContentByte.ALIGN_CENTER, ConnectionWithAccess.company_details[1], doc1.PageSize.Width / 2, doc1.PageSize.GetTop(header_top_location), 0);
            if (ConnectionWithAccess.company_details[2] != null)
                cb.ShowTextAligned(PdfContentByte.ALIGN_CENTER, ConnectionWithAccess.company_details[2], doc1.PageSize.Width / 2, doc1.PageSize.GetTop(header_top_location + 8), 0);
            if (ConnectionWithAccess.company_details[3] != null)
                cb.ShowTextAligned(PdfContentByte.ALIGN_CENTER, ConnectionWithAccess.company_details[3], doc1.PageSize.Width / 2, doc1.PageSize.GetTop(header_top_location + 16), 0);
            if (ConnectionWithAccess.company_details[4] != null)
                cb.ShowTextAligned(PdfContentByte.ALIGN_CENTER, ConnectionWithAccess.company_details[4], doc1.PageSize.Width / 2, doc1.PageSize.GetTop(header_top_location + 24), 0);
            //cb.SetTextMatrix(0, doc1.PageSize.GetTop(header_top_location + 15));
            //para.Font = cour_11_bold;

            if (header_text_message != null && header_text_message != "")
                cb.ShowTextAligned(PdfContentByte.ALIGN_CENTER, header_text_message, doc1.PageSize.Width / 2, doc1.PageSize.GetTop(header_top_location + 32), 0);
            cb.EndText();
            //float len = bf.GetWidthPoint(headertext, 12);
            //cb.AddTemplate(headerTemplate, doc1.PageSize.GetRight(200) + len, doc1.PageSize.GetTop(45));

            cb.BeginText();
            cb.SetFontAndSize(bf, 7);
            temp_word = "Page # " + current_pdf_page_number.ToString();
            //cb.SetTextMatrix(doc1.PageSize.GetRight(footer_position - 120), doc1.PageSize.GetBottom(footer_bottom_location + 15));
            cb.SetTextMatrix(doc1.PageSize.GetLeft(50), doc1.PageSize.GetBottom(footer_bottom_location));
            cb.ShowText(temp_word);
            cb.EndText();
            current_pdf_page_number++;


            //Add paging to footer

            cb.BeginText();
            cb.SetFontAndSize(bf, 7);
            temp_word = "For " + ConnectionWithAccess.company_details[1];
            cb.SetTextMatrix(doc1.PageSize.GetRight(footer_position), doc1.PageSize.GetBottom(footer_bottom_location));
            cb.ShowText(temp_word);
            cb.EndText();
            //float length = bf.GetWidthPoint(footertext, 12);
            //cb.AddTemplate(footerTemplate, doc1.PageSize.GetRight(180) + length, doc1.PageSize.GetBottom(30));
        }

        private void print_header_footer_with_top_contains(string heading_contains)
        {
            cb = writer.DirectContent;
            headerTemplate = cb.CreateTemplate(10, 10);
            footerTemplate = cb.CreateTemplate(50, 50);

            //Add paging to header
            cb.BeginText();
            cb.SetFontAndSize(bf, 12);
            cb.SetTextMatrix(doc1.PageSize.GetLeft(header_position), doc1.PageSize.GetTop(header_top_location));

            cb.ShowText(ConnectionWithAccess.company_details[1]);
            cb.SetTextMatrix(doc1.PageSize.GetLeft(header_position), doc1.PageSize.GetTop(header_top_location + 15));
            para.Font = cour_11;
            cb.ShowText(header_text_message);

            temp_word = "------------------------------------------------------------------------------------------------------------------------------------------";
            cb.SetTextMatrix(doc1.PageSize.GetLeft(header_position), doc1.PageSize.GetTop(header_top_location + 25));
            cb.ShowText(temp_word);
            cb.SetTextMatrix(doc1.PageSize.GetLeft(header_position), doc1.PageSize.GetTop(header_top_location + 35));
            cb.ShowText(heading_contains);
            cb.SetTextMatrix(doc1.PageSize.GetLeft(header_position), doc1.PageSize.GetTop(header_top_location + 45));
            cb.ShowText(temp_word);
            cb.EndText();

            //Add paging to footer
            cb.BeginText();
            cb.SetFontAndSize(bf, 7);
            temp_word = "------------------------------------------------------------------------------------------------------------------------------------------";
            cb.SetTextMatrix(doc1.PageSize.GetLeft(header_position), doc1.PageSize.GetBottom(footer_bottom_location + 20));
            cb.ShowText(temp_word);
            temp_word = "For " + ConnectionWithAccess.company_details[1];
            cb.SetTextMatrix(doc1.PageSize.GetRight(footer_position), doc1.PageSize.GetBottom(footer_bottom_location));
            cb.ShowText(temp_word);
            cb.EndText();
        }

        private void print_header()
        {
            cb = writer.DirectContent;
            headerTemplate = cb.CreateTemplate(10, 10);
            footerTemplate = cb.CreateTemplate(50, 50);
            cb.BeginText();
            cb.SetFontAndSize(bf, 12);
            cb.SetTextMatrix(doc1.PageSize.GetLeft(header_position), doc1.PageSize.GetTop(header_top_location));
            cb.ShowText(ConnectionWithAccess.company_details[1]);
            cb.SetTextMatrix(doc1.PageSize.GetLeft(header_position), doc1.PageSize.GetTop(header_top_location + 15));
            para.Font = cour_11;
            temp_word = report_filetype + " " + " From : " + RepFrom.Text + " to " + RepTo.Text;
            cb.ShowText(temp_word);
            cb.EndText();
        }

        private void print_footer()
        {
            cb = writer.DirectContent;
            headerTemplate = cb.CreateTemplate(10, 10);
            footerTemplate = cb.CreateTemplate(50, 50);
            cb.BeginText();
            cb.SetFontAndSize(bf, 7);
            temp_word = "For " + ConnectionWithAccess.company_details[1];
            cb.SetTextMatrix(doc1.PageSize.GetRight(footer_position), doc1.PageSize.GetBottom(footer_bottom_location));
            cb.ShowText(temp_word);
            cb.EndText();
        }

        private void print_footer_with_page_number()
        {
            //PdfContentByte cb;
            cb = writer.DirectContent;
            //PdfTemplate headerTemplate, footerTemplate;
            //BaseFont bf = BaseFont.CreateFont(Environment.GetEnvironmentVariable("windir") + @"\fonts\cour.ttf", BaseFont.IDENTITY_H, true);
            //headerTemplate = cb.CreateTemplate(10, 10);
            //footerTemplate = cb.CreateTemplate(50, 50);
            BaseFont bf11 = BaseFont.CreateFont(BaseFont.COURIER_BOLD, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);

            //Add paging to header
            cb.BeginText();
            cb.SetFontAndSize(bf11, 9);
            //cb.SetTextMatrix(0, doc1.PageSize.GetTop(header_top_location));

            cb.ShowTextAligned(PdfContentByte.ALIGN_CENTER, ConnectionWithAccess.company_details[1], doc1.PageSize.Width / 2, doc1.PageSize.GetTop(header_top_location), 0);
            cb.ShowTextAligned(PdfContentByte.ALIGN_CENTER, ConnectionWithAccess.company_details[2], doc1.PageSize.Width / 2, doc1.PageSize.GetTop(header_top_location + 8), 0);
            cb.ShowTextAligned(PdfContentByte.ALIGN_CENTER, ConnectionWithAccess.company_details[3], doc1.PageSize.Width / 2, doc1.PageSize.GetTop(header_top_location + 16), 0);
            cb.ShowTextAligned(PdfContentByte.ALIGN_CENTER, ConnectionWithAccess.company_details[4], doc1.PageSize.Width / 2, doc1.PageSize.GetTop(header_top_location + 24), 0);
            //cb.SetTextMatrix(0, doc1.PageSize.GetTop(header_top_location + 15));
            //para.Font = cour_11_bold;

            if (header_text_message != null && header_text_message != "")
                cb.ShowTextAligned(PdfContentByte.ALIGN_CENTER, header_text_message, doc1.PageSize.Width / 2, doc1.PageSize.GetTop(header_top_location + 32), 0);
            cb.EndText();
            //float len = bf.GetWidthPoint(headertext, 12);
            //cb.AddTemplate(headerTemplate, doc1.PageSize.GetRight(200) + len, doc1.PageSize.GetTop(45));

            cb.BeginText();
            cb.SetFontAndSize(bf, 7);
            temp_word = "Page # " + current_pdf_page_number.ToString();
            //cb.SetTextMatrix(doc1.PageSize.GetRight(footer_position - 120), doc1.PageSize.GetBottom(footer_bottom_location + 15));
            cb.SetTextMatrix(doc1.PageSize.GetLeft(50), doc1.PageSize.GetBottom(footer_bottom_location));
            cb.ShowText(temp_word);
            cb.EndText();
            current_pdf_page_number++;


            //Add paging to footer

            cb.BeginText();
            cb.SetFontAndSize(bf, 7);
            temp_word = "For " + ConnectionWithAccess.company_details[1];
            cb.SetTextMatrix(doc1.PageSize.GetRight(footer_position), doc1.PageSize.GetBottom(footer_bottom_location));
            cb.ShowText(temp_word);
            cb.EndText();
            //float length = bf.GetWidthPoint(footertext, 12);
            //cb.AddTemplate(footerTemplate, doc1.PageSize.GetRight(180) + length, doc1.PageSize.GetBottom(30));
        }

        private void item_closing_stock_list()
        {
            if (gdvreport.ColumnCount > 0)
            {
                report_filetype = "Item Closing Stock " + cbRepFormat.Text;
                pdf_filename = ConnectionWithAccess.report_file_location + (report_filetype).Replace(" ", "");
                if (chb_add_datetime_in_output.Checked)
                    pdf_filename += "_" + DateTime.Now.Day + "_" + DateTime.Now.Month + "_" + DateTime.Now.Year + "_" + DateTime.Now.TimeOfDay.Hours + "_" + DateTime.Now.TimeOfDay.Minutes;
                pdf_filename += ".pdf";
                ConnectionWithAccess.create_file_folder(pdf_filename);
                doc1 = new Document(PageSize.A4, 5, 5, 5, 5);
                FileStream FS1 = File.Create(pdf_filename);
                writer = PdfWriter.GetInstance(doc1, FS1);
                doc1.Open();
                current_pdf_page_number = 1;
                add_header_footer = true;
                header_text_message = report_filetype + " " + " From : " + RepFrom.Text + " to " + RepTo.Text;
                //[type],item_code,[title],clo_stk,price,o_s_amt,igst_per,hsn_code
                pdf_top_heading = "Sr.No       Description  ";
                Paragraph para = new Paragraph();
                basicamount = 0; taxamount = 0; grossamount = 0;
                int lineno = 0;
                for (row_pointer = 0; row_pointer < gdvreport.RowCount - 1; row_pointer++)
                {
                    if (gdvreport.Rows[row_pointer].Cells[5].Value != null && gdvreport.Rows[row_pointer].Cells[5].Value.ToString() != "")
                    {
                        temp_word = (row_pointer + 1).ToString();
                        print_pdf_line(cour_9, temp_word, para_IndentationLeft_position(-15, temp_word, "cour_9"), -9);
                        temp_word = gdvreport.Rows[row_pointer].Cells["title"].Value.ToString();
                        print_pdf_line(cour_9, temp_word, 72, -15);
                        //print_pdf_line(cour_9, gdvreport.Rows[row_pointer].Cells[3].Value.ToString(), 130, -15);
                        //print_pdf_line(cour_9, gdvreport.Rows[row_pointer].Cells[4].Value.ToString(), 320, -15);

                        temp_word = gdvreport.Rows[row_pointer].Cells["clo_stk"].Value.ToString();
                        temp_double2 = Convert.ToDouble(temp_word);
                        temp_word = String.Format("{0:0.00}", temp_word);
                        if (!temp_word.Contains(".")) temp_word += ".00";
                        print_pdf_line(cour_9, temp_word, para_IndentationLeft_position(300, temp_word, "cour_9"), -15);

                        temp_word = gdvreport.Rows[row_pointer].Cells["p_price"].Value.ToString();
                        temp_word = String.Format("{0:0.00}", temp_word);
                        if (!temp_word.Contains(".")) temp_word += ".00";
                        print_pdf_line(cour_9, temp_word, para_IndentationLeft_position(380, temp_word, "cour_9"), -15);

                        temp_double = temp_double2 * Convert.ToDouble(temp_word);
                        temp_word = String.Format("{0:0.00}", temp_double.ToString());
                        if (!temp_word.Contains(".")) temp_word += ".00";
                        print_pdf_line(cour_9, temp_word, para_IndentationLeft_position(460, temp_word, "cour_9"), -15);

                        //basicamount = basicamount + Convert.ToDouble(gdvreport.Rows[row_pointer].Cells[6].Value.ToString());
                        //taxamount = taxamount + Convert.ToDouble(gdvreport.Rows[row_pointer].Cells[7].Value.ToString());
                        grossamount = grossamount + Convert.ToDouble(temp_word);

                        lineno++;
                    }
                }
                print_pdf_line(cour_9, "----------------", 395, -7);
                print_pdf_line(cour_9, "----------------", 450, -17);
                print_pdf_line(cour_9, "----------------", 510, -17);
                //print_pdf_line(cour_9, basicamount.ToString(), para_IndentationLeft_position(365, basicamount.ToString(), "cour_9"), -7);
                //print_pdf_line(cour_9, taxamount.ToString(), para_IndentationLeft_position(420, taxamount.ToString(), "cour_9"), -17);
                print_pdf_line(cour_9, grossamount.ToString(), para_IndentationLeft_position(480, grossamount.ToString(), "cour_9"), 0);
                print_pdf_line(cour_9, "=========", 395, -7);
                print_pdf_line(cour_9, "=========", 450, -17);
                print_pdf_line(cour_9, "=========", 510, -17);
                doc1.Close();
            }
        }

        private void container_item_stock_list()
        {
            if (mix_reports_dgv.ColumnCount > 0)
            {
                report_filetype = "Container_Item_Closing_Stock ";
                pdf_filename = ConnectionWithAccess.report_file_location + (report_filetype).Replace(" ", "") + "_" + mix_reports_d_c_combo_box.Text;
                if (chb_add_datetime_in_output.Checked)
                    pdf_filename += "_" + DateTime.Now.Day + "_" + DateTime.Now.Month + "_" + DateTime.Now.Year + "_" + DateTime.Now.TimeOfDay.Hours + "_" + DateTime.Now.TimeOfDay.Minutes;
                pdf_filename += ".pdf";
                ConnectionWithAccess.create_file_folder(pdf_filename);
                doc1 = new Document(PageSize.A4, 5, 5, 5, 5);
                FileStream FS1 = File.Create(pdf_filename);
                writer = PdfWriter.GetInstance(doc1, FS1);
                doc1.Open();
                current_pdf_page_number = 1;
                add_header_footer = true;
                header_text_message = report_filetype + "_" + mix_reports_d_c_combo_box.Text + " as on " + DateTime.Now.ToShortDateString();
                //[type],item_code,[title],clo_stk,price,o_s_amt,igst_per,hsn_code
                pdf_top_heading = "Sr.No       Description                                                              Qty.      Cat.        Pitch       Length          Breath";
                Paragraph para = new Paragraph();
                basicamount = 0; taxamount = 0; grossamount = 0;
                int lineno = 0;
                for (row_pointer = 0; row_pointer < mix_reports_dgv.RowCount - 1; row_pointer++)
                {
                    if (mix_reports_dgv.Rows[row_pointer].Cells[5].Value != null && mix_reports_dgv.Rows[row_pointer].Cells[5].Value.ToString() != "")
                    {
                        temp_word = (row_pointer + 1).ToString();
                        print_pdf_line(cour_9, temp_word, para_IndentationLeft_position(-15, temp_word, "cour_9"), -9);
                        temp_word = mix_reports_dgv.Rows[row_pointer].Cells["title"].Value.ToString();
                        print_pdf_line(cour_9, temp_word, 72, -15);
                        //print_pdf_line(cour_9, mix_reports_dgv.Rows[row_pointer].Cells[3].Value.ToString(), 130, -15);
                        //print_pdf_line(cour_9, mix_reports_dgv.Rows[row_pointer].Cells[4].Value.ToString(), 320, -15);

                        temp_word = mix_reports_dgv.Rows[row_pointer].Cells["clo_stk"].Value.ToString();
                        temp_double2 = Convert.ToDouble(temp_word);
                        temp_word = String.Format("{0:0.00}", temp_word);
                        if (!temp_word.Contains(".")) temp_word += ".00";
                        print_pdf_line(cour_9, temp_word, para_IndentationLeft_position(300, temp_word, "cour_9"), -15);

                        temp_word = mix_reports_dgv.Rows[row_pointer].Cells["cat"].Value.ToString();
                        print_pdf_line(cour_9, temp_word, 400, -15);

                        temp_word = mix_reports_dgv.Rows[row_pointer].Cells["pitch"].Value.ToString();
                        temp_double2 = Convert.ToDouble(temp_word);
                        temp_word = String.Format("{0:0.00}", temp_word);
                        if (!temp_word.Contains(".")) temp_word += ".00";
                        print_pdf_line(cour_9, temp_word, para_IndentationLeft_position(390, temp_word, "cour_9"), -16);

                        temp_word = mix_reports_dgv.Rows[row_pointer].Cells["length_size"].Value.ToString();
                        temp_double2 = Convert.ToDouble(temp_word);
                        temp_word = String.Format("{0:0.00}", temp_word);
                        if (!temp_word.Contains(".")) temp_word += ".00";
                        print_pdf_line(cour_9, temp_word, para_IndentationLeft_position(420, temp_word, "cour_9"), -16);

                        temp_word = mix_reports_dgv.Rows[row_pointer].Cells["breadth_size"].Value.ToString();
                        temp_double2 = Convert.ToDouble(temp_word);
                        temp_word = String.Format("{0:0.00}", temp_word);
                        if (!temp_word.Contains(".")) temp_word += ".00";
                        print_pdf_line(cour_9, temp_word, para_IndentationLeft_position(450, temp_word, "cour_9"), -16);


                        //temp_word = mix_reports_dgv.Rows[row_pointer].Cells["p_price"].Value.ToString();
                        //temp_word = String.Format("{0:0.00}", temp_word);
                        //if (!temp_word.Contains(".")) temp_word += ".00";
                        //print_pdf_line(cour_9, temp_word, para_IndentationLeft_position(380, temp_word, "cour_9"), -15);

                        //temp_double = temp_double2 * Convert.ToDouble(temp_word);
                        //temp_word = String.Format("{0:0.00}", temp_double.ToString());
                        //if (!temp_word.Contains(".")) temp_word += ".00";
                        //print_pdf_line(cour_9, temp_word, para_IndentationLeft_position(460, temp_word, "cour_9"), -15);

                        //basicamount = basicamount + Convert.ToDouble(mix_reports_dgv.Rows[row_pointer].Cells[6].Value.ToString());
                        //taxamount = taxamount + Convert.ToDouble(mix_reports_dgv.Rows[row_pointer].Cells[7].Value.ToString());
                        //grossamount = grossamount + Convert.ToDouble(temp_word);

                        lineno++;
                    }
                }
                //print_pdf_line(cour_9, "----------------", 395, -7);
                //print_pdf_line(cour_9, "----------------", 450, -17);
                //print_pdf_line(cour_9, "----------------", 510, -17);
                //print_pdf_line(cour_9, basicamount.ToString(), para_IndentationLeft_position(365, basicamount.ToString(), "cour_9"), -7);
                //print_pdf_line(cour_9, taxamount.ToString(), para_IndentationLeft_position(420, taxamount.ToString(), "cour_9"), -17);
                //print_pdf_line(cour_9, grossamount.ToString(), para_IndentationLeft_position(480, grossamount.ToString(), "cour_9"), 0);
                //print_pdf_line(cour_9, "=========", 395, -7);
                //print_pdf_line(cour_9, "=========", 450, -17);
                //print_pdf_line(cour_9, "=========", 510, -17);
                doc1.Close();
            }
            move_cursor_to_button_position("atbpreview");
        }

        private void sale_purchase_report_list_mini_old_old()
        {
            report_filetype = cbRepType.Text + " " + cbRepSubType.Text + " " + cbRepFormat.Text;
            pdf_filename = ConnectionWithAccess.report_file_location + (report_filetype).Replace(" ", "");
            if (chb_add_datetime_in_output.Checked)
                pdf_filename += "_" + DateTime.Now.Day + "_" + DateTime.Now.Month + "_" + DateTime.Now.Year + "_" + DateTime.Now.TimeOfDay.Hours + "_" + DateTime.Now.TimeOfDay.Minutes;
            pdf_filename += ".pdf";
            doc1 = new Document(PageSize.A4, 5, 5, 5, 5);
            //pdf_filename = ConnectionWithAccess.remove_filename_error(pdf_filename);
            ConnectionWithAccess.create_file_folder(pdf_filename);
            FileStream FS1 = File.Create(pdf_filename);
            writer = PdfWriter.GetInstance(doc1, FS1);
            doc1.Open();
            current_pdf_page_number = 1;
            add_header_footer = true;
            header_text_message = report_filetype + " " + " From : " + RepFrom.Text + " to " + RepTo.Text;
            //pdf_top_heading = "Date            Doc.          Name                                                                                Debit                      Credit                  Balance";
            Paragraph para = new Paragraph();
            basicamount = 0; taxamount = 0; grossamount = 0;
            pdf_top_heading = "";
            print_pdf_line(cour_9, " ", 150, 0);
            PdfPTable itemTable = new PdfPTable(6);
            itemTable.HorizontalAlignment = 0;
            itemTable.WidthPercentage = 100;
            itemTable.SetWidths(new float[] { 10, 10, 30, 15, 20, 15 });  // then set the column's __relative__ widths
            itemTable.SpacingAfter = 200;
            itemTable.SpacingBefore = 40;
            itemTable.HeaderRows = 1;
            itemTable.DefaultCell.Border = iTextSharp.text.Rectangle.NO_BORDER;
            PdfPCell cell1 = new PdfPCell(new Phrase("Date", cour_9));
            cell1.HorizontalAlignment = 1;
            cell1.Border = iTextSharp.text.Rectangle.BOTTOM_BORDER | iTextSharp.text.Rectangle.TOP_BORDER;
            itemTable.AddCell(cell1);
            PdfPCell cell2 = new PdfPCell(new Phrase("Invoice", cour_9));
            cell2.HorizontalAlignment = 1;
            cell2.Border = iTextSharp.text.Rectangle.BOTTOM_BORDER | iTextSharp.text.Rectangle.TOP_BORDER;
            itemTable.AddCell(cell2);
            PdfPCell cell3 = new PdfPCell(new Phrase("Name", cour_9));
            cell3.HorizontalAlignment = 1;
            cell3.Border = iTextSharp.text.Rectangle.BOTTOM_BORDER | iTextSharp.text.Rectangle.TOP_BORDER;
            itemTable.AddCell(cell3);
            PdfPCell cell4 = new PdfPCell(new Phrase("City", cour_9));
            cell4.HorizontalAlignment = 1;
            cell4.Border = iTextSharp.text.Rectangle.BOTTOM_BORDER | iTextSharp.text.Rectangle.TOP_BORDER;
            itemTable.AddCell(cell4);
            PdfPCell cell5 = new PdfPCell(new Phrase("G.S.T. Number", cour_9));
            cell5.HorizontalAlignment = 1;
            cell5.Border = iTextSharp.text.Rectangle.BOTTOM_BORDER | iTextSharp.text.Rectangle.TOP_BORDER;
            itemTable.AddCell(cell5);
            PdfPCell cell6 = new PdfPCell(new Phrase("Amount", cour_9));
            cell6.HorizontalAlignment = 1;
            cell6.Border = iTextSharp.text.Rectangle.BOTTOM_BORDER | iTextSharp.text.Rectangle.TOP_BORDER;
            itemTable.AddCell(cell6);

            for (row_pointer = 0; row_pointer < gdvreport.RowCount - 1; row_pointer++)
            {
                if (gdvreport.Rows[row_pointer].Cells[1].Value != null && gdvreport.Rows[row_pointer].Cells[1].Value.ToString() != "")
                {
                    temp_word = gdvreport.Rows[row_pointer].Cells[0].Value.ToString();
                    if (temp_word.Contains(" "))
                        temp_word = temp_word.Substring(0, temp_word.IndexOf(" "));

                    PdfPCell dateCell = new PdfPCell(new Phrase(temp_word, cour_9));
                    dateCell.HorizontalAlignment = 0;
                    dateCell.PaddingLeft = 10f;
                    dateCell.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    itemTable.AddCell(dateCell);

                    PdfPCell invoiceCell = new PdfPCell(new Phrase(gdvreport.Rows[row_pointer].Cells[1].Value.ToString(), cour_9));
                    invoiceCell.HorizontalAlignment = 2;
                    invoiceCell.PaddingLeft = 10f;
                    invoiceCell.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    itemTable.AddCell(invoiceCell);

                    PdfPCell nameCell = new PdfPCell(new Phrase(gdvreport.Rows[row_pointer].Cells[2].Value.ToString(), cour_9));
                    nameCell.HorizontalAlignment = 0;
                    nameCell.PaddingLeft = 10f;
                    nameCell.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    itemTable.AddCell(nameCell);

                    PdfPCell cityCell = new PdfPCell(new Phrase(gdvreport.Rows[row_pointer].Cells[3].Value.ToString(), cour_9));
                    cityCell.HorizontalAlignment = 0;
                    cityCell.PaddingLeft = 10f;
                    cityCell.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    itemTable.AddCell(cityCell);

                    PdfPCell GSTCell = new PdfPCell(new Phrase(gdvreport.Rows[row_pointer].Cells[4].Value.ToString(), cour_9));
                    GSTCell.HorizontalAlignment = 0;
                    GSTCell.PaddingLeft = 10f;
                    GSTCell.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    itemTable.AddCell(GSTCell);

                    PdfPCell amountCell = new PdfPCell(new Phrase(gdvreport.Rows[row_pointer].Cells[5].Value.ToString(), cour_9));
                    amountCell.HorizontalAlignment = 2;
                    amountCell.PaddingLeft = 10f;
                    amountCell.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    itemTable.AddCell(amountCell);

                    grossamount = grossamount + Convert.ToDouble(gdvreport.Rows[row_pointer].Cells[5].Value.ToString());
                    lineno++;
                }
            }
            grossamount = Math.Round(grossamount, 2);

            AddGrossAmountCell(itemTable, grossamount);
            doc1.Add(itemTable);

            doc1.Close();
        }

        private void sale_purchase_report_list_mini()
        {
            int iRowsperPage = 54;
            lineno = 1;
            report_filetype = cbRepType.Text + " " + cbRepSubType.Text + " " + cbRepFormat.Text;
            pdf_filename = ConnectionWithAccess.report_file_location + (report_filetype).Replace(" ", "");
            if (chb_add_datetime_in_output.Checked)
                pdf_filename += "_" + DateTime.Now.Day + "_" + DateTime.Now.Month + "_" + DateTime.Now.Year + "_" + DateTime.Now.TimeOfDay.Hours + "_" + DateTime.Now.TimeOfDay.Minutes;
            pdf_filename += ".pdf";
            doc1 = new Document(PageSize.A4, 50, 5, 5, 5);
            //pdf_filename = ConnectionWithAccess.remove_filename_error(pdf_filename);
            ConnectionWithAccess.create_file_folder(pdf_filename);
            FileStream FS1 = File.Create(pdf_filename);
            writer = PdfWriter.GetInstance(doc1, FS1);
            doc1.Open();
            current_pdf_page_number = 1;
            add_header_footer = true;
            header_text_message = report_filetype + " " + " From : " + RepFrom.Text + " to " + RepTo.Text;
            //pdf_top_heading = "Date            Doc.          Name                                                                                Debit                      Credit                  Balance";
            Paragraph para = new Paragraph();
            basicamount = 0; taxamount = 0; grossamount = 0;
            pdf_top_heading = "";
            print_pdf_line(cour_9, " ", 150, 0);
            PdfPTable itemTable = new PdfPTable(6);
            itemTable.HorizontalAlignment = 0;
            itemTable.WidthPercentage = 100;
            itemTable.SetWidths(new float[] { 7, 6, 28, 12, 12, 7 });  // then set the column's __relative__ widths
            itemTable.SpacingAfter = 200;
            itemTable.SpacingBefore = 40;
            itemTable.HeaderRows = 1;
            itemTable.DefaultCell.Border = iTextSharp.text.Rectangle.NO_BORDER;
            PdfPCell cell1 = new PdfPCell(new Phrase("Date", cour_9));
            cell1.HorizontalAlignment = 1;
            cell1.Border = iTextSharp.text.Rectangle.BOTTOM_BORDER | iTextSharp.text.Rectangle.TOP_BORDER | iTextSharp.text.Rectangle.LEFT_BORDER | iTextSharp.text.Rectangle.RIGHT_BORDER;
            itemTable.AddCell(cell1);
            PdfPCell cell2 = new PdfPCell(new Phrase("Invoice", cour_9));
            cell2.HorizontalAlignment = 1;
            cell2.Border = iTextSharp.text.Rectangle.BOTTOM_BORDER | iTextSharp.text.Rectangle.TOP_BORDER | iTextSharp.text.Rectangle.LEFT_BORDER | iTextSharp.text.Rectangle.RIGHT_BORDER;
            itemTable.AddCell(cell2);
            PdfPCell cell3 = new PdfPCell(new Phrase("Name", cour_9));
            cell3.HorizontalAlignment = 1;
            cell3.Border = iTextSharp.text.Rectangle.BOTTOM_BORDER | iTextSharp.text.Rectangle.TOP_BORDER | iTextSharp.text.Rectangle.LEFT_BORDER | iTextSharp.text.Rectangle.RIGHT_BORDER;
            itemTable.AddCell(cell3);
            PdfPCell cell4 = new PdfPCell(new Phrase("City", cour_9));
            cell4.HorizontalAlignment = 1;
            cell4.Border = iTextSharp.text.Rectangle.BOTTOM_BORDER | iTextSharp.text.Rectangle.TOP_BORDER | iTextSharp.text.Rectangle.LEFT_BORDER | iTextSharp.text.Rectangle.RIGHT_BORDER;
            itemTable.AddCell(cell4);
            PdfPCell cell5 = new PdfPCell(new Phrase("G.S.T. Number", cour_9));
            cell5.HorizontalAlignment = 1;
            cell5.Border = iTextSharp.text.Rectangle.BOTTOM_BORDER | iTextSharp.text.Rectangle.TOP_BORDER | iTextSharp.text.Rectangle.LEFT_BORDER | iTextSharp.text.Rectangle.RIGHT_BORDER;
            itemTable.AddCell(cell5);
            PdfPCell cell6 = new PdfPCell(new Phrase("Amount", cour_9));
            cell6.HorizontalAlignment = 1;
            //cell6.Border = iTextSharp.text.Rectangle.BOTTOM_BORDER | iTextSharp.text.Rectangle.TOP_BORDER;
            itemTable.AddCell(cell6);
            int iPageNo = 1;
            for (row_pointer = 0; row_pointer < gdvreport.RowCount - 2; row_pointer++)
            {
                if (gdvreport.Rows[row_pointer].Cells[1].Value != null && gdvreport.Rows[row_pointer].Cells[1].Value.ToString() != "")
                {
                    temp_word = gdvreport.Rows[row_pointer].Cells[0].Value.ToString();
                    //if (temp_word.Contains(" "))
                    //    temp_word = temp_word.Substring(0, temp_word.IndexOf(" "));
                    temp_word = change_date_to_tally_format(temp_word);

                    PdfPCell dateCell = new PdfPCell(new Phrase(temp_word, cour_9));
                    dateCell.HorizontalAlignment = 0;
                    //dateCell.PaddingLeft = 10f;
                    if (((lineno + 1) / iPageNo) == iRowsperPage)
                        dateCell.Border = iTextSharp.text.Rectangle.RECTANGLE;
                    else
                        dateCell.Border = iTextSharp.text.Rectangle.LEFT_BORDER | iTextSharp.text.Rectangle.RIGHT_BORDER;
                    itemTable.AddCell(dateCell);

                    PdfPCell invoiceCell = new PdfPCell(new Phrase(gdvreport.Rows[row_pointer].Cells[1].Value.ToString(), cour_9));
                    invoiceCell.HorizontalAlignment = 0;
                    //invoiceCell.PaddingLeft = 10f;
                    if (((lineno + 1) / iPageNo) == iRowsperPage)
                        invoiceCell.Border = iTextSharp.text.Rectangle.RECTANGLE;
                    else
                        invoiceCell.Border = iTextSharp.text.Rectangle.LEFT_BORDER | iTextSharp.text.Rectangle.RIGHT_BORDER; ;
                    itemTable.AddCell(invoiceCell);

                    string strName = gdvreport.Rows[row_pointer].Cells[2].Value.ToString();
                    PdfPCell nameCell;
                    if (strName.Length > 30 && strName.Length <= 50)
                        nameCell = new PdfPCell(new Phrase(strName, cour_8));
                    else if (strName.Length > 50)
                        nameCell = new PdfPCell(new Phrase(strName, cour_7));
                    else
                        nameCell = new PdfPCell(new Phrase(strName, cour_9));

                    nameCell.HorizontalAlignment = 0;
                    nameCell.NoWrap = true;
                    //nameCell.PaddingLeft = 10f;
                    if (((lineno + 1) / iPageNo) == iRowsperPage)
                        nameCell.Border = iTextSharp.text.Rectangle.RECTANGLE;
                    else
                        nameCell.Border = iTextSharp.text.Rectangle.LEFT_BORDER | iTextSharp.text.Rectangle.RIGHT_BORDER; ;
                    itemTable.AddCell(nameCell);

                    string strCity = gdvreport.Rows[row_pointer].Cells[3].Value.ToString();
                    PdfPCell cityCell;
                    if (strCity.Length > 10 && strCity.Length <= 16)
                        cityCell = new PdfPCell(new Phrase(strCity, cour_8));
                    else if (strCity.Length > 16)
                        cityCell = new PdfPCell(new Phrase(strCity, cour_7));
                    else
                        cityCell = new PdfPCell(new Phrase(strCity, cour_9));
                    cityCell.HorizontalAlignment = 0;
                    //cityCell.PaddingLeft = 10f;
                    if (((lineno + 1) / iPageNo) == iRowsperPage)
                        cityCell.Border = iTextSharp.text.Rectangle.RECTANGLE;
                    else
                        cityCell.Border = iTextSharp.text.Rectangle.LEFT_BORDER | iTextSharp.text.Rectangle.RIGHT_BORDER;
                    itemTable.AddCell(cityCell);

                    PdfPCell GSTCell = new PdfPCell(new Phrase(gdvreport.Rows[row_pointer].Cells[4].Value.ToString(), cour_9));
                    GSTCell.HorizontalAlignment = 0;
                    //GSTCell.PaddingLeft = 10f;
                    if (((lineno + 1) / iPageNo) == iRowsperPage)
                        GSTCell.Border = iTextSharp.text.Rectangle.RECTANGLE;
                    else
                        GSTCell.Border = iTextSharp.text.Rectangle.LEFT_BORDER | iTextSharp.text.Rectangle.RIGHT_BORDER;
                    itemTable.AddCell(GSTCell);

                    PdfPCell amountCell = new PdfPCell(new Phrase(gdvreport.Rows[row_pointer].Cells[5].Value.ToString(), cour_9));
                    amountCell.HorizontalAlignment = 2;
                    //amountCell.PaddingLeft = 10f;
                    if (((lineno + 1) / iPageNo) == iRowsperPage)
                        amountCell.Border = iTextSharp.text.Rectangle.RECTANGLE;
                    else
                        amountCell.Border = iTextSharp.text.Rectangle.LEFT_BORDER | iTextSharp.text.Rectangle.RIGHT_BORDER;
                    itemTable.AddCell(amountCell);

                    grossamount = grossamount + Convert.ToDouble(gdvreport.Rows[row_pointer].Cells[5].Value.ToString());
                    lineno++;
                    if (lineno % iRowsperPage == 0)
                    {
                        doc1.Add(itemTable);
                        itemTable.DeleteBodyRows();
                        doc1.NewPage();
                        add_header_footer = true;
                        print_pdf_line(cour_9, " ", 150, 0);
                        current_pdf_page_number++;
                        iPageNo++;
                    }
                }
            }
            grossamount = Math.Round(grossamount, 2);

            AddGrossAmountCell(itemTable, grossamount);
            doc1.Add(itemTable);

            doc1.Close();
        }

        private void AddGrossAmountCell(PdfPTable itemTable, double amount)
        {
            PdfPCell dateCell = new PdfPCell(new Phrase("", cour_9));
            dateCell.HorizontalAlignment = 0;
            dateCell.PaddingLeft = 10f;
            dateCell.Border = iTextSharp.text.Rectangle.BOTTOM_BORDER | iTextSharp.text.Rectangle.TOP_BORDER | iTextSharp.text.Rectangle.LEFT_BORDER | iTextSharp.text.Rectangle.RIGHT_BORDER;
            itemTable.AddCell(dateCell);

            PdfPCell invoiceCell = new PdfPCell(new Phrase("", cour_9));
            invoiceCell.HorizontalAlignment = 2;
            invoiceCell.PaddingLeft = 10f;
            invoiceCell.Border = iTextSharp.text.Rectangle.BOTTOM_BORDER | iTextSharp.text.Rectangle.TOP_BORDER | iTextSharp.text.Rectangle.LEFT_BORDER | iTextSharp.text.Rectangle.RIGHT_BORDER;
            itemTable.AddCell(invoiceCell);

            PdfPCell nameCell = new PdfPCell(new Phrase("", cour_9));
            nameCell.HorizontalAlignment = 0;
            nameCell.PaddingLeft = 10f;
            nameCell.Border = iTextSharp.text.Rectangle.BOTTOM_BORDER | iTextSharp.text.Rectangle.TOP_BORDER | iTextSharp.text.Rectangle.LEFT_BORDER | iTextSharp.text.Rectangle.RIGHT_BORDER;
            itemTable.AddCell(nameCell);

            PdfPCell cityCell = new PdfPCell(new Phrase("", cour_9));
            cityCell.HorizontalAlignment = 0;
            cityCell.PaddingLeft = 10f;
            cityCell.Border = iTextSharp.text.Rectangle.BOTTOM_BORDER | iTextSharp.text.Rectangle.TOP_BORDER | iTextSharp.text.Rectangle.LEFT_BORDER | iTextSharp.text.Rectangle.RIGHT_BORDER;
            itemTable.AddCell(cityCell);

            PdfPCell GSTCell = new PdfPCell(new Phrase("", cour_9));
            GSTCell.HorizontalAlignment = 0;
            GSTCell.PaddingLeft = 10f;
            GSTCell.Border = iTextSharp.text.Rectangle.BOTTOM_BORDER | iTextSharp.text.Rectangle.TOP_BORDER | iTextSharp.text.Rectangle.LEFT_BORDER | iTextSharp.text.Rectangle.RIGHT_BORDER;
            itemTable.AddCell(GSTCell);

            PdfPCell amountCell = new PdfPCell(new Phrase(amount.ToString(), cour_9));
            amountCell.HorizontalAlignment = 2;
            amountCell.PaddingLeft = 10f;
            amountCell.Border = iTextSharp.text.Rectangle.BOTTOM_BORDER | iTextSharp.text.Rectangle.TOP_BORDER | iTextSharp.text.Rectangle.LEFT_BORDER | iTextSharp.text.Rectangle.RIGHT_BORDER;
            itemTable.AddCell(amountCell);

        }

        private void sale_purchase_report_list_mini_old(string book)
        {
            report_filetype = cbRepType.Text + " " + cbRepSubType.Text + " " + cbRepFormat.Text;
            pdf_filename = ConnectionWithAccess.report_file_location + (report_filetype).Replace(" ", "");
            if (chb_add_datetime_in_output.Checked)
                pdf_filename += "_" + DateTime.Now.Day + "_" + DateTime.Now.Month + "_" + DateTime.Now.Year + "_" + DateTime.Now.TimeOfDay.Hours + "_" + DateTime.Now.TimeOfDay.Minutes;
            pdf_filename += ".pdf";
            ConnectionWithAccess.create_file_folder(pdf_filename);
            //pdf_filename = ConnectionWithAccess.remove_filename_error(pdf_filename);
            FileStream FS1 = File.Create(pdf_filename);
            doc1 = new Document(PageSize.A4, 5, 5, 5, 5);
            writer = PdfWriter.GetInstance(doc1, FS1);
            doc1.Open();
            current_pdf_page_number = 1;
            add_header_footer = true;
            //current_print_line_position = 0;
            header_text_message = report_filetype + " " + " From : " + RepFrom.Text + " to " + RepTo.Text;
            pdf_top_heading = "Date           Invoice      Name                                                                      City                           G.S.T. Number          Amount";
            Paragraph para = new Paragraph();
            basicamount = 0; taxamount = 0; grossamount = 0;
            int lineno = 0;
            //print_pdf_line(cour_9, "hello", 10, 15);
            for (row_pointer = 0; row_pointer < gdvreport.RowCount - 1; row_pointer++)
            {
                if (gdvreport.Rows[row_pointer].Cells["d_n"].Value != null && gdvreport.Rows[row_pointer].Cells["d_n"].Value.ToString() != "" && gdvreport.Rows[row_pointer].Cells["gst_number"].Value.ToString() != "Total")
                {
                    temp_word = gdvreport.Rows[row_pointer].Cells["d_d"].Value.ToString();
                    if (temp_word.Contains(" "))
                        temp_word = temp_word.Substring(0, temp_word.IndexOf(" "));
                    print_pdf_line(cour_9, temp_word, 38, -7);
                    temp_word = gdvreport.Rows[row_pointer].Cells["d_n"].Value.ToString();
                    print_pdf_line(cour_9, temp_word, para_IndentationLeft_position(44, temp_word, "cour_9"), -15);
                    print_pdf_line(cour_9, gdvreport.Rows[row_pointer].Cells["desc"].Value.ToString(), 130, -15);
                    print_pdf_line(cour_9, gdvreport.Rows[row_pointer].Cells["city"].Value.ToString(), 330, -15);
                    print_pdf_line(cour_9, gdvreport.Rows[row_pointer].Cells["gst_number"].Value.ToString(), 410, -15);
                    temp_word = gdvreport.Rows[row_pointer].Cells["gamt"].Value.ToString();
                    print_pdf_line(cour_9, temp_word, para_IndentationLeft_position(450, temp_word, "cour_9"), -15);
                    grossamount = grossamount + Convert.ToDouble(gdvreport.Rows[row_pointer].Cells["gamt"].Value.ToString());
                    lineno++;
                    brief_sale_purchase_item_list(book, ConnectionWithAccess.mprd, Convert.ToInt32(gdvreport.Rows[row_pointer].Cells["d_c"].Value.ToString()), gdvreport.Rows[row_pointer].Cells["a_n"].Value.ToString(), gdvreport.Rows[row_pointer].Cells["s_a"].Value.ToString(), gdvreport.Rows[row_pointer].Cells["d_n"].Value.ToString());
                }
            }
            grossamount = Math.Round(grossamount, 2);
            print_pdf_line(cour_9, "----------------", 490, -7);
            temp_word = String.Format("{0:0.00}", grossamount.ToString());
            //double.TryParse(grossamount.ToString(), out temp_double);
            print_pdf_line(cour_9, temp_word, para_IndentationLeft_position(450, temp_word, "cour_9"), -10);
            print_pdf_line(cour_9, "==========", 484, -7);
            doc1.Close();
        }

        private void add_shaded_line(int start_point, int length)
        {
            if (shade_pdf_line == true)
            {
                temp_word = string.Concat(Enumerable.Repeat("A", length));
                para = new Paragraph();
                para.Add(temp_word);
                para.IndentationLeft = start_point;
                para.SpacingBefore = 0;
                doc1.Add(para);
                shade_pdf_line = false;
            }
            else
                shade_pdf_line = true;
        }

        private void generate_bank_report()
        {
            if (cbRepSubType.Text != "All")
                report_filetype = cbRepType.Text + " " + cbRepSubType.Text + " " + cbRepFormat.Text;
            else
                report_filetype = cbRepType.Text + " List ";
            pdf_filename = ConnectionWithAccess.report_file_location + (report_filetype).Replace(" ", "");
            if (chb_add_datetime_in_output.Checked)
                pdf_filename += "_" + DateTime.Now.Day + "_" + DateTime.Now.Month + "_" + DateTime.Now.Year + "_" + DateTime.Now.TimeOfDay.Hours + "_" + DateTime.Now.TimeOfDay.Minutes;
            pdf_filename += ".pdf";
            doc1 = new Document(PageSize.A4, 5, 5, 5, 5);
            //pdf_filename = ConnectionWithAccess.remove_filename_error(pdf_filename);
            ConnectionWithAccess.create_file_folder(pdf_filename);
            FileStream FS1 = File.Create(pdf_filename);
            writer = PdfWriter.GetInstance(doc1, FS1);
            doc1.Open();
            current_pdf_page_number = 1;
            add_header_footer = true;
            header_text_message = report_filetype + " " + " From : " + RepFrom.Text + " to " + RepTo.Text;
            pdf_top_heading = "Date            Doc.          Name                                                                                Debit                      Credit                  Balance";
            Paragraph para = new Paragraph();
            debitamount = 0;
            creditamount = 0;
            for (row_pointer = 0; row_pointer < gdvreport.RowCount - 2; row_pointer++)
            {
                if (gdvreport.Rows[row_pointer].Cells[0].Value != System.DBNull.Value && gdvreport.Rows[row_pointer].Cells[0].Value != null)
                {
                    //start_new_line_in_pdf = true;
                    temp_word = gdvreport.Rows[row_pointer].Cells[0].Value.ToString();
                    if (temp_word.Contains(" "))
                        temp_word = temp_word.Substring(0, temp_word.IndexOf(" "));
                    if (temp_word == "19/07/2017")
                        temp_word1 = "sanjay";
                    print_pdf_line(cour_9, temp_word, 38, -7);
                }
                if (gdvreport.Rows[row_pointer].Cells[1].Value != System.DBNull.Value && gdvreport.Rows[row_pointer].Cells[1].Value != null)
                {
                    temp_word = gdvreport.Rows[row_pointer].Cells[1].Value.ToString();
                    print_pdf_line(cour_9, temp_word, para_IndentationLeft_position(44, temp_word, "cour_9"), -16);
                }
                if (gdvreport.Rows[row_pointer].Cells[2].Value != System.DBNull.Value && gdvreport.Rows[row_pointer].Cells[2].Value != null)
                    print_pdf_line(cour_9, gdvreport.Rows[row_pointer].Cells[2].Value.ToString(), 130, -16);

                if (gdvreport.Rows[row_pointer].Cells[4].Value != System.DBNull.Value && gdvreport.Rows[row_pointer].Cells[4].Value.ToString() != "")
                {
                    if (Convert.ToDouble(gdvreport.Rows[row_pointer].Cells[4].Value) != 0.00)
                    {
                        temp_word = add_comma_to_number(gdvreport.Rows[row_pointer].Cells[4].Value.ToString());
                        print_pdf_line(cour_9_bold, temp_word, para_IndentationLeft_position(320, temp_word, "cour_9_bold"), -16);
                        debitamount += Convert.ToDouble(gdvreport.Rows[row_pointer].Cells[4].Value.ToString());
                    }
                }
                if (gdvreport.Rows[row_pointer].Cells[5].Value != System.DBNull.Value && gdvreport.Rows[row_pointer].Cells[5].Value.ToString() != "")
                {
                    if (Convert.ToDouble(gdvreport.Rows[row_pointer].Cells[5].Value) != 0.00)
                    {
                        temp_word = add_comma_to_number(gdvreport.Rows[row_pointer].Cells[5].Value.ToString());
                        print_pdf_line(cour_9_bold, temp_word, para_IndentationLeft_position(400, temp_word, "cour_9_bold"), -15);
                        creditamount += Convert.ToDouble(gdvreport.Rows[row_pointer].Cells[5].Value.ToString());
                    }
                }
                if (gdvreport.Rows[row_pointer].Cells[6].Value != System.DBNull.Value && gdvreport.Rows[row_pointer].Cells[6].Value != null)
                {
                    temp_word = add_comma_to_number(gdvreport.Rows[row_pointer].Cells[6].Value.ToString());
                    print_pdf_line(cour_9_bold, temp_word, para_IndentationLeft_position(480, temp_word, "cour_9_bold"), -16);
                }

                //print_pdf_line(cour_9, gdvreport.Rows[row_pointer].Cells[3].Value.ToString(), 330, -15);
                //temp_word = gdvreport.Rows[row_pointer].Cells[4].Value.ToString();
                //print_pdf_line(cour_9, temp_word, para_IndentationLeft_position(390, temp_word, "cour_9"), -15);
                //temp_word = gdvreport.Rows[row_pointer].Cells[5].Value.ToString();
                //print_pdf_line(cour_9, temp_word, para_IndentationLeft_position(470, temp_word, "cour_9"), -15);
                //if (gdvreport.Rows[row_pointer].Cells[4].Value != System.DBNull.Value && gdvreport.Rows[row_pointer].Cells[4].Value != null && gdvreport.Rows[row_pointer].Cells[4].Value.ToString() != "")
                //    debitamount += Convert.ToDouble(gdvreport.Rows[row_pointer].Cells[4].Value.ToString());
                //if (gdvreport.Rows[row_pointer].Cells[5].Value != System.DBNull.Value && gdvreport.Rows[row_pointer].Cells[5].Value != null && gdvreport.Rows[row_pointer].Cells[5].Value.ToString() != "")
                //    creditamount += Convert.ToDouble(gdvreport.Rows[row_pointer].Cells[5].Value.ToString());
                lineno++;
            }
            print_pdf_line(cour_9, "----------------             ----------------             ----------------", 350, -7);
            temp_word = add_comma_to_number(debitamount.ToString());
            print_pdf_line(cour_9_bold, temp_word, para_IndentationLeft_position(320, temp_word, "cour_9_bold"), -7);
            temp_word = add_comma_to_number(creditamount.ToString());
            print_pdf_line(cour_9_bold, temp_word, para_IndentationLeft_position(400, temp_word, "cour_9_bold"), -15);
            print_pdf_line(cour_9, "==========          ==========          ==========", 350, -7);
            doc1.Close();
        }

        private void generate_cash_report()
        {
            if (cbRepSubType.Text != "All")
                report_filetype = cbRepType.Text + " " + cbRepSubType.Text + " " + cbRepFormat.Text;
            else
                report_filetype = cbRepType.Text + " List ";
            pdf_filename = ConnectionWithAccess.report_file_location + (report_filetype).Replace(" ", "");
            if (chb_add_datetime_in_output.Checked)
                pdf_filename += "_" + DateTime.Now.Day + "_" + DateTime.Now.Month + "_" + DateTime.Now.Year + "_" + DateTime.Now.TimeOfDay.Hours + "_" + DateTime.Now.TimeOfDay.Minutes;
            pdf_filename += ".pdf";
            //pdf_filename = ConnectionWithAccess.remove_filename_error(pdf_filename);
            ConnectionWithAccess.create_file_folder(pdf_filename);
            doc1 = new Document(PageSize.A4, 5, 5, 5, 5);
            FileStream FS1 = File.Create(pdf_filename);
            writer = PdfWriter.GetInstance(doc1, FS1);
            doc1.Open();
            int iRowNumber = 1;
            current_pdf_page_number = 1;
            pdf_top_heading = "";
            add_header_footer = true;
            header_text_message = report_filetype + " " + " From : " + RepFrom.Text + " to " + RepTo.Text;
            //pdf_top_heading = "Date            Doc.          Name                                                                                Debit                      Credit                  Balance";
            Paragraph para = new Paragraph();
            int lineno = 0;
            debitamount = 0;
            creditamount = 0;
            //print_header();
            temp_word = " ";
            print_pdf_line(cour_7, temp_word, 0, 0);
            PdfPTable pdfTable = new PdfPTable(gdvreport.ColumnCount - 1);
            pdfTable.HorizontalAlignment = Element.ALIGN_LEFT;
            pdfTable.WidthPercentage = 100;
            string cell_value = string.Empty;
            float[] widths = new float[] { 100f, 60f, 400f, 150f, 150f, 150f };
            pdfTable.SetWidths(widths);

            foreach (DataGridViewColumn column in gdvreport.Columns)
            {
                if (column.Index != 3)
                    addCell(pdfTable, column.HeaderText.Trim(), 2);
            }
            foreach (DataGridViewRow row in gdvreport.Rows)
            {
                if (iRowNumber == 55)
                {
                    print_footer_with_page_number();
                    doc1.Add(pdfTable);

                    doc1.NewPage();
                    add_header_footer = true;
                    header_text_message = report_filetype + " " + " From : " + RepFrom.Text + " to " + RepTo.Text;
                    temp_word = " ";
                    print_pdf_line(cour_7, temp_word, 0, 0);

                    pdfTable = new PdfPTable(gdvreport.ColumnCount - 1);
                    pdfTable.HorizontalAlignment = Element.ALIGN_LEFT;
                    pdfTable.WidthPercentage = 100;
                    widths = new float[] { 100f, 60f, 400f, 150f, 150f, 150f };
                    pdfTable.SetWidths(widths);
                    foreach (DataGridViewColumn column in gdvreport.Columns)
                    {
                        if (column.Index != 3)
                            addCell(pdfTable, column.HeaderText.Trim(), 2);
                    }
                    iRowNumber = 0;
                }
                iRowNumber++;
                foreach (DataGridViewCell cell in row.Cells)
                {
                    if (cell.ColumnIndex != 3)
                    {
                        cell_value = string.Empty;
                        if (cell.Value != null)
                            cell_value = cell.Value.ToString();
                        if (cell.ColumnIndex == 0 && row.Cells[0].Value != System.DBNull.Value && row.Cells[0].Value != null)
                        {
                            cell_value = row.Cells[0].Value.ToString();
                            if (cell_value.Contains(" "))
                                cell_value = cell_value.Substring(0, cell_value.IndexOf(" "));
                        }
                        if ((cell.ColumnIndex == 4 || cell.ColumnIndex == 5 || cell.ColumnIndex == 6) && cell_value == "0")
                            cell_value = "";
                        PdfPCell pdf_cell = null;
                        if (cell.ColumnIndex == 4 || cell.ColumnIndex == 5 || cell.ColumnIndex == 6)
                            pdf_cell = new PdfPCell(new Phrase(cell_value, cour_9_bold));
                        else
                            pdf_cell = new PdfPCell(new Phrase(cell_value, cour_9));
                        if (cell.ColumnIndex == 1 || cell.ColumnIndex == 5 || cell.ColumnIndex == 6 || cell.ColumnIndex == 8)
                        {
                            pdf_cell.HorizontalAlignment = Element.ALIGN_RIGHT;
                        }

                        if (row.Index == gdvreport.Rows.Count - 2 && (cell.ColumnIndex == 4 || cell.ColumnIndex == 5))
                        {
                            pdf_cell.BorderWidth = 0;
                            pdf_cell.BorderWidthTop = 1;
                            pdf_cell.BorderWidthBottom = 1;
                        }
                        else
                            pdf_cell.Border = 0;

                        pdfTable.AddCell(pdf_cell);
                    }
                }
                if (row.Cells[4].Value != null && !string.IsNullOrEmpty(row.Cells[4].Value.ToString()) && Convert.ToDouble(row.Cells[4].Value) != 0.00)
                    debitamount += Convert.ToDouble(row.Cells[4].Value.ToString());
                if (row.Cells[5].Value != null && !string.IsNullOrEmpty(row.Cells[5].Value.ToString()) && Convert.ToDouble(row.Cells[5].Value) != 0.00)
                    creditamount += Convert.ToDouble(row.Cells[5].Value.ToString());
            }
            print_footer_with_page_number();
            doc1.Add(pdfTable);
            doc1.Close();
        }

        private void generate_cash_report_old()
        {
            if (cbRepSubType.Text != "All")
                report_filetype = cbRepType.Text + " " + cbRepSubType.Text + " " + cbRepFormat.Text;
            else
                report_filetype = cbRepType.Text + " List ";
            pdf_filename = ConnectionWithAccess.report_file_location + (report_filetype).Replace(" ", "");
            if (chb_add_datetime_in_output.Checked)
                pdf_filename += "_" + DateTime.Now.Day + "_" + DateTime.Now.Month + "_" + DateTime.Now.Year + "_" + DateTime.Now.TimeOfDay.Hours + "_" + DateTime.Now.TimeOfDay.Minutes;
            pdf_filename += ".pdf";
            //pdf_filename = ConnectionWithAccess.remove_filename_error(pdf_filename);
            ConnectionWithAccess.create_file_folder(pdf_filename);
            doc1 = new Document(PageSize.A4, 5, 5, 5, 5);
            FileStream FS1 = File.Create(pdf_filename);
            writer = PdfWriter.GetInstance(doc1, FS1);
            doc1.Open();
            current_pdf_page_number = 1;
            add_header_footer = true;
            header_text_message = report_filetype + " " + " From : " + RepFrom.Text + " to " + RepTo.Text;
            pdf_top_heading = "Date            Doc.          Name                                                                                Debit                      Credit                  Balance";
            Paragraph para = new Paragraph();
            int lineno = 0;
            debitamount = 0;
            creditamount = 0;
            for (row_pointer = 0; row_pointer < gdvreport.RowCount - 2; row_pointer++)
            {
                if (gdvreport.Rows[row_pointer].Cells[0].Value != System.DBNull.Value && gdvreport.Rows[row_pointer].Cells[0].Value != null)
                {
                    temp_word = gdvreport.Rows[row_pointer].Cells[0].Value.ToString();
                    if (temp_word.Contains(" "))
                        temp_word = temp_word.Substring(0, temp_word.IndexOf(" "));
                    print_pdf_line(cour_9, temp_word, 38, -9);
                }
                if (gdvreport.Rows[row_pointer].Cells[1].Value != System.DBNull.Value && gdvreport.Rows[row_pointer].Cells[1].Value != null)
                {
                    temp_word = gdvreport.Rows[row_pointer].Cells[1].Value.ToString();
                    print_pdf_line(cour_9, temp_word, para_IndentationLeft_position(44, temp_word, "cour_9"), -15);
                }
                if (gdvreport.Rows[row_pointer].Cells[2].Value != System.DBNull.Value && gdvreport.Rows[row_pointer].Cells[2].Value != null)
                    print_pdf_line(cour_9, gdvreport.Rows[row_pointer].Cells[2].Value.ToString(), 130, -15);

                if (gdvreport.Rows[row_pointer].Cells[4].Value != System.DBNull.Value && gdvreport.Rows[row_pointer].Cells[4].Value.ToString() != "")
                {
                    if (Convert.ToDouble(gdvreport.Rows[row_pointer].Cells[4].Value) != 0.00)
                    {
                        temp_word = add_comma_to_number(gdvreport.Rows[row_pointer].Cells[4].Value.ToString());
                        print_pdf_line(cour_9_bold, temp_word, para_IndentationLeft_position(320, temp_word, "cour_9_bold"), -15);
                        debitamount += Convert.ToDouble(gdvreport.Rows[row_pointer].Cells[4].Value.ToString());
                    }
                }
                if (gdvreport.Rows[row_pointer].Cells[5].Value != System.DBNull.Value && gdvreport.Rows[row_pointer].Cells[5].Value.ToString() != "")
                {
                    if (Convert.ToDouble(gdvreport.Rows[row_pointer].Cells[5].Value) != 0.00)
                    {
                        temp_word = add_comma_to_number(gdvreport.Rows[row_pointer].Cells[5].Value.ToString());
                        print_pdf_line(cour_9_bold, temp_word, para_IndentationLeft_position(400, temp_word, "cour_9_bold"), -15);
                        creditamount += Convert.ToDouble(gdvreport.Rows[row_pointer].Cells[5].Value.ToString());
                    }
                }
                if (gdvreport.Rows[row_pointer].Cells[6].Value != System.DBNull.Value && gdvreport.Rows[row_pointer].Cells[6].Value != null)
                {
                    temp_word = add_comma_to_number(gdvreport.Rows[row_pointer].Cells[6].Value.ToString());
                    print_pdf_line(cour_9_bold, temp_word, para_IndentationLeft_position(480, temp_word, "cour_9_bold"), -15);
                }

                //print_pdf_line(cour_9, gdvreport.Rows[row_pointer].Cells[3].Value.ToString(), 330, -15);
                //temp_word = gdvreport.Rows[row_pointer].Cells[4].Value.ToString();
                //print_pdf_line(cour_9, temp_word, para_IndentationLeft_position(390, temp_word, "cour_9"), -15);
                //temp_word = gdvreport.Rows[row_pointer].Cells[5].Value.ToString();
                //print_pdf_line(cour_9, temp_word, para_IndentationLeft_position(470, temp_word, "cour_9"), -15);
                //if (gdvreport.Rows[row_pointer].Cells[4].Value != System.DBNull.Value && gdvreport.Rows[row_pointer].Cells[4].Value != null && gdvreport.Rows[row_pointer].Cells[4].Value.ToString() != "")
                //    debitamount += Convert.ToDouble(gdvreport.Rows[row_pointer].Cells[4].Value.ToString());
                //if (gdvreport.Rows[row_pointer].Cells[5].Value != System.DBNull.Value && gdvreport.Rows[row_pointer].Cells[5].Value != null && gdvreport.Rows[row_pointer].Cells[5].Value.ToString() != "")
                //    creditamount += Convert.ToDouble(gdvreport.Rows[row_pointer].Cells[5].Value.ToString());
                lineno++;
            }
            print_pdf_line(cour_9, "----------------             ----------------", 420, -7);
            temp_word = add_comma_to_number(debitamount.ToString());
            print_pdf_line(cour_9_bold, temp_word, para_IndentationLeft_position(320, temp_word, "cour_9_bold"), -15);
            temp_word = add_comma_to_number(creditamount.ToString());
            print_pdf_line(cour_9_bold, temp_word, para_IndentationLeft_position(400, temp_word, "cour_9_bold"), -15);
            print_pdf_line(cour_9, "==========          ==========", 419, -7);
            doc1.Close();
        }

        private void generate_general_report()
        {
            if (gdvreport.ColumnCount > 0)
            {
                report_filetype = cbRepType.Text + "_" + cbRepSubType.Text + "_" + cbRepFormat.Text;
                pdf_filename = ConnectionWithAccess.report_file_location + (report_filetype).Replace(" ", "");
                if (chb_add_datetime_in_output.Checked)
                    pdf_filename += "_" + DateTime.Now.Day + "_" + DateTime.Now.Month + "_" + DateTime.Now.Year + "_" + DateTime.Now.TimeOfDay.Hours + "_" + DateTime.Now.TimeOfDay.Minutes;
                pdf_filename += ".pdf";
                //pdf_filename = ConnectionWithAccess.remove_filename_error(pdf_filename);
                ConnectionWithAccess.create_file_folder(pdf_filename);
                doc1 = new Document(PageSize.A4, 5, 5, 5, 5);
                FileStream FS1 = File.Create(pdf_filename);
                writer = PdfWriter.GetInstance(doc1, FS1);
                doc1.Open();
                current_pdf_page_number = 1;
                add_header_footer = true;
                header_text_message = report_filetype + " " + " From : " + RepFrom.Text + " to " + RepTo.Text;
                pdf_top_heading = "Date            Doc.          Name                                                             City                             Debit                Credit          Balance";
                Paragraph para = new Paragraph();
                int lineno = 0;
                for (row_pointer = 0; row_pointer < gdvreport.RowCount; row_pointer++)
                {
                    if (gdvreport.Rows[row_pointer].Cells[1].Value != null && gdvreport.Rows[row_pointer].Cells[1].Value.ToString() != "")
                    {
                        temp_word = gdvreport.Rows[row_pointer].Cells[3].Value.ToString();
                        print_pdf_line(cour_9, temp_word, para_IndentationLeft_position(9, temp_word, "cour_9"), -9);

                        temp_word = gdvreport.Rows[row_pointer].Cells[4].Value.ToString();
                        print_pdf_line(cour_9, temp_word, para_IndentationLeft_position(40, temp_word, "cour_9"), -15);
                        print_pdf_line(cour_9, gdvreport.Rows[row_pointer].Cells[5].Value.ToString(), 130, -15);
                        print_pdf_line(cour_9, gdvreport.Rows[row_pointer].Cells[6].Value.ToString(), 320, -15);

                        temp_word = gdvreport.Rows[row_pointer].Cells[7].Value.ToString().Trim();
                        if (temp_word != "" && temp_word != null)
                        {
                            print_pdf_line(cour_9, temp_word, para_IndentationLeft_position(365, temp_word, "cour_9"), -15);
                        }
                        temp_word = gdvreport.Rows[row_pointer].Cells[8].Value.ToString().Trim();
                        if (temp_word != "" && temp_word != null)
                        {
                            print_pdf_line(cour_9, temp_word, para_IndentationLeft_position(420, temp_word, "cour_9"), -15);
                        }
                        temp_word = gdvreport.Rows[row_pointer].Cells[9].Value.ToString().Trim();
                        if (temp_word != "" && temp_word != null)
                        {
                            print_pdf_line(cour_9, temp_word, para_IndentationLeft_position(480, temp_word, "cour_9"), -15);
                        }
                        lineno++;
                    }
                }
                temp_word = "-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------";
                print_pdf_line(cour_9, temp_word, 20, 0);
                doc1.Close();
            }
        }

        private void generate_Debitors_creditors_report()
        {
            if (gdvreport.ColumnCount > 0)
            {
                report_filetype = cbRepType.Text + "_" + cbRepSubType.Text + "_" + cbRepFormat.Text;
                pdf_filename = ConnectionWithAccess.report_file_location + (report_filetype).Replace(" ", "");
                if (chb_add_datetime_in_output.Checked)
                    pdf_filename += "_" + DateTime.Now.Day + "_" + DateTime.Now.Month + "_" + DateTime.Now.Year + "_" + DateTime.Now.TimeOfDay.Hours + "_" + DateTime.Now.TimeOfDay.Minutes;
                pdf_filename += ".pdf";
                //pdf_filename = ConnectionWithAccess.remove_filename_error(pdf_filename);
                ConnectionWithAccess.create_file_folder(pdf_filename);
                doc1 = new Document(PageSize.A4, 5, 5, 5, 5);
                FileStream FS1 = File.Create(pdf_filename);
                writer = PdfWriter.GetInstance(doc1, FS1);
                doc1.Open();
                current_pdf_page_number = 1;
                add_header_footer = true;
                header_text_message = report_filetype + " " + " From : " + RepFrom.Text + " to " + RepTo.Text;
                pdf_top_heading = "Sr No.           Name                                 City                             Balance";
                temp_double = 0;
                Paragraph para = new Paragraph();
                int lineno = 0;
                for (row_pointer = 0; row_pointer < gdvreport.RowCount; row_pointer++)
                {
                    if (gdvreport.Rows[row_pointer].Cells[3].Value != null && gdvreport.Rows[row_pointer].Cells[3].Value.ToString() != "")
                    {
                        print_pdf_line(cour_9, gdvreport.Rows[row_pointer].Cells[3].Value.ToString(), 80, -9);
                        print_pdf_line(cour_9, gdvreport.Rows[row_pointer].Cells[4].Value.ToString(), 280, -15);
                        if (gdvreport.Rows[row_pointer].Cells[5].Value != null && gdvreport.Rows[row_pointer].Cells[5].Value.ToString() != "")
                        {
                            temp_word = gdvreport.Rows[row_pointer].Cells[5].Value.ToString();
                            print_pdf_line(cour_9, temp_word, para_IndentationLeft_position(409, temp_word, "cour_9"), -15);
                            temp_double = temp_double + Convert.ToDouble(temp_word);
                        }
                        lineno++;
                    }
                }
                print_pdf_line(cour_9, "----------------", 439, -5);
                print_pdf_line(cour_9, temp_double.ToString(), para_IndentationLeft_position(409, temp_double.ToString(), "cour_9"), -7);
                print_pdf_line(cour_9, "=========", 439, -7);
                temp_word = "-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------";
                print_pdf_line(cour_9, temp_word, 20, 0);
                doc1.Close();
            }
        }

        private void add_pdf_top_heading(string pdf_top_heading)
        {
            temp_word = "-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------";
            print_pdf_line(cour_9, temp_word, 32, 0);
            print_pdf_line(cour_9, pdf_top_heading, 48, -5);
            temp_word = "-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------";
            print_pdf_line(cour_9, temp_word, 32, -8);
        }

        private void generate_ledger_report()
        {
            if (LedDGV.ColumnCount > 0)
            {
                get_account_details_from_01(rla_n.Text, rls_a.Text);
                get_account_details_from_04(rla_n.Text, rls_a.Text);
                report_filetype = lbl_ledger_master_account_name.Text.Trim();
                //ledger_filename = ConnectionWithAccess.report_file_location + "Ledger of_" + ConnectionWithAccess.remove_filename_error(tb_ledger_account_name.Text.Trim()) + "_" + rla_n.Text + "_" + rls_a.Text + "_as on_" + ConnectionWithAccess.mprd;
                ledger_filename = ConnectionWithAccess.report_file_location + "Ledger_" + ConnectionWithAccess.remove_filename_error(tb_ledger_account_name.Text.Trim()) + "_" + rla_n.Text + "_" + rls_a.Text + "_" + ConnectionWithAccess.mprd;
                if (chb_add_datetime_in_output.Checked)
                    ledger_filename += "_" + DateTime.Now.Day + "_" + DateTime.Now.Month + "_" + DateTime.Now.Year + "_" + DateTime.Now.TimeOfDay.Hours + "_" + DateTime.Now.TimeOfDay.Minutes;
                ledger_filename += ".pdf";
                doc1 = new Document(PageSize.A4, 5, 5, 5, 5);
                // left margin,right margin, top margin, bottom margin
                ledger_filename = ConnectionWithAccess.remove_filename_error(ledger_filename);
                ConnectionWithAccess.create_file_folder(ledger_filename);
                FileStream FS1 = File.Create(ledger_filename);
                writer = PdfWriter.GetInstance(doc1, FS1);
                doc1.Open();
                current_pdf_page_number = 1;
                pdf_top_heading = null;
                require_header_footer = false;
                Paragraph para = new Paragraph();
                temp_word = ConnectionWithAccess.company_details[1];
                print_pdf_line_at_center(cour_9_bold, temp_word, 0, "cour_9_bold");
                temp_word = ConnectionWithAccess.company_details[2];
                temp_word += ConnectionWithAccess.company_details[3];
                print_pdf_line_at_center(cour_9, temp_word, 0, "cour_9");
                temp_word = ConnectionWithAccess.company_details[4];
                if (ConnectionWithAccess.company_details[6].Length > 2)
                    temp_word += "-" + ConnectionWithAccess.company_details[6];
                if (ConnectionWithAccess.company_details[5].Length > 2)
                    temp_word += " " + ConnectionWithAccess.company_details[5];
                print_pdf_line_at_center(cour_9, temp_word, 0, "cour_9");
                print_pdf_line_at_center(cour_9, "Ledger Account", 0, "cour_9");
                if (account_detail_from_01.Count > 4)
                    temp_word = account_detail_from_01[4];
                else
                    temp_word = "";
                print_pdf_line_at_center(cour_9_bold, temp_word, 0, "cour_9_bold");
                temp_word = "";

                if (account_detail_from_01.Count > 5)
                {
                    if (account_detail_from_04[5].Length > 2)
                        temp_word = account_detail_from_04[5];
                    if (account_detail_from_04[6].Length > 2)
                        temp_word += ", " + account_detail_from_04[6];
                    if (account_detail_from_04[7].Length > 2)
                        temp_word += ", " + account_detail_from_04[7];
                }
                print_pdf_line_at_center(cour_9, temp_word, 0, "cour_9");
                temp_word = Ledfrom.Value.Date.ToString("dd-MMM-yyyy") + " to " + LedTo.Value.Date.ToString("dd-MMM-yyyy");
                print_pdf_line_at_center(cour_9, temp_word, 0, "cour_9");

                pdf_top_heading = "Date       Particulars        Vch No.                                                                                Debit                 Credit                    Balance";
                add_pdf_top_heading(pdf_top_heading);
                int lineno = 0;
                debitamount = 0;
                creditamount = 0;
                for (row_pointer = 0; row_pointer < LedDGV.RowCount; row_pointer++)
                {
                    if (LedDGV.Rows[row_pointer].Cells[1].Value != null && LedDGV.Rows[row_pointer].Cells[1].Value.ToString() != "")
                    {
                        if (LedDGV.Rows[row_pointer].Cells[6].Value != System.DBNull.Value && LedDGV.Rows[row_pointer].Cells[7].Value != System.DBNull.Value && LedDGV.Rows[row_pointer].Cells[8].Value != System.DBNull.Value)
                        {
                            if ((LedDGV.Rows[row_pointer].Cells[6].Value != null && Convert.ToDouble(LedDGV.Rows[row_pointer].Cells[6].Value) != 0.00) || (LedDGV.Rows[row_pointer].Cells[7].Value != null && Convert.ToDouble(LedDGV.Rows[row_pointer].Cells[7].Value) != 0.00) || (LedDGV.Rows[row_pointer].Cells[8].Value != null && Convert.ToDouble(LedDGV.Rows[row_pointer].Cells[8].Value) != 0.00))
                            {
                                if (LedDGV.Rows[row_pointer].Cells[4].Value.ToString() != "")
                                {
                                    //if (LedDGV.Rows[row_pointer].Cells[4].Value.ToString() == "Open")
                                    if (LedDGV.Rows[row_pointer].Cells[4].Value.ToString() == "0")
                                    {
                                        temp_double = Convert.ToDouble(LedDGV.Rows[row_pointer].Cells[8].Value.ToString());
                                        //if (temp_double > 0)
                                        //    debitamount += Convert.ToDouble(LedDGV.Rows[row_pointer].Cells[8].Value.ToString());
                                        //else
                                        //    creditamount -= Convert.ToDouble(LedDGV.Rows[row_pointer].Cells[8].Value.ToString());
                                    }
                                }

                                temp_word = LedDGV.Rows[row_pointer].Cells[3].Value.ToString();
                                if (temp_word.Contains(" ")) // remove time from datetime
                                    temp_word = temp_word.Substring(0, temp_word.IndexOf(" "));
                                print_pdf_line(cour_9, temp_word, 30, -9);
                                if (LedDGV.Rows[row_pointer].Cells[6].Value != null && Convert.ToDouble(LedDGV.Rows[row_pointer].Cells[6].Value) != 0.00)
                                    print_pdf_line(cour_9, "To", 80, -15);
                                else
                                    print_pdf_line(cour_9, "By", 80, -15);
                                print_pdf_line(cour_9_bold, LedDGV.Rows[row_pointer].Cells[5].Value.ToString(), 100, -15);
                                temp_word = LedDGV.Rows[row_pointer].Cells[4].Value.ToString();
                                print_pdf_line(cour_9_bold, temp_word, para_IndentationLeft_position(87, temp_word, "cour_9_bold"), -15);
                                temp_word = LedDGV.Rows[row_pointer].Cells["bank_nara"].Value.ToString();
                                if (temp_word.Length > 45)
                                    temp_word = temp_word.Substring(0, 45);
                                if (LedDGV.Rows[row_pointer].Cells[5].Value.ToString() == "Jour")
                                {
                                    if (LedDGV.Rows[row_pointer].Cells[6].Value != null && Convert.ToDouble(LedDGV.Rows[row_pointer].Cells[6].Value) != 0.00)
                                    {
                                        temp_a_n = LedDGV.Rows[row_pointer].Cells["led_na_n"].Value.ToString();
                                        temp_s_a = LedDGV.Rows[row_pointer].Cells["led_ns_a"].Value.ToString();
                                        get_account_details_from_01(temp_a_n, temp_s_a);
                                        temp_word = account_detail_from_01[4];
                                    }
                                    else
                                    {
                                        temp_a_n = LedDGV.Rows[row_pointer].Cells["acc_name"].Value.ToString();
                                        temp_s_a = LedDGV.Rows[row_pointer].Cells["sub_acc_name"].Value.ToString();
                                        get_account_details_from_01(temp_a_n, temp_s_a);
                                        temp_word = account_detail_from_01[4];
                                    }
                                    print_pdf_line(cour_7, temp_word, 170, -17);
                                }
                                else
                                    print_pdf_line(cour_7, temp_word, 170, -17);
                                if (LedDGV.Rows[row_pointer].Cells[6].Value != null && Convert.ToDouble(LedDGV.Rows[row_pointer].Cells[6].Value) != 0.00)
                                {
                                    temp_word = add_comma_to_number(LedDGV.Rows[row_pointer].Cells[6].Value.ToString());
                                    print_pdf_line(cour_9_bold, temp_word, para_IndentationLeft_position(340, temp_word, "cour_9_bold"), -15);
                                    debitamount += Convert.ToDouble(LedDGV.Rows[row_pointer].Cells[6].Value.ToString());
                                }
                                if (LedDGV.Rows[row_pointer].Cells[7].Value != null && Convert.ToDouble(LedDGV.Rows[row_pointer].Cells[7].Value) != 0.00)
                                {
                                    temp_word = add_comma_to_number(LedDGV.Rows[row_pointer].Cells[7].Value.ToString());
                                    print_pdf_line(cour_9_bold, temp_word, para_IndentationLeft_position(405, temp_word, "cour_9_bold"), -15);
                                    creditamount += Convert.ToDouble(LedDGV.Rows[row_pointer].Cells[7].Value.ToString());
                                }
                                if (LedDGV.Rows[row_pointer].Cells[8].Value != null)
                                {
                                    temp_word = add_comma_to_number(LedDGV.Rows[row_pointer].Cells[8].Value.ToString());
                                    print_pdf_line(cour_9_bold, temp_word, para_IndentationLeft_position(485, temp_word, "cour_9_bold"), -15);
                                }

                                if (cb_add_purchase_items_in_ledger.Checked == true && LedDGV.Rows[row_pointer].Cells[5].Value.ToString() == "Purc")
                                {
                                    create_list_for_sale_purchase_items("P", LedDGV.Rows[row_pointer].Cells[10].Value.ToString(), Convert.ToInt32(LedDGV.Rows[row_pointer].Cells[9].Value.ToString()), rla_n.Text, rls_a.Text, LedDGV.Rows[row_pointer].Cells[4].Value.ToString());
                                    if (temporary_list_array.Count > 0)
                                    {
                                        mqty = 0;
                                        for (int i = 0; i < temporary_list_array.Count; i++)
                                        {
                                            var cellArray = temporary_list_array[i].Split(new[] { ',' });
                                            //temp_word = temporary_list_array[i];
                                            print_pdf_line(cour_7, cellArray[2], 120, -7);
                                            print_pdf_line(cour_7, cellArray[5], para_IndentationLeft_position(180, cellArray[5], "cour_7"), -16);
                                            print_pdf_line(cour_7, cellArray[8], 262, -16);
                                            print_pdf_line(cour_7, "@", 280, -16);
                                            print_pdf_line(cour_7, cellArray[6], para_IndentationLeft_position(250, cellArray[6], "cour_7"), -16);
                                            print_pdf_line(cour_7, "=", 330, -16);
                                            temp_word = add_comma_to_number(cellArray[7]);
                                            print_pdf_line(cour_7, temp_word, para_IndentationLeft_position(310, temp_word, "cour_7"), -16);
                                            mqty += Convert.ToDouble(cellArray[5]);
                                            //print_pdf_line(cour_9, temp_word, 20, 0);
                                        }
                                        ConnectionWithAccess.query = "select tpt, bamt, tamt, rund_amt, gamt, tx_code, d_d,freight_AMT,packing_AMT,insurance_AMT,other_AMT from " + ConnectionWithAccess.tablename[22] + " f22 where d_n = " + LedDGV.Rows[row_pointer].Cells[4].Value.ToString() + " and prd = '" + LedDGV.Rows[row_pointer].Cells[10].Value.ToString() + "' and d_c = " + Convert.ToInt32(LedDGV.Rows[row_pointer].Cells[9].Value.ToString()) + " and s_a = '" + rls_a.Text + "'";
                                        DataTable dtData1 = ConnectionCommand.fGetDataTable();
                                        if (dtData1 != null && dtData1.Rows.Count > 0)
                                        {
                                            if (dtData1.Rows[0][2].ToString() != "0.00")
                                            {
                                                print_pdf_line(cour_7, "VAT", 140, -7);
                                                print_pdf_line(cour_7, "=", 350, -16);
                                                temp_word = add_comma_to_number(dtData1.Rows[0][2].ToString());
                                                print_pdf_line(cour_7, temp_word, para_IndentationLeft_position(330, temp_word, "cour_7"), -16);
                                            }
                                            if (dtData1.Rows[0]["rund_amt"].ToString() != "0.00" && dtData1.Rows[0]["rund_amt"].ToString().Trim() != "")
                                            {
                                                print_pdf_line(cour_7, "Rounded Off ", 140, -7);
                                                print_pdf_line(cour_7, "=", 350, -16);
                                                temp_word = add_comma_to_number(dtData1.Rows[0]["rund_amt"].ToString());
                                                print_pdf_line(cour_7, temp_word, para_IndentationLeft_position(330, temp_word, "cour_7"), -16);
                                            }
                                        }
                                        if (mqty != 0)
                                        {
                                            print_pdf_line(cour_7, "******* Total Qty. = " + mqty.ToString() + " Pcs : Amt = ", 140, -7);
                                            temp_word = add_comma_to_number(dtData1.Rows[0][4].ToString());
                                            print_pdf_line(cour_7, temp_word, para_IndentationLeft_position(330, temp_word, "cour_7"), -16);
                                        }
                                    }
                                }
                                if (cb_add_sale_items_in_ledger.Checked == true && LedDGV.Rows[row_pointer].Cells[5].Value.ToString() == "Sale")
                                {
                                    create_list_for_sale_purchase_items("S", LedDGV.Rows[row_pointer].Cells[10].Value.ToString(), Convert.ToInt32(LedDGV.Rows[row_pointer].Cells[9].Value.ToString()), rla_n.Text, rls_a.Text, LedDGV.Rows[row_pointer].Cells[4].Value.ToString());
                                    if (temporary_list_array.Count > 0)
                                    {
                                        mqty = 0;
                                        for (int i = 0; i < temporary_list_array.Count; i++)
                                        {
                                            var cellArray = temporary_list_array[i].Split(new[] { ',' });
                                            //temp_word = temporary_list_array[i];
                                            print_pdf_line(cour_7, cellArray[2], 120, -7);
                                            print_pdf_line(cour_7, cellArray[5], para_IndentationLeft_position(180, cellArray[5], "cour_7"), -16);
                                            print_pdf_line(cour_7, cellArray[8], 262, -16);
                                            print_pdf_line(cour_7, "@", 280, -16);
                                            print_pdf_line(cour_7, cellArray[6], para_IndentationLeft_position(250, cellArray[6], "cour_7"), -16);
                                            print_pdf_line(cour_7, "=", 330, -16);
                                            temp_word = add_comma_to_number(cellArray[7]);
                                            print_pdf_line(cour_7, temp_word, para_IndentationLeft_position(310, temp_word, "cour_7"), -16);
                                            mqty += Convert.ToDouble(cellArray[5]);
                                            //print_pdf_line(cour_9, temp_word, 20, 0);
                                        }
                                        ConnectionWithAccess.query = "select tpt, bamt, tamt, rund_amt, gamt, tx_code, d_d,freight_AMT,packing_AMT,insurance_AMT,other_AMT from " + ConnectionWithAccess.tablename[21] + " 21 where d_n = " + LedDGV.Rows[row_pointer].Cells[4].Value.ToString() + " and prd = '" + LedDGV.Rows[row_pointer].Cells[10].Value.ToString() + "' and d_c = " + Convert.ToInt32(LedDGV.Rows[row_pointer].Cells[9].Value.ToString());
                                        DataTable dtData1 = ConnectionCommand.fGetDataTable();
                                        if (dtData1 != null && dtData1.Rows.Count > 0)
                                        {
                                            if (dtData1.Rows[0][2].ToString() != "0.00" && dtData1.Rows[0][2].ToString().Trim() != "")
                                            {
                                                print_pdf_line(cour_7, "VAT", 140, -7);
                                                print_pdf_line(cour_7, "=", 350, -16);
                                                temp_word = add_comma_to_number(dtData1.Rows[0][2].ToString());
                                                print_pdf_line(cour_7, temp_word, para_IndentationLeft_position(330, temp_word, "cour_7"), -16);
                                            }
                                            if (dtData1.Rows[0]["rund_amt"].ToString() != "0.00" && dtData1.Rows[0]["rund_amt"].ToString().Trim() != "")
                                            {
                                                print_pdf_line(cour_7, "Rounded Off ", 140, -7);
                                                print_pdf_line(cour_7, "=", 350, -16);
                                                temp_word = add_comma_to_number(dtData1.Rows[0]["rund_amt"].ToString());
                                                print_pdf_line(cour_7, temp_word, para_IndentationLeft_position(330, temp_word, "cour_7"), -16);
                                            }

                                            if (mqty != 0)
                                            {
                                                print_pdf_line(cour_7, "******* Total Qty. = " + mqty.ToString() + " Pcs : Amt = ", 140, -7);
                                                temp_word = add_comma_to_number(dtData1.Rows[0][4].ToString());
                                                print_pdf_line(cour_7, temp_word, para_IndentationLeft_position(330, temp_word, "cour_7"), -16);
                                            }
                                        }
                                    }
                                }

                                //(string book, string mprd, int md_c, string ma_n, string ms_a, string md_n)
                                lineno++;
                            }
                        }
                        if (lineno >= 54)
                        {
                            temp_word = "-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------";
                            print_pdf_line(cour_9, temp_word, 20, -12);
                            print_pdf_line(cour_9, " ", 50, 5);
                            temp_word = ConnectionWithAccess.company_details[1];
                            print_pdf_line_at_center(cour_9_bold, temp_word, 0, "cour_9_bold");
                            temp_word = ConnectionWithAccess.company_details[2];
                            if (ConnectionWithAccess.company_details[3].Length > 2)
                                temp_word += ConnectionWithAccess.company_details[3];
                            print_pdf_line_at_center(cour_9, temp_word, 0, "cour_9");
                            temp_word = ConnectionWithAccess.company_details[4];
                            if (ConnectionWithAccess.company_details[6].Length > 2)
                                temp_word += "-" + ConnectionWithAccess.company_details[6];
                            if (ConnectionWithAccess.company_details[5].Length > 2)
                                temp_word += " " + ConnectionWithAccess.company_details[5];
                            print_pdf_line_at_center(cour_9, temp_word, 0, "cour_9");
                            temp_word = account_detail_from_01[4];
                            print_pdf_line_at_center(cour_9_bold, temp_word, 0, "cour_9_bold");
                            print_pdf_line_at_center(cour_9, "Ledger Account", 0, "cour_9");
                            temp_word = account_detail_from_04[4];
                            if (account_detail_from_04[5].Length > 2)
                                temp_word += account_detail_from_04[5];
                            if (account_detail_from_04[6].Length > 2)
                                temp_word = account_detail_from_04[6];
                            if (account_detail_from_04[7].Length > 2)
                                temp_word += " " + account_detail_from_04[7];
                            print_pdf_line_at_center(cour_9, temp_word, 0, "cour_9");
                            temp_word = Ledfrom.Value.Date.ToString("dd-MMM-yyyy") + " to " + LedTo.Value.Date.ToString("dd-MMM-yyyy");
                            print_pdf_line_at_center(cour_9, temp_word, 0, "cour_9");

                            pdf_top_heading = "Date       Particulars        Vch No.                                                                                Debit                 Credit                    Balance";
                            add_pdf_top_heading(pdf_top_heading);
                            lineno = 0;
                            print_footer();
                        }
                    }
                }
                temp_word = "----------------------------------------------";
                print_pdf_line(cour_9, temp_word, 360, -10);
                temp_word = add_comma_to_number(debitamount.ToString());
                print_pdf_line(cour_9_bold, temp_word, para_IndentationLeft_position(340, temp_word, "cour_9_bold"), -8);
                temp_word = add_comma_to_number(creditamount.ToString());
                print_pdf_line(cour_9_bold, temp_word, para_IndentationLeft_position(405, temp_word, "cour_9_bold"), -16);
                if (debitamount < creditamount)
                {
                    print_pdf_line(cour_9, "By Closing Balance", 150, -6);
                    temp_word = add_comma_to_number(Math.Round((creditamount - debitamount), 2).ToString());
                    print_pdf_line(cour_9_bold, temp_word, para_IndentationLeft_position(340, temp_word, "cour_9_bold"), -16);
                    debitamount = creditamount;
                }
                else
                {
                    print_pdf_line(cour_9, "By Closing Balance", 150, -6);
                    temp_word = add_comma_to_number(Math.Round((debitamount - creditamount), 2).ToString());
                    print_pdf_line(cour_9_bold, temp_word, para_IndentationLeft_position(405, temp_word, "cour_9_bold"), -16);
                    creditamount = debitamount;
                }
                temp_word = "----------------------------------------------";
                print_pdf_line(cour_9, temp_word, 360, -10);
                temp_word = add_comma_to_number(debitamount.ToString());
                print_pdf_line(cour_9_bold, temp_word, para_IndentationLeft_position(340, temp_word, "cour_9_bold"), -8);
                print_pdf_line(cour_9_bold, temp_word, para_IndentationLeft_position(405, temp_word, "cour_9_bold"), -16);
                temp_word = "----------------------------------------------";
                print_pdf_line(cour_9, temp_word, 360, -10);
                print_footer();
                doc1.Close();
                require_header_footer = true;
            }
        }

        private void brief_sale_purchase_item_list(string book, string mprd, int md_c, string ma_n, string ms_a, string md_n)
        {
            create_list_for_sale_purchase_items(book, mprd, md_c, ma_n, ms_a, md_n);
            //create_list_for_sale_purchase_items(book, mprd, Convert.ToInt32(LedDGV.Rows[row_pointer].Cells[9].Value.ToString()), rla_n.Text, rls_a.Text, LedDGV.Rows[row_pointer].Cells[4].Value.ToString());
            if (temporary_list_array.Count > 0)
            {
                mqty = 0;
                for (int i = 0; i < temporary_list_array.Count; i++)
                {
                    var cellArray = temporary_list_array[i].Split(new[] { ',' });
                    //temp_word = temporary_list_array[i];
                    print_pdf_line(cour_7, cellArray[2], 60, -7);
                    print_pdf_line(cour_7, cellArray[5], para_IndentationLeft_position(180, cellArray[5], "cour_7"), -16);
                    print_pdf_line(cour_7, cellArray[8], 262, -16);
                    print_pdf_line(cour_7, "@", 280, -16);
                    print_pdf_line(cour_7, cellArray[6], para_IndentationLeft_position(250, cellArray[6], "cour_7"), -16);
                    print_pdf_line(cour_7, "=", 330, -16);
                    temp_word = add_comma_to_number(cellArray[7]);
                    print_pdf_line(cour_7, temp_word, para_IndentationLeft_position(330, temp_word, "cour_7"), -16);
                    mqty += Convert.ToDouble(cellArray[5]);
                    //print_pdf_line(cour_9, temp_word, 20, 0);
                }
                if (book == "S")
                    ConnectionWithAccess.query = "select tpt, bamt, tamt, rund_amt, gamt, tx_code, d_d,CGST_AMT,SGST_AMT,IGST_AMT,freight_AMT,packing_AMT,insurance_AMT,other_AMT from " + ConnectionWithAccess.tablename[21] + " f21 where prd = '" + ConnectionWithAccess.mprd + "' and  d_c = " + md_c + " and d_n = " + md_n;
                else
                    ConnectionWithAccess.query = "select tpt, bamt, tamt, rund_amt, gamt, tx_code, d_d,CGST_AMT,SGST_AMT,IGST_AMT,freight_AMT,packing_AMT,insurance_AMT,other_AMT from " + ConnectionWithAccess.tablename[21] + " f21 where prd = '" + ConnectionWithAccess.mprd + "' and  d_c = " + md_c + " and a_n = '" + ma_n + "' and s_a = '" + ms_a + "' and d_n = " + md_n;
                DataTable dtData1 = ConnectionCommand.fGetDataTable();
                if (dtData1 != null && dtData1.Rows.Count > 0)
                {
                    if (dtData1.Rows[0]["tamt"].ToString() != "0.00" && dtData1.Rows[0]["tamt"].ToString() != "")
                    {
                        print_pdf_line(cour_7, "VAT", 140, -7);
                        print_pdf_line(cour_7, "=", 330, -16);
                        temp_word = add_comma_to_number(dtData1.Rows[0]["tamt"].ToString());
                        print_pdf_line(cour_7, temp_word, para_IndentationLeft_position(310, temp_word, "cour_7"), -16);
                    }
                    if (dtData1.Rows[0]["CGST_AMT"].ToString() != "0.00" && dtData1.Rows[0]["CGST_AMT"].ToString() != "")
                    {
                        print_pdf_line(cour_7, "CGST", 140, -7);
                        print_pdf_line(cour_7, "=", 330, -16);
                        temp_word = add_comma_to_number(dtData1.Rows[0]["CGST_AMT"].ToString());
                        print_pdf_line(cour_7, temp_word, para_IndentationLeft_position(310, temp_word, "cour_7"), -16);
                    }
                    if (dtData1.Rows[0]["SGST_AMT"].ToString() != "0.00" && dtData1.Rows[0]["SGST_AMT"].ToString() != "")
                    {
                        print_pdf_line(cour_7, "SGST", 140, -7);
                        print_pdf_line(cour_7, "=", 330, -16);
                        temp_word = add_comma_to_number(dtData1.Rows[0]["SGST_AMT"].ToString());
                        print_pdf_line(cour_7, temp_word, para_IndentationLeft_position(310, temp_word, "cour_7"), -16);
                    }
                    if (dtData1.Rows[0]["IGST_AMT"].ToString() != "0.00" && dtData1.Rows[0]["IGST_AMT"].ToString() != "")
                    {
                        print_pdf_line(cour_7, "IGST", 140, -7);
                        print_pdf_line(cour_7, "=", 330, -16);
                        temp_word = add_comma_to_number(dtData1.Rows[0]["IGST_AMT"].ToString());
                        print_pdf_line(cour_7, temp_word, para_IndentationLeft_position(310, temp_word, "cour_7"), -16);
                    }
                    if (dtData1.Rows[0]["rund_amt"].ToString() != "0.00" && dtData1.Rows[0]["rund_amt"].ToString() != "")
                    {
                        print_pdf_line(cour_7, "Rounded Off ", 140, -7);
                        print_pdf_line(cour_7, "=", 330, -16);
                        temp_word = add_comma_to_number(dtData1.Rows[0]["rund_amt"].ToString());
                        print_pdf_line(cour_7, temp_word, para_IndentationLeft_position(310, temp_word, "cour_7"), -16);
                    }
                    if (mqty != 0)
                    {
                        print_pdf_line(cour_7, "******* Total Qty. = " + mqty.ToString() + " Pcs : Amt = ", 140, -7);
                        temp_word = add_comma_to_number(dtData1.Rows[0][4].ToString());
                        print_pdf_line(cour_7, temp_word, para_IndentationLeft_position(310, temp_word, "cour_7"), -16);
                    }
                }

            }
        }

        private void generate_full_balance_sheet_report(string mprd)
        {
            debitamount = 0;
            creditamount = 0;
            report_filetype = cbBalShAc.Text + "_" + mprd;
            trading_filename = ConnectionWithAccess.report_file_location + (report_filetype).Replace(" ", "");
            if (chb_add_datetime_in_output.Checked)
                trading_filename += "_" + DateTime.Now.Day + "_" + DateTime.Now.Month + "_" + DateTime.Now.Year + "_" + DateTime.Now.TimeOfDay.Hours + "_" + DateTime.Now.TimeOfDay.Minutes;
            trading_filename += ".pdf";
            doc1 = new Document(PageSize.A4, 5, 5, 5, 5);
            FileStream FS1 = File.Create(trading_filename);
            writer = PdfWriter.GetInstance(doc1, FS1);
            doc1.Open();
            current_pdf_page_number = 1;
            pdf_top_heading = null;
            require_header_footer = false;
            Paragraph para = new Paragraph();
            for (int i = 0; i < 6; i++)
            {
                temp_word = ConnectionWithAccess.company_details[i + 1];
                print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
            }
            temp_word = "-------------------------------------------------------";
            print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
            temp_word = Convert.ToString(Convert.ToInt32(Convert.ToString(dtBalShFrom.Text).Substring(dtBalShFrom.Text.Length - 4, 4)) + 1);
            temp_word2 = Convert.ToString(Convert.ToInt32(Convert.ToString(dtBalShTo.Text).Substring(dtBalShTo.Text.Length - 4, 4)) + 1);
            temp_word = "Assesment Year   #   " + temp_word + " - " + temp_word2;
            print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
            temp_word = "-------------------------------------------------------";
            print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
            temp_word = "Status : " + ConnectionWithAccess.company_details[24];
            print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
            temp_word = "Source of Income : " + ConnectionWithAccess.company_details[14];
            print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
            temp_word = ConnectionWithAccess.company_details[15];
            print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
            temp_word = ConnectionWithAccess.company_details[16];
            print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
            temp_word = "Period :" + dtBalShFrom.Text + "   -   " + dtBalShTo.Text;
            print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
            temp_word = "Books of Account's  : Regular Books of Account's";
            print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
            temp_word = "************************";
            print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
            temp_word = "Trading Account";
            print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
            temp_word = "************************";
            print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");

            StringBuilder strQuery = new StringBuilder();
            ConnectionWithAccess.query = query_contains_for_trading_account_union(mprd); ;// strQuery.ToString();
            DataTable dtNewTable = ConnectionCommand.fGetDataTable();
            if (dtNewTable != null)
            {
                move_records_upward_to_empty_places(dtNewTable);
                for (int i = 0; i < dtNewTable.Rows.Count; i++)
                {
                    if (dtNewTable.Rows[i][3].ToString() != null && dtNewTable.Rows[i][3].ToString() != "")
                    {
                        temp_word = dtNewTable.Rows[i][3].ToString();
                        print_pdf_line(cour_7_bold, temp_word, 15, 0);
                        temp_word = dtNewTable.Rows[i][5].ToString();
                        temp_word = String.Format("{0:0.00}", temp_word);
                        print_pdf_line(cour_7_bold, temp_word, para_IndentationLeft_position(200, temp_word, "cour_9"), -17);
                        debitamount = debitamount + Convert.ToDouble(temp_word);
                    }
                    if (dtNewTable.Rows[i][6].ToString() != null && dtNewTable.Rows[i][6].ToString() != "")
                    {
                        temp_word = dtNewTable.Rows[i][6].ToString();
                        print_pdf_line(cour_7_bold, temp_word, 290, -17);
                        if (dtNewTable.Rows[i][8].ToString() != "")
                        {
                            temp_word = dtNewTable.Rows[i][8].ToString();
                            temp_word = String.Format("{0:0.00}", temp_word);
                            print_pdf_line(cour_7_bold, temp_word, para_IndentationLeft_position(470, temp_word, "cour_9"), -17);
                            creditamount = creditamount + Convert.ToDouble(temp_word);
                        }
                    }
                }
                debitamount = Math.Round(debitamount, 2);
                creditamount = Math.Round(creditamount, 2);
                if (debitamount != creditamount)
                {
                    if (debitamount > creditamount)
                    {
                        temp_word = "Gross Profit";
                        print_pdf_line(cour_7_bold, temp_word, 15, 0);
                        temp_word = Convert.ToString(debitamount - creditamount);
                        //insertGrossAmount("719999", " ", "Gross Profit", (debitamount - creditamount));
                        temp_word = String.Format("{0:0.00}", temp_word);
                        print_pdf_line(cour_9_red, temp_word, para_IndentationLeft_position(200, temp_word, "cour_9_red"), -17);
                        debitamount = creditamount;
                    }
                    else if (creditamount > debitamount)
                    {
                        temp_word = "Gross Loss";
                        print_pdf_line(cour_7_bold, temp_word, 290, 0);
                        temp_word = Convert.ToString(creditamount - debitamount);
                        //insertGrossAmount(creditamount - debitamount);
                        temp_word = String.Format("{0:0.00}", temp_word);
                        print_pdf_line(cour_9_red, temp_word, para_IndentationLeft_position(470, temp_word, "cour_9_red"), -17);
                        creditamount = debitamount;
                    }
                }
                temp_word = "----------------";
                print_pdf_line(cour_7_bold, temp_word, 230, -10);
                print_pdf_line(cour_7_bold, temp_word, 500, -15);
                if (debitamount > 0)
                {
                    temp_word = Convert.ToString(debitamount);
                    temp_word = String.Format("{0:0.00}", temp_word);
                    print_pdf_line(cour_9_red, temp_word, para_IndentationLeft_position(200, temp_word, "cour_9_red"), -10);
                    print_pdf_line(cour_9_red, temp_word, para_IndentationLeft_position(470, temp_word, "cour_9_red"), -15);
                }
                else if (creditamount > 0)
                {
                    temp_word = Convert.ToString(creditamount);
                    temp_word = String.Format("{0:0.00}", temp_word);
                    print_pdf_line(cour_9_red, temp_word, para_IndentationLeft_position(200, temp_word, "cour_9_red"), -10);
                    print_pdf_line(cour_9_red, temp_word, para_IndentationLeft_position(470, temp_word, "cour_9_red"), -15);
                }
                temp_word = "=========";
                print_pdf_line(cour_7_bold, temp_word, 230, -10);
                print_pdf_line(cour_7_bold, temp_word, 500, -15);
            }
            skip_balance_page_in_pdf();

            // trading account finish from hear proift and loss account
            debitamount = 0;
            creditamount = 0;
            for (int i = 0; i < 6; i++)
            {
                temp_word = ConnectionWithAccess.company_details[i + 1];
                print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
            }
            temp_word = "-------------------------------------------------------";
            print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
            temp_word = Convert.ToString(Convert.ToInt32(Convert.ToString(dtBalShFrom.Text).Substring(dtBalShFrom.Text.Length - 4, 4)) + 1);
            temp_word2 = Convert.ToString(Convert.ToInt32(Convert.ToString(dtBalShTo.Text).Substring(dtBalShTo.Text.Length - 4, 4)) + 1);
            temp_word = "Assesment Year   #   " + temp_word + " - " + temp_word2;
            print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
            temp_word = "-------------------------------------------------------";
            print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
            temp_word = "Status : " + ConnectionWithAccess.company_details[24];
            print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
            temp_word = "Source of Income : " + ConnectionWithAccess.company_details[14];
            print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
            temp_word = ConnectionWithAccess.company_details[15];
            print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
            temp_word = ConnectionWithAccess.company_details[16];
            print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
            temp_word = "Period :" + dtBalShFrom.Text + "   -   " + dtBalShTo.Text;
            print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
            temp_word = "Books of Account's  : Regular Books of Account's";
            print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
            temp_word = "************************";
            print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
            temp_word = "Profit & Loss Account";
            print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
            temp_word = "************************";
            print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");

            strQuery = new StringBuilder();
            ConnectionWithAccess.query = query_contains_for_profit_and_loss_account_union(mprd); ;// strQuery.ToString();
            dtNewTable = ConnectionCommand.fGetDataTable();
            if (dtNewTable != null)
            {
                move_records_upward_to_empty_places(dtNewTable);
                for (int i = 0; i < dtNewTable.Rows.Count; i++)
                {
                    if (dtNewTable.Rows[i][3].ToString() != null && dtNewTable.Rows[i][3].ToString() != "")
                    {
                        temp_word = dtNewTable.Rows[i][3].ToString();
                        print_pdf_line(cour_7_bold, temp_word, 15, 0);
                        temp_word = dtNewTable.Rows[i][5].ToString();
                        temp_word = String.Format("{0:0.00}", temp_word);
                        print_pdf_line(cour_7_bold, temp_word, para_IndentationLeft_position(200, temp_word, "cour_9"), -17);
                        debitamount = debitamount + Convert.ToDouble(temp_word);
                    }
                    if (dtNewTable.Rows[i][6].ToString() != null && dtNewTable.Rows[i][6].ToString() != "")
                    {
                        temp_word = dtNewTable.Rows[i][6].ToString();
                        print_pdf_line(cour_7_bold, temp_word, 290, -17);
                        if (dtNewTable.Rows[i][8].ToString() != "")
                        {
                            temp_word = dtNewTable.Rows[i][8].ToString();
                            temp_word = String.Format("{0:0.00}", temp_word);
                            print_pdf_line(cour_7_bold, temp_word, para_IndentationLeft_position(470, temp_word, "cour_9"), -17);
                            creditamount = creditamount + Convert.ToDouble(temp_word);
                        }
                    }
                }
                debitamount = Math.Round(debitamount, 2);
                creditamount = Math.Round(creditamount, 2);
                if (debitamount != creditamount)
                {
                    if (debitamount > creditamount)
                    {
                        temp_word = "Net Profit";
                        print_pdf_line(cour_7_bold, temp_word, 15, 0);
                        temp_word = Convert.ToString(debitamount - creditamount);
                        //insertGrossAmount("719999", " ", "Gross Profit", (debitamount - creditamount));
                        temp_word = String.Format("{0:0.00}", temp_word);
                        print_pdf_line(cour_9_red, temp_word, para_IndentationLeft_position(200, temp_word, "cour_9_red"), -17);
                        debitamount = creditamount;
                    }
                    else if (creditamount > debitamount)
                    {
                        temp_word = "Net Loss";
                        print_pdf_line(cour_7_bold, temp_word, 290, 0);
                        temp_word = Convert.ToString(creditamount - debitamount);
                        //insertGrossAmount(creditamount - debitamount);
                        temp_word = String.Format("{0:0.00}", temp_word);
                        print_pdf_line(cour_9_red, temp_word, para_IndentationLeft_position(470, temp_word, "cour_9_red"), -17);
                        creditamount = debitamount;
                    }
                }
                temp_word = "----------------";
                print_pdf_line(cour_7_bold, temp_word, 230, -10);
                print_pdf_line(cour_7_bold, temp_word, 500, -15);
                if (debitamount > 0)
                {
                    temp_word = Convert.ToString(debitamount);
                    print_pdf_line(cour_9_red, temp_word, para_IndentationLeft_position(200, temp_word, "cour_9_red"), -10);
                    print_pdf_line(cour_9_red, temp_word, para_IndentationLeft_position(470, temp_word, "cour_9_red"), -15);
                }
                else if (creditamount > 0)
                {
                    temp_word = Convert.ToString(creditamount);
                    temp_word = String.Format("{0:0.00}", temp_word);
                    print_pdf_line(cour_9_red, temp_word, para_IndentationLeft_position(200, temp_word, "cour_9_red"), -10);
                    print_pdf_line(cour_9_red, temp_word, para_IndentationLeft_position(470, temp_word, "cour_9_red"), -15);
                }
                temp_word = "=========";
                print_pdf_line(cour_7_bold, temp_word, 230, -10);
                print_pdf_line(cour_7_bold, temp_word, 500, -15);
            }
            skip_balance_page_in_pdf();
            debitamount = 0;
            creditamount = 0;
            for (int i = 0; i < 6; i++)
            {
                temp_word = ConnectionWithAccess.company_details[i + 1];
                print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
            }
            temp_word = "-------------------------------------------------------";
            print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
            temp_word = Convert.ToString(Convert.ToInt32(Convert.ToString(dtBalShFrom.Text).Substring(dtBalShFrom.Text.Length - 4, 4)) + 1);
            temp_word2 = Convert.ToString(Convert.ToInt32(Convert.ToString(dtBalShTo.Text).Substring(dtBalShTo.Text.Length - 4, 4)) + 1);
            temp_word = "Assesment Year   #   " + temp_word + " - " + temp_word2;
            print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
            temp_word = "-------------------------------------------------------";
            print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
            temp_word = "Status : " + ConnectionWithAccess.company_details[24];
            print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
            temp_word = "Source of Income : " + ConnectionWithAccess.company_details[14];
            print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
            temp_word = ConnectionWithAccess.company_details[15];
            print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
            temp_word = ConnectionWithAccess.company_details[16];
            print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
            temp_word = "Period :" + dtBalShFrom.Text + "   -   " + dtBalShTo.Text;
            print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
            temp_word = "Books of Account's  : Regular Books of Account's";
            print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
            temp_word = "************************";
            print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
            temp_word = "Capital Account";
            print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
            temp_word = "************************";
            print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");

            strQuery = new StringBuilder();
            ConnectionWithAccess.query = query_contains_for_capital_account_union(mprd); ;// strQuery.ToString();
            dtNewTable = ConnectionCommand.fGetDataTable();
            if (dtNewTable != null)
            {
                move_records_upward_to_empty_places(dtNewTable);
                for (int i = 0; i < dtNewTable.Rows.Count; i++)
                {
                    if (dtNewTable.Rows[i][3].ToString() != null && dtNewTable.Rows[i][3].ToString() != "")
                    {
                        temp_word = dtNewTable.Rows[i][3].ToString();
                        print_pdf_line(cour_7_bold, temp_word, 15, 0);
                        temp_word = dtNewTable.Rows[i][5].ToString();
                        temp_word = String.Format("{0:0.00}", temp_word);
                        print_pdf_line(cour_7_bold, temp_word, para_IndentationLeft_position(200, temp_word, "cour_9"), -17);
                        debitamount = debitamount + Convert.ToDouble(temp_word);
                    }
                    if (dtNewTable.Rows[i][6].ToString() != null && dtNewTable.Rows[i][6].ToString() != "")
                    {
                        temp_word = dtNewTable.Rows[i][6].ToString();
                        temp_word = String.Format("{0:0.00}", temp_word);
                        print_pdf_line(cour_7_bold, temp_word, 290, -17);
                        if (dtNewTable.Rows[i][8].ToString() != "")
                        {
                            temp_word = dtNewTable.Rows[i][8].ToString();
                            temp_word = String.Format("{0:0.00}", temp_word);
                            print_pdf_line(cour_7_bold, temp_word, para_IndentationLeft_position(470, temp_word, "cour_9"), -17);
                            creditamount = creditamount + Convert.ToDouble(temp_word);
                        }
                    }
                }
                debitamount = Math.Round(debitamount, 2);
                creditamount = Math.Round(creditamount, 2);
                if (debitamount != creditamount)
                {
                    if (debitamount > creditamount)
                    {
                        temp_word = "Difference";
                        print_pdf_line(cour_7_bold, temp_word, 15, 0);
                        temp_word = Convert.ToString(debitamount - creditamount);
                        //insertGrossAmount("719999", " ", "Gross Profit", (debitamount - creditamount));
                        temp_word = String.Format("{0:0.00}", temp_word);
                        print_pdf_line(cour_9_red, temp_word, para_IndentationLeft_position(200, temp_word, "cour_9_red"), -17);
                        debitamount = creditamount;
                    }
                    else if (creditamount > debitamount)
                    {
                        temp_word = "Difference";
                        print_pdf_line(cour_7_bold, temp_word, 290, 0);
                        temp_word = Convert.ToString(creditamount - debitamount);
                        //insertGrossAmount(creditamount - debitamount);
                        temp_word = String.Format("{0:0.00}", temp_word);
                        print_pdf_line(cour_9_red, temp_word, para_IndentationLeft_position(470, temp_word, "cour_9_red"), -17);
                        creditamount = debitamount;
                    }
                }
                temp_word = "----------------";
                print_pdf_line(cour_7_bold, temp_word, 230, -10);
                print_pdf_line(cour_7_bold, temp_word, 500, -15);
                if (debitamount > 0)
                {
                    temp_word = Convert.ToString(debitamount);
                    temp_word = String.Format("{0:0.00}", temp_word);
                    print_pdf_line(cour_9_red, temp_word, para_IndentationLeft_position(200, temp_word, "cour_9_red"), -10);
                    print_pdf_line(cour_9_red, temp_word, para_IndentationLeft_position(470, temp_word, "cour_9_red"), -15);
                }
                else if (creditamount > 0)
                {
                    temp_word = Convert.ToString(creditamount);
                    temp_word = String.Format("{0:0.00}", temp_word);
                    print_pdf_line(cour_9_red, temp_word, para_IndentationLeft_position(200, temp_word, "cour_9_red"), -10);
                    print_pdf_line(cour_9_red, temp_word, para_IndentationLeft_position(470, temp_word, "cour_9_red"), -15);
                }
                temp_word = "=========";
                print_pdf_line(cour_7_bold, temp_word, 230, -10);
                print_pdf_line(cour_7_bold, temp_word, 500, -15);
            }
            skip_balance_page_in_pdf();
            // Capital account finish from hear Balance Sheet
            debitamount = 0;
            creditamount = 0;
            for (int i = 0; i < 6; i++)
            {
                temp_word = ConnectionWithAccess.company_details[i + 1];
                print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
            }
            temp_word = "-------------------------------------------------------";
            print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
            temp_word = Convert.ToString(Convert.ToInt32(Convert.ToString(dtBalShFrom.Text).Substring(dtBalShFrom.Text.Length - 4, 4)) + 1);
            temp_word2 = Convert.ToString(Convert.ToInt32(Convert.ToString(dtBalShTo.Text).Substring(dtBalShTo.Text.Length - 4, 4)) + 1);
            temp_word = "Assesment Year   #   " + temp_word + " - " + temp_word2;
            print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
            temp_word = "-------------------------------------------------------";
            print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
            temp_word = "Status : " + ConnectionWithAccess.company_details[24];
            print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
            temp_word = "Source of Income : " + ConnectionWithAccess.company_details[14];
            print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
            temp_word = ConnectionWithAccess.company_details[15];
            print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
            temp_word = ConnectionWithAccess.company_details[16];
            print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
            temp_word = "Period :" + dtBalShFrom.Text + "   -   " + dtBalShTo.Text;
            print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
            temp_word = "Books of Account's  : Regular Books of Account's";
            print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
            temp_word = "************************";
            print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
            temp_word = "Balance Sheet";
            print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
            temp_word = "************************";
            print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");

            strQuery = new StringBuilder();
            ConnectionWithAccess.query = query_contains_for_balance_sheet_union(mprd); ;// strQuery.ToString();
            dtNewTable = ConnectionCommand.fGetDataTable();
            move_assets_inner_value_outside(dtNewTable);
            if (dtNewTable != null)
            {
                move_records_upward_to_empty_places(dtNewTable);
                for (int i = 0; i < dtNewTable.Rows.Count; i++)
                {
                    if (dtNewTable.Rows[i][3].ToString() != "")
                    {
                        temp_word = dtNewTable.Rows[i][3].ToString();
                        print_pdf_line(cour_7_bold, temp_word, 15, 0);
                        temp_word = dtNewTable.Rows[i][5].ToString();
                        temp_word = String.Format("{0:0.00}", temp_word);
                        print_pdf_line(cour_9_bold, temp_word, para_IndentationLeft_position(200, temp_word, "cour_9"), -17);
                        debitamount = debitamount + Convert.ToDouble(temp_word);
                    }
                    if (dtNewTable.Rows[i][6].ToString() != "")
                    {
                        if (dtNewTable.Rows[i][7].ToString() != "" && dtNewTable.Rows[i][8].ToString() != "")
                        {
                            if (Convert.ToDouble(dtNewTable.Rows[i][7].ToString()) == 0 && Convert.ToDouble(dtNewTable.Rows[i][8].ToString()) == 0)
                            {
                                temp_word = dtNewTable.Rows[i][7].ToString();
                                temp_word = dtNewTable.Rows[i][8].ToString();
                            }
                            else
                            {
                                //temp_word = dtNewTable.Rows[i][7].ToString();
                                //temp_word = dtNewTable.Rows[i][8].ToString();
                                temp_word = dtNewTable.Rows[i][6].ToString();
                                if (dtNewTable.Rows[i][3].ToString() != "")
                                    print_pdf_line(cour_7_bold, temp_word, 290, -17);
                                else
                                    print_pdf_line(cour_7_bold, temp_word, 290, 0);
                            }
                        }
                        if (dtNewTable.Rows[i][7].ToString() != "" && dtNewTable.Rows[i][8].ToString() != "")
                        {
                            if (Convert.ToDouble(dtNewTable.Rows[i][7].ToString()) != Convert.ToDouble(dtNewTable.Rows[i][8].ToString()))
                            {
                                if (dtNewTable.Rows[i][7].ToString() != "0.00")
                                {
                                    temp_word = dtNewTable.Rows[i][7].ToString();
                                    temp_word = String.Format("{0:0.00}", temp_word);
                                    print_pdf_line(cour_9_bold, temp_word, para_IndentationLeft_position(410, temp_word, "cour_9"), -17);
                                }
                            }
                        }
                        if (dtNewTable.Rows[i][8].ToString() != "" && dtNewTable.Rows[i][8].ToString() != "0")
                        {
                            temp_word = dtNewTable.Rows[i][8].ToString();
                            temp_word = String.Format("{0:0.00}", temp_word);
                            print_pdf_line(cour_9_bold, temp_word, para_IndentationLeft_position(470, temp_word, "cour_9"), -17);
                            creditamount = creditamount + Convert.ToDouble(temp_word);
                        }
                    }
                    if (dtNewTable.Rows[i][1].ToString() != null && dtNewTable.Rows[i][1].ToString() != "")
                    {
                        if (dtNewTable.Rows[i][1].ToString() == "719999")
                        {
                            temp_int = i;
                            i = dtNewTable.Rows.Count;
                        }
                    }
                }
                debitamount = Math.Round(debitamount, 0);
                creditamount = Math.Round(creditamount, 0);
                if (debitamount != creditamount)
                {
                    if (debitamount > creditamount)
                    {
                        temp_word = "difference";
                        print_pdf_line(cour_7_bold, temp_word, 290, 0);
                        temp_word = Convert.ToString(debitamount - creditamount);
                        //insertGrossAmount(creditamount - debitamount);
                        temp_word = String.Format("{0:0.00}", temp_word);
                        print_pdf_line(cour_9_red, temp_word, para_IndentationLeft_position(470, temp_word, "cour_9_red"), -17);
                        creditamount = debitamount;
                    }
                    else if (creditamount > debitamount)
                    {
                        temp_word = "difference";
                        print_pdf_line(cour_7_bold, temp_word, 15, 0);
                        temp_word = Convert.ToString(creditamount - debitamount);
                        //insertGrossAmount("719999", " ", "Gross Profit", (debitamount - creditamount));
                        temp_word = String.Format("{0:0.00}", temp_word);
                        print_pdf_line(cour_9_red, temp_word, para_IndentationLeft_position(200, temp_word, "cour_9_red"), -17);
                        debitamount = creditamount;
                    }
                }
                temp_word = "----------------";
                print_pdf_line(cour_7_bold, temp_word, 230, -10);
                print_pdf_line(cour_7_bold, temp_word, 500, -15);
                if (debitamount > 0)
                {
                    temp_word = Convert.ToString(debitamount);
                    temp_word = String.Format("{0:0.00}", temp_word);
                    print_pdf_line(cour_9_red, temp_word, para_IndentationLeft_position(200, temp_word, "cour_9_red"), -10);
                    print_pdf_line(cour_9_red, temp_word, para_IndentationLeft_position(470, temp_word, "cour_9_red"), -15);
                }
                else if (creditamount > 0)
                {
                    temp_word = Convert.ToString(creditamount);
                    temp_word = String.Format("{0:0.00}", temp_word);
                    print_pdf_line(cour_9_red, temp_word, para_IndentationLeft_position(200, temp_word, "cour_9_red"), -10);
                    print_pdf_line(cour_9_red, temp_word, para_IndentationLeft_position(470, temp_word, "cour_9_red"), -15);
                }
                temp_word = "=========";
                print_pdf_line(cour_7_bold, temp_word, 230, -10);
                print_pdf_line(cour_7_bold, temp_word, 500, -15);
            }
            doc1.Close();
            require_header_footer = true;
        }

        private void generate_full_balance_sheet_report_PDFTable(string mprd)
        {
            debitamount = 0;
            creditamount = 0;
            report_filetype = cbBalShAc.Text + "_" + mprd;
            trading_filename = ConnectionWithAccess.report_file_location + (report_filetype).Replace(" ", "");
            if (chb_add_datetime_in_output.Checked)
                trading_filename += "_" + DateTime.Now.Day + "_" + DateTime.Now.Month + "_" + DateTime.Now.Year + "_" + DateTime.Now.TimeOfDay.Hours + "_" + DateTime.Now.TimeOfDay.Minutes;
            trading_filename += ".pdf";
            doc1 = new Document(PageSize.A4, 5, 5, 5, 5);
            FileStream FS1 = File.Create(trading_filename);
            writer = PdfWriter.GetInstance(doc1, FS1);
            doc1.Open();
            current_pdf_page_number = 1;
            pdf_top_heading = null;
            require_header_footer = false;
            Paragraph para = new Paragraph();
            for (int i = 0; i < 6; i++)
            {
                temp_word = ConnectionWithAccess.company_details[i + 1];
                print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
            }
            temp_word = "-------------------------------------------------------";
            print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
            temp_word = Convert.ToString(Convert.ToInt32(Convert.ToString(dtBalShFrom.Text).Substring(dtBalShFrom.Text.Length - 4, 4)) + 1);
            temp_word2 = Convert.ToString(Convert.ToInt32(Convert.ToString(dtBalShTo.Text).Substring(dtBalShTo.Text.Length - 4, 4)) + 1);
            temp_word = "Assesment Year   #   " + temp_word + " - " + temp_word2;
            print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
            temp_word = "-------------------------------------------------------";
            print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
            temp_word = "Status : " + ConnectionWithAccess.company_details[24];
            print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
            temp_word = "Source of Income : " + ConnectionWithAccess.company_details[14];
            print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
            temp_word = ConnectionWithAccess.company_details[15];
            print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
            temp_word = ConnectionWithAccess.company_details[16];
            print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
            temp_word = "Period :" + dtBalShFrom.Text + "   -   " + dtBalShTo.Text;
            print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
            temp_word = "Books of Account's  : Regular Books of Account's";
            print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
            temp_word = "************************";
            print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
            temp_word = "Trading Account";
            print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
            temp_word = "************************";
            print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");

            #region Trading
            StringBuilder strQuery = new StringBuilder();
            ConnectionWithAccess.query = query_contains_for_trading_account_union(mprd); ;// strQuery.ToString();
            DataTable dtNewTable = ConnectionCommand.fGetDataTable();
            if (dtNewTable != null)
            {

                move_records_upward_to_empty_places(dtNewTable);

                PdfPTable pdfTableTrading = new PdfPTable(4);
                pdfTableTrading.HorizontalAlignment = Element.ALIGN_LEFT;
                pdfTableTrading.WidthPercentage = 100;
                string cell_value = string.Empty;
                float[] widths = new float[] { 200f, 100f, 200f, 100f };
                pdfTableTrading.SetWidths(widths);


                for (int i = 0; i < dtNewTable.Rows.Count; i++)
                {
                    PdfPCell pdf_cell = new PdfPCell();//new Phrase(strCell1, cour_9));
                    PdfPCell pdf_cell1 = new PdfPCell();//new Phrase(strCell2, cour_9));
                    PdfPCell pdf_cell2 = new PdfPCell();//new Phrase(strCell3, cour_9));
                    PdfPCell pdf_cell3 = new PdfPCell();
                    pdf_cell.Border = 0;
                    pdf_cell1.Border = 0;
                    pdf_cell2.Border = 0;
                    pdf_cell3.Border = 0;
                    pdf_cell.HorizontalAlignment = Element.ALIGN_LEFT;
                    pdf_cell1.HorizontalAlignment = Element.ALIGN_RIGHT;
                    pdf_cell2.HorizontalAlignment = Element.ALIGN_LEFT;
                    pdf_cell3.HorizontalAlignment = Element.ALIGN_RIGHT;
                    //pdfTable.AddCell(pdf_cell);
                    //pdfTable.AddCell(pdf_cell1);
                    //pdfTable.AddCell(pdf_cell2);

                    bool bInsert1Cell = false;
                    bool bInsert2Cell = false;
                    if (dtNewTable.Rows[i][3].ToString() != null && dtNewTable.Rows[i][3].ToString() != "")
                    {
                        temp_word = dtNewTable.Rows[i][3].ToString();
                        pdf_cell.Phrase = new Phrase(temp_word, cour_7_bold);
                        //print_pdf_line(cour_7_bold, temp_word, 15, 0);
                        temp_word = dtNewTable.Rows[i][5].ToString();
                        temp_word = String.Format("{0:0.00}", temp_word);
                        pdf_cell1.Phrase = new Phrase(temp_word, cour_9);
                        //print_pdf_line(cour_7_bold, temp_word, para_IndentationLeft_position(200, temp_word, "cour_9"), -17);
                        debitamount = debitamount + Convert.ToDouble(temp_word);
                        pdfTableTrading.AddCell(pdf_cell);
                        pdfTableTrading.AddCell(pdf_cell1);
                        bInsert1Cell = true;
                    }
                    if (dtNewTable.Rows[i][6].ToString() != null && dtNewTable.Rows[i][6].ToString() != "")
                    {
                        temp_word = dtNewTable.Rows[i][6].ToString();
                        pdf_cell2.Phrase = new Phrase(temp_word, cour_7_bold);
                        //print_pdf_line(cour_7_bold, temp_word, 290, -17);
                        if (dtNewTable.Rows[i][8].ToString() != "")
                        {
                            temp_word = dtNewTable.Rows[i][8].ToString();
                            temp_word = String.Format("{0:0.00}", temp_word);
                            pdf_cell3.Phrase = new Phrase(temp_word, cour_9);
                            //print_pdf_line(cour_7_bold, temp_word, para_IndentationLeft_position(470, temp_word, "cour_9"), -17);
                            creditamount = creditamount + Convert.ToDouble(temp_word);
                        }
                        pdfTableTrading.AddCell(pdf_cell2);
                        pdfTableTrading.AddCell(pdf_cell3);
                        bInsert2Cell = true;
                    }
                    if (bInsert1Cell && !bInsert2Cell)
                    {
                        pdf_cell2.Phrase = new Phrase(" ", cour_7_bold);
                        pdf_cell3.Phrase = new Phrase(" ", cour_7_bold);
                        pdfTableTrading.AddCell(pdf_cell2);
                        pdfTableTrading.AddCell(pdf_cell3);
                    }
                    if (bInsert2Cell && !bInsert1Cell)
                    {
                        pdf_cell.Phrase = new Phrase(" ", cour_7_bold);
                        pdf_cell1.Phrase = new Phrase(" ", cour_7_bold);
                        pdfTableTrading.AddCell(pdf_cell);
                        pdfTableTrading.AddCell(pdf_cell1);
                    }
                    bInsert1Cell = false;
                    bInsert2Cell = false;
                }

                debitamount = Math.Round(debitamount, 2);
                creditamount = Math.Round(creditamount, 2);
                if (debitamount != creditamount)
                {
                    if (debitamount > creditamount)
                    {
                        PdfPCell pdf_cell_gp = new PdfPCell();//new Phrase(strCell1, cour_9));
                        PdfPCell pdf_cell_gp1 = new PdfPCell();//new Phrase(strCell2, cour_9));
                        PdfPCell pdf_cell_gp2 = new PdfPCell();//new Phrase(strCell3, cour_9));
                        PdfPCell pdf_cell_gp3 = new PdfPCell();
                        pdf_cell_gp.Border = 0;
                        pdf_cell_gp1.Border = 0;
                        pdf_cell_gp2.Border = 0;
                        pdf_cell_gp3.Border = 0;
                        pdf_cell_gp.HorizontalAlignment = Element.ALIGN_LEFT;
                        pdf_cell_gp1.HorizontalAlignment = Element.ALIGN_RIGHT;
                        pdf_cell_gp2.HorizontalAlignment = Element.ALIGN_LEFT;
                        pdf_cell_gp3.HorizontalAlignment = Element.ALIGN_RIGHT;

                        temp_word = "Gross Profit";
                        pdf_cell_gp.Phrase = new Phrase(temp_word, cour_7_bold);
                        //print_pdf_line(cour_7_bold, temp_word, 15, 0);
                        temp_word = Convert.ToString(debitamount - creditamount);
                        //insertGrossAmount("719999", " ", "Gross Profit", (debitamount - creditamount));
                        temp_word = String.Format("{0:0.00}", temp_word);
                        pdf_cell_gp1.Phrase = new Phrase(temp_word, cour_9_red);
                        pdf_cell_gp2.Phrase = new Phrase(" ", cour_9);
                        pdf_cell_gp3.Phrase = new Phrase(" ", cour_9);
                        //print_pdf_line(cour_9_red, temp_word, para_IndentationLeft_position(200, temp_word, "cour_9_red"), -17);
                        debitamount = creditamount;

                        pdfTableTrading.AddCell(pdf_cell_gp);
                        pdfTableTrading.AddCell(pdf_cell_gp1);
                        pdfTableTrading.AddCell(pdf_cell_gp2);
                        pdfTableTrading.AddCell(pdf_cell_gp3);
                    }
                    else if (creditamount > debitamount)
                    {
                        PdfPCell pdf_cell_gl = new PdfPCell();//new Phrase(strCell1, cour_9));
                        PdfPCell pdf_cell_gl1 = new PdfPCell();//new Phrase(strCell2, cour_9));
                        PdfPCell pdf_cell_gl2 = new PdfPCell();//new Phrase(strCell3, cour_9));
                        PdfPCell pdf_cell_gl3 = new PdfPCell();
                        pdf_cell_gl.Border = 0;
                        pdf_cell_gl1.Border = 0;
                        pdf_cell_gl2.Border = 0;
                        pdf_cell_gl3.Border = 0;
                        pdf_cell_gl.HorizontalAlignment = Element.ALIGN_LEFT;
                        pdf_cell_gl1.HorizontalAlignment = Element.ALIGN_RIGHT;
                        pdf_cell_gl2.HorizontalAlignment = Element.ALIGN_LEFT;
                        pdf_cell_gl3.HorizontalAlignment = Element.ALIGN_RIGHT;

                        pdf_cell_gl.Phrase = new Phrase(" ", cour_9);
                        pdf_cell_gl1.Phrase = new Phrase(" ", cour_9);
                        temp_word = "Gross Loss";
                        pdf_cell_gl2.Phrase = new Phrase(temp_word, cour_7_bold);
                        //print_pdf_line(cour_7_bold, temp_word, 290, 0);
                        temp_word = Convert.ToString(creditamount - debitamount);
                        //insertGrossAmount(creditamount - debitamount);
                        temp_word = String.Format("{0:0.00}", temp_word);
                        pdf_cell_gl3.Phrase = new Phrase(temp_word, cour_9_red);
                        //print_pdf_line(cour_9_red, temp_word, para_IndentationLeft_position(470, temp_word, "cour_9_red"), -17);
                        creditamount = debitamount;

                        pdfTableTrading.AddCell(pdf_cell_gl);
                        pdfTableTrading.AddCell(pdf_cell_gl1);
                        pdfTableTrading.AddCell(pdf_cell_gl2);
                        pdfTableTrading.AddCell(pdf_cell_gl3);
                    }

                }
                //temp_word = "----------------";
                //print_pdf_line(cour_7_bold, temp_word, 230, -10);
                //print_pdf_line(cour_7_bold, temp_word, 500, -15);

                PdfPCell pdf_cell_ft = new PdfPCell();//new Phrase(strCell1, cour_9));
                PdfPCell pdf_cell_ft1 = new PdfPCell();//new Phrase(strCell2, cour_9));
                PdfPCell pdf_cell_ft2 = new PdfPCell();//new Phrase(strCell3, cour_9));
                PdfPCell pdf_cell_ft3 = new PdfPCell();
                pdf_cell_ft.Border = 0;
                pdf_cell_ft1.Border = iTextSharp.text.Rectangle.BOTTOM_BORDER | iTextSharp.text.Rectangle.TOP_BORDER;
                pdf_cell_ft2.Border = 0;
                pdf_cell_ft3.Border = iTextSharp.text.Rectangle.BOTTOM_BORDER | iTextSharp.text.Rectangle.TOP_BORDER;

                pdf_cell_ft.HorizontalAlignment = Element.ALIGN_LEFT;
                pdf_cell_ft1.HorizontalAlignment = Element.ALIGN_RIGHT;
                pdf_cell_ft2.HorizontalAlignment = Element.ALIGN_LEFT;
                pdf_cell_ft3.HorizontalAlignment = Element.ALIGN_RIGHT;
                if (debitamount > 0)
                {
                    temp_word = Convert.ToString(debitamount);
                    temp_word = String.Format("{0:0.00}", temp_word);
                    pdf_cell_ft.Phrase = new Phrase(" ", cour_9);
                    pdf_cell_ft1.Phrase = new Phrase(temp_word, cour_9_red);
                    pdf_cell_ft2.Phrase = new Phrase(" ", cour_9);
                    pdf_cell_ft3.Phrase = new Phrase(temp_word, cour_9_red);
                    //print_pdf_line(cour_9_red, temp_word, para_IndentationLeft_position(200, temp_word, "cour_9_red"), -10);
                    //print_pdf_line(cour_9_red, temp_word, para_IndentationLeft_position(470, temp_word, "cour_9_red"), -15);
                }
                else if (creditamount > 0)
                {
                    temp_word = Convert.ToString(creditamount);
                    temp_word = String.Format("{0:0.00}", temp_word);
                    pdf_cell_ft.Phrase = new Phrase(" ", cour_9);
                    pdf_cell_ft1.Phrase = new Phrase(temp_word, cour_9_red);
                    pdf_cell_ft2.Phrase = new Phrase(" ", cour_9);
                    pdf_cell_ft3.Phrase = new Phrase(temp_word, cour_9_red);

                    //print_pdf_line(cour_9_red, temp_word, para_IndentationLeft_position(200, temp_word, "cour_9_red"), -10);
                    //print_pdf_line(cour_9_red, temp_word, para_IndentationLeft_position(470, temp_word, "cour_9_red"), -15);
                }
                pdfTableTrading.AddCell(pdf_cell_ft);
                pdfTableTrading.AddCell(pdf_cell_ft1);
                pdfTableTrading.AddCell(pdf_cell_ft2);
                pdfTableTrading.AddCell(pdf_cell_ft3);
                //temp_word = "=========";
                //print_pdf_line(cour_7_bold, temp_word, 230, -10);
                //print_pdf_line(cour_7_bold, temp_word, 500, -15);

                doc1.Add(pdfTableTrading);
            }
            skip_balance_page_in_pdf();
            #endregion Trading

            #region Profil and Loss
            // trading account finish from hear proift and loss account
            debitamount = 0;
            creditamount = 0;
            for (int i = 0; i < 6; i++)
            {
                temp_word = ConnectionWithAccess.company_details[i + 1];
                print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
            }
            temp_word = "-------------------------------------------------------";
            print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
            temp_word = Convert.ToString(Convert.ToInt32(Convert.ToString(dtBalShFrom.Text).Substring(dtBalShFrom.Text.Length - 4, 4)) + 1);
            temp_word2 = Convert.ToString(Convert.ToInt32(Convert.ToString(dtBalShTo.Text).Substring(dtBalShTo.Text.Length - 4, 4)) + 1);
            temp_word = "Assesment Year   #   " + temp_word + " - " + temp_word2;
            print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
            temp_word = "-------------------------------------------------------";
            print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
            temp_word = "Status : " + ConnectionWithAccess.company_details[24];
            print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
            temp_word = "Source of Income : " + ConnectionWithAccess.company_details[14];
            print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
            temp_word = ConnectionWithAccess.company_details[15];
            print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
            temp_word = ConnectionWithAccess.company_details[16];
            print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
            temp_word = "Period :" + dtBalShFrom.Text + "   -   " + dtBalShTo.Text;
            print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
            temp_word = "Books of Account's  : Regular Books of Account's";
            print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
            temp_word = "************************";
            print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
            temp_word = "Profit & Loss Account";
            print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
            temp_word = "************************";
            print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");

            strQuery = new StringBuilder();
            ConnectionWithAccess.query = query_contains_for_profit_and_loss_account_union(mprd); ;// strQuery.ToString();
            dtNewTable = ConnectionCommand.fGetDataTable();
            if (dtNewTable != null)
            {
                move_records_upward_to_empty_places(dtNewTable);
                PdfPTable pdfTablePnL = new PdfPTable(4);
                pdfTablePnL.HorizontalAlignment = Element.ALIGN_LEFT;
                pdfTablePnL.WidthPercentage = 100;
                float[] widths_pnl = new float[] { 200f, 100f, 200f, 100f };
                pdfTablePnL.SetWidths(widths_pnl);

                for (int i = 0; i < dtNewTable.Rows.Count; i++)
                {
                    PdfPCell pdf_cell = new PdfPCell();//new Phrase(strCell1, cour_9));
                    PdfPCell pdf_cell1 = new PdfPCell();//new Phrase(strCell2, cour_9));
                    PdfPCell pdf_cell2 = new PdfPCell();//new Phrase(strCell3, cour_9));
                    PdfPCell pdf_cell3 = new PdfPCell();
                    pdf_cell.Border = 0;
                    pdf_cell1.Border = 0;
                    pdf_cell2.Border = 0;
                    pdf_cell3.Border = 0;
                    pdf_cell.HorizontalAlignment = Element.ALIGN_LEFT;
                    pdf_cell1.HorizontalAlignment = Element.ALIGN_RIGHT;
                    pdf_cell2.HorizontalAlignment = Element.ALIGN_LEFT;
                    pdf_cell3.HorizontalAlignment = Element.ALIGN_RIGHT;

                    bool bInsert1Cell = false;
                    bool bInsert2Cell = false;

                    if (dtNewTable.Rows[i][3].ToString() != null && dtNewTable.Rows[i][3].ToString() != "")
                    {
                        temp_word = dtNewTable.Rows[i][3].ToString();
                        pdf_cell.Phrase = new Phrase(temp_word, cour_7_bold);
                        //print_pdf_line(cour_7_bold, temp_word, 15, 0);
                        temp_word = dtNewTable.Rows[i][5].ToString();
                        temp_word = String.Format("{0:0.00}", temp_word);
                        pdf_cell1.Phrase = new Phrase(temp_word, cour_7_bold);
                        //print_pdf_line(cour_7_bold, temp_word, para_IndentationLeft_position(200, temp_word, "cour_9"), -17);
                        pdfTablePnL.AddCell(pdf_cell);
                        pdfTablePnL.AddCell(pdf_cell1);
                        debitamount = debitamount + Convert.ToDouble(temp_word);
                        bInsert1Cell = true;
                    }
                    if (dtNewTable.Rows[i][6].ToString() != null && dtNewTable.Rows[i][6].ToString() != "")
                    {
                        temp_word = dtNewTable.Rows[i][6].ToString();
                        pdf_cell2.Phrase = new Phrase(temp_word, cour_7_bold);
                        //print_pdf_line(cour_7_bold, temp_word, 290, -17);
                        if (dtNewTable.Rows[i][8].ToString() != "")
                        {
                            temp_word = dtNewTable.Rows[i][8].ToString();
                            temp_word = String.Format("{0:0.00}", temp_word);
                            pdf_cell3.Phrase = new Phrase(temp_word, cour_7_bold);
                            //print_pdf_line(cour_7_bold, temp_word, para_IndentationLeft_position(470, temp_word, "cour_9"), -17);
                            creditamount = creditamount + Convert.ToDouble(temp_word);
                        }
                        pdfTablePnL.AddCell(pdf_cell2);
                        pdfTablePnL.AddCell(pdf_cell3);
                        bInsert2Cell = true;
                    }

                    if (bInsert1Cell && !bInsert2Cell)
                    {
                        pdf_cell2.Phrase = new Phrase(" ", cour_7_bold);
                        pdf_cell3.Phrase = new Phrase(" ", cour_7_bold);
                        pdfTablePnL.AddCell(pdf_cell2);
                        pdfTablePnL.AddCell(pdf_cell3);
                    }
                    if (bInsert2Cell && !bInsert1Cell)
                    {
                        pdf_cell.Phrase = new Phrase(" ", cour_7_bold);
                        pdf_cell1.Phrase = new Phrase(" ", cour_7_bold);
                        pdfTablePnL.AddCell(pdf_cell);
                        pdfTablePnL.AddCell(pdf_cell1);
                    }
                    bInsert1Cell = false;
                    bInsert2Cell = false;

                }
                debitamount = Math.Round(debitamount, 2);
                creditamount = Math.Round(creditamount, 2);
                if (debitamount != creditamount)
                {
                    if (debitamount > creditamount)
                    {
                        PdfPCell pdf_cell_gp = new PdfPCell();//new Phrase(strCell1, cour_9));
                        PdfPCell pdf_cell_gp1 = new PdfPCell();//new Phrase(strCell2, cour_9));
                        PdfPCell pdf_cell_gp2 = new PdfPCell();//new Phrase(strCell3, cour_9));
                        PdfPCell pdf_cell_gp3 = new PdfPCell();
                        pdf_cell_gp.Border = 0;
                        pdf_cell_gp1.Border = 0;
                        pdf_cell_gp2.Border = 0;
                        pdf_cell_gp3.Border = 0;
                        pdf_cell_gp.HorizontalAlignment = Element.ALIGN_LEFT;
                        pdf_cell_gp1.HorizontalAlignment = Element.ALIGN_RIGHT;
                        pdf_cell_gp2.HorizontalAlignment = Element.ALIGN_LEFT;
                        pdf_cell_gp3.HorizontalAlignment = Element.ALIGN_RIGHT;

                        temp_word = "Net Profit";
                        pdf_cell_gp.Phrase = new Phrase(temp_word, cour_7_bold);
                        //print_pdf_line(cour_7_bold, temp_word, 15, 0);
                        temp_word = Convert.ToString(debitamount - creditamount);
                        //insertGrossAmount("719999", " ", "Gross Profit", (debitamount - creditamount));
                        temp_word = String.Format("{0:0.00}", temp_word);
                        pdf_cell_gp1.Phrase = new Phrase(temp_word, cour_9_red);
                        pdf_cell_gp2.Phrase = new Phrase(" ", cour_9);
                        pdf_cell_gp3.Phrase = new Phrase(" ", cour_9);
                        //print_pdf_line(cour_9_red, temp_word, para_IndentationLeft_position(200, temp_word, "cour_9_red"), -17);
                        debitamount = creditamount;
                        pdfTablePnL.AddCell(pdf_cell_gp);
                        pdfTablePnL.AddCell(pdf_cell_gp1);
                        pdfTablePnL.AddCell(pdf_cell_gp2);
                        pdfTablePnL.AddCell(pdf_cell_gp3);
                    }
                    else if (creditamount > debitamount)
                    {
                        PdfPCell pdf_cell_gl = new PdfPCell();//new Phrase(strCell1, cour_9));
                        PdfPCell pdf_cell_gl1 = new PdfPCell();//new Phrase(strCell2, cour_9));
                        PdfPCell pdf_cell_gl2 = new PdfPCell();//new Phrase(strCell3, cour_9));
                        PdfPCell pdf_cell_gl3 = new PdfPCell();
                        pdf_cell_gl.Border = 0;
                        pdf_cell_gl1.Border = 0;
                        pdf_cell_gl2.Border = 0;
                        pdf_cell_gl3.Border = 0;
                        pdf_cell_gl.HorizontalAlignment = Element.ALIGN_LEFT;
                        pdf_cell_gl1.HorizontalAlignment = Element.ALIGN_RIGHT;
                        pdf_cell_gl2.HorizontalAlignment = Element.ALIGN_LEFT;
                        pdf_cell_gl3.HorizontalAlignment = Element.ALIGN_RIGHT;

                        pdf_cell_gl.Phrase = new Phrase(" ", cour_9);
                        pdf_cell_gl1.Phrase = new Phrase(" ", cour_9);

                        temp_word = "Net Loss";
                        pdf_cell_gl2.Phrase = new Phrase(temp_word, cour_7_bold);
                        //print_pdf_line(cour_7_bold, temp_word, 290, 0);
                        temp_word = Convert.ToString(creditamount - debitamount);
                        //insertGrossAmount(creditamount - debitamount);
                        temp_word = String.Format("{0:0.00}", temp_word);
                        pdf_cell_gl3.Phrase = new Phrase(temp_word, cour_9);
                        //print_pdf_line(cour_9_red, temp_word, para_IndentationLeft_position(470, temp_word, "cour_9_red"), -17);

                        creditamount = debitamount;

                        pdfTablePnL.AddCell(pdf_cell_gl);
                        pdfTablePnL.AddCell(pdf_cell_gl1);
                        pdfTablePnL.AddCell(pdf_cell_gl2);
                        pdfTablePnL.AddCell(pdf_cell_gl3);
                    }
                }

                PdfPCell pdf_cell_ft_p = new PdfPCell();//new Phrase(strCell1, cour_9));
                PdfPCell pdf_cell_ft_p1 = new PdfPCell();//new Phrase(strCell2, cour_9));
                PdfPCell pdf_cell_ft_p2 = new PdfPCell();//new Phrase(strCell3, cour_9));
                PdfPCell pdf_cell_ft_p3 = new PdfPCell();
                pdf_cell_ft_p.Border = 0;
                pdf_cell_ft_p1.Border = iTextSharp.text.Rectangle.BOTTOM_BORDER | iTextSharp.text.Rectangle.TOP_BORDER;
                pdf_cell_ft_p2.Border = 0;
                pdf_cell_ft_p3.Border = iTextSharp.text.Rectangle.BOTTOM_BORDER | iTextSharp.text.Rectangle.TOP_BORDER;

                pdf_cell_ft_p.HorizontalAlignment = Element.ALIGN_LEFT;
                pdf_cell_ft_p1.HorizontalAlignment = Element.ALIGN_RIGHT;
                pdf_cell_ft_p2.HorizontalAlignment = Element.ALIGN_LEFT;
                pdf_cell_ft_p3.HorizontalAlignment = Element.ALIGN_RIGHT;

                //temp_word = "----------------";
                //print_pdf_line(cour_7_bold, temp_word, 230, -10);
                //print_pdf_line(cour_7_bold, temp_word, 500, -15);
                if (debitamount > 0)
                {
                    temp_word = Convert.ToString(debitamount);
                    pdf_cell_ft_p.Phrase = new Phrase(" ", cour_9);
                    pdf_cell_ft_p1.Phrase = new Phrase(temp_word, cour_9_red);
                    pdf_cell_ft_p2.Phrase = new Phrase(" ", cour_9);
                    pdf_cell_ft_p3.Phrase = new Phrase(temp_word, cour_9_red);

                    //print_pdf_line(cour_9_red, temp_word, para_IndentationLeft_position(200, temp_word, "cour_9_red"), -10);
                    // print_pdf_line(cour_9_red, temp_word, para_IndentationLeft_position(470, temp_word, "cour_9_red"), -15);
                }
                else if (creditamount > 0)
                {
                    temp_word = Convert.ToString(creditamount);
                    temp_word = String.Format("{0:0.00}", temp_word);
                    pdf_cell_ft_p.Phrase = new Phrase(" ", cour_9);
                    pdf_cell_ft_p1.Phrase = new Phrase(temp_word, cour_9_red);
                    pdf_cell_ft_p2.Phrase = new Phrase(" ", cour_9);
                    pdf_cell_ft_p3.Phrase = new Phrase(temp_word, cour_9_red);

                    //print_pdf_line(cour_9_red, temp_word, para_IndentationLeft_position(200, temp_word, "cour_9_red"), -10);
                    //print_pdf_line(cour_9_red, temp_word, para_IndentationLeft_position(470, temp_word, "cour_9_red"), -15);
                }
                //temp_word = "=========";
                //print_pdf_line(cour_7_bold, temp_word, 230, -10);
                //print_pdf_line(cour_7_bold, temp_word, 500, -15);
                pdfTablePnL.AddCell(pdf_cell_ft_p);
                pdfTablePnL.AddCell(pdf_cell_ft_p1);
                pdfTablePnL.AddCell(pdf_cell_ft_p2);
                pdfTablePnL.AddCell(pdf_cell_ft_p3);

                doc1.Add(pdfTablePnL);
            }

            #endregion Profit and Loss
            skip_balance_page_in_pdf();
            debitamount = 0;
            creditamount = 0;
            for (int i = 0; i < 6; i++)
            {
                temp_word = ConnectionWithAccess.company_details[i + 1];
                print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
            }
            temp_word = "-------------------------------------------------------";
            print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
            temp_word = Convert.ToString(Convert.ToInt32(Convert.ToString(dtBalShFrom.Text).Substring(dtBalShFrom.Text.Length - 4, 4)) + 1);
            temp_word2 = Convert.ToString(Convert.ToInt32(Convert.ToString(dtBalShTo.Text).Substring(dtBalShTo.Text.Length - 4, 4)) + 1);
            temp_word = "Assesment Year   #   " + temp_word + " - " + temp_word2;
            print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
            temp_word = "-------------------------------------------------------";
            print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
            temp_word = "Status : " + ConnectionWithAccess.company_details[24];
            print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
            temp_word = "Source of Income : " + ConnectionWithAccess.company_details[14];
            print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
            temp_word = ConnectionWithAccess.company_details[15];
            print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
            temp_word = ConnectionWithAccess.company_details[16];
            print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
            temp_word = "Period :" + dtBalShFrom.Text + "   -   " + dtBalShTo.Text;
            print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
            temp_word = "Books of Account's  : Regular Books of Account's";
            print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
            temp_word = "************************";
            print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
            temp_word = "Capital Account";
            print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
            temp_word = "************************";
            print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");

            #region Capital Account
            strQuery = new StringBuilder();
            ConnectionWithAccess.query = query_contains_for_capital_account_union(mprd); ;// strQuery.ToString();
            dtNewTable = ConnectionCommand.fGetDataTable();
            if (dtNewTable != null)
            {
                move_records_upward_to_empty_places(dtNewTable);
                PdfPTable pdfTableCA = new PdfPTable(4);
                pdfTableCA.HorizontalAlignment = Element.ALIGN_LEFT;
                pdfTableCA.WidthPercentage = 100;
                float[] widths_ca = new float[] { 200f, 100f, 200f, 100f };
                pdfTableCA.SetWidths(widths_ca);

                for (int i = 0; i < dtNewTable.Rows.Count; i++)
                {
                    PdfPCell pdf_cell = new PdfPCell();//new Phrase(strCell1, cour_9));
                    PdfPCell pdf_cell1 = new PdfPCell();//new Phrase(strCell2, cour_9));
                    PdfPCell pdf_cell2 = new PdfPCell();//new Phrase(strCell3, cour_9));
                    PdfPCell pdf_cell3 = new PdfPCell();
                    pdf_cell.Border = 0;
                    pdf_cell1.Border = 0;
                    pdf_cell2.Border = 0;
                    pdf_cell3.Border = 0;
                    pdf_cell.HorizontalAlignment = Element.ALIGN_LEFT;
                    pdf_cell1.HorizontalAlignment = Element.ALIGN_RIGHT;
                    pdf_cell2.HorizontalAlignment = Element.ALIGN_LEFT;
                    pdf_cell3.HorizontalAlignment = Element.ALIGN_RIGHT;

                    bool bInsert1Cell = false;
                    bool bInsert2Cell = false;

                    if (dtNewTable.Rows[i][3].ToString() != null && dtNewTable.Rows[i][3].ToString() != "")
                    {
                        temp_word = dtNewTable.Rows[i][3].ToString();
                        pdf_cell.Phrase = new Phrase(temp_word, cour_7_bold);
                        //print_pdf_line(cour_7_bold, temp_word, 15, 0);
                        temp_word = dtNewTable.Rows[i][5].ToString();
                        temp_word = String.Format("{0:0.00}", temp_word);
                        pdf_cell1.Phrase = new Phrase(temp_word, cour_7_bold);
                        //print_pdf_line(cour_7_bold, temp_word, para_IndentationLeft_position(200, temp_word, "cour_9"), -17);
                        pdfTableCA.AddCell(pdf_cell);
                        pdfTableCA.AddCell(pdf_cell1);
                        debitamount = debitamount + Convert.ToDouble(temp_word);
                        bInsert1Cell = true;
                    }
                    if (dtNewTable.Rows[i][6].ToString() != null && dtNewTable.Rows[i][6].ToString() != "")
                    {
                        temp_word = dtNewTable.Rows[i][6].ToString();
                        temp_word = String.Format("{0:0.00}", temp_word);
                        pdf_cell2.Phrase = new Phrase(temp_word, cour_7_bold);
                        //print_pdf_line(cour_7_bold, temp_word, 290, -17);
                        if (dtNewTable.Rows[i][8].ToString() != "")
                        {
                            temp_word = dtNewTable.Rows[i][8].ToString();
                            temp_word = String.Format("{0:0.00}", temp_word);
                            pdf_cell3.Phrase = new Phrase(temp_word, cour_7_bold);
                            //print_pdf_line(cour_7_bold, temp_word, para_IndentationLeft_position(470, temp_word, "cour_9"), -17);
                            creditamount = creditamount + Convert.ToDouble(temp_word);
                        }
                        pdfTableCA.AddCell(pdf_cell2);
                        pdfTableCA.AddCell(pdf_cell3);
                        bInsert2Cell = true;
                    }
                    if (bInsert1Cell && !bInsert2Cell)
                    {
                        pdf_cell2.Phrase = new Phrase(" ", cour_7_bold);
                        pdf_cell3.Phrase = new Phrase(" ", cour_7_bold);
                        pdfTableCA.AddCell(pdf_cell2);
                        pdfTableCA.AddCell(pdf_cell3);
                    }
                    if (bInsert2Cell && !bInsert1Cell)
                    {
                        pdf_cell.Phrase = new Phrase(" ", cour_7_bold);
                        pdf_cell1.Phrase = new Phrase(" ", cour_7_bold);
                        pdfTableCA.AddCell(pdf_cell);
                        pdfTableCA.AddCell(pdf_cell1);
                    }
                    bInsert1Cell = false;
                    bInsert2Cell = false;

                }
                debitamount = Math.Round(debitamount, 2);
                creditamount = Math.Round(creditamount, 2);
                if (debitamount != creditamount)
                {
                    if (debitamount > creditamount)
                    {
                        PdfPCell pdf_cell_gd = new PdfPCell();//new Phrase(strCell1, cour_9));
                        PdfPCell pdf_cell_gd1 = new PdfPCell();//new Phrase(strCell2, cour_9));
                        PdfPCell pdf_cell_gd2 = new PdfPCell();//new Phrase(strCell3, cour_9));
                        PdfPCell pdf_cell_gd3 = new PdfPCell();
                        pdf_cell_gd.Border = 0;
                        pdf_cell_gd1.Border = 0;
                        pdf_cell_gd2.Border = 0;
                        pdf_cell_gd3.Border = 0;
                        pdf_cell_gd.HorizontalAlignment = Element.ALIGN_LEFT;
                        pdf_cell_gd1.HorizontalAlignment = Element.ALIGN_RIGHT;
                        pdf_cell_gd2.HorizontalAlignment = Element.ALIGN_LEFT;
                        pdf_cell_gd3.HorizontalAlignment = Element.ALIGN_RIGHT;

                        temp_word = "Difference";
                        pdf_cell_gd.Phrase = new Phrase(temp_word, cour_7_bold);
                        //print_pdf_line(cour_7_bold, temp_word, 15, 0);
                        temp_word = Convert.ToString(debitamount - creditamount);
                        //insertGrossAmount("719999", " ", "Gross Profit", (debitamount - creditamount));
                        temp_word = String.Format("{0:0.00}", temp_word);
                        pdf_cell_gd1.Phrase = new Phrase(temp_word, cour_7_bold);
                        pdf_cell_gd2.Phrase = new Phrase(" ", cour_7_bold);
                        pdf_cell_gd3.Phrase = new Phrase(" ", cour_7_bold);

                        pdfTableCA.AddCell(pdf_cell_gd);
                        pdfTableCA.AddCell(pdf_cell_gd1);
                        pdfTableCA.AddCell(pdf_cell_gd2);
                        pdfTableCA.AddCell(pdf_cell_gd3);

                        //print_pdf_line(cour_9_red, temp_word, para_IndentationLeft_position(200, temp_word, "cour_9_red"), -17);
                        debitamount = creditamount;
                    }
                    else if (creditamount > debitamount)
                    {
                        PdfPCell pdf_cell_gl = new PdfPCell();//new Phrase(strCell1, cour_9));
                        PdfPCell pdf_cell_gl1 = new PdfPCell();//new Phrase(strCell2, cour_9));
                        PdfPCell pdf_cell_gl2 = new PdfPCell();//new Phrase(strCell3, cour_9));
                        PdfPCell pdf_cell_gl3 = new PdfPCell();
                        pdf_cell_gl.Border = 0;
                        pdf_cell_gl1.Border = 0;
                        pdf_cell_gl2.Border = 0;
                        pdf_cell_gl3.Border = 0;
                        pdf_cell_gl.HorizontalAlignment = Element.ALIGN_LEFT;
                        pdf_cell_gl1.HorizontalAlignment = Element.ALIGN_RIGHT;
                        pdf_cell_gl2.HorizontalAlignment = Element.ALIGN_LEFT;
                        pdf_cell_gl3.HorizontalAlignment = Element.ALIGN_RIGHT;

                        pdf_cell_gl.Phrase = new Phrase(" ", cour_7_bold);
                        pdf_cell_gl1.Phrase = new Phrase(" ", cour_7_bold);
                        temp_word = "Difference";
                        pdf_cell_gl2.Phrase = new Phrase(temp_word, cour_7_bold);

                        //print_pdf_line(cour_7_bold, temp_word, 290, 0);
                        temp_word = Convert.ToString(creditamount - debitamount);
                        //insertGrossAmount(creditamount - debitamount);
                        temp_word = String.Format("{0:0.00}", temp_word);
                        pdf_cell_gl3.Phrase = new Phrase(temp_word, cour_7_bold);
                        //print_pdf_line(cour_9_red, temp_word, para_IndentationLeft_position(470, temp_word, "cour_9_red"), -17);

                        pdfTableCA.AddCell(pdf_cell_gl);
                        pdfTableCA.AddCell(pdf_cell_gl1);
                        pdfTableCA.AddCell(pdf_cell_gl2);
                        pdfTableCA.AddCell(pdf_cell_gl3);

                        creditamount = debitamount;
                    }
                }
                //temp_word = "----------------";
                //print_pdf_line(cour_7_bold, temp_word, 230, -10);
                //print_pdf_line(cour_7_bold, temp_word, 500, -15);

                PdfPCell pdf_cell_ft_c = new PdfPCell();//new Phrase(strCell1, cour_9));
                PdfPCell pdf_cell_ft_c1 = new PdfPCell();//new Phrase(strCell2, cour_9));
                PdfPCell pdf_cell_ft_c2 = new PdfPCell();//new Phrase(strCell3, cour_9));
                PdfPCell pdf_cell_ft_c3 = new PdfPCell();
                pdf_cell_ft_c.Border = 0;
                pdf_cell_ft_c1.Border = iTextSharp.text.Rectangle.BOTTOM_BORDER | iTextSharp.text.Rectangle.TOP_BORDER;
                pdf_cell_ft_c2.Border = 0;
                pdf_cell_ft_c3.Border = iTextSharp.text.Rectangle.BOTTOM_BORDER | iTextSharp.text.Rectangle.TOP_BORDER;

                pdf_cell_ft_c.HorizontalAlignment = Element.ALIGN_LEFT;
                pdf_cell_ft_c1.HorizontalAlignment = Element.ALIGN_RIGHT;
                pdf_cell_ft_c2.HorizontalAlignment = Element.ALIGN_LEFT;
                pdf_cell_ft_c3.HorizontalAlignment = Element.ALIGN_RIGHT;
                if (debitamount > 0)
                {
                    temp_word = Convert.ToString(debitamount);
                    temp_word = String.Format("{0:0.00}", temp_word);
                    pdf_cell_ft_c.Phrase = new Phrase(" ", cour_9);
                    pdf_cell_ft_c1.Phrase = new Phrase(temp_word, cour_9_red);
                    pdf_cell_ft_c2.Phrase = new Phrase(" ", cour_9);
                    pdf_cell_ft_c3.Phrase = new Phrase(temp_word, cour_9_red);

                    //print_pdf_line(cour_9_red, temp_word, para_IndentationLeft_position(200, temp_word, "cour_9_red"), -10);
                    //print_pdf_line(cour_9_red, temp_word, para_IndentationLeft_position(470, temp_word, "cour_9_red"), -15);
                }
                else if (creditamount > 0)
                {
                    temp_word = Convert.ToString(creditamount);
                    temp_word = String.Format("{0:0.00}", temp_word);
                    pdf_cell_ft_c.Phrase = new Phrase(" ", cour_9);
                    pdf_cell_ft_c1.Phrase = new Phrase(temp_word, cour_9_red);
                    pdf_cell_ft_c2.Phrase = new Phrase(" ", cour_9);
                    pdf_cell_ft_c3.Phrase = new Phrase(temp_word, cour_9_red);
                    //print_pdf_line(cour_9_red, temp_word, para_IndentationLeft_position(200, temp_word, "cour_9_red"), -10);
                    //print_pdf_line(cour_9_red, temp_word, para_IndentationLeft_position(470, temp_word, "cour_9_red"), -15);
                }
                //temp_word = "=========";
                //print_pdf_line(cour_7_bold, temp_word, 230, -10);
                //print_pdf_line(cour_7_bold, temp_word, 500, -15);

                pdfTableCA.AddCell(pdf_cell_ft_c);
                pdfTableCA.AddCell(pdf_cell_ft_c1);
                pdfTableCA.AddCell(pdf_cell_ft_c2);
                pdfTableCA.AddCell(pdf_cell_ft_c3);

                doc1.Add(pdfTableCA);
            }
            #endregion Capital Account

            skip_balance_page_in_pdf();
            // Capital account finish from hear Balance Sheet
            debitamount = 0;
            creditamount = 0;
            for (int i = 0; i < 6; i++)
            {
                temp_word = ConnectionWithAccess.company_details[i + 1];
                print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
            }
            temp_word = "-------------------------------------------------------";
            print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
            temp_word = Convert.ToString(Convert.ToInt32(Convert.ToString(dtBalShFrom.Text).Substring(dtBalShFrom.Text.Length - 4, 4)) + 1);
            temp_word2 = Convert.ToString(Convert.ToInt32(Convert.ToString(dtBalShTo.Text).Substring(dtBalShTo.Text.Length - 4, 4)) + 1);
            temp_word = "Assesment Year   #   " + temp_word + " - " + temp_word2;
            print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
            temp_word = "-------------------------------------------------------";
            print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
            temp_word = "Status : " + ConnectionWithAccess.company_details[24];
            print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
            temp_word = "Source of Income : " + ConnectionWithAccess.company_details[14];
            print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
            temp_word = ConnectionWithAccess.company_details[15];
            print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
            temp_word = ConnectionWithAccess.company_details[16];
            print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
            temp_word = "Period :" + dtBalShFrom.Text + "   -   " + dtBalShTo.Text;
            print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
            temp_word = "Books of Account's  : Regular Books of Account's";
            print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
            temp_word = "************************";
            print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
            temp_word = "Balance Sheet";
            print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
            temp_word = "************************";
            print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");

            strQuery = new StringBuilder();
            ConnectionWithAccess.query = query_contains_for_balance_sheet_union(mprd); ;// strQuery.ToString();
            dtNewTable = ConnectionCommand.fGetDataTable();
            move_assets_inner_value_outside(dtNewTable);
            if (dtNewTable != null)
            {
                move_records_upward_to_empty_places(dtNewTable);
                PdfPTable pdfTableBS = new PdfPTable(5);
                pdfTableBS.HorizontalAlignment = Element.ALIGN_LEFT;
                pdfTableBS.WidthPercentage = 100;
                float[] widths_BS = new float[] { 200f, 100f, 150f, 75f, 75f };
                pdfTableBS.SetWidths(widths_BS);

                for (int i = 0; i < dtNewTable.Rows.Count; i++)
                {

                    PdfPCell pdf_cell = new PdfPCell();//new Phrase(strCell1, cour_9));
                    PdfPCell pdf_cell1 = new PdfPCell();//new Phrase(strCell2, cour_9));
                    PdfPCell pdf_cell2 = new PdfPCell();//new Phrase(strCell3, cour_9));
                    PdfPCell pdf_cell3 = new PdfPCell();
                    PdfPCell pdf_cell4 = new PdfPCell();
                    pdf_cell.Border = 0;
                    pdf_cell1.Border = 0;
                    pdf_cell2.Border = 0;
                    pdf_cell3.Border = 0;
                    pdf_cell4.Border = 0;
                    pdf_cell.HorizontalAlignment = Element.ALIGN_LEFT;
                    pdf_cell1.HorizontalAlignment = Element.ALIGN_RIGHT;
                    pdf_cell2.HorizontalAlignment = Element.ALIGN_LEFT;
                    pdf_cell3.HorizontalAlignment = Element.ALIGN_RIGHT;
                    pdf_cell4.HorizontalAlignment = Element.ALIGN_RIGHT;

                    if (dtNewTable.Rows[i][3].ToString() != "")
                    {
                        temp_word = dtNewTable.Rows[i][3].ToString();
                        pdf_cell.Phrase = new Phrase(temp_word, cour_7_bold);
                        //print_pdf_line(cour_7_bold, temp_word, 15, 0);
                        temp_word = dtNewTable.Rows[i][5].ToString();
                        temp_word = String.Format("{0:0.00}", temp_word);
                        pdf_cell1.Phrase = new Phrase(temp_word, cour_9_bold);
                        //print_pdf_line(cour_9_bold, temp_word, para_IndentationLeft_position(200, temp_word, "cour_9"), -17);
                        debitamount = debitamount + Convert.ToDouble(temp_word);
                    }
                    else
                    {
                        pdf_cell.Phrase = new Phrase(" ", cour_7_bold);
                        pdf_cell1.Phrase = new Phrase(" ", cour_7_bold);
                    }
                    pdfTableBS.AddCell(pdf_cell);
                    pdfTableBS.AddCell(pdf_cell1);
                    if (dtNewTable.Rows[i][6].ToString() != "")
                    {
                        if (dtNewTable.Rows[i][7].ToString() != "" && dtNewTable.Rows[i][8].ToString() != "")
                        {
                            if (Convert.ToDouble(dtNewTable.Rows[i][7].ToString()) == 0 && Convert.ToDouble(dtNewTable.Rows[i][8].ToString()) == 0)
                            {
                                temp_word = dtNewTable.Rows[i][7].ToString();
                                temp_word = dtNewTable.Rows[i][8].ToString();
                            }
                            else
                            {
                                //temp_word = dtNewTable.Rows[i][7].ToString();
                                //temp_word = dtNewTable.Rows[i][8].ToString();
                                temp_word = dtNewTable.Rows[i][6].ToString();
                                if (dtNewTable.Rows[i][3].ToString() != "")
                                    pdf_cell2.Phrase = new Phrase(temp_word, cour_7_bold);
                                //print_pdf_line(cour_7_bold, temp_word, 290, -17);
                                else
                                    pdf_cell2.Phrase = new Phrase(temp_word, cour_7_bold);
                                //print_pdf_line(cour_7_bold, temp_word, 290, 0);
                            }
                        }
                        if (dtNewTable.Rows[i][7].ToString() != "" && dtNewTable.Rows[i][8].ToString() != "")
                        {
                            if (Convert.ToDouble(dtNewTable.Rows[i][7].ToString()) != Convert.ToDouble(dtNewTable.Rows[i][8].ToString()))
                            {
                                if (dtNewTable.Rows[i][7].ToString() != "0.00")
                                {
                                    temp_word = dtNewTable.Rows[i][7].ToString();
                                    temp_word = String.Format("{0:0.00}", temp_word);
                                    pdf_cell3.Phrase = new Phrase(temp_word, cour_7_bold);
                                    //print_pdf_line(cour_9_bold, temp_word, para_IndentationLeft_position(410, temp_word, "cour_9"), -17);
                                }
                            }
                        }
                        if (dtNewTable.Rows[i][8].ToString() != "" && dtNewTable.Rows[i][8].ToString() != "0")
                        {
                            temp_word = dtNewTable.Rows[i][8].ToString();
                            temp_word = String.Format("{0:0.00}", temp_word);
                            pdf_cell4.Phrase = new Phrase(temp_word, cour_7_bold);
                            //print_pdf_line(cour_9_bold, temp_word, para_IndentationLeft_position(470, temp_word, "cour_9"), -17);
                            creditamount = creditamount + Convert.ToDouble(temp_word);
                        }
                    }
                    else
                    {
                        pdf_cell2.Phrase = new Phrase(" ", cour_7_bold);
                        pdf_cell3.Phrase = new Phrase(" ", cour_7_bold);
                        pdf_cell4.Phrase = new Phrase(" ", cour_7_bold);
                    }
                    pdfTableBS.AddCell(pdf_cell2);
                    pdfTableBS.AddCell(pdf_cell3);
                    pdfTableBS.AddCell(pdf_cell4);

                    if (dtNewTable.Rows[i][1].ToString() != null && dtNewTable.Rows[i][1].ToString() != "")
                    {
                        if (dtNewTable.Rows[i][1].ToString() == "719999")
                        {
                            temp_int = i;
                            i = dtNewTable.Rows.Count;
                        }
                    }
                }
                debitamount = Math.Round(debitamount, 0);
                creditamount = Math.Round(creditamount, 0);
                if (debitamount != creditamount)
                {
                    if (debitamount > creditamount)
                    {
                        PdfPCell pdf_cell_gb = new PdfPCell();//new Phrase(strCell1, cour_9));
                        PdfPCell pdf_cell_gb1 = new PdfPCell();//new Phrase(strCell2, cour_9));
                        PdfPCell pdf_cell_gb2 = new PdfPCell();//new Phrase(strCell3, cour_9));
                        PdfPCell pdf_cell_gb3 = new PdfPCell();
                        PdfPCell pdf_cell_gb4 = new PdfPCell();

                        pdf_cell_gb.Border = 0;
                        pdf_cell_gb1.Border = 0;
                        pdf_cell_gb2.Border = 0;
                        pdf_cell_gb3.Border = 0;
                        pdf_cell_gb4.Border = 0;
                        pdf_cell_gb.HorizontalAlignment = Element.ALIGN_LEFT;
                        pdf_cell_gb1.HorizontalAlignment = Element.ALIGN_RIGHT;
                        pdf_cell_gb2.HorizontalAlignment = Element.ALIGN_LEFT;
                        pdf_cell_gb3.HorizontalAlignment = Element.ALIGN_RIGHT;
                        pdf_cell_gb4.HorizontalAlignment = Element.ALIGN_RIGHT;

                        temp_word = "difference";
                        pdf_cell_gb.Phrase = new Phrase(temp_word, cour_7_bold);
                        //print_pdf_line(cour_7_bold, temp_word, 290, 0);
                        temp_word = Convert.ToString(debitamount - creditamount);
                        //insertGrossAmount(creditamount - debitamount);
                        temp_word = String.Format("{0:0.00}", temp_word);
                        pdf_cell_gb1.Phrase = new Phrase(temp_word, cour_9_red);
                        //print_pdf_line(cour_9_red, temp_word, para_IndentationLeft_position(470, temp_word, "cour_9_red"), -17);
                        pdf_cell_gb2.Phrase = new Phrase(" ", cour_7_bold);
                        pdf_cell_gb3.Phrase = new Phrase(" ", cour_7_bold);
                        pdf_cell_gb4.Phrase = new Phrase(" ", cour_7_bold);
                        creditamount = debitamount;

                        pdfTableBS.AddCell(pdf_cell_gb);
                        pdfTableBS.AddCell(pdf_cell_gb1);
                        pdfTableBS.AddCell(pdf_cell_gb2);
                        pdfTableBS.AddCell(pdf_cell_gb3);
                        pdfTableBS.AddCell(pdf_cell_gb4);
                    }
                    else if (creditamount > debitamount)
                    {
                        PdfPCell pdf_cell_gbl = new PdfPCell();//new Phrase(strCell1, cour_9));
                        PdfPCell pdf_cell_gbl1 = new PdfPCell();//new Phrase(strCell2, cour_9));
                        PdfPCell pdf_cell_gbl2 = new PdfPCell();//new Phrase(strCell3, cour_9));
                        PdfPCell pdf_cell_gbl3 = new PdfPCell();
                        PdfPCell pdf_cell_gbl4 = new PdfPCell();

                        pdf_cell_gbl.Border = 0;
                        pdf_cell_gbl1.Border = 0;
                        pdf_cell_gbl2.Border = 0;
                        pdf_cell_gbl3.Border = 0;
                        pdf_cell_gbl4.Border = 0;
                        pdf_cell_gbl.HorizontalAlignment = Element.ALIGN_LEFT;
                        pdf_cell_gbl1.HorizontalAlignment = Element.ALIGN_RIGHT;
                        pdf_cell_gbl2.HorizontalAlignment = Element.ALIGN_LEFT;
                        pdf_cell_gbl3.HorizontalAlignment = Element.ALIGN_RIGHT;
                        pdf_cell_gbl4.HorizontalAlignment = Element.ALIGN_RIGHT;

                        pdf_cell_gbl.Phrase = new Phrase(" ", cour_7_bold);
                        pdf_cell_gbl1.Phrase = new Phrase(" ", cour_7_bold);

                        temp_word = "difference";
                        pdf_cell_gbl2.Phrase = new Phrase(temp_word, cour_9_red);
                        pdf_cell_gbl3.Phrase = new Phrase(" ", cour_7_bold);
                        //print_pdf_line(cour_7_bold, temp_word, 15, 0);
                        temp_word = Convert.ToString(creditamount - debitamount);
                        //insertGrossAmount("719999", " ", "Gross Profit", (debitamount - creditamount));
                        temp_word = String.Format("{0:0.00}", temp_word);
                        pdf_cell_gbl4.Phrase = new Phrase(temp_word, cour_9_red);
                        //print_pdf_line(cour_9_red, temp_word, para_IndentationLeft_position(200, temp_word, "cour_9_red"), -17);
                        debitamount = creditamount;
                        pdfTableBS.AddCell(pdf_cell_gbl);
                        pdfTableBS.AddCell(pdf_cell_gbl1);
                        pdfTableBS.AddCell(pdf_cell_gbl2);
                        pdfTableBS.AddCell(pdf_cell_gbl3);
                        pdfTableBS.AddCell(pdf_cell_gbl4);
                    }
                }

                PdfPCell pdf_cell_ft_pl = new PdfPCell();//new Phrase(strCell1, cour_9));
                PdfPCell pdf_cell_ft_pl1 = new PdfPCell();//new Phrase(strCell2, cour_9));
                PdfPCell pdf_cell_ft_pl2 = new PdfPCell();//new Phrase(strCell3, cour_9));
                PdfPCell pdf_cell_ft_pl3 = new PdfPCell();
                PdfPCell pdf_cell_ft_pl4 = new PdfPCell();
                pdf_cell_ft_pl.Border = 0;
                pdf_cell_ft_pl1.Border = iTextSharp.text.Rectangle.BOTTOM_BORDER | iTextSharp.text.Rectangle.TOP_BORDER;
                pdf_cell_ft_pl2.Border = 0;
                pdf_cell_ft_pl3.Border = 0;
                pdf_cell_ft_pl4.Border = iTextSharp.text.Rectangle.BOTTOM_BORDER | iTextSharp.text.Rectangle.TOP_BORDER;

                pdf_cell_ft_pl.HorizontalAlignment = Element.ALIGN_LEFT;
                pdf_cell_ft_pl1.HorizontalAlignment = Element.ALIGN_RIGHT;
                pdf_cell_ft_pl2.HorizontalAlignment = Element.ALIGN_LEFT;
                pdf_cell_ft_pl3.HorizontalAlignment = Element.ALIGN_RIGHT;
                pdf_cell_ft_pl4.HorizontalAlignment = Element.ALIGN_RIGHT;

                //temp_word = "----------------";
                //print_pdf_line(cour_7_bold, temp_word, 230, -10);
                //print_pdf_line(cour_7_bold, temp_word, 500, -15);
                if (debitamount > 0)
                {
                    temp_word = Convert.ToString(debitamount);
                    temp_word = String.Format("{0:0.00}", temp_word);

                    pdf_cell_ft_pl.Phrase = new Phrase(" ", cour_9);
                    pdf_cell_ft_pl1.Phrase = new Phrase(temp_word, cour_9_red);
                    pdf_cell_ft_pl2.Phrase = new Phrase(" ", cour_9);
                    pdf_cell_ft_pl3.Phrase = new Phrase(" ", cour_9_red);
                    pdf_cell_ft_pl4.Phrase = new Phrase(temp_word, cour_9_red);

                    //print_pdf_line(cour_9_red, temp_word, para_IndentationLeft_position(200, temp_word, "cour_9_red"), -10);
                    //print_pdf_line(cour_9_red, temp_word, para_IndentationLeft_position(470, temp_word, "cour_9_red"), -15);
                }
                else if (creditamount > 0)
                {
                    temp_word = Convert.ToString(creditamount);
                    temp_word = String.Format("{0:0.00}", temp_word);
                    pdf_cell_ft_pl.Phrase = new Phrase(" ", cour_9);
                    pdf_cell_ft_pl1.Phrase = new Phrase(temp_word, cour_9_red);
                    pdf_cell_ft_pl2.Phrase = new Phrase(" ", cour_9);
                    pdf_cell_ft_pl3.Phrase = new Phrase(" ", cour_9_red);
                    pdf_cell_ft_pl4.Phrase = new Phrase(temp_word, cour_9_red);
                    //print_pdf_line(cour_9_red, temp_word, para_IndentationLeft_position(200, temp_word, "cour_9_red"), -10);
                    //print_pdf_line(cour_9_red, temp_word, para_IndentationLeft_position(470, temp_word, "cour_9_red"), -15);
                }

                pdfTableBS.AddCell(pdf_cell_ft_pl);
                pdfTableBS.AddCell(pdf_cell_ft_pl1);
                pdfTableBS.AddCell(pdf_cell_ft_pl2);
                pdfTableBS.AddCell(pdf_cell_ft_pl3);
                pdfTableBS.AddCell(pdf_cell_ft_pl4);

                doc1.Add(pdfTableBS);
                //temp_word = "=========";
                //print_pdf_line(cour_7_bold, temp_word, 230, -10);
                //print_pdf_line(cour_7_bold, temp_word, 500, -15);

            }
            doc1.Close();
            require_header_footer = true;
        }

        private DataTable move_records_upward_to_empty_places(DataTable dtTable)
        {
            DataTable dtTable_new = new DataTable();
            if (dtTable.Rows.Count > 0)
            {
                temp_int = 0;
                temp_int2 = 0;
                dtTable_new = dtTable;
                for (int i = 0; i < dtTable_new.Rows.Count; i++)
                {
                    if (dtTable_new.Rows[i][3].ToString() == "")
                    {
                        temp_int = i;
                        for (row_counter = i; row_counter < dtTable_new.Rows.Count; row_counter++)
                        {
                            if (dtTable_new.Rows[row_counter][3].ToString() != "")
                            {
                                dtTable_new.Rows[i][3] = dtTable.Rows[row_counter][3].ToString();
                                dtTable_new.Rows[i][4] = dtTable.Rows[row_counter][4].ToString();
                                dtTable_new.Rows[i][5] = dtTable.Rows[row_counter][5].ToString();
                                dtTable_new.Rows[row_counter][3] = "";
                                dtTable_new.Rows[row_counter][4] = 0;
                                dtTable_new.Rows[row_counter][5] = 0;
                                row_counter = dtTable_new.Rows.Count;
                            }
                        }
                    }
                }
                for (int i = 0; i < dtTable_new.Rows.Count; i++)
                {
                    if (dtTable_new.Rows[i][6].ToString() == "")
                    {
                        temp_int = i;
                        for (row_counter = i; row_counter < dtTable_new.Rows.Count; row_counter++)
                        {
                            if (dtTable_new.Rows[row_counter][6].ToString() != "")
                            {
                                dtTable_new.Rows[i][6] = dtTable.Rows[row_counter][6].ToString();
                                dtTable_new.Rows[i][7] = dtTable.Rows[row_counter][7].ToString();
                                dtTable_new.Rows[i][8] = dtTable.Rows[row_counter][8].ToString();
                                dtTable_new.Rows[row_counter][6] = "";
                                dtTable_new.Rows[row_counter][7] = 0;
                                dtTable_new.Rows[row_counter][8] = 0;
                                row_counter = dtTable_new.Rows.Count;
                            }
                        }
                    }
                }
                //for (int i = 0; i < dtTable_new.Rows.Count; i++)
                //{
                //    if (dtTable_new.Rows[i][4].ToString() != "")
                //        dtTable_new.Rows[i][4] =(int)Convert.ToDouble(dtTable_new.Rows[i][4].ToString()); // Math.Round(Convert.ToDouble(dtTable_new.Rows[i][4].ToString()), 0);
                //    if (dtTable_new.Rows[i][5].ToString() != "")
                //        dtTable_new.Rows[i][5] = (int)Convert.ToDouble(dtTable_new.Rows[i][5].ToString());
                //    if (dtTable_new.Rows[i][7].ToString() != "")
                //        dtTable_new.Rows[i][7] = (int)Convert.ToDouble(dtTable_new.Rows[i][7].ToString());
                //    if (dtTable_new.Rows[i][8].ToString() != "")
                //        dtTable_new.Rows[i][8] = (int)Convert.ToDouble(dtTable_new.Rows[i][8].ToString());
                //}
                //for (int i = 0; i < dtTable_new.Rows.Count; i++)
                //{
                //    if (dtTable_new.Rows[i][4].ToString() != "")
                //        dtTable_new.Rows[i][4] = Math.Floor(Convert.ToDouble(dtTable_new.Rows[i][4].ToString()));
                //    if (dtTable_new.Rows[i][5].ToString() != "")
                //        dtTable_new.Rows[i][5] = Math.Floor(Convert.ToDouble(dtTable_new.Rows[i][5].ToString()));
                //    if (dtTable_new.Rows[i][7].ToString() != "")
                //        dtTable_new.Rows[i][7] = Math.Floor(Convert.ToDouble(dtTable_new.Rows[i][7].ToString()));
                //    if (dtTable_new.Rows[i][8].ToString() != "")
                //        dtTable_new.Rows[i][8] = Math.Floor(Convert.ToDouble(dtTable_new.Rows[i][8].ToString()));
                //}
            }
            return dtTable;
        }

        private DataTable move_records_upward_to_empty_places_New(DataTable dtTable)
        {
            DataTable dtTable_new = new DataTable();
            if (dtTable.Rows.Count > 0)
            {
                temp_int = 0;
                temp_int2 = 0;
                dtTable_new = dtTable;
                for (int i = 0; i < dtTable_new.Rows.Count; i++)
                {
                    if (dtTable_new.Rows[i][3].ToString() == "")
                    {
                        temp_int = i;
                        for (row_counter = i; row_counter < dtTable_new.Rows.Count; row_counter++)
                        {
                            if (dtTable_new.Rows[row_counter][3].ToString() != "")
                            {
                                dtTable_new.Rows[i][3] = dtTable.Rows[row_counter][3].ToString();
                                dtTable_new.Rows[i][4] = dtTable.Rows[row_counter][4].ToString();
                                dtTable_new.Rows[i][5] = dtTable.Rows[row_counter][5].ToString();
                                dtTable_new.Rows[row_counter][3] = "";
                                dtTable_new.Rows[row_counter][4] = 0;
                                dtTable_new.Rows[row_counter][5] = 0;
                                row_counter = dtTable_new.Rows.Count;
                            }
                        }
                    }
                }
                for (int i = 0; i < dtTable_new.Rows.Count; i++)
                {
                    if (dtTable_new.Rows[i][6].ToString() == "")
                    {
                        temp_int = i;
                        for (row_counter = i; row_counter < dtTable_new.Rows.Count; row_counter++)
                        {
                            if (dtTable_new.Rows[row_counter][6].ToString() != "")
                            {
                                dtTable_new.Rows[i][6] = dtTable.Rows[row_counter][6].ToString();
                                dtTable_new.Rows[i][7] = dtTable.Rows[row_counter][7].ToString();
                                dtTable_new.Rows[i][8] = dtTable.Rows[row_counter][8].ToString();
                                dtTable_new.Rows[row_counter][6] = "";
                                dtTable_new.Rows[row_counter][7] = 0;
                                dtTable_new.Rows[row_counter][8] = 0;
                                row_counter = dtTable_new.Rows.Count;
                            }
                        }
                    }
                }
                //for (int i = 0; i < dtTable_new.Rows.Count; i++)
                //{
                //    if (dtTable_new.Rows[i][4].ToString() != "")
                //        dtTable_new.Rows[i][4] =(int)Convert.ToDouble(dtTable_new.Rows[i][4].ToString()); // Math.Round(Convert.ToDouble(dtTable_new.Rows[i][4].ToString()), 0);
                //    if (dtTable_new.Rows[i][5].ToString() != "")
                //        dtTable_new.Rows[i][5] = (int)Convert.ToDouble(dtTable_new.Rows[i][5].ToString());
                //    if (dtTable_new.Rows[i][7].ToString() != "")
                //        dtTable_new.Rows[i][7] = (int)Convert.ToDouble(dtTable_new.Rows[i][7].ToString());
                //    if (dtTable_new.Rows[i][8].ToString() != "")
                //        dtTable_new.Rows[i][8] = (int)Convert.ToDouble(dtTable_new.Rows[i][8].ToString());
                //}
                //for (int i = 0; i < dtTable_new.Rows.Count; i++)
                //{
                //    if (dtTable_new.Rows[i][4].ToString() != "")
                //        dtTable_new.Rows[i][4] = Math.Floor(Convert.ToDouble(dtTable_new.Rows[i][4].ToString()));
                //    if (dtTable_new.Rows[i][5].ToString() != "")
                //        dtTable_new.Rows[i][5] = Math.Floor(Convert.ToDouble(dtTable_new.Rows[i][5].ToString()));
                //    if (dtTable_new.Rows[i][7].ToString() != "")
                //        dtTable_new.Rows[i][7] = Math.Floor(Convert.ToDouble(dtTable_new.Rows[i][7].ToString()));
                //    if (dtTable_new.Rows[i][8].ToString() != "")
                //        dtTable_new.Rows[i][8] = Math.Floor(Convert.ToDouble(dtTable_new.Rows[i][8].ToString()));
                //}
            }
            return dtTable.Select("title <> ''").CopyToDataTable();
        }

        private DataTable move_assets_inner_value_outside(DataTable dtTable)
        {
            DataTable dtTable_new = new DataTable();
            if (dtTable.Rows.Count != null)
            {
                temp_double = 0;
                dtTable_new = dtTable;
                for (int i = 0; i < dtTable_new.Rows.Count; i++)
                {
                    if (dtTable_new.Rows[i][1].ToString() != null)
                    {
                        if (dtTable_new.Rows[i][1].ToString().Trim() != "")
                        {
                            if (dtTable_new.Rows[i][1].ToString().Substring(0, 1) == "1")
                            {
                                if (temp_word == null && temp_word != "")
                                    temp_word = dtTable_new.Rows[i][1].ToString();
                                if (dtTable_new.Rows[i][1].ToString().Trim() != temp_word)
                                {
                                    if (i > 0)
                                    {
                                        dtTable_new.Rows[i - 1][8] = Math.Round(temp_double, 2);
                                        temp_word = dtTable_new.Rows[i][1].ToString();
                                        temp_double = Convert.ToDouble(dtTable_new.Rows[i][7].ToString());
                                        //dtNewTable.Rows[i - 1][8] = (Convert.ToDouble(dtNewTable.Rows[i + 1][7].ToString())) + temp_double;
                                    }
                                    else
                                    {
                                        dtTable_new.Rows[0][8] = Math.Round(temp_double, 2);
                                        temp_word = dtTable_new.Rows[0][1].ToString();
                                        temp_double = Convert.ToDouble(dtTable_new.Rows[i][7].ToString());
                                    }
                                }
                                else
                                {
                                    temp_double = temp_double + Convert.ToDouble(dtTable_new.Rows[i][7].ToString());
                                }
                            }
                            else if (temp_double != 0)
                            {
                                if (i > 0)
                                    dtTable_new.Rows[i - 1][8] = Math.Round(temp_double, 2);
                                temp_double = 0;
                            }
                        }
                    }
                }
            }
            dtTable = dtTable_new; ;
            return dtTable;
        }

        private void create_list_for_sale_purchase_items(string book, string mprd, int md_c, string ma_n, string ms_a, string md_n)
        {
            temporary_list_array.Clear();
            if (book == "S")
                ConnectionWithAccess.query = "select [type], item_code, [title], q_cs, [box], qty, price, amount,cat,igst_per,hsn_code from " + ConnectionWithAccess.tablename[03] + " where prd= '" + mprd + "' and d_c = " + md_c + " and d_n = " + md_n + " and amount > 0";
            else if (book == "P")
                ConnectionWithAccess.query = "select [type], item_code, [title], q_cs, [box], qty, price, amount,cat,igst_per,hsn_code from " + ConnectionWithAccess.tablename[03] + " f3 where d_n = " + md_n + " and prd = '" + mprd + "' and d_c = " + md_c + " and s_a = '" + ms_a + "'";
            //ConnectionWithAccess.query = "select [type], item_code, [title], q_cs, [box], qty, price, amount,cat,igst_per,hsn_code from " + ConnectionWithAccess.tablename[03] + " where prd= '" + mprd + "' and d_c = " + md_c + " and d_n " + (md_n == string.Empty ? "is not null" : "= " + md_n) + " and a_n = '" + ma_n + "', and s_a = '" + ms_a + "' and amount > 0";
            DataTable dtData1 = ConnectionCommand.fGetDataTable();
            if (dtData1 != null && dtData1.Rows.Count > 0)
            {
                int mcolumncount = dtData1.Columns.Count;
                for (int iRowCount = 0; iRowCount < dtData1.Rows.Count; iRowCount++)
                {
                    temp_word = "";
                    for (int i = 0; i <= mcolumncount - 1; i++)
                    {
                        if (i == 6)
                        {
                            double.TryParse(dtData1.Rows[iRowCount][i].ToString(), out temp_double);
                            temp_word += temp_double + ",";
                        }
                        else
                            temp_word += dtData1.Rows[iRowCount][i].ToString().Replace(",", "_") + ",";
                    }
                    temp_word = temp_word.Substring(0, temp_word.Length - 1);
                    temp_word = temp_word.Replace(".00", "");
                    temporary_list_array.Add(temp_word);
                }
            }
        }

        private DataTable fGetSaleDetails(string book, string mprd, int md_c, string ma_n, string ms_a, string md_n)
        {
            if (book == "S")
                ConnectionWithAccess.query = "select [type], item_code, [title], q_cs, [box], qty, price, amount,cat,igst_per,hsn_code from " + ConnectionWithAccess.tablename[03] + " where prd= '" + mprd + "' and d_c = " + md_c + " and d_n = " + md_n + " and amount > 0";
            else if (book == "P")
                ConnectionWithAccess.query = "select [type], item_code, [title], q_cs, [box], qty, price, amount,cat,igst_per,hsn_code from " + ConnectionWithAccess.tablename[03] + " f3 where d_n = " + md_n + " and prd = '" + mprd + "' and d_c = " + md_c + " and s_a = '" + ms_a + "'";
            return ConnectionCommand.fGetDataTable();
        }

        private void skip_balance_page_in_pdf()
        {
            temp_int = 1000;
            var current_print_line_position = writer.GetVerticalPosition(false);
            if (current_print_line_position > 30)
            {
                for (row_counter = 0; row_counter < 100; row_counter++)
                {
                    current_print_line_position = writer.GetVerticalPosition(false);
                    if (current_print_line_position > temp_int)
                        row_counter = 100;
                    //if (current_print_line_position < 33)
                    //    row_counter = 100;
                    temp_int = Convert.ToInt32(current_print_line_position);
                    //if (row_counter != 100)
                    //{
                    para = new Paragraph();
                    para.Font = cour_7;
                    para.Add(" ");
                    para.SpacingBefore = 0;
                    doc1.Add(para);
                    //}
                }
                para = new Paragraph();
                para.Font = cour_7;
                para.Add(" ");
                para.SpacingBefore = -32;
                doc1.Add(para);
            }
        }

        private void generate_trial_balance()
        {
            if (BalShDGV.ColumnCount > 0)
            {
                report_filetype = cbBalShAc.Text + "_" + cbBalShPer.Text;
                trading_filename = ConnectionWithAccess.report_file_location + (report_filetype).Replace(" ", "");
                if (chb_add_datetime_in_output.Checked)
                    trading_filename += "_" + DateTime.Now.Day + "_" + DateTime.Now.Month + "_" + DateTime.Now.Year + "_" + DateTime.Now.TimeOfDay.Hours + "_" + DateTime.Now.TimeOfDay.Minutes;
                trading_filename += ".pdf";
                //doc1 = new Document(PageSize.A4, 10, 10, 35, 20);
                doc1 = new Document(PageSize.A4, 5, 5, 5, 5);
                FileStream FS1 = File.Create(trading_filename);
                writer = PdfWriter.GetInstance(doc1, FS1);
                doc1.Open();
                current_pdf_page_number = 1;
                add_header_footer = true;
                header_text_message = report_filetype + " " + " From : " + dtBalShFrom.Text + " to " + dtBalShTo.Text + " (" + cbBalShPer.Text + ")";
                //pdf_top_heading = ".          Discription                                                                                                 Debit                        Credit";
                print_header_footer();
                print_pdf_line(cour_7, "", 0, 0);
                Paragraph para = new Paragraph();
                int lineno = 0;
                debitamount = 0;
                creditamount = 0;

                PdfPTable pdfTable = new PdfPTable(3);
                pdfTable.HorizontalAlignment = Element.ALIGN_LEFT;
                pdfTable.WidthPercentage = 100;
                string cell_value = string.Empty;
                float[] widths = new float[] { 400f, 160f, 160f };
                pdfTable.SetWidths(widths);

                PdfPCell pdf_cell_h1 = new PdfPCell(new Phrase("Discription", cour_10));
                PdfPCell pdf_cell1_h2 = new PdfPCell(new Phrase("Debit", cour_10));
                PdfPCell pdf_cell2_h3 = new PdfPCell(new Phrase("Credit", cour_10));
                pdf_cell_h1.BorderWidthTop = 1;
                pdf_cell_h1.BorderWidthBottom = 1;
                pdf_cell_h1.BorderWidthLeft = 0;
                pdf_cell_h1.BorderWidthRight = 0;

                pdf_cell1_h2.BorderWidthTop = 1;
                pdf_cell1_h2.BorderWidthBottom = 1;
                pdf_cell1_h2.BorderWidthLeft = 0;
                pdf_cell1_h2.BorderWidthRight = 0;

                pdf_cell2_h3.BorderWidthTop = 1;
                pdf_cell2_h3.BorderWidthBottom = 1;
                pdf_cell2_h3.BorderWidthLeft = 0;
                pdf_cell2_h3.BorderWidthRight = 0;

                pdf_cell_h1.HorizontalAlignment = Element.ALIGN_LEFT;
                pdf_cell1_h2.HorizontalAlignment = Element.ALIGN_RIGHT;
                pdf_cell2_h3.HorizontalAlignment = Element.ALIGN_RIGHT;
                pdfTable.AddCell(pdf_cell_h1);
                pdfTable.AddCell(pdf_cell1_h2);
                pdfTable.AddCell(pdf_cell2_h3);
                //Adding DataRow
                for (row_pointer = 0; row_pointer < BalShDGV.RowCount - 1; row_pointer++)
                {
                    if (BalShDGV.Rows[row_pointer].Cells[3].Value != null && BalShDGV.Rows[row_pointer].Cells[3].Value.ToString() != "0" && BalShDGV.Rows[row_pointer].Cells[3].Value.ToString() != "")
                    {
                        string strCell1 = BalShDGV.Rows[row_pointer].Cells[2].Value.ToString().Trim();
                        string strCell2 = BalShDGV.Rows[row_pointer].Cells[3].Value.ToString().Trim();
                        string strCell3 = BalShDGV.Rows[row_pointer].Cells[4].Value.ToString().Trim();
                        if (strCell2 == "0.00" || strCell2 == "0" || string.IsNullOrEmpty(strCell2))
                            strCell2 = "";
                        if (strCell3 == "0.00" || strCell3 == "0" || string.IsNullOrEmpty(strCell3))
                            strCell3 = "";
                        PdfPCell pdf_cell = new PdfPCell(new Phrase(strCell1, cour_9));
                        PdfPCell pdf_cell1 = new PdfPCell(new Phrase(strCell2, cour_9));
                        PdfPCell pdf_cell2 = new PdfPCell(new Phrase(strCell3, cour_9));
                        pdf_cell.Border = 0;
                        pdf_cell1.Border = 0;
                        pdf_cell2.Border = 0;
                        pdf_cell.HorizontalAlignment = Element.ALIGN_LEFT;
                        pdf_cell1.HorizontalAlignment = Element.ALIGN_RIGHT;
                        pdf_cell2.HorizontalAlignment = Element.ALIGN_RIGHT;
                        pdfTable.AddCell(pdf_cell);
                        pdfTable.AddCell(pdf_cell1);
                        pdfTable.AddCell(pdf_cell2);
                        temp_word = BalShDGV.Rows[row_pointer].Cells[3].Value.ToString();
                        debitamount = debitamount + Convert.ToDouble(temp_word);
                        temp_word = BalShDGV.Rows[row_pointer].Cells[4].Value.ToString();
                        if (temp_word != "0.00" && temp_word != "")
                            creditamount = creditamount + Convert.ToDouble(temp_word);
                    }
                    lineno++;
                }
                //        
                PdfPCell pdf_cell_f1 = new PdfPCell(new Phrase("", cour_10));
                PdfPCell pdf_cell1_f2 = new PdfPCell(new Phrase(debitamount.ToString(), cour_10));
                PdfPCell pdf_cell2_f3 = new PdfPCell(new Phrase(creditamount.ToString(), cour_10));
                pdf_cell_f1.Border = 0;
                pdf_cell1_f2.BorderWidthTop = 1;
                pdf_cell1_f2.BorderWidthBottom = 1;
                pdf_cell1_f2.BorderWidthLeft = 0;
                pdf_cell1_f2.BorderWidthRight = 0;

                pdf_cell2_f3.BorderWidthTop = 1;
                pdf_cell2_f3.BorderWidthBottom = 1;
                pdf_cell2_f3.BorderWidthLeft = 0;
                pdf_cell2_f3.BorderWidthRight = 0;

                pdf_cell_f1.HorizontalAlignment = Element.ALIGN_LEFT;
                pdf_cell1_f2.HorizontalAlignment = Element.ALIGN_RIGHT;
                pdf_cell2_f3.HorizontalAlignment = Element.ALIGN_RIGHT;
                pdfTable.AddCell(pdf_cell_f1);
                pdfTable.AddCell(pdf_cell1_f2);
                pdfTable.AddCell(pdf_cell2_f3);

                //print_pdf_line(cour_10, "----------------", 330, -7);
                //print_pdf_line(cour_10, "----------------", 410, -17);
                //print_pdf_line(cour_10, debitamount.ToString(), para_IndentationLeft_position(300, debitamount.ToString(), "cour_10"), -7);
                //print_pdf_line(cour_10, creditamount.ToString(), para_IndentationLeft_position(380, creditamount.ToString(), "cour_10"), -17);
                //print_pdf_line(cour_10, "=========", 330, -7);
                //print_pdf_line(cour_10, "=========", 410, -17);
                print_footer();
                doc1.Add(pdfTable);

                doc1.Close();
            }
        }

        private void generate_trial_balance_old()
        {
            if (BalShDGV.ColumnCount > 0)
            {
                report_filetype = cbBalShAc.Text + "_" + cbBalShPer.Text;
                trading_filename = ConnectionWithAccess.report_file_location + (report_filetype).Replace(" ", "");
                if (chb_add_datetime_in_output.Checked)
                    trading_filename += "_" + DateTime.Now.Day + "_" + DateTime.Now.Month + "_" + DateTime.Now.Year + "_" + DateTime.Now.TimeOfDay.Hours + "_" + DateTime.Now.TimeOfDay.Minutes;
                trading_filename += ".pdf";
                doc1 = new Document(PageSize.A4, 5, 5, 5, 5);
                FileStream FS1 = File.Create(trading_filename);
                writer = PdfWriter.GetInstance(doc1, FS1);
                doc1.Open();
                current_pdf_page_number = 1;
                add_header_footer = true;
                header_text_message = report_filetype + " " + " From : " + dtBalShFrom.Text + " to " + dtBalShTo.Text + " (" + cbBalShPer.Text + ")";
                pdf_top_heading = ".          Discription                                                                                                 Debit                        Credit";
                Paragraph para = new Paragraph();
                int lineno = 0;
                debitamount = 0;
                creditamount = 0;
                for (row_pointer = 0; row_pointer < BalShDGV.RowCount - 1; row_pointer++)
                {
                    if (BalShDGV.Rows[row_pointer].Cells[3].Value != null && BalShDGV.Rows[row_pointer].Cells[3].Value.ToString() != "0" && BalShDGV.Rows[row_pointer].Cells[3].Value.ToString() != "")
                    {
                        temp_word = BalShDGV.Rows[row_pointer].Cells[2].Value.ToString();
                        print_pdf_line(cour_10, temp_word, 54, -5);
                        temp_word = BalShDGV.Rows[row_pointer].Cells[3].Value.ToString();
                        if (temp_word != "0.00" && temp_word != "")
                            print_pdf_line(cour_10, temp_word, para_IndentationLeft_position(300, temp_word, "cour_10"), -15);
                        debitamount = debitamount + Convert.ToDouble(temp_word);
                        temp_word = BalShDGV.Rows[row_pointer].Cells[4].Value.ToString();
                        if (temp_word != "0.00" && temp_word != "")
                        {
                            print_pdf_line(cour_10, temp_word, para_IndentationLeft_position(380, temp_word, "cour_10"), -15);
                            creditamount = creditamount + Convert.ToDouble(temp_word);
                        }
                    }
                    lineno++;
                }
                print_pdf_line(cour_10, "----------------", 330, -7);
                print_pdf_line(cour_10, "----------------", 410, -17);
                print_pdf_line(cour_10, debitamount.ToString(), para_IndentationLeft_position(300, debitamount.ToString(), "cour_10"), -7);
                print_pdf_line(cour_10, creditamount.ToString(), para_IndentationLeft_position(380, creditamount.ToString(), "cour_10"), -17);
                print_pdf_line(cour_10, "=========", 330, -7);
                print_pdf_line(cour_10, "=========", 410, -17);
                print_footer();
                doc1.Close();
            }
        }

        private void generate_trading_account()
        {
            if (BalShDGV.ColumnCount > 0)
            {
                report_filetype = cbBalShAc.Text + "_" + cbBalShPer.Text;
                trading_filename = ConnectionWithAccess.report_file_location + (report_filetype).Replace(" ", "");
                if (chb_add_datetime_in_output.Checked)
                    trading_filename += "_" + DateTime.Now.Day + "_" + DateTime.Now.Month + "_" + DateTime.Now.Year + "_" + DateTime.Now.TimeOfDay.Hours + "_" + DateTime.Now.TimeOfDay.Minutes;
                trading_filename += ".pdf";
                doc1 = new Document(PageSize.A4, 5, 5, 5, 5);
                FileStream FS1 = File.Create(trading_filename);
                writer = PdfWriter.GetInstance(doc1, FS1);
                doc1.Open();
                current_pdf_page_number = 1;
                pdf_top_heading = null;
                require_header_footer = false;
                Paragraph para = new Paragraph();
                for (int i = 0; i < 6; i++)
                {
                    temp_word = ConnectionWithAccess.company_details[i + 1];
                    print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
                }
                temp_word = "-------------------------------------------------------";
                print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
                temp_word = Convert.ToString(Convert.ToInt32(Convert.ToString(dtBalShFrom.Text).Substring(dtBalShFrom.Text.Length - 4, 4)) + 1);
                temp_word2 = Convert.ToString(Convert.ToInt32(Convert.ToString(dtBalShTo.Text).Substring(dtBalShTo.Text.Length - 4, 4)) + 1);
                temp_word = "Assesment Year   #   " + temp_word + " - " + temp_word2;
                print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
                temp_word = "-------------------------------------------------------";
                print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
                temp_word = "Status : " + ConnectionWithAccess.company_details[24];
                print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
                temp_word = "Source of Income : " + ConnectionWithAccess.company_details[14];
                print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
                temp_word = ConnectionWithAccess.company_details[15];
                print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
                temp_word = ConnectionWithAccess.company_details[16];
                print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
                temp_word = "Period :" + dtBalShFrom.Text + "   -   " + dtBalShTo.Text;
                print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
                temp_word = "Books of Account's  : Regular Books of Account's";
                print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
                temp_word = "************************";
                print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
                temp_word = "Trading Account";
                print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
                temp_word = "************************";
                print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
                debitamount = 0;
                creditamount = 0;
                if (BalShDGV.Rows.Count > 0)
                {
                    for (int i = 0; i < BalShDGV.Rows.Count - 1; i++)
                    {
                        if (BalShDGV.Rows[i].Cells[3].Value != null && BalShDGV.Rows[i].Cells[3].Value.ToString() != "")
                        {
                            temp_word = BalShDGV.Rows[i].Cells[3].Value.ToString().Trim();
                            print_pdf_line(cour_9, temp_word, 15, 0);
                            temp_word = BalShDGV.Rows[i].Cells[5].Value.ToString().Trim();
                            print_pdf_line(cour_9, temp_word, para_IndentationLeft_position(200, temp_word, "cour_9"), -17);
                            debitamount = debitamount + Convert.ToDouble(temp_word);
                        }
                        if (BalShDGV.Rows[i].Cells[6].Value != null && BalShDGV.Rows[i].Cells[6].Value.ToString() != "")
                        {
                            temp_word = BalShDGV.Rows[i].Cells[6].Value.ToString().Trim();
                            print_pdf_line(cour_9, temp_word, 290, 0);
                            temp_word = BalShDGV.Rows[i].Cells[8].Value.ToString().Trim();
                            print_pdf_line(cour_9, temp_word, para_IndentationLeft_position(470, temp_word, "cour_9"), -17);
                            creditamount = creditamount + Convert.ToDouble(temp_word);
                        }
                    }
                    debitamount = Math.Round(debitamount, 2);
                    creditamount = Math.Round(creditamount, 2);
                    if (debitamount == creditamount)
                    {
                    }
                    else
                    {
                        if (debitamount > creditamount)
                        {
                            temp_word = "Gross Profit";
                            print_pdf_line(cour_9, temp_word, 15, 0);
                            temp_word = Convert.ToString(debitamount - creditamount);
                            //insertGrossAmount("719999", " ", "Gross Profit", (debitamount - creditamount));
                            print_pdf_line(cour_9_red, temp_word, para_IndentationLeft_position(200, temp_word, "cour_9_red"), -17);
                            debitamount = creditamount;
                        }
                        else if (creditamount > debitamount)
                        {
                            temp_word = "Gross Loss";
                            print_pdf_line(cour_9, temp_word, 290, 0);
                            temp_word = Convert.ToString(creditamount - debitamount);
                            //insertGrossAmount(creditamount - debitamount);
                            print_pdf_line(cour_9_red, temp_word, para_IndentationLeft_position(470, temp_word, "cour_9_red"), -17);
                            creditamount = debitamount;
                        }
                    }
                    temp_word = "----------------";
                    print_pdf_line(cour_9, temp_word, 230, -10);
                    print_pdf_line(cour_9, temp_word, 500, -15);
                    if (debitamount > 0)
                    {
                        temp_word = Convert.ToString(debitamount);
                        print_pdf_line(cour_9_red, temp_word, para_IndentationLeft_position(200, temp_word, "cour_9_red"), -10);
                        print_pdf_line(cour_9_red, temp_word, para_IndentationLeft_position(470, temp_word, "cour_9_red"), -15);
                    }
                    else if (creditamount > 0)
                    {
                        temp_word = Convert.ToString(creditamount);
                        print_pdf_line(cour_9_red, temp_word, para_IndentationLeft_position(200, temp_word, "cour_9_red"), -10);
                        print_pdf_line(cour_9_red, temp_word, para_IndentationLeft_position(470, temp_word, "cour_9_red"), -15);
                    }
                    temp_word = "=========";
                    print_pdf_line(cour_9, temp_word, 230, -10);
                    print_pdf_line(cour_9, temp_word, 500, -15);
                }
                doc1.Close();
                require_header_footer = true;
            }
        }

        private void generate_profit_and_loss_account()
        {
            if (BalShDGV.ColumnCount > 0)
            {
                report_filetype = cbBalShAc.Text + "_" + cbBalShPer.Text;
                trading_filename = ConnectionWithAccess.report_file_location + (report_filetype).Replace(" ", "");
                if (chb_add_datetime_in_output.Checked)
                    trading_filename += "_" + DateTime.Now.Day + "_" + DateTime.Now.Month + "_" + DateTime.Now.Year + "_" + DateTime.Now.TimeOfDay.Hours + "_" + DateTime.Now.TimeOfDay.Minutes;
                trading_filename += ".pdf";
                doc1 = new Document(PageSize.A4, 5, 5, 5, 5);
                FileStream FS1 = File.Create(trading_filename);
                writer = PdfWriter.GetInstance(doc1, FS1);
                doc1.Open();
                current_pdf_page_number = 1;
                pdf_top_heading = null;
                require_header_footer = false;
                Paragraph para = new Paragraph();
                for (int i = 0; i < 6; i++)
                {
                    temp_word = ConnectionWithAccess.company_details[i + 1];
                    print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
                }
                temp_word = "-------------------------------------------------------";
                print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
                temp_word = Convert.ToString(Convert.ToInt32(Convert.ToString(dtBalShFrom.Text).Substring(dtBalShFrom.Text.Length - 4, 4)) + 1);
                temp_word2 = Convert.ToString(Convert.ToInt32(Convert.ToString(dtBalShTo.Text).Substring(dtBalShTo.Text.Length - 4, 4)) + 1);
                temp_word = "Assesment Year   #   " + temp_word + " - " + temp_word2;
                print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
                temp_word = "-------------------------------------------------------";
                print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
                temp_word = "Status : " + ConnectionWithAccess.company_details[24];
                print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
                temp_word = "Source of Income : " + ConnectionWithAccess.company_details[14];
                print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
                temp_word = ConnectionWithAccess.company_details[15];
                print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
                temp_word = ConnectionWithAccess.company_details[16];
                print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
                temp_word = "Period :" + dtBalShFrom.Text + "   -   " + dtBalShTo.Text;
                print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
                temp_word = "Books of Account's  : Regular Books of Account's";
                print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
                temp_word = "************************";
                print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
                temp_word = "Profit & Loss Account's";
                print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
                temp_word = "************************";
                print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
                debitamount = 0;
                creditamount = 0;
                if (BalShDGV.Rows.Count > 0)
                {
                    for (int i = 0; i < BalShDGV.Rows.Count - 1; i++)
                    {
                        if (BalShDGV.Rows[i].Cells[3].Value != null && BalShDGV.Rows[i].Cells[3].Value.ToString() != "")
                        {
                            temp_word = BalShDGV.Rows[i].Cells[3].Value.ToString().Trim();
                            print_pdf_line(cour_9, temp_word, 15, 0);
                            temp_word = BalShDGV.Rows[i].Cells[5].Value.ToString().Trim();
                            print_pdf_line(cour_9, temp_word, para_IndentationLeft_position(200, temp_word, "cour_9"), -17);
                            debitamount = debitamount + Convert.ToDouble(temp_word);
                        }
                        if (BalShDGV.Rows[i].Cells[6].Value != null && BalShDGV.Rows[i].Cells[6].Value.ToString() != "")
                        {
                            temp_word = BalShDGV.Rows[i].Cells[6].Value.ToString().Trim();
                            print_pdf_line(cour_9, temp_word, 290, 0);
                            temp_word = BalShDGV.Rows[i].Cells[8].Value.ToString().Trim();
                            print_pdf_line(cour_9, temp_word, para_IndentationLeft_position(470, temp_word, "cour_9"), -17);
                            creditamount = creditamount + Convert.ToDouble(temp_word);
                        }
                    }
                    if (debitamount == creditamount)
                    {
                    }
                    else
                    {
                        if (debitamount == creditamount)
                        {
                            temp_word = "Net Profit";
                            print_pdf_line(cour_9, temp_word, 15, 0);
                            temp_word = Convert.ToString(debitamount - creditamount);
                            //insertGrossAmount("719999", " ", "Gross Profit", (debitamount - creditamount));
                            print_pdf_line(cour_9_red, temp_word, para_IndentationLeft_position(200, temp_word, "cour_9_red"), -17);
                            debitamount = creditamount;
                        }
                        else
                        {
                            temp_word = "Net Loss";
                            print_pdf_line(cour_9, temp_word, 290, 0);
                            temp_word = Convert.ToString(creditamount - debitamount);
                            //insertGrossAmount(creditamount - debitamount);
                            print_pdf_line(cour_9_red, temp_word, para_IndentationLeft_position(470, temp_word, "cour_9_red"), -17);
                            creditamount = debitamount;
                        }
                    }
                    temp_word = "----------------";
                    print_pdf_line(cour_9, temp_word, 230, -10);
                    print_pdf_line(cour_9, temp_word, 500, -15);
                    if (debitamount > 0)
                    {
                        temp_word = Convert.ToString(debitamount);
                        print_pdf_line(cour_9_red, temp_word, para_IndentationLeft_position(200, temp_word, "cour_9_red"), -10);
                        print_pdf_line(cour_9_red, temp_word, para_IndentationLeft_position(470, temp_word, "cour_9_red"), -15);
                    }
                    else if (creditamount > 0)
                    {
                        temp_word = Convert.ToString(creditamount);
                        print_pdf_line(cour_9_red, temp_word, para_IndentationLeft_position(200, temp_word, "cour_9_red"), -10);
                        print_pdf_line(cour_9_red, temp_word, para_IndentationLeft_position(470, temp_word, "cour_9_red"), -15);
                    }
                    temp_word = "=========";
                    print_pdf_line(cour_9, temp_word, 230, -10);
                    print_pdf_line(cour_9, temp_word, 500, -15);
                }
                doc1.Close();
                require_header_footer = true;
            }
        }

        private void generate_capital_account()
        {
            if (BalShDGV.ColumnCount > 0)
            {
                report_filetype = cbBalShAc.Text + "_" + cbBalShPer.Text;
                trading_filename = ConnectionWithAccess.report_file_location + (report_filetype).Replace(" ", "");
                if (chb_add_datetime_in_output.Checked)
                    trading_filename += "_" + DateTime.Now.Day + "_" + DateTime.Now.Month + "_" + DateTime.Now.Year + "_" + DateTime.Now.TimeOfDay.Hours + "_" + DateTime.Now.TimeOfDay.Minutes;
                trading_filename += ".pdf";
                doc1 = new Document(PageSize.A4, 5, 5, 5, 5);
                FileStream FS1 = File.Create(trading_filename);
                writer = PdfWriter.GetInstance(doc1, FS1);
                doc1.Open();
                current_pdf_page_number = 1;
                pdf_top_heading = null;
                require_header_footer = false;
                Paragraph para = new Paragraph();
                for (int i = 0; i < 6; i++)
                {
                    temp_word = ConnectionWithAccess.company_details[i + 1];
                    print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
                }
                temp_word = "-------------------------------------------------------";
                print_pdf_line(cour_11, temp_word, 200, 0);
                temp_word = Convert.ToString(Convert.ToInt32(Convert.ToString(dtBalShFrom.Text).Substring(dtBalShFrom.Text.Length - 4, 4)) + 1);
                temp_word2 = Convert.ToString(Convert.ToInt32(Convert.ToString(dtBalShTo.Text).Substring(dtBalShTo.Text.Length - 4, 4)) + 1);
                temp_word = "Assesment Year   #   " + temp_word + " - " + temp_word2;
                print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
                temp_word = "-------------------------------------------------------";
                print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
                temp_word = "Status : " + ConnectionWithAccess.company_details[24];
                print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
                temp_word = "Source of Income : " + ConnectionWithAccess.company_details[14];
                print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
                temp_word = ConnectionWithAccess.company_details[15];
                print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
                temp_word = ConnectionWithAccess.company_details[16];
                print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
                temp_word = "Period :" + dtBalShFrom.Text + "   -   " + dtBalShTo.Text;
                print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
                temp_word = "Books of Account's  : Regular Books of Account's";
                print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
                temp_word = "************************";
                print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
                temp_word = "Capital Account";
                print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
                temp_word = "************************";
                print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
                debitamount = 0;
                creditamount = 0;
                if (BalShDGV.Rows.Count > 0)
                {
                    for (int i = 0; i < BalShDGV.Rows.Count; i++)
                    {
                        if (BalShDGV.Rows[i].Cells[3].Value != null)
                        {
                            if (BalShDGV.Rows[i].Cells[3].Value.ToString().Trim() != "")
                            {
                                temp_word = BalShDGV.Rows[i].Cells[3].Value.ToString().Trim();
                                print_pdf_line(cour_9, temp_word, 15, 0);
                                temp_word = BalShDGV.Rows[i].Cells[5].Value.ToString().Trim();
                                print_pdf_line(cour_9, temp_word, para_IndentationLeft_position(200, temp_word, "cour_9"), -17);
                                debitamount = debitamount + Convert.ToDouble(temp_word);
                            }
                        }
                        if (BalShDGV.Rows[i].Cells[6].Value != null)
                        {
                            if (BalShDGV.Rows[i].Cells[6].Value.ToString().Trim() != "")
                            {
                                temp_word = BalShDGV.Rows[i].Cells[6].Value.ToString().Trim();
                                print_pdf_line(cour_9, temp_word, 290, 0);
                                temp_word = BalShDGV.Rows[i].Cells[8].Value.ToString().Trim();
                                print_pdf_line(cour_9, temp_word, para_IndentationLeft_position(470, temp_word, "cour_9"), -17);
                                creditamount = creditamount + Convert.ToDouble(temp_word);
                            }
                        }
                    }
                    if (debitamount == creditamount)
                    {
                    }
                    else
                    {
                        if (debitamount == creditamount)
                        {
                            temp_word = "Difference";
                            print_pdf_line(cour_9, temp_word, 15, 0);
                            temp_word = Convert.ToString(debitamount - creditamount);
                            //insertGrossAmount("719999", " ", "Gross Profit", (debitamount - creditamount));
                            print_pdf_line(cour_9_red, temp_word, para_IndentationLeft_position(200, temp_word, "cour_9_red"), -17);
                            debitamount = creditamount;
                        }
                        else
                        {
                            temp_word = "Difference";
                            print_pdf_line(cour_9, temp_word, 290, 0);
                            temp_word = Convert.ToString(creditamount - debitamount);
                            //insertGrossAmount(creditamount - debitamount);
                            print_pdf_line(cour_9_red, temp_word, para_IndentationLeft_position(470, temp_word, "cour_9_red"), -17);
                            creditamount = debitamount;
                        }
                    }
                    temp_word = "----------------";
                    print_pdf_line(cour_9, temp_word, 230, -10);
                    print_pdf_line(cour_9, temp_word, 500, -15);
                    if (debitamount > 0)
                    {
                        temp_word = Convert.ToString(debitamount);
                        print_pdf_line(cour_9_red, temp_word, para_IndentationLeft_position(200, temp_word, "cour_9_red"), -10);
                        print_pdf_line(cour_9_red, temp_word, para_IndentationLeft_position(470, temp_word, "cour_9_red"), -15);
                    }
                    else if (creditamount > 0)
                    {
                        temp_word = Convert.ToString(creditamount);
                        print_pdf_line(cour_9_red, temp_word, para_IndentationLeft_position(200, temp_word, "cour_9_red"), -10);
                        print_pdf_line(cour_9_red, temp_word, para_IndentationLeft_position(470, temp_word, "cour_9_red"), -15);
                    }
                    temp_word = "=========";
                    print_pdf_line(cour_9, temp_word, 230, -10);
                    print_pdf_line(cour_9, temp_word, 500, -15);
                }
                doc1.Close();
                require_header_footer = true;
            }
        }

        private void generate_balance_sheet_account()
        {
            if (BalShDGV.ColumnCount > 0)
            {
                report_filetype = cbBalShAc.Text + "_" + cbBalShPer.Text;
                trading_filename = ConnectionWithAccess.report_file_location + (report_filetype).Replace(" ", "");
                if (chb_add_datetime_in_output.Checked)
                    trading_filename += "_" + DateTime.Now.Day + "_" + DateTime.Now.Month + "_" + DateTime.Now.Year + "_" + DateTime.Now.TimeOfDay.Hours + "_" + DateTime.Now.TimeOfDay.Minutes;
                trading_filename += ".pdf";
                doc1 = new Document(PageSize.A4, 5, 5, 5, 5);
                ConnectionWithAccess.create_file_folder(trading_filename);
                FileStream FS1 = File.Create(trading_filename);
                writer = PdfWriter.GetInstance(doc1, FS1);
                doc1.Open();
                current_pdf_page_number = 1;
                pdf_top_heading = null;
                require_header_footer = false;
                Paragraph para = new Paragraph();
                for (int i = 0; i < 6; i++)
                {
                    temp_word = ConnectionWithAccess.company_details[i + 1];
                    print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
                }
                temp_word = "-------------------------------------------------------";
                print_pdf_line(cour_11, temp_word, 200, 0);
                temp_word = Convert.ToString(Convert.ToInt32(Convert.ToString(dtBalShFrom.Text).Substring(dtBalShFrom.Text.Length - 4, 4)) + 1);
                temp_word2 = Convert.ToString(Convert.ToInt32(Convert.ToString(dtBalShTo.Text).Substring(dtBalShTo.Text.Length - 4, 4)) + 1);
                temp_word = "Assesment Year   #   " + temp_word + " - " + temp_word2;
                print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
                temp_word = "-------------------------------------------------------";
                print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
                temp_word = "Status : " + ConnectionWithAccess.company_details[24];
                print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
                temp_word = "Source of Income : " + ConnectionWithAccess.company_details[14];
                print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
                temp_word = ConnectionWithAccess.company_details[15];
                print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
                temp_word = ConnectionWithAccess.company_details[16];
                print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
                temp_word = "Period :" + dtBalShFrom.Text + "   -   " + dtBalShTo.Text;
                print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
                temp_word = "Books of Account's  : Regular Books of Account's";
                print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
                temp_word = "************************";
                print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
                temp_word = "Balance Sheet";
                print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
                temp_word = "************************";
                print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
                debitamount = 0;
                creditamount = 0;
                if (BalShDGV.Rows.Count > 0)
                {
                    PdfPTable pdfTable = new PdfPTable(BalShDGV.ColumnCount - 3);
                    pdfTable.HorizontalAlignment = Element.ALIGN_LEFT;
                    pdfTable.WidthPercentage = 100;
                    string cell_value = string.Empty;
                    float[] widths = new float[] { 450f, 120f, 140f, 400f, 140f, 140f };
                    pdfTable.SetWidths(widths);
                    //Adding DataRow
                    foreach (DataGridViewRow row in BalShDGV.Rows)
                    {
                        foreach (DataGridViewCell cell in row.Cells)
                        {
                            if (cell.ColumnIndex > 2)
                            {
                                cell_value = string.Empty;
                                if (cell.Value != null)
                                    cell_value = cell.Value.ToString();
                                if ((cell.ColumnIndex == 5 || cell.ColumnIndex == 7 || cell.ColumnIndex == 8) && cell_value == "0")
                                    cell_value = "";
                                PdfPCell pdf_cell = new PdfPCell(new Phrase(cell_value, cour_9));
                                pdf_cell.Border = 0;
                                if (cell.ColumnIndex == 4 || cell.ColumnIndex == 5 || cell.ColumnIndex == 7 || cell.ColumnIndex == 8)
                                {
                                    pdf_cell.HorizontalAlignment = Element.ALIGN_RIGHT;
                                }

                                pdfTable.AddCell(pdf_cell);
                            }
                        }
                        temp_word = null;
                        if (row.Cells[3].Value != null && row.Cells[3].Value.ToString() != "")
                        {
                            //temp_word = row.Cells[3].Value.ToString().Trim();
                            temp_word = row.Cells[5].Value.ToString().Trim();
                            temp_word = string.Format("{0:0.00}", Convert.ToDouble(temp_word));
                            debitamount = debitamount + Convert.ToDouble(temp_word);
                        }
                        if (row.Cells[6].Value != null && row.Cells[6].Value.ToString() != "")
                        {
                            temp_word = row.Cells[6].Value.ToString().Trim();
                            if (row.Cells[7].Value != null)
                            {
                                if (row.Cells[7].Value.ToString().Trim() != "")
                                {
                                    temp_word = row.Cells[7].Value.ToString().Trim();
                                    temp_word = string.Format("{0:0.00}", Convert.ToDouble(temp_word));
                                }
                            }
                            if (row.Cells[8].Value != null)
                            {
                                if (row.Cells[8].Value.ToString().Trim() != "")
                                {
                                    temp_word = row.Cells[8].Value.ToString().Trim();
                                    temp_word = string.Format("{0:0.00}", Convert.ToDouble(temp_word));
                                    creditamount = creditamount + Convert.ToDouble(temp_word);
                                }
                            }
                        }
                    }

                    if (debitamount == creditamount)
                    {
                    }
                    else
                    {
                        for (int k = 0; k < BalShDGV.Columns.Count; k++)
                        {
                            if (k == 6 || k == 8 || k == 3 || k == 5)
                            {
                                if (debitamount == creditamount)
                                {
                                    if (k == 3)
                                    {
                                        temp_word = "Difference";
                                        PdfPCell pdf_cell = new PdfPCell(new Phrase(temp_word, cour_9));
                                        pdf_cell.Border = 0;
                                        pdfTable.AddCell(pdf_cell);
                                    }
                                    else if (k == 5)
                                    {
                                        temp_word = Convert.ToString(debitamount - creditamount);
                                        temp_word = string.Format("{0:0.00}", Convert.ToDouble(temp_word));
                                        PdfPCell pdf_cell = new PdfPCell(new Phrase(temp_word, cour_9_red));
                                        pdf_cell.Border = 0;
                                        pdfTable.AddCell(pdf_cell);
                                    }
                                    else
                                    {
                                        temp_word = "";
                                        PdfPCell pdf_cell = new PdfPCell(new Phrase(temp_word, cour_9));
                                        pdf_cell.Border = 0;
                                        pdfTable.AddCell(pdf_cell);
                                    }

                                }
                                else
                                {
                                    if (k == 6)
                                    {
                                        temp_word = "Difference";
                                        PdfPCell pdf_cell = new PdfPCell(new Phrase(temp_word, cour_9));
                                        pdf_cell.Border = 0;
                                        pdfTable.AddCell(pdf_cell);
                                    }
                                    else if (k == 8)
                                    {
                                        temp_word = Convert.ToString(creditamount - debitamount);
                                        temp_word = string.Format("{0:0.00}", Convert.ToDouble(temp_word));
                                        PdfPCell pdf_cell = new PdfPCell(new Phrase(temp_word, cour_9_red));
                                        pdf_cell.Border = 0;
                                        pdfTable.AddCell(pdf_cell);
                                    }
                                    else
                                    {
                                        temp_word = "";
                                        PdfPCell pdf_cell = new PdfPCell(new Phrase(temp_word, cour_9));
                                        pdf_cell.Border = 0;
                                        pdfTable.AddCell(pdf_cell);
                                    }
                                }
                            }
                            else if (k > 2)
                            {
                                temp_word = "";
                                PdfPCell pdf_cell = new PdfPCell(new Phrase(temp_word, cour_9));
                                pdf_cell.Border = 0;
                                pdfTable.AddCell(pdf_cell);
                            }
                        }
                    }
                    for (int k1 = 0; k1 < BalShDGV.Columns.Count; k1++)
                    {
                        if (k1 == 5 || k1 == 8)
                        {
                            //if (debitamount > 0)
                            //{
                            //    temp_word = Convert.ToString(debitamount);
                            //    temp_word = string.Format("{0:0.00}", Convert.ToDouble(temp_word));
                            //    addCell(pdfTable, temp_word, 1, true, cour_9_red);
                            //}
                            //else if (creditamount > 0)
                            //{
                            //    temp_word = Convert.ToString(creditamount);
                            //    temp_word = string.Format("{0:0.00}", Convert.ToDouble(temp_word));
                            //    addCell(pdfTable, temp_word, 1, true, cour_9_red);
                            //}
                        }
                        else if (k1 > 2)
                        {
                            addCell(pdfTable, "", 1, false);
                        }
                    }
                    doc1.Add(pdfTable);
                }
                doc1.Close();
                require_header_footer = true;
            }
        }

        private void generate_balance_sheet_account_old()
        {
            if (BalShDGV.ColumnCount > 0)
            {
                report_filetype = cbBalShAc.Text + "_" + cbBalShPer.Text;
                trading_filename = ConnectionWithAccess.report_file_location + (report_filetype).Replace(" ", "");
                if (chb_add_datetime_in_output.Checked)
                    trading_filename += "_" + DateTime.Now.Day + "_" + DateTime.Now.Month + "_" + DateTime.Now.Year + "_" + DateTime.Now.TimeOfDay.Hours + "_" + DateTime.Now.TimeOfDay.Minutes;
                trading_filename += ".pdf";
                doc1 = new Document(PageSize.A4, 5, 5, 5, 5);
                FileStream FS1 = File.Create(trading_filename);
                writer = PdfWriter.GetInstance(doc1, FS1);
                doc1.Open();
                current_pdf_page_number = 1;
                pdf_top_heading = null;
                require_header_footer = false;
                Paragraph para = new Paragraph();
                for (int i = 0; i < 6; i++)
                {
                    temp_word = ConnectionWithAccess.company_details[i + 1];
                    print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
                }
                temp_word = "-------------------------------------------------------";
                print_pdf_line(cour_11, temp_word, 200, 0);
                temp_word = Convert.ToString(Convert.ToInt32(Convert.ToString(dtBalShFrom.Text).Substring(dtBalShFrom.Text.Length - 4, 4)) + 1);
                temp_word2 = Convert.ToString(Convert.ToInt32(Convert.ToString(dtBalShTo.Text).Substring(dtBalShTo.Text.Length - 4, 4)) + 1);
                temp_word = "Assesment Year   #   " + temp_word + " - " + temp_word2;
                print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
                temp_word = "-------------------------------------------------------";
                print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
                temp_word = "Status : " + ConnectionWithAccess.company_details[24];
                print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
                temp_word = "Source of Income : " + ConnectionWithAccess.company_details[14];
                print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
                temp_word = ConnectionWithAccess.company_details[15];
                print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
                temp_word = ConnectionWithAccess.company_details[16];
                print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
                temp_word = "Period :" + dtBalShFrom.Text + "   -   " + dtBalShTo.Text;
                print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
                temp_word = "Books of Account's  : Regular Books of Account's";
                print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
                temp_word = "************************";
                print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
                temp_word = "Balance Sheet";
                print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
                temp_word = "************************";
                print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
                debitamount = 0;
                creditamount = 0;
                if (BalShDGV.Rows.Count > 0)
                {
                    for (int i = 0; i < BalShDGV.Rows.Count; i++)
                    {
                        temp_word = null;
                        if (BalShDGV.Rows[i].Cells[3].Value != null && BalShDGV.Rows[i].Cells[3].Value.ToString() != "")
                        {
                            temp_word = BalShDGV.Rows[i].Cells[3].Value.ToString().Trim();
                            print_pdf_line(cour_9, temp_word, 15, 0);
                            temp_word = BalShDGV.Rows[i].Cells[5].Value.ToString().Trim();
                            print_pdf_line(cour_9, temp_word, para_IndentationLeft_position(200, temp_word, "cour_9"), -17);
                            debitamount = debitamount + Convert.ToDouble(temp_word);
                        }
                        if (BalShDGV.Rows[i].Cells[6].Value != null && BalShDGV.Rows[i].Cells[6].Value.ToString() != "")
                        {
                            temp_word = BalShDGV.Rows[i].Cells[6].Value.ToString().Trim();
                            print_pdf_line(cour_9, temp_word, 290, 0);
                            if (BalShDGV.Rows[i].Cells[7].Value != null)
                            {
                                if (BalShDGV.Rows[i].Cells[7].Value.ToString().Trim() != "")
                                {
                                    temp_word = BalShDGV.Rows[i].Cells[7].Value.ToString().Trim();
                                    print_pdf_line(cour_9, temp_word, para_IndentationLeft_position(420, temp_word, "cour_9"), -14);
                                    //creditamount = creditamount + Convert.ToDouble(temp_word);
                                }
                            }
                            if (BalShDGV.Rows[i].Cells[8].Value != null)
                            {
                                if (BalShDGV.Rows[i].Cells[8].Value.ToString().Trim() != "")
                                {
                                    temp_word = BalShDGV.Rows[i].Cells[8].Value.ToString().Trim();
                                    print_pdf_line(cour_9, temp_word, para_IndentationLeft_position(470, temp_word, "cour_9"), -17);
                                    creditamount = creditamount + Convert.ToDouble(temp_word);
                                }
                            }
                        }
                    }
                    if (debitamount == creditamount)
                    {
                    }
                    else
                    {
                        if (debitamount == creditamount)
                        {
                            temp_word = "Difference";
                            print_pdf_line(cour_9, temp_word, 15, 0);
                            temp_word = Convert.ToString(debitamount - creditamount);
                            //insertGrossAmount("719999", " ", "Gross Profit", (debitamount - creditamount));
                            print_pdf_line(cour_9_red, temp_word, para_IndentationLeft_position(200, temp_word, "cour_9_red"), -17);
                            debitamount = creditamount;
                        }
                        else
                        {
                            temp_word = "Difference";
                            print_pdf_line(cour_9, temp_word, 290, 0);
                            temp_word = Convert.ToString(creditamount - debitamount);
                            //insertGrossAmount(creditamount - debitamount);
                            print_pdf_line(cour_9_red, temp_word, para_IndentationLeft_position(470, temp_word, "cour_9_red"), -17);
                            creditamount = debitamount;
                        }
                    }
                    temp_word = "----------------";
                    print_pdf_line(cour_9, temp_word, 230, -10);
                    print_pdf_line(cour_9, temp_word, 500, -15);
                    if (debitamount > 0)
                    {
                        temp_word = Convert.ToString(debitamount);
                        print_pdf_line(cour_9_red, temp_word, para_IndentationLeft_position(200, temp_word, "cour_9_red"), -10);
                        print_pdf_line(cour_9_red, temp_word, para_IndentationLeft_position(470, temp_word, "cour_9_red"), -15);
                    }
                    else if (creditamount > 0)
                    {
                        temp_word = Convert.ToString(creditamount);
                        print_pdf_line(cour_9_red, temp_word, para_IndentationLeft_position(200, temp_word, "cour_9_red"), -10);
                        print_pdf_line(cour_9_red, temp_word, para_IndentationLeft_position(470, temp_word, "cour_9_red"), -15);
                    }
                    temp_word = "=========";
                    print_pdf_line(cour_9, temp_word, 230, -10);
                    print_pdf_line(cour_9, temp_word, 500, -15);
                }
                doc1.Close();
                require_header_footer = true;
            }
        }

        private void generate_tr_pl_capital_balance_sheet_together()
        {
            if (BalShDGV.ColumnCount > 0)
            {
                report_filetype = cbBalShAc.Text + "_" + cbBalShPer.Text;
                trading_filename = ConnectionWithAccess.report_file_location + (report_filetype).Replace(" ", "");
                if (chb_add_datetime_in_output.Checked)
                    trading_filename += "_" + DateTime.Now.Day + "_" + DateTime.Now.Month + "_" + DateTime.Now.Year + "_" + DateTime.Now.TimeOfDay.Hours + "_" + DateTime.Now.TimeOfDay.Minutes;
                trading_filename += ".pdf";
                doc1 = new Document(PageSize.A4, 5, 5, 5, 5);
                FileStream FS1 = File.Create(trading_filename);
                writer = PdfWriter.GetInstance(doc1, FS1);
                doc1.Open();
                current_pdf_page_number = 1;
                pdf_top_heading = null;
                require_header_footer = false;
                Paragraph para = new Paragraph();
                for (int i = 0; i < 6; i++)
                {
                    temp_word = ConnectionWithAccess.company_details[i + 1];
                    print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
                }
                temp_word = "-------------------------------------------------------";
                print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
                temp_word = Convert.ToString(Convert.ToInt32(Convert.ToString(dtBalShFrom.Text).Substring(dtBalShFrom.Text.Length - 4, 4)) + 1);
                temp_word2 = Convert.ToString(Convert.ToInt32(Convert.ToString(dtBalShTo.Text).Substring(dtBalShTo.Text.Length - 4, 4)) + 1);
                temp_word = "Assesment Year   #   " + temp_word + " - " + temp_word2;
                print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
                temp_word = "-------------------------------------------------------";
                print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
                temp_word = "Status : " + ConnectionWithAccess.company_details[24];
                print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
                temp_word = "Source of Income : " + ConnectionWithAccess.company_details[14];
                print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
                temp_word = ConnectionWithAccess.company_details[15];
                print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
                temp_word = ConnectionWithAccess.company_details[16];
                print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
                temp_word = "Period :" + dtBalShFrom.Text + "   -   " + dtBalShTo.Text;
                print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
                temp_word = "Books of Account's  : Regular Books of Account's";
                print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
                temp_word = "************************";
                print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
                temp_word = "Trading Account";
                print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
                temp_word = "************************";
                print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
                debitamount = 0;
                creditamount = 0;
                if (BalShDGV.Rows.Count > 0)
                {
                    for (int i = 0; i < BalShDGV.Rows.Count - 1; i++)
                    {
                        if (BalShDGV.Rows[i].Cells[3].Value != null && BalShDGV.Rows[i].Cells[3].Value.ToString() != "")
                        {
                            temp_word = BalShDGV.Rows[i].Cells[3].Value.ToString().Trim();
                            print_pdf_line(cour_9, temp_word, 15, 0);
                            temp_word = BalShDGV.Rows[i].Cells[5].Value.ToString().Trim();
                            print_pdf_line(cour_9, temp_word, para_IndentationLeft_position(200, temp_word, "cour_9"), -17);
                            debitamount = debitamount + Convert.ToDouble(temp_word);
                        }
                        if (BalShDGV.Rows[i].Cells[6].Value != null && BalShDGV.Rows[i].Cells[6].Value.ToString() != "")
                        {
                            temp_word = BalShDGV.Rows[i].Cells[6].Value.ToString().Trim();
                            print_pdf_line(cour_9, temp_word, 290, 0);
                            if (BalShDGV.Rows[i].Cells[8].Value != "")
                            {
                                temp_word = BalShDGV.Rows[i].Cells[8].Value.ToString().Trim();
                                print_pdf_line(cour_9, temp_word, para_IndentationLeft_position(470, temp_word, "cour_9"), -17);
                                creditamount = creditamount + Convert.ToDouble(temp_word);
                            }
                        }
                        if (BalShDGV.Rows[i].Cells[1].Value != null && BalShDGV.Rows[i].Cells[1].Value != "")
                        {
                            if (BalShDGV.Rows[i].Cells[1].Value.ToString() == "719999")
                            {
                                temp_int = i;
                                i = BalShDGV.Rows.Count;
                            }
                        }
                    }
                    debitamount = Math.Round(debitamount, 2);
                    creditamount = Math.Round(creditamount, 2);
                    if (debitamount == creditamount)
                    {
                    }
                    else
                    {
                        if (debitamount > creditamount)
                        {
                            temp_word = "Gross Profit";
                            print_pdf_line(cour_9, temp_word, 15, 0);
                            temp_word = Convert.ToString(debitamount - creditamount);
                            //insertGrossAmount("719999", " ", "Gross Profit", (debitamount - creditamount));
                            print_pdf_line(cour_9_red, temp_word, para_IndentationLeft_position(200, temp_word, "cour_9_red"), -17);
                            debitamount = creditamount;
                        }
                        else if (creditamount > debitamount)
                        {
                            temp_word = "Gross Loss";
                            print_pdf_line(cour_9, temp_word, 290, 0);
                            temp_word = Convert.ToString(creditamount - debitamount);
                            //insertGrossAmount(creditamount - debitamount);
                            print_pdf_line(cour_9_red, temp_word, para_IndentationLeft_position(470, temp_word, "cour_9_red"), -17);
                            creditamount = debitamount;
                        }
                    }
                    temp_word = "----------------";
                    print_pdf_line(cour_9, temp_word, 230, -10);
                    print_pdf_line(cour_9, temp_word, 500, -15);
                    if (debitamount > 0)
                    {
                        temp_word = Convert.ToString(debitamount);
                        print_pdf_line(cour_9_red, temp_word, para_IndentationLeft_position(200, temp_word, "cour_9_red"), -10);
                        print_pdf_line(cour_9_red, temp_word, para_IndentationLeft_position(470, temp_word, "cour_9_red"), -15);
                    }
                    else if (creditamount > 0)
                    {
                        temp_word = Convert.ToString(creditamount);
                        print_pdf_line(cour_9_red, temp_word, para_IndentationLeft_position(200, temp_word, "cour_9_red"), -10);
                        print_pdf_line(cour_9_red, temp_word, para_IndentationLeft_position(470, temp_word, "cour_9_red"), -15);
                    }
                    temp_word = "=========";
                    print_pdf_line(cour_9, temp_word, 230, -10);
                    print_pdf_line(cour_9, temp_word, 500, -15);
                }

                skip_balance_page_in_pdf();
                // trading account finish from hear proift and loss account

                for (int i = 0; i < 6; i++)
                {
                    temp_word = ConnectionWithAccess.company_details[i + 1];
                    print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
                }
                temp_word = "-------------------------------------------------------";
                print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
                temp_word = Convert.ToString(Convert.ToInt32(Convert.ToString(dtBalShFrom.Text).Substring(dtBalShFrom.Text.Length - 4, 4)) + 1);
                temp_word2 = Convert.ToString(Convert.ToInt32(Convert.ToString(dtBalShTo.Text).Substring(dtBalShTo.Text.Length - 4, 4)) + 1);
                temp_word = "Assesment Year   #   " + temp_word + " - " + temp_word2;
                print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
                temp_word = "-------------------------------------------------------";
                print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
                temp_word = "Status : " + ConnectionWithAccess.company_details[24];
                print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
                temp_word = "Source of Income : " + ConnectionWithAccess.company_details[14];
                print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
                temp_word = ConnectionWithAccess.company_details[15];
                print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
                temp_word = ConnectionWithAccess.company_details[16];
                print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
                temp_word = "Period :" + dtBalShFrom.Text + "   -   " + dtBalShTo.Text;
                print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
                temp_word = "Books of Account's  : Regular Books of Account's";
                print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
                temp_word = "************************";
                print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
                temp_word = "Profit & Loss Account";
                print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
                temp_word = "************************";
                print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
                debitamount = 0;
                creditamount = 0;
                if (BalShDGV.Rows.Count > 0)
                {
                    for (int i = temp_int + 1; i < BalShDGV.Rows.Count - 1; i++)
                    {
                        if (BalShDGV.Rows[i].Cells[3].Value != null && BalShDGV.Rows[i].Cells[3].Value.ToString() != "")
                        {
                            temp_word = BalShDGV.Rows[i].Cells[3].Value.ToString().Trim();
                            print_pdf_line(cour_9, temp_word, 15, 0);
                            temp_word = BalShDGV.Rows[i].Cells[5].Value.ToString().Trim();
                            print_pdf_line(cour_9, temp_word, para_IndentationLeft_position(200, temp_word, "cour_9"), -17);
                            debitamount = debitamount + Convert.ToDouble(temp_word);
                        }
                        if (BalShDGV.Rows[i].Cells[6].Value != null && BalShDGV.Rows[i].Cells[6].Value.ToString() != "")
                        {
                            temp_word = BalShDGV.Rows[i].Cells[6].Value.ToString().Trim();
                            print_pdf_line(cour_9, temp_word, 290, 0);
                            if (BalShDGV.Rows[i].Cells[8].Value.ToString() != "")
                            {
                                temp_word = BalShDGV.Rows[i].Cells[8].Value.ToString().Trim();
                                print_pdf_line(cour_9, temp_word, para_IndentationLeft_position(470, temp_word, "cour_9"), -17);
                                creditamount = creditamount + Convert.ToDouble(temp_word);
                            }
                        }
                        if (BalShDGV.Rows[i].Cells[1].Value != null && BalShDGV.Rows[i].Cells[1].Value != "")
                        {
                            if (BalShDGV.Rows[i].Cells[1].Value.ToString() == "7998")
                            {
                                temp_int = i;
                                i = BalShDGV.Rows.Count;
                            }
                        }
                    }
                    debitamount = Math.Round(debitamount, 2);
                    creditamount = Math.Round(creditamount, 2);
                    if (debitamount == creditamount)
                    {
                    }
                    else
                    {
                        if (debitamount > creditamount)
                        {
                            temp_word = "Net Profit";
                            print_pdf_line(cour_9, temp_word, 15, 0);
                            temp_word = Convert.ToString(debitamount - creditamount);
                            //insertGrossAmount("719999", " ", "Gross Profit", (debitamount - creditamount));
                            print_pdf_line(cour_9_red, temp_word, para_IndentationLeft_position(200, temp_word, "cour_9_red"), -17);
                            debitamount = creditamount;
                        }
                        else if (creditamount > debitamount)
                        {
                            temp_word = "Net Loss";
                            print_pdf_line(cour_9, temp_word, 290, 0);
                            temp_word = Convert.ToString(creditamount - debitamount);
                            //insertGrossAmount(creditamount - debitamount);
                            print_pdf_line(cour_9_red, temp_word, para_IndentationLeft_position(470, temp_word, "cour_9_red"), -17);
                            creditamount = debitamount;
                        }
                    }
                    temp_word = "----------------";
                    print_pdf_line(cour_9, temp_word, 230, -10);
                    print_pdf_line(cour_9, temp_word, 500, -15);
                    if (debitamount > 0)
                    {
                        temp_word = Convert.ToString(debitamount);
                        print_pdf_line(cour_9_red, temp_word, para_IndentationLeft_position(200, temp_word, "cour_9_red"), -10);
                        print_pdf_line(cour_9_red, temp_word, para_IndentationLeft_position(470, temp_word, "cour_9_red"), -15);
                    }
                    else if (creditamount > 0)
                    {
                        temp_word = Convert.ToString(creditamount);
                        print_pdf_line(cour_9_red, temp_word, para_IndentationLeft_position(200, temp_word, "cour_9_red"), -10);
                        print_pdf_line(cour_9_red, temp_word, para_IndentationLeft_position(470, temp_word, "cour_9_red"), -15);
                    }
                    temp_word = "=========";
                    print_pdf_line(cour_9, temp_word, 230, -10);
                    print_pdf_line(cour_9, temp_word, 500, -15);
                }
                skip_balance_page_in_pdf();
                // profit & loss Account finish from hear capital account


                for (int i = 0; i < 6; i++)
                {
                    temp_word = ConnectionWithAccess.company_details[i + 1];
                    print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
                }
                temp_word = "-------------------------------------------------------";
                print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
                temp_word = Convert.ToString(Convert.ToInt32(Convert.ToString(dtBalShFrom.Text).Substring(dtBalShFrom.Text.Length - 4, 4)) + 1);
                temp_word2 = Convert.ToString(Convert.ToInt32(Convert.ToString(dtBalShTo.Text).Substring(dtBalShTo.Text.Length - 4, 4)) + 1);
                temp_word = "Assesment Year   #   " + temp_word + " - " + temp_word2;
                print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
                temp_word = "-------------------------------------------------------";
                print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
                temp_word = "Status : " + ConnectionWithAccess.company_details[24];
                print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
                temp_word = "Source of Income : " + ConnectionWithAccess.company_details[14];
                print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
                temp_word = ConnectionWithAccess.company_details[15];
                print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
                temp_word = ConnectionWithAccess.company_details[16];
                print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
                temp_word = "Period :" + dtBalShFrom.Text + "   -   " + dtBalShTo.Text;
                print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
                temp_word = "Books of Account's  : Regular Books of Account's";
                print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
                temp_word = "************************";
                print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
                temp_word = "Capital Account";
                print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
                temp_word = "************************";
                print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
                debitamount = 0;
                creditamount = 0;
                if (BalShDGV.Rows.Count > 0)
                {
                    for (int i = temp_int + 1; i < BalShDGV.Rows.Count - 1; i++)
                    {
                        if (BalShDGV.Rows[i].Cells[3].Value != null && BalShDGV.Rows[i].Cells[3].Value.ToString() != "")
                        {
                            temp_word = BalShDGV.Rows[i].Cells[3].Value.ToString().Trim();
                            print_pdf_line(cour_9, temp_word, 15, 0);
                            temp_word = BalShDGV.Rows[i].Cells[5].Value.ToString().Trim();
                            print_pdf_line(cour_9, temp_word, para_IndentationLeft_position(200, temp_word, "cour_9"), -17);
                            debitamount = debitamount + Convert.ToDouble(temp_word);
                        }
                        if (BalShDGV.Rows[i].Cells[6].Value != null && BalShDGV.Rows[i].Cells[6].Value.ToString() != "")
                        {
                            temp_word = BalShDGV.Rows[i].Cells[6].Value.ToString().Trim();
                            print_pdf_line(cour_9, temp_word, 290, 0);
                            if (BalShDGV.Rows[i].Cells[8].Value != "")
                            {
                                temp_word = BalShDGV.Rows[i].Cells[8].Value.ToString().Trim();
                                print_pdf_line(cour_9, temp_word, para_IndentationLeft_position(470, temp_word, "cour_9"), -17);
                                creditamount = creditamount + Convert.ToDouble(temp_word);
                            }
                        }
                        if (BalShDGV.Rows[i].Cells[1].Value != null && BalShDGV.Rows[i].Cells[1].Value != "")
                        {
                            if (BalShDGV.Rows[i].Cells[1].Value.ToString() == "3001" && BalShDGV.Rows[i].Cells[2].Value.ToString() == "@@@")
                            {
                                temp_int = i;
                                i = BalShDGV.Rows.Count;
                            }
                        }
                    }
                    debitamount = Math.Round(debitamount, 2);
                    creditamount = Math.Round(creditamount, 2);
                    if (debitamount == creditamount)
                    {
                    }
                    else
                    {
                        if (debitamount > creditamount)
                        {
                            temp_word = "Difference";
                            print_pdf_line(cour_9, temp_word, 15, 0);
                            temp_word = Convert.ToString(debitamount - creditamount);
                            //insertGrossAmount("719999", " ", "Gross Profit", (debitamount - creditamount));
                            print_pdf_line(cour_9_red, temp_word, para_IndentationLeft_position(200, temp_word, "cour_9_red"), -17);
                            debitamount = creditamount;
                        }
                        else if (creditamount > debitamount)
                        {
                            temp_word = "Difference";
                            print_pdf_line(cour_9, temp_word, 290, 0);
                            temp_word = Convert.ToString(creditamount - debitamount);
                            //insertGrossAmount(creditamount - debitamount);
                            print_pdf_line(cour_9_red, temp_word, para_IndentationLeft_position(470, temp_word, "cour_9_red"), -17);
                            creditamount = debitamount;
                        }
                    }
                    temp_word = "----------------";
                    print_pdf_line(cour_9, temp_word, 230, -10);
                    print_pdf_line(cour_9, temp_word, 500, -15);
                    if (debitamount > 0)
                    {
                        temp_word = Convert.ToString(debitamount);
                        print_pdf_line(cour_9_red, temp_word, para_IndentationLeft_position(200, temp_word, "cour_9_red"), -10);
                        print_pdf_line(cour_9_red, temp_word, para_IndentationLeft_position(470, temp_word, "cour_9_red"), -15);
                    }
                    else if (creditamount > 0)
                    {
                        temp_word = Convert.ToString(creditamount);
                        print_pdf_line(cour_9_red, temp_word, para_IndentationLeft_position(200, temp_word, "cour_9_red"), -10);
                        print_pdf_line(cour_9_red, temp_word, para_IndentationLeft_position(470, temp_word, "cour_9_red"), -15);
                    }
                    temp_word = "=========";
                    print_pdf_line(cour_9, temp_word, 230, -10);
                    print_pdf_line(cour_9, temp_word, 500, -15);
                }

                skip_balance_page_in_pdf();
                //capital account account finish from hear Balance Sheet


                for (int i = 0; i < 6; i++)
                {
                    temp_word = ConnectionWithAccess.company_details[i + 1];
                    print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
                }
                temp_word = "-------------------------------------------------------";
                print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
                temp_word = Convert.ToString(Convert.ToInt32(Convert.ToString(dtBalShFrom.Text).Substring(dtBalShFrom.Text.Length - 4, 4)) + 1);
                temp_word2 = Convert.ToString(Convert.ToInt32(Convert.ToString(dtBalShTo.Text).Substring(dtBalShTo.Text.Length - 4, 4)) + 1);
                temp_word = "Assesment Year   #   " + temp_word + " - " + temp_word2;
                print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
                temp_word = "-------------------------------------------------------";
                print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
                temp_word = "Status : " + ConnectionWithAccess.company_details[24];
                print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
                temp_word = "Source of Income : " + ConnectionWithAccess.company_details[14];
                print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
                temp_word = ConnectionWithAccess.company_details[15];
                print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
                temp_word = ConnectionWithAccess.company_details[16];
                print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
                temp_word = "Period :" + dtBalShFrom.Text + "   -   " + dtBalShTo.Text;
                print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
                temp_word = "Books of Account's  : Regular Books of Account's";
                print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
                temp_word = "************************";
                print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
                temp_word = "Balance Sheet Account";
                print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
                temp_word = "************************";
                print_pdf_line_at_center(cour_11, temp_word, 0, "cour_11");
                debitamount = 0;
                creditamount = 0;
                if (BalShDGV.Rows.Count > 0)
                {
                    for (int i = temp_int + 1; i < BalShDGV.Rows.Count - 1; i++)
                    {
                        if (BalShDGV.Rows[i].Cells[3].Value != null && BalShDGV.Rows[i].Cells[3].Value.ToString() != "")
                        {
                            temp_word = BalShDGV.Rows[i].Cells[3].Value.ToString().Trim();
                            print_pdf_line(cour_9, temp_word, 15, 0);
                            temp_word = BalShDGV.Rows[i].Cells[5].Value.ToString().Trim();
                            print_pdf_line(cour_9, temp_word, para_IndentationLeft_position(200, temp_word, "cour_9"), -17);
                            debitamount = debitamount + Convert.ToDouble(temp_word);
                        }
                        if (BalShDGV.Rows[i].Cells[6].Value != null && BalShDGV.Rows[i].Cells[6].Value.ToString() != "")
                        {
                            temp_word = BalShDGV.Rows[i].Cells[6].Value.ToString().Trim();
                            print_pdf_line(cour_9, temp_word, 290, 0);
                            if (BalShDGV.Rows[i].Cells[8].Value != "")
                            {
                                temp_word = BalShDGV.Rows[i].Cells[8].Value.ToString().Trim();
                                print_pdf_line(cour_9, temp_word, para_IndentationLeft_position(470, temp_word, "cour_9"), -17);
                                creditamount = creditamount + Convert.ToDouble(temp_word);
                            }
                        }
                        //if (BalShDGV.Rows[i].Cells[1].Value != null && BalShDGV.Rows[i].Cells[1].Value != "")
                        //{
                        //    if (BalShDGV.Rows[i].Cells[1].Value.ToString() == "3001" && BalShDGV.Rows[i].Cells[2].Value.ToString() == "@@@")
                        //    {
                        //        temp_int = i;
                        //        i = BalShDGV.Rows.Count;
                        //    }
                        //}
                    }
                    debitamount = Math.Round(debitamount, 2);
                    creditamount = Math.Round(creditamount, 2);
                    if (debitamount == creditamount)
                    {
                    }
                    else
                    {
                        if (debitamount > creditamount)
                        {
                            temp_word = "Difference";
                            print_pdf_line(cour_9, temp_word, 15, 0);
                            temp_word = Convert.ToString(debitamount - creditamount);
                            //insertGrossAmount("719999", " ", "Gross Profit", (debitamount - creditamount));
                            print_pdf_line(cour_9_red, temp_word, para_IndentationLeft_position(200, temp_word, "cour_9_red"), -17);
                            debitamount = creditamount;
                        }
                        else if (creditamount > debitamount)
                        {
                            temp_word = "Difference";
                            print_pdf_line(cour_9, temp_word, 290, 0);
                            temp_word = Convert.ToString(creditamount - debitamount);
                            //insertGrossAmount(creditamount - debitamount);
                            print_pdf_line(cour_9_red, temp_word, para_IndentationLeft_position(470, temp_word, "cour_9_red"), -17);
                            creditamount = debitamount;
                        }
                    }
                    temp_word = "----------------";
                    print_pdf_line(cour_9, temp_word, 230, -10);
                    print_pdf_line(cour_9, temp_word, 500, -15);
                    if (debitamount > 0)
                    {
                        temp_word = Convert.ToString(debitamount);
                        print_pdf_line(cour_9_red, temp_word, para_IndentationLeft_position(200, temp_word, "cour_9_red"), -10);
                        print_pdf_line(cour_9_red, temp_word, para_IndentationLeft_position(470, temp_word, "cour_9_red"), -15);
                    }
                    else if (creditamount > 0)
                    {
                        temp_word = Convert.ToString(creditamount);
                        print_pdf_line(cour_9_red, temp_word, para_IndentationLeft_position(200, temp_word, "cour_9_red"), -10);
                        print_pdf_line(cour_9_red, temp_word, para_IndentationLeft_position(470, temp_word, "cour_9_red"), -15);
                    }
                    temp_word = "=========";
                    print_pdf_line(cour_9, temp_word, 230, -10);
                    print_pdf_line(cour_9, temp_word, 500, -15);
                }
                doc1.Close();
                require_header_footer = true;
            }
        }

        public static int para_IndentationLeft_position(int position, string value, string font)
        {
            //if (Convert.ToDouble(value) == 0.00)
            //    position += 0;
            //  we have to add 75 in all position to make it in correct position.

            if (value == "" || value == null) { value = " "; }
            if (value.Length <= 20)
            {
                if (font.Substring(0, 6) == "cour_7")
                {
                    var cellArray = ("80,74,69,65,61,57,53,50,46,42,38,34,30,26,22,18,14,4,-1,-6,-11,-16,-21,-26,-31,-39,-48").Split(new[] { ',' });
                    position = position + Convert.ToInt32(cellArray[value.Length]);
                }
                else if (font.Substring(0, 6) == "cour_9")
                {
                    var cellArray = ("80,74,69,64,59,54,49,45,39,34,29,24,19,14,9,4,-1,-6,-11,-16,-21,-26,-31, -40").Split(new[] { ',' });
                    position = position + Convert.ToInt32(cellArray[value.Length]);
                }
                else if (font.Substring(0, 7) == "cour_10")
                {
                    var cellArray = ("80,74,69,64,58,52,47,41,36,30,25,19,14,8,7,4,-1,-6,-11,-16,-21,-26,-31").Split(new[] { ',' });
                    position = position + Convert.ToInt32(cellArray[value.Length]);
                }
                else if (font.Substring(0, 7) == "cour_11")
                {
                    var cellArray = ("0,74,68,62,56,50,44,37,31,25,19,13,6,0,-5,-12,-18, -24, -30 , -36").Split(new[] { ',' });
                    position = position + Convert.ToInt32(cellArray[value.Length]);
                }
                else if (font.Substring(0, 7) == "cour_15")
                {
                    var cellArray = ("0,72,61,53,45,36,29,20,11,4,-5,-14,-22,-31,-39,-48").Split(new[] { ',' });
                    position = position + Convert.ToInt32(cellArray[value.Length]);
                }
                else if (font.Substring(0, 7) == "cour_20")
                {
                    var cellArray = ("0,67,56,45,35,24,13,1,-11,-22,-33,-44,-55,-66,-77,-88").Split(new[] { ',' });
                    position = position + Convert.ToInt32(cellArray[value.Length]);
                }
            }
            else
            {
                position = 0;
            }
            return position;
        }
        #endregion

        private double get_account_balance_from_51(string prd, string a_n, string s_a)
        {
            temp_double = 0;
            isRecord = 0;
            if (a_n.Length > 1)
            {
                if (a_n.Substring(0, 1) == "%")
                {
                    list_of_balance_amount.Clear();
                    a_n = a_n.Substring(1, a_n.Length - 1);
                    if (s_a == "@@@")
                        ConnectionWithAccess.query = "select amt from " + ConnectionWithAccess.tablename[51] + " where prd = '" + prd + "' and a_n like '" + a_n + "%' and s_a = '@@@'";
                    else
                        ConnectionWithAccess.query = "select amt from " + ConnectionWithAccess.tablename[51] + " where prd = '" + prd + "' and a_n = '" + a_n + "' and s_a like '" + s_a + "%'";
                    DataTable dtData1 = ConnectionCommand.fGetDataTable();
                    if (dtData1 != null && dtData1.Rows.Count > 0)
                    {
                        for (int iRowCount = 0; iRowCount < dtData1.Rows.Count; iRowCount++)
                        {
                            list_of_balance_amount.Add(dtData1.Rows[iRowCount][0].ToString());
                        }
                        temp_double = 0;
                        for (int i = 0; i < list_of_balance_amount.Count; i++)
                        {
                            temp_double = temp_double + Convert.ToDouble(list_of_balance_amount[i]);
                        }
                    }
                }
                else
                {
                    if (s_a == "@@@")
                        ConnectionWithAccess.query = "select amt from " + ConnectionWithAccess.tablename[51] + " where prd = '" + prd + "' and a_n = '" + a_n + "' and s_a = '@@@'";
                    else
                        ConnectionWithAccess.query = "select amt from " + ConnectionWithAccess.tablename[51] + " where prd = '" + prd + "' and a_n = '" + a_n + "' and s_a = '" + s_a + "'";
                    DataTable dtData1 = ConnectionCommand.fGetDataTable();
                    if (dtData1 != null && dtData1.Rows.Count > 0)
                    {
                        if (dtData1.Rows[0][0] != null)
                        {
                            temp_double = Convert.ToDouble(dtData1.Rows[0][0].ToString());
                        }
                    }
                }
            }
            return temp_double;
        }

        private double calculate_total_account_balance_from_51(string prd, string a_n, string s_a, string more_or_less_than_zero)
        {
            temp_double = 0;
            isRecord = 0;
            if (a_n.Length > 1)
            {
                if (a_n.Substring(0, 1) == "%")
                {
                    list_of_balance_amount.Clear();
                    a_n = a_n.Substring(1, a_n.Length - 1);
                    if (s_a == "@@@")
                        ConnectionWithAccess.query = "select amt from " + ConnectionWithAccess.tablename[51] + " where prd = '" + prd + "' and a_n like '" + a_n + "%' and s_a = '@@@'  and d_d = #01/01/1901# ";
                    else
                        ConnectionWithAccess.query = "select amt from " + ConnectionWithAccess.tablename[51] + " where prd = '" + prd + "' and a_n = '" + a_n + "' and s_a like '" + s_a + "%'  and d_d = #01/01/1901# ";
                    DataTable dtData1 = ConnectionCommand.fGetDataTable();
                    if (dtData1 != null && dtData1.Rows.Count > 0)
                    {
                        for (int iRowCount = 0; iRowCount < dtData1.Rows.Count; iRowCount++)
                        {
                            list_of_balance_amount.Add(dtData1.Rows[iRowCount][0].ToString());
                        }
                        temp_double = 0;
                        for (int i = 0; i < list_of_balance_amount.Count; i++)
                        {
                            temp_double = temp_double + Convert.ToDouble(list_of_balance_amount[i]);
                        }
                    }
                }
                else if (more_or_less_than_zero == "more" || more_or_less_than_zero == "less")
                {
                    if (s_a == "@@@" && more_or_less_than_zero == "more")
                        ConnectionWithAccess.query = "select amt from " + ConnectionWithAccess.tablename[51] + " where prd = '" + prd + "' and a_n = '" + a_n + "' and s_a = '@@@' and amt > 0 and d_d = #01/01/1901# ";
                    else if (s_a == "" && more_or_less_than_zero == "more")
                        ConnectionWithAccess.query = "select amt from " + ConnectionWithAccess.tablename[51] + " where prd = '" + prd + "' and a_n = '" + a_n + "' and s_a <> '@@@' and amt > 0 and d_d = #01/01/1901# ";
                    else if (s_a == "@@@" && more_or_less_than_zero == "less")
                        ConnectionWithAccess.query = "select amt from " + ConnectionWithAccess.tablename[51] + " where prd = '" + prd + "' and a_n = '" + a_n + "' and s_a = '@@@' and amt < 0 and d_d = #01/01/1901# ";
                    else if (s_a == "" && more_or_less_than_zero == "less")
                        ConnectionWithAccess.query = "select amt from " + ConnectionWithAccess.tablename[51] + " where prd = '" + prd + "' and a_n = '" + a_n + "'  and s_a <> '@@@' and amt < 0 and d_d = #01/01/1901# ";
                    DataTable dtData1 = ConnectionCommand.fGetDataTable();
                    if (dtData1 != null && dtData1.Rows.Count > 0)
                    {
                        if (dtData1.Rows[0][0] != null)
                        {
                            for (int iRowCount = 0; iRowCount < dtData1.Rows.Count; iRowCount++)
                            {
                                temp_double += Convert.ToDouble(dtData1.Rows[iRowCount][0].ToString());
                            }
                        }
                    }
                }
                else
                {
                    if (s_a == "@@@")
                        ConnectionWithAccess.query = "select amt from " + ConnectionWithAccess.tablename[51] + " where prd = '" + prd + "' and a_n = '" + a_n + "' and s_a = '@@@' and d_d = #01/01/1901# ";
                    else if (s_a == "")
                        ConnectionWithAccess.query = "select amt from " + ConnectionWithAccess.tablename[51] + " where prd = '" + prd + "' and a_n = '" + a_n + "' and s_a <> '@@@' and d_d = #01/01/1901# ";
                    DataTable dtData1 = ConnectionCommand.fGetDataTable();
                    if (dtData1 != null && dtData1.Rows.Count > 0)
                    {
                        if (dtData1.Rows[0][0] != null)
                        {
                            for (int iRowCount = 0; iRowCount < dtData1.Rows.Count; iRowCount++)
                            {
                                temp_double += Convert.ToDouble(dtData1.Rows[iRowCount][0].ToString());
                            }
                        }
                    }
                }
            }
            return temp_double;
        }

        private double get_current_period_opening_balance_from_51(string a_n, string s_a)
        {
            temp_double = 0;
            isRecord = 0;
            if (a_n.Length > 1)
            {
                if (s_a == "@@@")
                    ConnectionWithAccess.query = "select amt from " + ConnectionWithAccess.tablename[51] + " where prd = '" + ConnectionWithAccess.moprd + "' and a_n = '" + a_n + "' and s_a='@@@'";
                else
                    ConnectionWithAccess.query = "select amt from " + ConnectionWithAccess.tablename[51] + " where prd = '" + ConnectionWithAccess.moprd + "' and a_n = '" + a_n + "' and s_a = '" + s_a + "'";
                DataTable dtData1 = ConnectionCommand.fGetDataTable();
                if (dtData1 != null && dtData1.Rows.Count > 0)
                {
                    if (dtData1.Rows[0][0] != null)
                    {
                        temp_double = Convert.ToDouble(dtData1.Rows[0][0].ToString());
                    }
                }
            }
            return temp_double;
        }

        private double get_account_balance(string ma_n, string ms_a, string menddateitme)
        {
            if (ma_n != "" && ms_a != "" && menddateitme != "")
            {
                temp_word = "";
                //LedDGV.Visible = true;
                ConnectionWithAccess.query = query_contains_for_ledger_account_union(ma_n, ms_a, menddateitme);
                DataTable dtNewTable = ConnectionCommand.fGetDataTable();
                //contains_for_ledger_account_union(ma_n, ms_a, menddateitme);

                if (dtNewTable != null)
                {
                    if (dtNewTable.Rows.Count == 1)
                    {
                        if (dtNewTable.Rows[0][6].ToString() != "0.00")
                            temp_double = Convert.ToDouble(dtNewTable.Rows[0][6].ToString());
                        else if (dtNewTable.Rows[0][7].ToString() != "0.00")
                            temp_double = Convert.ToDouble(dtNewTable.Rows[0][7].ToString());
                        else if (dtNewTable.Rows[0][8].ToString() != "0.00")
                            temp_double = Convert.ToDouble(dtNewTable.Rows[0][8].ToString());
                    }
                    else
                    {
                        //if (cb_ledger_full_period.Checked == false)
                        //{
                        //    if (Convert.ToDateTime(Ledfrom.Text) > Convert.ToDateTime(ConnectionWithAccess.com_start_date))
                        //        delete_old_date_record_datatable(dtNewTable, 3, menddateitme);
                        //}

                        DataView view = new DataView(dtNewTable);
                        view.Sort = "[Date] asc";
                        DataTable dtNewTable1 = view.ToTable();

                        DataTable sortedTable = update_datatable_balances(dtNewTable1, 6, 7, 8);

                        string strTotalCol1 = getTotal_Datatable(sortedTable, 6);
                        string strTotalCol2 = getTotal_Datatable(sortedTable, 7);

                        if (!string.IsNullOrEmpty(strTotalCol1) && !string.IsNullOrEmpty(strTotalCol2))
                        {
                            DataRow drTotalRow = sortedTable.NewRow();
                            drTotalRow[6] = strTotalCol1;
                            drTotalRow[7] = strTotalCol2;
                            sortedTable.Rows.Add(drTotalRow);
                        }

                        if (sortedTable.Rows.Count > 2)
                        {
                            temp_double = Convert.ToDouble(sortedTable.Rows[sortedTable.Rows.Count - 2][8].ToString());
                        }
                    }
                }
            }
            return temp_double;
        }

        private string query_contains_for_bank_balance_union(int md_c, string ma_n, string end_date)
        {
            StringBuilder strQuery = new StringBuilder();
            strQuery.Append(" select #" + ConnectionWithAccess.msdate + "# as [PASS_DATE],0 as [d_n],  'Opening Balance' as [desc], '' as [city], f51.amt as [amt], 0 as [pay_amt], 0 as [balance_amt] from " + ConnectionWithAccess.tablename[51] + " f51 where f51.prd = '" + ConnectionWithAccess.moprd + "' and f51.a_n = '" + ma_n + "' and d_d = #01-01-1901# and f51.s_a = '@@@' union all");
            strQuery.Append(" select f23.PASS_DATE, f23.D_N, f1.[desc] as [Desc], f1.city, f23.bamt as [amt], 0 as [pay_amt], 0 as [balance_amt] from " + ConnectionWithAccess.tablename[1] + " f1, " + ConnectionWithAccess.tablename[23] + " f23 where f1.a_n = f23.a_n and f1.s_a = f23.s_a and f23.b_t = '3' and f23.prd = '" + ConnectionWithAccess.mprd + "' and f23.pass_date >= @From and f23.pass_date <= @To and f23.bamt > 0 and r_p = '1' and f23.d_c = " + md_c + " and f23.a_n <> '7999' UNION ALL");
            strQuery.Append(" select f23.PASS_DATE, f23.D_N, f1.[desc] as [Desc], f1.city, f23.bamt as [amt], 0 as [pay_amt], 0 as [balance_amt] from " + ConnectionWithAccess.tablename[1] + " f1, " + ConnectionWithAccess.tablename[23] + " f23 where f1.a_n = f23.a_n and f1.s_a = f23.s_a and f23.b_t = '3' and f23.prd = '" + ConnectionWithAccess.mprd + "' and f23.pass_date >= @From and f23.pass_date <= @To and f23.bamt > 0 and r_p = '2' and f23.d_c = " + md_c + " and f23.a_n <> '7999' UNION ALL");
            strQuery.Append(" select f23.PASS_DATE, f23.D_N, f1.[desc] as [Desc], f1.city,  0 as [amt], (f23.bamt * -1) as [pay_amt], 0 as [balance_amt] from " + ConnectionWithAccess.tablename[1] + " f1, " + ConnectionWithAccess.tablename[23] + " f23 where f1.a_n = f23.a_n and f1.s_a = f23.s_a and f23.b_t = '3' and f23.prd = '" + ConnectionWithAccess.mprd + "' and f23.pass_date >= @From and f23.pass_date <= @To and f23.bamt < 0 and r_p = '3' and f23.d_c = " + md_c + " and f23.a_n <> '7999' UNION ALL");
            strQuery.Append(" select f23.PASS_DATE, f23.D_N, f1.[desc] as [Desc], f1.city,  0 as [amt], (f23.bamt * -1) as [pay_amt], 0 as [balance_amt] from " + ConnectionWithAccess.tablename[1] + " f1, " + ConnectionWithAccess.tablename[23] + " f23 where f1.a_n = f23.a_n and f1.s_a = f23.s_a and f23.b_t = '3' and f23.prd = '" + ConnectionWithAccess.mprd + "' and f23.pass_date >= @From and f23.pass_date <= @To and f23.bamt < 0 and r_p = '4' and f23.d_c = " + md_c + " and f23.a_n <> '7999' UNION ALL");
            strQuery.Append(" select f23.PASS_DATE, f23.D_N, 'CASH DEPOSITED IN BANK' as [Desc], '',  f23.bamt as [amt], 0 as [pay_amt], 0 as [balance_amt] from " + ConnectionWithAccess.tablename[1] + " f1, " + ConnectionWithAccess.tablename[23] + " f23 where f1.a_n = f23.a_n and f1.s_a = f23.s_a and f23.b_t = '3' and f23.prd = '" + ConnectionWithAccess.mprd + "' and f23.pass_date >= @From and f23.pass_date <= @To and f23.bamt > 0 and r_p = '1' and f23.d_c = " + md_c + " and f23.a_n = '7999' and f23.s_a = 'DEP' UNION ALL");
            strQuery.Append(" select f23.PASS_DATE, f23.D_N, 'CASH WITHDRAWN FROM BANK' as [Desc], '',  0 as [amt], (f23.bamt * -1) as [pay_amt], 0 as [balance_amt] from " + ConnectionWithAccess.tablename[1] + " f1, " + ConnectionWithAccess.tablename[23] + " f23 where f1.a_n = f23.a_n and f1.s_a = f23.s_a and f23.b_t = '3' and f23.prd = '" + ConnectionWithAccess.mprd + "' and f23.pass_date >= @From and f23.pass_date <= @To and f23.bamt < 0 and r_p = '3' and f23.d_c = " + md_c + " and f23.a_n = '7999' and f23.s_a = 'WIT' UNION ALL");
            strQuery.Append(" select f23.PASS_DATE, f23.D_N, f1.[desc] as [Desc], f1.city, (f23.bamt * -1) as [amt], 0 as [pay_amt], 0 as [balance_amt] from  " + ConnectionWithAccess.tablename[1] + " f1, " + ConnectionWithAccess.tablename[23] + " f23 where f1.a_n = f23.a_n and f1.s_a = f23.s_a and f23.b_t = '3' and f23.prd = '" + ConnectionWithAccess.mprd + "' and f23.pass_date >= @From and f23.pass_date <= @To and r_p = '4' and f23.tran_d_c = " + md_c);
            List<ConnectionWithAccess.QueryParams> objParams = new List<ConnectionWithAccess.QueryParams>();
            ConnectionWithAccess.QueryParams ParamFrom = new ConnectionWithAccess.QueryParams();
            ParamFrom.paramName = "@From";
            ParamFrom.paramValue = Convert.ToDateTime(end_date);
            objParams.Add(ParamFrom);
            ConnectionWithAccess.QueryParamList = objParams;
            //add_user_date_time_function_compulsory_program();
            return strQuery.ToString();
        }

        private double calculate_bank_balance(int md_c, string ma_n, string menddateitme)
        {
            if (ma_n != "" && menddateitme != "")
            {
                if (menddateitme.Contains(" "))
                    menddateitme = menddateitme.Substring(0, menddateitme.IndexOf(" "));
                temp_word = "";
                //LedDGV.Visible = true;
                ConnectionWithAccess.query = query_contains_for_bank_balance_union(md_c, ma_n, menddateitme);
                DataTable dtNewTable = ConnectionCommand.fGetDataTable();
                //contains_for_ledger_account_union(ma_n, ms_a, menddateitme);

                if (dtNewTable != null)
                {
                    if (dtNewTable.Rows.Count == 1)
                    {
                        if (dtNewTable.Rows[0][6].ToString() != "0.00")
                            temp_double = Convert.ToDouble(dtNewTable.Rows[0][6].ToString());
                        else if (dtNewTable.Rows[0][7].ToString() != "0.00")
                            temp_double = Convert.ToDouble(dtNewTable.Rows[0][7].ToString());
                        else if (dtNewTable.Rows[0][8].ToString() != "0.00")
                            temp_double = Convert.ToDouble(dtNewTable.Rows[0][8].ToString());
                    }
                }
            }
            return temp_double;
        }

        //private void contains_for_ledger_account_union()
        //{
        //    StringBuilder strQuery = new StringBuilder();
        //    strQuery.Append(" select distinct '' as [DATE_SORT],f51.a_n as [ACC_NAME], f51.s_a as [SUB_ACC_NAME, f51.d_d as 'DATE', 'Open' as 'DOCUMENTS', 'O'    as 'ACC_TYPE', f51.amt as 'DEBIT', 0 as 'CREDIT', f51.amt as 'BALANCE' from " + ConnectionWithAccess.tablename[51] + " f51 where f51.prd = '@' and f51.a_n = '" + rla_n.Text + "' and f51.s_a = '" + rls_a.Text + "' and d_d = #01-01-1901# UNION ALL");
        //    strQuery.Append(" select '' as [DATE_SORT],f21.a_n as 'ACC_NAME', f21.s_a as 'SUB_ACC_NAME, f21.d_d as 'DATE' ,f21.d_n as 'DOCUMENTS','Sale' as 'ACC_TYPE', f21.gamt as 'DEBIT',0 as 'CREDIT',0 as 'BALANCE' from " + ConnectionWithAccess.tablename[21] + " f21 where f21.a_n = '" + rla_n.Text + "' and f21.s_a = '" + rls_a.Text + "' and f21.d_d <= #" + LedTo.Text + "# UNION ALL");
        //    strQuery.Append(" select '' as [DATE_SORT],f22.a_n as 'ACC_NAME', f22.s_a as 'SUB_ACC_NAME, f22.d_d as 'DATE', f22.d_n as 'DOCUMENTS','Purc' as 'ACC_TYPE', 0 as 'DEBIT', f22.gamt as 'CREDIT' ,0 as 'BALANCE' from " + ConnectionWithAccess.tablename[22] + " f22 where f22.a_n = '" + rla_n.Text + "' and f22.s_a = '" + rls_a.Text + "' and f22.d_d <= #" + LedTo.Text + "# UNION ALL");
        //    strQuery.Append(" select '' as [DATE_SORT],f23.a_n as 'ACC_NAME', f23.s_a as 'SUB_ACC_NAME, f23.d_d as 'DATE', f23.d_n as 'DOCUMENTS','Bank' as 'ACC_TYPE', 0 as 'DEBIT', f23.bamt as 'CREDIT',0 as 'BALANCE' from " + ConnectionWithAccess.tablename[23] + " f23 where f23.a_n = '" + rla_n.Text + "' and f23.s_a = '" + rls_a.Text + "'" + " and f23.b_t = '3' and f23.bamt > 0  and f23.d_d <= #" + LedTo.Text + "# UNION ALL");
        //    strQuery.Append(" select '' as [DATE_SORT],f23.a_n as 'ACC_NAME', f23.s_a as 'SUB_ACC_NAME, f23.d_d as 'DATE', f23.d_n as 'DOCUMENTS','Bank' as 'ACC_TYPE', (f23.bamt * -1) as 'DEBIT', 0 as 'CREDIT',0 as 'BALANCE' from " + ConnectionWithAccess.tablename[23] + " f23 where f23.a_n = '" + rla_n.Text + "' and f23.s_a = '" + rls_a.Text + "'" + " and f23.b_t = '3' and f23.bamt < 0  and f23.d_d <= #" + LedTo.Text + "# UNION ALL");
        //    strQuery.Append(" select '' as [DATE_SORT],f24.a_n as 'ACC_NAME', f24.s_a as 'SUB_ACC_NAME, f24.d_d as 'DATE', f24.d_n as 'DOCUMENTS','Cash' as 'ACC_TYPE', 0 as 'DEBIT', f24.Camt as 'CREDIT',0 as 'BALANCE' from " + ConnectionWithAccess.tablename[24] + " f24 where f24.a_n = '" + rla_n.Text + "' and f24.s_a = '" + rls_a.Text + "' and f24.camt > 0  and f24.d_d <= #" + LedTo.Text + "# UNION ALL");
        //    strQuery.Append(" select '' as [DATE_SORT],f24.a_n as 'ACC_NAME', f24.s_a as 'SUB_ACC_NAME, f24.d_d as 'DATE', f24.d_n as 'DOCUMENTS','Cash' as 'ACC_TYPE', (f24.Camt * -1) as 'DEBIT',0 as 'CREDIT', 0 as 'BALANCE'  from " + ConnectionWithAccess.tablename[24] + " f24 where f24.a_n = '" + rla_n.Text + "' and f24.s_a = '" + rls_a.Text + "' and f24.camt < 0  and f24.d_d <= #" + LedTo.Text + "# UNION ALL");
        //    strQuery.Append(" select '' as [DATE_SORT],f25.a_n as 'ACC_NAME', f25.s_a as 'SUB_ACC_NAME, f25.d_d as 'DATE', f25.d_n as 'DOCUMENTS','Jour' as 'ACC_TYPE', f25.jamt as 'DEBIT', 0 as 'CREDIT', 0 as 'BALANCE' from " + ConnectionWithAccess.tablename[25] + " f25 where f25.a_n = '" + rla_n.Text + "' and f25.s_a = '" + rls_a.Text + "'  and f25.d_d <= #" + LedTo.Text + "# UNION ALL");
        //    strQuery.Append(" select '' as [DATE_SORT],f25.a_n as 'ACC_NAME', f25.s_a as 'SUB_ACC_NAME, f25.d_d as 'DATE', f25.d_n as 'DOCUMENTS','Jour' as 'ACC_TYPE', 0 as 'DEBIT', f25.jamt as 'CREDIT', 0 as 'BALANCE' from " + ConnectionWithAccess.tablename[25] + " f25 where f25.na_n = '" + rla_n.Text + "' and f25.ns_a = '" + rls_a.Text + "' and f25.d_d <= #" + LedTo.Text + "# UNION ALL");
        //    strQuery.Append(" select '' as [DATE_SORT],f30.a_n as 'ACC_NAME', f30.s_a as 'SUB_ACC_NAME, f30.d_d as 'DATE', f30.d_n as 'DOCUMENTS','Repl' as 'ACC_TYPE', 0 as 'DEBIT', f30.gamt as 'CREDIT', 0 as 'BALANCE' from " + ConnectionWithAccess.tablename[30] + " f30 where f30.a_n = '" + rla_n.Text + "' and f30.s_a = '" + rls_a.Text + "' and f30.d_d <= #" + LedTo.Text + "# ");
        //    ConnectionWithAccess.query = strQuery.ToString();
        //    ConnectionCommand.accountHelp_datatable(LedDGV, "LEDGER");

        //}

        public void delete_old_date_record_datatable(DataTable mDataGridView, int column_pointer, string before_date)
        {
            temp_double = 0;
            temp_int = 0;
            for (row_pointer = 0; row_pointer < mDataGridView.Rows.Count; row_pointer++)
            {
                if (mDataGridView.Rows[row_pointer][column_pointer] != null)
                {
                    temp_word = mDataGridView.Rows[row_pointer][3].ToString().Trim();
                    if (temp_word != null && temp_word != "")
                    {
                        if (Convert.ToDateTime(temp_word) < Convert.ToDateTime(before_date))
                        {
                            //mDataGridView.Rows.RemoveAt(mDataGridView.SelectedRows[0].Index);
                            if (mDataGridView.Rows[row_pointer][6] != null && mDataGridView.Rows[row_pointer][6].ToString() != "")
                            {
                                temp_double = temp_double + Convert.ToDouble(mDataGridView.Rows[row_pointer][6].ToString());
                                mDataGridView.Rows[row_pointer][6] = 0;
                                mDataGridView.Rows[row_pointer][0] = "";
                            }
                            if (mDataGridView.Rows[row_pointer][7] != null && mDataGridView.Rows[row_pointer][7].ToString() != "")
                            {
                                temp_double = temp_double - Convert.ToDouble(mDataGridView.Rows[row_pointer][7].ToString());
                                mDataGridView.Rows[row_pointer][7] = 0;
                            }
                            if (mDataGridView.Rows[row_pointer][8] != null && mDataGridView.Rows[row_pointer][8].ToString() != "")
                                mDataGridView.Rows[row_pointer][8] = 0;
                            temp_int = row_pointer;
                        }
                    }
                }
            }
            mDataGridView.Rows[temp_int][0] = "1";
            mDataGridView.Rows[temp_int][3] = Ledfrom.Text.ToString();
            mDataGridView.Rows[temp_int][4] = "Open";
            mDataGridView.Rows[temp_int][5] = "";
            mDataGridView.Rows[temp_int][8] = Convert.ToString(temp_double);
            foreach (DataRow dr in mDataGridView.Rows)
            {
                if (dr[8].ToString() == "")
                    mDataGridView.Rows.Remove(dr);
            }
        }

        public void delete_old_date_record(DataGridView mDataGridView, int column_pointer, string before_date, string ma_n)
        {
            temp_double = 0;
            temp_int = 0;
            for (row_pointer = 0; row_pointer < mDataGridView.RowCount; row_pointer++)
            {
                if (mDataGridView.Rows[row_pointer].Cells[column_pointer].Value != null)
                {
                    temp_word = mDataGridView.Rows[row_pointer].Cells[column_pointer].Value.ToString().Trim();
                    if (temp_word != null && temp_word != "")
                    {
                        if (Convert.ToDateTime(temp_word) < Convert.ToDateTime(before_date))
                        {
                            //mDataGridView.Rows.RemoveAt(mDataGridView.SelectedRows[0].Index);
                            if (mDataGridView.Rows[row_pointer].Cells[6].Value != null && mDataGridView.Rows[row_pointer].Cells[6].Value.ToString() != "")
                            {
                                temp_double = temp_double + Convert.ToDouble(mDataGridView.Rows[row_pointer].Cells[6].Value);
                                mDataGridView.Rows[row_pointer].Cells[6].Value = 0;
                                mDataGridView.Rows[row_pointer].Cells[0].Value = "";
                            }
                            if (mDataGridView.Rows[row_pointer].Cells[7].Value != null && mDataGridView.Rows[row_pointer].Cells[7].Value.ToString() != "")
                            {
                                temp_double = temp_double - Convert.ToDouble(mDataGridView.Rows[row_pointer].Cells[7].Value);
                                mDataGridView.Rows[row_pointer].Cells[7].Value = 0;
                            }
                            if (mDataGridView.Rows[row_pointer].Cells[8].Value != null && mDataGridView.Rows[row_pointer].Cells[8].Value.ToString() != "")
                                mDataGridView.Rows[row_pointer].Cells[8].Value = 0;
                            temp_int = row_pointer;
                        }
                    }
                }
            }
            if (ma_n.Length >= 1)
            {
                if (ma_n.Substring(0, 1) != "7")
                {
                    mDataGridView.Rows[temp_int].Cells[0].Value = "1";
                    mDataGridView.Rows[temp_int].Cells[column_pointer].Value = before_date;
                    //mDataGridView.Rows[temp_int].Cells[4].Value = "Open";
                    mDataGridView.Rows[temp_int].Cells[4].Value = "0";
                    mDataGridView.Rows[temp_int].Cells[5].Value = "Open";
                    mDataGridView.Rows[temp_int].Cells[8].Value = Convert.ToString(temp_double);
                }
            }
            mDataGridView.Refresh();
        }

        public void delete_new_date_record(DataGridView mDataGridView, int column_pointer, string on_date)
        {
            temp_double = 0;
            temp_int = 0;
            for (row_pointer = 0; row_pointer < mDataGridView.RowCount; row_pointer++)
            {
                if (mDataGridView.Rows[row_pointer].Cells[column_pointer].Value != null)
                {
                    temp_word = mDataGridView.Rows[row_pointer].Cells[3].Value.ToString().Trim();
                    if (temp_word != null && temp_word != "")
                    {
                        if (Convert.ToDateTime(temp_word) > Convert.ToDateTime(on_date))
                        {
                            //mDataGridView.Rows.RemoveAt(mDataGridView.SelectedRows[0].Index);
                            if (mDataGridView.Rows[row_pointer].Cells[6].Value != null && mDataGridView.Rows[row_pointer].Cells[6].Value.ToString() != "")
                            {
                                temp_double = temp_double + Convert.ToDouble(mDataGridView.Rows[row_pointer].Cells[6].Value);
                                mDataGridView.Rows[row_pointer].Cells[6].Value = 0;
                                mDataGridView.Rows[row_pointer].Cells[0].Value = "";
                            }
                            if (mDataGridView.Rows[row_pointer].Cells[7].Value != null && mDataGridView.Rows[row_pointer].Cells[7].Value.ToString() != "")
                            {
                                temp_double = temp_double - Convert.ToDouble(mDataGridView.Rows[row_pointer].Cells[7].Value);
                                mDataGridView.Rows[row_pointer].Cells[7].Value = 0;
                            }
                            if (mDataGridView.Rows[row_pointer].Cells[8].Value != null && mDataGridView.Rows[row_pointer].Cells[8].Value.ToString() != "")
                                mDataGridView.Rows[row_pointer].Cells[8].Value = 0;
                            temp_int = row_pointer;
                        }
                    }
                }
            }
            //mDataGridView.Rows[temp_int].Cells[0].Value = "1";
            //mDataGridView.Rows[temp_int].Cells[3].Value = Ledfrom.Text.ToString();
            //mDataGridView.Rows[temp_int].Cells[4].Value = "Open";
            //mDataGridView.Rows[temp_int].Cells[5].Value = "";
            //mDataGridView.Rows[temp_int].Cells[8].Value = Convert.ToString(temp_double);
        }

        public static string NumberToWords(int number)
        {
            if (number == 0)
                return "zero";

            if (number < 0)
                return "minus " + NumberToWords(Math.Abs(number));

            words = null;

            //if ((number / 1000000) > 0)
            //{
            //    words += NumberToWords(number / 1000000) + " million ";
            //    number %= 1000000;
            //}
            if ((number / 99999) > 0)
            {
                words += NumberToagainWords(number / 100000) + " Lakhs ";
                number %= 100000;
            }

            if ((number / 1000) > 0)
            {
                words = NumberToagainWords(number / 1000) + " thousand ";
                number %= 1000;
            }

            if ((number / 100) > 0)
            {
                words = NumberToagainWords(number / 100) + " hundred ";
                number %= 100;
            }

            if (number > 0)
            {
                if (words != "")
                    words += "and ";

                var unitsMap = new[] { "zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "ten", "eleven", "twelve", "thirteen", "fourteen", "fifteen", "sixteen", "seventeen", "eighteen", "nineteen" };
                var tensMap = new[] { "zero", "ten", "twenty", "thirty", "forty", "fifty", "sixty", "seventy", "eighty", "ninety" };

                if (number < 20)
                    words += unitsMap[number];
                else
                {
                    words += tensMap[number / 10];
                    if ((number % 10) > 0)
                        words += "-" + unitsMap[number % 10];
                }
            }
            return words.ToUpper();
        }

        public static string NumberToagainWords(int number)
        {
            if (number == 0)
                return "zero";

            if (number < 0)
                return "minus " + NumberToagainWords(Math.Abs(number));

            //string words  = "";

            //if ((number / 1000000) > 0)
            //{
            //    words += NumberToWords(number / 1000000) + " million ";
            //    number %= 1000000;
            //}
            if ((number / 99999) > 0)
            {
                words += NumberToagainWords(number / 100000) + " Lakhs ";
                number %= 100000;
            }

            if ((number / 1000) > 0)
            {
                words += NumberToagainWords(number / 1000) + " thousand ";
                number %= 1000;
            }

            if ((number / 100) > 0)
            {
                words += NumberToagainWords(number / 100) + " hundred ";
                number %= 100;
            }

            if (number > 0)
            {
                if (words != "" && words != null)
                    words += "and ";

                var unitsMap = new[] { "zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "ten", "eleven", "twelve", "thirteen", "fourteen", "fifteen", "sixteen", "seventeen", "eighteen", "nineteen" };
                var tensMap = new[] { "zero", "ten", "twenty", "thirty", "forty", "fifty", "sixty", "seventy", "eighty", "ninety" };

                if (number < 20)
                    words += unitsMap[number];
                else
                {
                    words += tensMap[number / 10];
                    if ((number % 10) > 0)
                        words += "-" + unitsMap[number % 10];
                }
            }
            return words.ToUpper();
        }

        private void oldpurcinvoicedetails()
        {
            ConnectionWithAccess.query = "select tpt, bamt, tamt, rund_amt, gamt, tx_code, d_d,freight_AMT,packing_AMT,insurance_AMT,other_AMT,cgst_amt, sgst_amt,igst_amt,IGST_PACK_PER from " + ConnectionWithAccess.tablename[22] + " f22 where d_n " + (pidocno.Text.Trim() == string.Empty ? "is null" : "= " + pidocno.Text.Trim()) + " and prd = '" + ConnectionWithAccess.mprd + "' and d_c = " + Convert.ToInt32(pidbc.SelectedValue.ToString()) + " and s_a = '" + pis_a.Text + "'";
            DataTable dtData1 = ConnectionCommand.fGetDataTable();
            if (dtData1 != null && dtData1.Rows.Count > 0)
            {
                old_purchase_invoice_number = pidocno.Text.Trim();
                pitransport.Text = dtData1.Rows[0][0].ToString();
                pitaxamt.Text = dtData1.Rows[0][2].ToString();
                piroundoffamt.Text = dtData1.Rows[0][3].ToString();
                pigrossamt.Text = dtData1.Rows[0][4].ToString();
                old_purchase_invoice_amount = Convert.ToDouble(dtData1.Rows[0][4].ToString());
                pitaxcode.Text = dtData1.Rows[0][5].ToString();
                pitx_code.Text = dtData1.Rows[0][5].ToString();
                pidatetime.Text = dtData1.Rows[0][6].ToString();
                if (pidatetime.Value >= Convert.ToDateTime("01/07/2017"))
                {
                    pi_freight_amt.Text = dtData1.Rows[0]["freight_AMT"].ToString();
                    if (pi_freight_amt.Text == "")
                        pi_freight_amt.Text = "0.00";
                    pi_freight_amt.Text = string.Format("{0:0.00}", Convert.ToDouble(pi_freight_amt.Text));
                    pi_packing_amt.Text = dtData1.Rows[0]["packing_amt"].ToString();
                    if (pi_packing_amt.Text == "")
                        pi_packing_amt.Text = "0.00";
                    pi_packing_amt.Text = string.Format("{0:0.00}", Convert.ToDouble(pi_packing_amt.Text));
                    pi_insurance_amt.Text = dtData1.Rows[0][9].ToString();
                    if (pi_insurance_amt.Text == "")
                        pi_insurance_amt.Text = "0.00";
                    pi_insurance_amt.Text = string.Format("{0:0.00}", Convert.ToDouble(pi_insurance_amt.Text));
                    pi_other_amt.Text = dtData1.Rows[0][10].ToString();
                    if (pi_other_amt.Text == "")
                        pi_other_amt.Text = "0.00";
                    pi_other_amt.Text = string.Format("{0:0.00}", Convert.ToDouble(pi_other_amt.Text));
                    pibasicamt.Text = dtData1.Rows[0][1].ToString();
                    pibasicamt.Text = string.Format("{0:0.00}", Convert.ToDouble(pibasicamt.Text));
                    cb_pack_igst_per.Text = dtData1.Rows[0]["IGST_PACK_PER"].ToString();
                    if (dtData1.Rows[0][13].ToString() != "")
                        tb_pi_igst_tax_amount.Text = dtData1.Rows[0][13].ToString();
                    else
                    {
                        temp_double = 0;
                        if (dtData1.Rows[0][11].ToString() != "")
                            temp_double += (Convert.ToDouble(dtData1.Rows[0][11].ToString()));
                        if (dtData1.Rows[0][12].ToString() != "")
                            temp_double += (Convert.ToDouble(dtData1.Rows[0][11].ToString()));
                        tb_pi_igst_tax_amount.Text = temp_double.ToString();
                    }
                    tb_pi_igst_tax_amount.Text = string.Format("{0:0.00}", Convert.ToDouble(tb_pi_igst_tax_amount.Text));
                    pi_freight_amt.ReadOnly = false;
                    pi_packing_amt.ReadOnly = false;
                    pi_insurance_amt.ReadOnly = false;
                    pi_other_amt.ReadOnly = false;
                }
                else
                {
                    pi_freight_amt.Text = dtData1.Rows[0][7].ToString();
                    if (pi_freight_amt.Text == "")
                        pi_freight_amt.Text = "0.00";
                    pi_freight_amt.Text = string.Format("{0:0.00}", Convert.ToDouble(pi_freight_amt.Text));
                    pi_packing_amt.Text = dtData1.Rows[0][8].ToString();
                    if (pi_packing_amt.Text == "")
                        pi_packing_amt.Text = "0.00";
                    pi_packing_amt.Text = string.Format("{0:0.00}", Convert.ToDouble(pi_packing_amt.Text));
                    pi_insurance_amt.Text = dtData1.Rows[0][9].ToString();
                    if (pi_insurance_amt.Text == "")
                        pi_insurance_amt.Text = "0.00";
                    pi_insurance_amt.Text = string.Format("{0:0.00}", Convert.ToDouble(pi_insurance_amt.Text));
                    pi_other_amt.Text = dtData1.Rows[0][10].ToString();
                    if (pi_other_amt.Text == "")
                        pi_other_amt.Text = "0.00";
                    pi_other_amt.Text = string.Format("{0:0.00}", Convert.ToDouble(pi_other_amt.Text));
                    pibasicamt.Text = dtData1.Rows[0][1].ToString();
                    pibasicamt.Text = string.Format("{0:0.00}", Convert.ToDouble(pibasicamt.Text));
                    if (dtData1.Rows[0][13].ToString() != "")
                        tb_pi_igst_tax_amount.Text = dtData1.Rows[0][13].ToString();
                    else
                    {
                        pitaxrate.Text = (Convert.ToSingle(pitaxamt.Text) / Convert.ToSingle(pibasicamt.Text) * 100).ToString();
                        pitaxamt.Text = string.Format("{0:0.00}", Convert.ToDouble(pitaxamt.Text));
                        purchase_invoice_amount = Convert.ToDouble(pibasicamt.Text);
                        purchase_invoice_amount += Convert.ToDouble(pitaxamt.Text);
                        if (pi_freight_amt.Text != "")
                            purchase_invoice_amount += Convert.ToDouble(pi_freight_amt.Text);
                        if (pi_packing_amt.Text != "")
                            purchase_invoice_amount += Convert.ToDouble(pi_packing_amt.Text);
                        if (pi_insurance_amt.Text != "")
                            purchase_invoice_amount += Convert.ToDouble(pi_insurance_amt.Text);
                        if (pi_other_amt.Text != "")
                            purchase_invoice_amount += Convert.ToDouble(pi_other_amt.Text);
                        calculate_roundoff();
                        if (piroundoffamt.Text != "" && piroundoffamt.Text != "0.00")
                            purchase_invoice_amount += Convert.ToDouble(piroundoffamt.Text);
                        purchase_invoice_amount = Math.Round(purchase_invoice_amount, 2);
                        pigrossamt.Text = Convert.ToString(purchase_invoice_amount);
                        pi_freight_amt.ReadOnly = false;
                        pi_packing_amt.ReadOnly = false;
                        pi_insurance_amt.ReadOnly = false;
                        pi_other_amt.ReadOnly = false;
                    }
                    tb_pi_igst_tax_amount.Text = string.Format("{0:0.00}", Convert.ToDouble(tb_pi_igst_tax_amount.Text));
                }

                get_account_details_from_01(pia_n.Text, pis_a.Text);
                get_account_details_from_04(pia_n.Text, pis_a.Text);
                if (ConnectionWithAccess.company_details[5].Trim() != account_detail_from_01[12].Trim())
                    lbl_pi_message.Visible = true;
                else
                    lbl_pi_message.Visible = false;
                tb_pi_mobilenumber.Text = account_detail_from_04[17];
                fill_purchase_invoice_dg();
                purchase_invoice_item_filling();
                pipurchaselist.Enabled = true;
            }
            else
            {
                piitemlist.DataSource = null;
                tb_pi_igst_tax_amount.Text = "0.00";
                pitaxamt.Text = "0.00";
                pi_freight_amt.Text = "0.00";
                pi_packing_amt.Text = "0.00";
                pi_insurance_amt.Text = "0.00";
                pi_other_amt.Text = "0.00";
                pibasicamt.Text = "0.00";
                piroundoffamt.Text = "0.00";
                pigrossamt.Text = "0.00";
            }
            if (pitaxcode.Text != "")
                get_tax_desc_from_dc("P", pidbc.SelectedValue.ToString(), Convert.ToInt32(pitaxcode.Text));
            //show_invoice_image();
            old_cash_payment_against_purchase_invoice = get_cash_payment_amount_in_purchase_invoice();
            pi_cash_paid.Text = string.Format("{0:0.00}", old_cash_payment_against_purchase_invoice);
            show_images();
        }

        private void show_invoice_image()
        {
            if (maintab.SelectedIndex == 1 && subtabDataEntry.SelectedIndex == 1 && subtabpurchase.SelectedIndex == 0)
            {
                if (cb_common_image.Checked == true)
                {
                    ConnectionWithAccess.query = "select location from " + ConnectionWithAccess.tablename[70] + " where prd = '" + ConnectionWithAccess.mprd + "' and a_n = '" + pia_n.Text + "' and s_a = '" + pis_a.Text + "' and d_n  " + (ConnectionWithAccess.md_n == null ? "is null" : (ConnectionWithAccess.md_n.Trim() == string.Empty ? "is null" : "= " + pidocno.Text.Trim())) + "";
                    DataTable dtData1 = ConnectionCommand.fGetDataTable();
                    if (dtData1 != null && dtData1.Rows.Count > 0)
                    {
                        if (dtData1.Rows[0][0] != null)
                        {
                            image_filename = Convert.ToString(dtData1.Rows[0][0].ToString());
                            if (File.Exists(image_filename))
                                pb_common.Image = System.Drawing.Image.FromFile(image_filename);
                            else
                                image_filename = null;
                        }
                        else
                            image_filename = null;
                    }
                    else
                        image_filename = null;
                    pb_common.SizeMode = PictureBoxSizeMode.StretchImage;
                }
                else
                {
                    pb_common.Visible = false;
                    pb_common.Image = null;
                }
            }
        }

        public void purcitemfilling()
        {
            piitemlist.DataSource = null;
            piitemlist.Enabled = true;
            ConnectionWithAccess.query = "select [type], item_code, [title], packing, [box], qty, price, amount, cat,igst_per,hsn_code from " + ConnectionWithAccess.tablename[03] + " where prd= '" + ConnectionWithAccess.mprd + "' and d_c = " + pidbc.SelectedValue.ToString() + " and d_n " + (pidocno.Text.Trim() == string.Empty ? "is null" : "= " + pidocno.Text.Trim()) + " and s_a = '" + pis_a.Text + "'";
            ConnectionCommand.accountHelp_datatable_Seperate(piitemlist, "piitemlist");
            if (piitemlist.Rows.Count <= 1)
            {
                pibasicamt.ReadOnly = false;
                pibasicamt.Enabled = true;
            }
            else
            {
                piitemlist.Enabled = true;
                pibasicamt.ReadOnly = true;
                calculatepurcItemTotal();
            }
            show_images();
        }

        private void fill_report_party_combobox(string ma_n)
        {
            if (chkpartyList.Items.Count == 0)
            {
                //ConnectionWithAccess.query = "select [desc],city from " + ConnectionWithAccess.tablename[1] + " f1 where f1.a_n = '" + ma_n + "' and f1.s_a != '@@@'";
                ConnectionWithAccess.query = "select [desc],city,a_n,s_a from " + ConnectionWithAccess.tablename[1] + " f1 where f1.a_n = '" + ma_n + "' and f1.s_a <> '@@@'";
                ConnectionWithAccess.fillCheckListBox(chkpartyList);
            }
        }

        private void fill_report_city_combobox(string ma_n)
        {
            if (chkcityList.Items.Count == 0)
            {
                ConnectionWithAccess.query = "select distinct [city] from " + ConnectionWithAccess.tablename[1] + " f1 where f1.a_n = '" + ma_n + "' and f1.s_a <> '@@@'";
                ConnectionWithAccess.fillCheckListBox(chkcityList);
            }
        }

        private void fill_report_tax_combobox(string md_c)
        {
            if (chktaxlist.Items.Count == 0)
            {
                ConnectionWithAccess.query = "select distinct f6.tx_code, f6.[desc] from " + ConnectionWithAccess.tablename[6] + " f6 where f6.d_c = " + md_c;
                ConnectionWithAccess.fillCheckListBox(chktaxlist);
            }
        }

        //private Image Scan(string deviceName)
        //{
        //    WiaClass wiaManager = null;       // WIA manager COM object
        //    CollectionClass wiaDevs = null;   // WIA devices collection COM object
        //    ItemClass wiaRoot = null;         // WIA root device COM object
        //    CollectionClass wiaPics = null;   // WIA collection COM object
        //    ItemClass wiaItem = null;         // WIA image COM object

        //    try
        //    {
        //        // create COM instance of WIA manager
        //        wiaManager = new WiaClass();

        //        // call Wia.Devices to get all devices
        //        wiaDevs = wiaManager.Devices as CollectionClass;
        //        if ((wiaDevs == null) || (wiaDevs.Count == 0))
        //        {
        //            throw new Exception("No WIA devices found!");
        //        }

        //        object device = null;
        //        foreach (IWiaDeviceInfo currentDevice in wiaManager.Devices)
        //        {
        //            if (currentDevice.Name == deviceName)
        //            {
        //                device = currentDevice;
        //                break;
        //            }
        //        }

        //        if (device == null)
        //        {
        //            throw new Exception
        //            (
        //                "Device with name \"" +
        //                deviceName +
        //                "\" could not be found."
        //            );
        //        }

        //        // select device
        //        wiaRoot = (ItemClass)wiaManager.Create(ref device);

        //        // something went wrong
        //        if (wiaRoot == null)
        //        {
        //            throw new Exception
        //            (
        //                "Could not initialize device \"" +
        //                deviceName + "\"."
        //            );
        //        }

        //        wiaPics = wiaRoot.GetItemsFromUI
        //        (
        //            WiaFlag.SingleImage,
        //            WiaIntent.ImageTypeColor
        //        ) as CollectionClass;

        //        if (wiaPics == null || wiaPics.Count == 0)
        //        {
        //            throw new Exception("Could not scan image.");
        //        }

        //        Image image = null;

        //        // enumerate all the pictures the user selected
        //        foreach (object wiaObj in wiaPics)
        //        {
        //            if (image == null)
        //            {
        //                wiaItem = (ItemClass)Marshal.CreateWrapperOfType
        //                (
        //                    wiaObj, typeof(ItemClass)
        //                );

        //                // create temporary file for image
        //                string tempFile = Path.GetTempFileName();

        //                // transfer picture to our temporary file
        //                wiaItem.Transfer(tempFile, false);

        //                // create Image instance from file
        //                image = Image.FromFile(tempFile);
        //            }

        //            // release enumerated COM object
        //            Marshal.ReleaseComObject(wiaObj);
        //        }

        //        if (image == null)
        //        {
        //            throw new Exception("Error reading scanned image.");
        //        }

        //        return image;
        //    }
        //    finally
        //    {
        //        // release WIA image COM object
        //        if (wiaItem != null)
        //            Marshal.ReleaseComObject(wiaItem);

        //        // release WIA collection COM object
        //        if (wiaPics != null)
        //            Marshal.ReleaseComObject(wiaPics);

        //        // release WIA root device COM object
        //        if (wiaRoot != null)
        //            Marshal.ReleaseComObject(wiaRoot);

        //        // release WIA devices collection COM object
        //        if (wiaDevs != null)
        //            Marshal.ReleaseComObject(wiaDevs);

        //        // release WIA manager COM object
        //        if (wiaManager != null)
        //            Marshal.ReleaseComObject(wiaManager);
        //    }
        //}

        private void select_party_for_sale()
        {
            fill_transport(sia_n.Text, sicity.Text, sitransport);
            sitransport.Enabled = true;
            if (subtabsale.SelectedIndex == 0)
            {
                rowIndex = si_party_help.CurrentCell.RowIndex;
                if (Convert.ToString(si_party_help.Rows[rowIndex].Cells[4].Value) != "")
                {
                    sipartycode.ReadOnly = true;
                    sideliverycode.Text = Convert.ToString(si_party_help.Rows[rowIndex].Cells[0].Value);
                }
                else
                {
                    ConnectionWithAccess.mdesc = Convert.ToString(si_party_help.Rows[rowIndex].Cells[0].Value);
                    sipartycode.Text = Convert.ToString(si_party_help.Rows[rowIndex].Cells[0].Value);
                }
            }
            else if (subtabsale.SelectedIndex == 2)
            {
                rowIndex = so_party_help.CurrentCell.RowIndex;
                soitemlist.ReadOnly = false;
                if (Convert.ToString(so_party_help.Rows[rowIndex].Cells[4].Value) != "")
                {
                    sopartycode.Enabled = false;
                    sodeliverycode.Text = Convert.ToString(so_party_help.Rows[rowIndex].Cells[0].Value);
                }
                else
                {
                    ConnectionWithAccess.mdesc = Convert.ToString(so_party_help.Rows[rowIndex].Cells[0].Value);
                    sopartycode.Text = Convert.ToString(so_party_help.Rows[rowIndex].Cells[0].Value);
                }
            }
            show_images();
            si_party_help.Visible = false;
            so_party_help.Visible = false;
        }

        private void select_party_for_replacement()
        {
            if (sra_n.Text != null && srs_a.Text != "")
            {
                get_account_details_from_01(sra_n.Text, srs_a.Text);
                get_account_details_from_04(sra_n.Text, srs_a.Text);
                srpartycode.Text = account_detail_from_01[4];
                srpartyname.Text = srpartycode.Text;
                srpartyaddress.Text = account_detail_from_04[4] + " ," + account_detail_from_04[5] + " ," + account_detail_from_04[6] + " ," + account_detail_from_04[7];
                srcontactdetails.Text = account_detail_from_04[17] + " ," + account_detail_from_04[18] + " ," + account_detail_from_04[19] + " ," + account_detail_from_04[20];
                srpartybalance.Text = Convert.ToString(get_account_balance(sra_n.Text, srs_a.Text, Convert.ToString(srdatetime.Text)));
            }
            //show_images();
            sr_party_help.Visible = false;
        }

        private void select_party_for_bank()
        {
            try
            {
                if (subtabbank.SelectedIndex == 0)
                {
                    rowIndex = braccountdg.CurrentCell.RowIndex;
                    bra_n.Text = braccountdg.Rows[rowIndex].Cells[2].Value.ToString();
                    brs_a.Text = Convert.ToString(braccountdg.Rows[rowIndex].Cells[3].Value);
                    ConnectionWithAccess.mdesc = Convert.ToString(braccountdg.Rows[rowIndex].Cells[0].Value);
                    brpartycode.Text = Convert.ToString(braccountdg.Rows[rowIndex].Cells[0].Value);
                    brpartycity.Text = Convert.ToString(braccountdg.Rows[rowIndex].Cells[1].Value);
                    get_account_details_from_04(bra_n.Text, brs_a.Text);
                    cbchqbank.Text = account_detail_from_04[33];
                    show_images();
                }
                else if (subtabbank.SelectedIndex == 1)
                {
                    rowIndex = bp_datagridview.CurrentCell.RowIndex;
                    bpa_n.Text = bp_datagridview.Rows[rowIndex].Cells[2].Value.ToString();
                    bps_a.Text = Convert.ToString(bp_datagridview.Rows[rowIndex].Cells[3].Value);
                    ConnectionWithAccess.mdesc = Convert.ToString(bp_datagridview.Rows[rowIndex].Cells[0].Value);
                    bppartycode.Text = Convert.ToString(bp_datagridview.Rows[rowIndex].Cells[0].Value);
                    bppartycity.Text = Convert.ToString(bp_datagridview.Rows[rowIndex].Cells[1].Value);
                    show_images();
                    bp_datagridview.Visible = false;
                }
            }
            catch (Exception ex)
            { }
        }

        private void select_account_for_ledger()
        {

        }

        # region get_data

        private void get_account_details_from_01(string ma_n, string ms_a)
        {
            if (ma_n != "")
            {
                account_detail_from_01.Clear();
                account_detail_from_01.Add(ma_n + " ," + ms_a);
                ConnectionWithAccess.query = "select A_N,S_A,D_Y,[DESC],[ALIASS],PROP,PAN,CITY,COUNTRY,PIN,DIST,STATE,BUDGET,DIS,CRE_DAYS,MRK,SUB_GROUP,BST,BST_DT,CST,CST_DT,REQ_LBT, LBT_RATE,MARK,[USER],[CURRENCY],aadhar_card,gst_number from " + ConnectionWithAccess.tablename[1] + " where a_n = '" + ma_n + "' and s_a ='" + ms_a + "' and d_y = '@@@'";
                DataTable dtData1 = ConnectionCommand.fGetDataTable();
                int mcolumncount = dtData1.Columns.Count;
                if (dtData1 != null && dtData1.Rows.Count > 0)
                {
                    for (int iRowCount = 0; iRowCount < dtData1.Rows.Count; iRowCount++)
                    {
                        for (int i = 0; i <= mcolumncount - 1; i++)
                        {
                            temp_word = dtData1.Rows[iRowCount][i].ToString();
                            account_detail_from_01.Add(temp_word);
                        }
                    }
                }
                if (account_detail_from_01.Count() < mcolumncount)
                {
                    for (int i = 0; i <= mcolumncount - 1; i++)
                    {
                        account_detail_from_01.Add("");
                    }
                }
            }
        }

        private void get_account_details_from_04(string ma_n, string ms_a)
        {
            if (ma_n != "")
            {
                account_detail_from_04.Clear();
                account_detail_from_04.Add(ma_n + " ," + ms_a);
                ConnectionWithAccess.query = "select A_N,S_A,D_Y,ADD1,ADD2,ADD3,CITY,COUNTRY,BANK_NAM,BANK_AC,BANK_IFC,IT_ACC,LBT_NUM,VAT_TIN,ISD,STD,O_MOB,R_MOB,PHONE1,PHONE12,PHONE2,PHONE22,FAX,EMAIL,WEB,CST,STBST,STBST_DT,TIN_NUM,TPT,BILLX2,TX_CODE from " + ConnectionWithAccess.tablename[4] + " where a_n = '" + ma_n + "' and s_a = '" + ms_a + "' and d_y = '@@@'";
                DataTable dtAccountData = ConnectionCommand.fGetDataTable();
                int mcolumncount = dtAccountData.Columns.Count;
                if (dtAccountData != null && dtAccountData.Rows.Count > 0)
                {

                    for (int iRowCount = 0; iRowCount < dtAccountData.Rows.Count; iRowCount++)
                    {
                        for (int i = 0; i <= mcolumncount - 1; i++)
                        {
                            account_detail_from_04.Add(dtAccountData.Rows[iRowCount][i].ToString());
                        }
                    }
                }
                if (account_detail_from_04.Count() < mcolumncount)
                {
                    for (int i = 0; i <= mcolumncount - 1; i++)
                    {
                        account_detail_from_04.Add("");
                    }
                }
                temp_int = mcolumncount;
                ConnectionWithAccess.query = "select BANKNAME,BANKADDRESS,BANKCITY,BANKACCNO,BANKNEFT from " + ConnectionWithAccess.tablename[27] + " where a_n = '" + ma_n + "' and s_a = '" + ms_a + "'";
                dtAccountData = ConnectionCommand.fGetDataTable();
                mcolumncount = dtAccountData.Columns.Count;
                if (dtAccountData != null && dtAccountData.Rows.Count > 0)
                {

                    for (int iRowCount = 0; iRowCount < dtAccountData.Rows.Count; iRowCount++)
                    {
                        for (int i = 0; i <= mcolumncount - 1; i++)
                        {
                            account_detail_from_04.Add(dtAccountData.Rows[iRowCount][i].ToString());
                        }
                    }
                }
                if (account_detail_from_04.Count() < mcolumncount + temp_int)
                {
                    for (int i = account_detail_from_04.Count(); i <= mcolumncount + temp_int - 1; i++)
                    {
                        account_detail_from_04.Add("");
                    }
                }


            }
        }

        private void get_account_details_with_d_y_from_01(string ma_n, string ms_a, string md_y)
        {
            if (ma_n != "")
            {
                account_detail_from_01.Clear();
                account_detail_from_01.Add(ma_n + " ," + ms_a);
                ConnectionWithAccess.query = "select A_N,S_A,D_Y,[DESC],[ALIASS],PROP,PAN,CITY,COUNTRY,PIN,DIST,STATE,BUDGET,DIS,CRE_DAYS,MRK,SUB_GROUP,BST,BST_DT,CST,CST_DT,REQ_LBT, LBT_RATE,MARK,[USER],[CURRENCY],aadhar_card,gst_number from " + ConnectionWithAccess.tablename[1] + " where a_n = '" + ma_n + "' and s_a ='" + ms_a + "' and d_y = '" + md_y + "'";
                DataTable dtData1 = ConnectionCommand.fGetDataTable();
                int mcolumncount = dtData1.Columns.Count;
                if (dtData1 != null && dtData1.Rows.Count > 0)
                {

                    for (int iRowCount = 0; iRowCount < dtData1.Rows.Count; iRowCount++)
                    {
                        for (int i = 0; i <= mcolumncount - 1; i++)
                        {

                            temp_word = dtData1.Rows[iRowCount][i].ToString();
                            account_detail_from_01.Add(temp_word);
                        }
                    }
                }
                if (account_detail_from_01.Count() < mcolumncount)
                {
                    for (int i = 0; i <= mcolumncount - 1; i++)
                    {
                        account_detail_from_01.Add("");
                    }
                }
            }
        }

        private void get_account_details_with_d_y_from_04(string ma_n, string ms_a, string md_y)
        {
            if (ma_n != "")
            {
                account_detail_from_04.Clear();
                account_detail_from_04.Add(ma_n + " ," + ms_a);
                ConnectionWithAccess.query = "select A_N,S_A,D_Y,ADD1,ADD2,ADD3,CITY,COUNTRY,BANK_NAM,BANK_AC,BANK_IFC,IT_ACC,LBT_NUM,VAT_TIN,ISD,STD,O_MOB,R_MOB,PHONE1,PHONE12,PHONE2,PHONE22,FAX,EMAIL,WEB,CST,STBST,STBST_DT,TIN_NUM,TPT,BILLX2,TX_CODE from " + ConnectionWithAccess.tablename[4] + " where a_n = '" + ma_n + "' and s_a = '" + ms_a + "' and d_y = '" + md_y + "'";
                DataTable dtAccountData = ConnectionCommand.fGetDataTable();
                int mcolumncount = dtAccountData.Columns.Count;
                if (dtAccountData != null && dtAccountData.Rows.Count > 0)
                {

                    for (int iRowCount = 0; iRowCount < dtAccountData.Rows.Count; iRowCount++)
                    {
                        for (int i = 0; i <= mcolumncount - 1; i++)
                        {
                            account_detail_from_04.Add(dtAccountData.Rows[iRowCount][i].ToString());
                        }
                    }
                }
                if (account_detail_from_04.Count() < mcolumncount)
                {
                    for (int i = 0; i <= mcolumncount - 1; i++)
                    {
                        account_detail_from_04.Add("");
                    }
                }
                temp_int = mcolumncount;
                ConnectionWithAccess.query = "select BANKNAME,BANKADDRESS,BANKCITY,BANKACCNO,BANKNEFT from " + ConnectionWithAccess.tablename[27] + " where a_n = '" + ma_n + "' and s_a = '" + ms_a + "'";
                dtAccountData = ConnectionCommand.fGetDataTable();
                mcolumncount = dtAccountData.Columns.Count;
                if (dtAccountData != null && dtAccountData.Rows.Count > 0)
                {

                    for (int iRowCount = 0; iRowCount < dtAccountData.Rows.Count; iRowCount++)
                    {
                        for (int i = 0; i <= mcolumncount - 1; i++)
                        {
                            account_detail_from_04.Add(dtAccountData.Rows[iRowCount][i].ToString());
                        }
                    }
                }
                if (account_detail_from_04.Count() < mcolumncount + temp_int)
                {
                    for (int i = account_detail_from_04.Count(); i <= mcolumncount + temp_int - 1; i++)
                    {
                        account_detail_from_04.Add("");
                    }
                }


            }
        }

        private void get_item_details_from_05_using_title(string mtitle)
        {
            if (mtitle != "")
            {
                item_details_from_05.Clear();
                //item_details_from_05.Add(mtitle);
                ConnectionWithAccess.query = "select [type], item_code, [title],packing,box,price,opn_stk,clo_stk,cat,igst_per,hsn_code,p_price,unused,printed,pitch,length_size,breadth_size,RORD_QTY,RORD_LVL,location from " + ConnectionWithAccess.tablename[05] + " where [title] = '" + mtitle + "'";
                DataTable dtData1 = ConnectionCommand.fGetDataTable();
                if (dtData1 != null && dtData1.Rows.Count > 0)
                {
                    int mcolumncount = dtData1.Columns.Count;
                    for (int iRowCount = 0; iRowCount < dtData1.Rows.Count; iRowCount++)
                    {
                        for (int i = 0; i <= mcolumncount - 1; i++)
                        {
                            temp_word = dtData1.Rows[iRowCount][i].ToString();
                            item_details_from_05.Add(temp_word);
                        }
                    }
                    if (item_details_from_05.Count() < mcolumncount)
                    {
                        for (int i = 0; i <= mcolumncount - 1; i++)
                        {
                            item_details_from_05.Add("");
                        }
                    }
                    if (item_details_from_05[8] == "")
                        item_details_from_05[8] = "0";
                    if (item_details_from_05[9] == "")
                        item_details_from_05[9] = "0";
                    if (item_details_from_05[10] == "")
                        item_details_from_05[10] = item_details_from_05[5];
                    if (item_details_from_05[11] == "")
                        item_details_from_05[11] = "0";
                    if (item_details_from_05[12] == "")
                        item_details_from_05[12] = "0";
                    if (item_details_from_05[13] == "")
                        item_details_from_05[13] = "0";
                    //if (item_details_from_05[14] == "")
                    //    item_details_from_05[14] = "0.00";
                    if (item_details_from_05[15] == "")
                        item_details_from_05[15] = "0.00";
                    if (item_details_from_05[16] == "")
                        item_details_from_05[16] = "0.00";
                    if (item_details_from_05[17] == "")
                        item_details_from_05[17] = "0.00";
                }
            }
        }

        private void get_item_details_from_05_using_type_item_code(string mtype, string mitem_code)
        {
            if (mitem_code != "")
            {
                item_details_from_05.Clear();
                //item_details_from_05.Add(mtitle);
                ConnectionWithAccess.query = "select [type], item_code, [title],packing,box,price,opn_stk,clo_stk,cat,igst_per,hsn_code,p_price,unused,printed,pitch,length_size,breadth_size,RORD_QTY,RORD_LVL,location from " + ConnectionWithAccess.tablename[05] + " where [type] = '" + mtype + "' and item_code = '" + mitem_code + "'";
                DataTable dtData1 = ConnectionCommand.fGetDataTable();
                if (dtData1 != null && dtData1.Rows.Count > 0)
                {
                    int mcolumncount = dtData1.Columns.Count;
                    for (int iRowCount = 0; iRowCount < dtData1.Rows.Count; iRowCount++)
                    {
                        for (int i = 0; i <= mcolumncount - 1; i++)
                        {
                            temp_word = dtData1.Rows[iRowCount][i].ToString();
                            item_details_from_05.Add(temp_word);
                        }
                    }
                    if (item_details_from_05.Count() < mcolumncount)
                    {
                        for (int i = 0; i <= mcolumncount - 1; i++)
                        {
                            item_details_from_05.Add("");
                        }
                    }
                    if (item_details_from_05[8] == "")
                        item_details_from_05[8] = "0";
                    if (item_details_from_05[9] == "")
                        item_details_from_05[9] = "0";
                    if (item_details_from_05[10] == "")
                        item_details_from_05[10] = "0";
                    if (item_details_from_05[11] == "")
                        item_details_from_05[11] = "0";
                    if (item_details_from_05[12] == "")
                        item_details_from_05[12] = "0";
                    if (item_details_from_05[13] == "")
                        item_details_from_05[13] = "0";
                    //if (item_details_from_05[14] == "")
                    //    item_details_from_05[14] = "0.00";
                    if (item_details_from_05[15] == "")
                        item_details_from_05[15] = "0.00";
                    if (item_details_from_05[16] == "")
                        item_details_from_05[16] = "0.00";
                    if (item_details_from_05[17] == "")
                        item_details_from_05[17] = "0.00";
                }
            }
        }

        private void get_item_list_from_sale_purchase_file(string mbook, string mprd, int md_c, string ma_n, string ms_a, int md_n)
        {
            if (mbook == "S")
            {
                invoice_item_list.Clear();
                ConnectionWithAccess.query = "select [type], item_code, [title],price,cat,qty,amount from " + ConnectionWithAccess.tablename[03] + " where [prd] = '" + mprd + "' and d_c = " + md_c + " and d_n = '" + md_n + "'";
                DataTable dtData1 = ConnectionCommand.fGetDataTable();
                if (dtData1 != null && dtData1.Rows.Count > 0)
                {
                    int mcolumncount = dtData1.Columns.Count;
                    for (int iRowCount = 0; iRowCount < dtData1.Rows.Count; iRowCount++)
                    {
                        for (int i = 0; i <= mcolumncount - 1; i++)
                        {
                            temp_word = dtData1.Rows[iRowCount][i].ToString();
                            invoice_item_list.Add(temp_word);
                        }
                    }
                    if (account_detail_from_01.Count() < mcolumncount)
                    {
                        for (int i = 0; i <= mcolumncount - 1; i++)
                        {
                            invoice_item_list.Add("");
                        }
                    }
                }
            }
            else if (mbook == "P")
            {
                invoice_item_list.Clear();
                ConnectionWithAccess.query = "select [type], item_code, [title],price,cat,qty,amount from " + ConnectionWithAccess.tablename[03] + " where [prd] = '" + mprd + "' and d_c = " + md_c + " and a_n = '" + ma_n + "' and s_a = '" + ms_a + "' and d_n = '" + md_n + "'";
                DataTable dtData1 = ConnectionCommand.fGetDataTable();
                if (dtData1 != null && dtData1.Rows.Count > 0)
                {
                    int mcolumncount = dtData1.Columns.Count;
                    for (int iRowCount = 0; iRowCount < dtData1.Rows.Count; iRowCount++)
                    {
                        for (int i = 0; i <= mcolumncount - 1; i++)
                        {
                            temp_word = dtData1.Rows[iRowCount][i].ToString();
                            invoice_item_list.Add(temp_word);
                        }
                    }
                    if (account_detail_from_01.Count() < mcolumncount)
                    {
                        for (int i = 0; i <= mcolumncount - 1; i++)
                        {
                            invoice_item_list.Add("");
                        }
                    }
                }
            }
        }

        private void get_tax_desc_from_dc(string book, string md_c, int mtx_code)
        {
            if (book != "" && md_c != "")
            {
                ConnectionWithAccess.sales_purchase_transfer = null;
                if (book == "S")
                    ConnectionWithAccess.query = "select tx_code,tax_rate, [desc],a_n from " + ConnectionWithAccess.tablename[6] + " where d_c = " + md_c + " and tx_code = " + mtx_code;
                else if (book == "P")
                    ConnectionWithAccess.query = "select tx_code,tax_rate, [desc],a_n from " + ConnectionWithAccess.tablename[6] + " where d_c = " + md_c + " and tx_code = " + mtx_code;
                else if (book == "R")
                    ConnectionWithAccess.query = "select tx_code,tax_rate, [desc],a_n from " + ConnectionWithAccess.tablename[6] + " where d_c = " + md_c + " and tx_code = " + mtx_code;
                DataTable dtData1 = ConnectionCommand.fGetDataTable();

                if (dtData1 != null && dtData1.Rows.Count > 0)
                {
                    if (dtData1.Rows[0][0] != null)
                    {
                        if (subtabDataEntry.SelectedIndex == 0)
                        {
                            sitaxrate.Text = dtData1.Rows[0][1].ToString();
                            sitaxdesc.Text = dtData1.Rows[0][2].ToString();
                            ConnectionWithAccess.sales_purchase_transfer = dtData1.Rows[0][3].ToString();
                        }
                        else if (subtabDataEntry.SelectedIndex == 1)
                        {
                            pitaxrate.Text = dtData1.Rows[0][1].ToString();
                            pitaxdesc.Text = dtData1.Rows[0][2].ToString();
                            ConnectionWithAccess.sales_purchase_transfer = dtData1.Rows[0][3].ToString();
                        }
                    }
                }
            }
        }

        private void get_common_account_head()
        {
            if (ledger_account_help.CurrentRow != null)
            {
                if (ledger_account_help.CurrentRow.Cells[2].Value != null && ledger_account_help.CurrentRow.Cells[3].Value != null)
                {
                    ConnectionWithAccess.ma_n = ledger_account_help.CurrentRow.Cells[2].Value.ToString();
                    ConnectionWithAccess.ms_a = ledger_account_help.CurrentRow.Cells[3].Value.ToString();
                    ConnectionWithAccess.query = "select distinct [desc], city from " + ConnectionWithAccess.tablename[1] + " where a_n = '" + ConnectionWithAccess.ma_n + "' and s_a ='@@@'";
                    DataTable dtData1 = ConnectionCommand.fGetDataTable();
                    if (dtData1 != null && dtData1.Rows.Count > 0)
                    {
                        if (dtData1.Rows[0][0] != null)
                        {
                            lbl_ledger_master_account_name.Text = dtData1.Rows[0][0].ToString();
                        }
                    }
                }
            }
        }

        private void get_period_details_from_50(string temp_prd)
        {
            ConnectionWithAccess.query = "select prd, [start], [end], [lock], gp, vat, data_tran, s_form from " + ConnectionWithAccess.tablename[50] + " where prd = '" + temp_prd + "'";

            DataTable dtData1 = ConnectionCommand.fGetDataTable();
            if (dtData1 != null && dtData1.Rows.Count > 0)
            {
                if (dtData1.Rows[0][0] != null)
                {
                    ConnectionWithAccess.msdate = dtData1.Rows[0][1].ToString();
                    ConnectionWithAccess.medate = dtData1.Rows[0][2].ToString();
                    ConnectionWithAccess.prd_lock = dtData1.Rows[0][3].ToString();
                    if (dtData1.Rows[0][4].ToString() != "")
                        ConnectionWithAccess.gp_percent = Convert.ToDouble(dtData1.Rows[0][4].ToString());
                    else
                        ConnectionWithAccess.gp_percent = 0;
                }
            }
        }

        private void get_two_totals(DataGridView mDataGridView, int total_of_column1, int total_of_column2)
        {
            temp_double = 0;
            temp_double2 = 0;
            for (row_pointer = 0; row_pointer < mDataGridView.Rows.Count; row_pointer++)
            {
                if (mDataGridView.Rows[row_pointer].Cells[total_of_column1].Value != null && mDataGridView.Rows[row_pointer].Cells[total_of_column1].Value.ToString() != "")
                    if (Convert.ToDouble(mDataGridView.Rows[row_pointer].Cells[total_of_column1].Value.ToString()) != 0)
                        temp_double = temp_double + Convert.ToDouble(mDataGridView.Rows[row_pointer].Cells[total_of_column1].Value.ToString());
                if (mDataGridView.Rows[row_pointer].Cells[total_of_column2].Value != null && mDataGridView.Rows[row_pointer].Cells[total_of_column2].Value.ToString() != "")
                    if (Convert.ToDouble(mDataGridView.Rows[row_pointer].Cells[total_of_column2].Value.ToString()) != 0)
                        temp_double2 = temp_double2 + Convert.ToDouble(mDataGridView.Rows[row_pointer].Cells[total_of_column2].Value.ToString());
            }
            ConnectionWithAccess.connectionStart();
            try
            {
                mDataGridView.Rows.Add();
                mDataGridView.Rows[mDataGridView.Rows.Count - 1].Cells[total_of_column1].Value = Convert.ToString(temp_double);
                mDataGridView.Rows[mDataGridView.Rows.Count - 1].Cells[total_of_column2].Value = Convert.ToString(temp_double2);
            }
            catch (Exception ex)
            {
            }
        }

        private void get_temp_start_end_period(string temp_prd)
        {
            ConnectionWithAccess.query = "select prd, start, [end], lock, gp from " + ConnectionWithAccess.tablename[50] + " where prd = '" + temp_prd + "'";
            DataTable dtData1 = ConnectionCommand.fGetDataTable();
            if (dtData1 != null && dtData1.Rows.Count > 0)
            {
                if (dtData1.Rows[0][0] != null)
                {
                    temp_start_period = dtData1.Rows[0][1].ToString();
                    temp_end_period = dtData1.Rows[0][2].ToString();
                    temp_start_period = temp_start_period.Substring(0, temp_start_period.IndexOf(" "));
                    temp_end_period = temp_end_period.Substring(0, temp_end_period.IndexOf(" "));
                }
            }
        }

        private void get_tx_code_from_tax_name(string book, string mtx_desc, string md_c)
        {
            if (book == "S")
                ConnectionWithAccess.query = "select tx_code from " + ConnectionWithAccess.tablename[6] + " where d_c = " + md_c + " and [desc] = '" + mtx_desc + "'";
            else
                ConnectionWithAccess.query = "select tx_code from " + ConnectionWithAccess.tablename[6] + " where d_c = " + md_c + " and [desc] = '" + mtx_desc + "'";
            DataTable dtData1 = ConnectionCommand.fGetDataTable();
            if (dtData1 != null && dtData1.Rows.Count > 0)
            {
                if (dtData1.Rows[0][0] != null)
                {
                    if (dtData1.Rows[0][0].ToString().Contains("."))
                    {
                        temp_word = dtData1.Rows[0][0].ToString().Substring(0, dtData1.Rows[0][0].ToString().IndexOf("."));
                        ConnectionWithAccess.mtx_code = Convert.ToInt32(temp_word);
                    }
                    else
                        ConnectionWithAccess.mtx_code = Convert.ToInt32(dtData1.Rows[0][0].ToString());
                }
                else
                    ConnectionWithAccess.mtx_code = 0;
            }
            else
                ConnectionWithAccess.mtx_code = 0;
        }

        private void get_bank_details()
        {
            if (maintab.SelectedIndex == 2 && subtabMasters.SelectedIndex == 0)
            {
                ConnectionWithAccess.query = "select a_n,s_a,bankname,bankaddress,bankcity,bankaccno,bankneft from " + ConnectionWithAccess.tablename[27] + " where a_n = '" + tbA_N.Text + "' and s_a = '" + tbS_A.Text + "'";
                DataTable dtData1 = ConnectionCommand.fGetDataTable();

                if (dtData1 != null && dtData1.Rows.Count > 0)
                {
                    if (dtData1.Rows[0][0] != null)
                    {
                        bankname.Text = dtData1.Rows[0][2].ToString();
                        BANKADDRESS.Text = dtData1.Rows[0][3].ToString();
                        BANKCITY.Text = dtData1.Rows[0][4].ToString();
                        BANKACCNUMBER.Text = dtData1.Rows[0][5].ToString();
                        BANKNEFTIFSC.Text = dtData1.Rows[0][6].ToString();
                        if (BANKACCNUMBER.Text.Contains("."))
                            BANKACCNUMBER.Text = BANKACCNUMBER.Text.Replace(".", "");
                    }
                    if (bankname.Text == "")
                    {
                        get_account_details_from_04(tbA_N.Text, tbS_A.Text);
                        if (account_detail_from_04.Count >= 9)
                            bankname.Text = account_detail_from_04[9];
                        if (bankname.Text != "")
                            save_bank_details();
                    }
                }
            }
        }

        private void get_old_sale_invoice_amount()
        {
            ConnectionWithAccess.query = "select gamt from " + ConnectionWithAccess.tablename[21] + " f21 where d_n " + (sidocno.Text.Trim() == string.Empty ? "is null" : "= " + sidocno.Text.Trim()) + " and prd = '" + ConnectionWithAccess.mprd + "' and d_c = " + Convert.ToInt32(sidbc.SelectedValue.ToString());
            DataTable dtData1 = ConnectionCommand.fGetDataTable();
            if (dtData1 != null && dtData1.Rows.Count > 0)
            {
                if (dtData1.Rows[0][0] != null)
                {
                    old_sale_invoice_amount = Convert.ToDouble(dtData1.Rows[0][0].ToString());
                }
            }
        }

        private void get_account_names_from_access_in_bank_dgv()
        {
            if (dgvBankExcelUpload.Rows.Count > 1)
            {
                for (row_counter = 0; row_counter < dgvBankExcelUpload.Rows.Count - 1; row_counter++)
                {
                    if (dgvBankExcelUpload.Rows[row_counter].Cells["DebitAmt"].Value.ToString() == "50000")
                        temp_word = "sanjay";
                    temp_datetime = Convert.ToDateTime(dgvBankExcelUpload.Rows[row_counter].Cells["ValueDate"].Value.ToString());
                    if (Convert.ToSingle(dgvBankExcelUpload.Rows[row_counter].Cells["DebitAmt"].Value.ToString()) != 0)
                    {
                        temp_float = Convert.ToSingle(dgvBankExcelUpload.Rows[row_counter].Cells["DebitAmt"].Value.ToString()) * -1;
                        ConnectionWithAccess.query = "select f23.d_d, f23.d_n, f1.[desc] as [Desc], f1.city, f23.bamt, f23.mess, f23.a_n, f23.s_a, f23.d_c, f23.r_p from " + ConnectionWithAccess.tablename[23] + " f23  inner join " + ConnectionWithAccess.tablename[1] + " f1 on f23.a_n = f1.a_n and f23.s_a = f1.s_a where f23.prd = '" + ConnectionWithAccess.mprd + "' and f23.d_c = " + cb_BU_from_dc.SelectedValue.ToString() + " and r_p = '4' and f1.d_y = '@@@' and F23.PASS_DATE = @D_D_Date and f23.bamt = " + temp_float;
                        search_on_particular_date_in_select_query("@d_d_date", temp_datetime);
                        DataTable dtData1 = ConnectionCommand.fGetDataTable();
                        if (dtData1 != null && dtData1.Rows.Count > 0)
                        {
                            if (dtData1.Rows.Count > 1)
                                dgvBankExcelUpload.Rows[row_counter].DefaultCellStyle.BackColor = Color.Blue;
                            else
                            {
                                if (dtData1.Rows[0][0] != null)
                                {
                                    dgvBankExcelUpload.Rows[row_counter].Cells["d_n"].Value = dtData1.Rows[0][0].ToString();
                                    dgvBankExcelUpload.Rows[row_counter].Cells["desc"].Value = dtData1.Rows[0][2].ToString();
                                    dgvBankExcelUpload.Rows[row_counter].Cells["city"].Value = dtData1.Rows[0][3].ToString();
                                    dgvBankExcelUpload.Rows[row_counter].Cells["a_n"].Value = dtData1.Rows[0][6].ToString();
                                    dgvBankExcelUpload.Rows[row_counter].Cells["s_a"].Value = dtData1.Rows[0][7].ToString();
                                    dgvBankExcelUpload.Rows[row_counter].Cells["d_c"].Value = dtData1.Rows[0][8].ToString();
                                    dgvBankExcelUpload.Rows[row_counter].Cells["r_p"].Value = dtData1.Rows[0][9].ToString();
                                    dgvBankExcelUpload.Rows[row_counter].DefaultCellStyle.BackColor = Color.Green;
                                }
                            }
                        }
                        else
                        {
                            ConnectionWithAccess.query = "select f23.d_d, f23.d_n, f1.[desc] as [Desc], f1.city, f23.bamt, f23.mess, f23.a_n, f23.s_a, f23.d_c, f23.r_p from " + ConnectionWithAccess.tablename[23] + " f23  inner join " + ConnectionWithAccess.tablename[1] + " f1 on f23.a_n = f1.a_n and f23.s_a = f1.s_a where f23.prd = '" + ConnectionWithAccess.mprd + "' and f23.d_c = " + cb_BU_from_dc.SelectedValue.ToString() + " and r_p = '3' and f1.d_y = '@@@' and F23.PASS_DATE = @D_D_Date and f23.bamt = " + temp_float;
                            search_on_particular_date_in_select_query("@d_d_date", temp_datetime);
                            dtData1 = ConnectionCommand.fGetDataTable();
                            if (dtData1 != null && dtData1.Rows.Count > 0)
                            {
                                if (dtData1.Rows.Count > 1)
                                    dgvBankExcelUpload.Rows[row_counter].DefaultCellStyle.BackColor = Color.Blue;
                                else
                                {
                                    if (dtData1.Rows[0][0] != null)
                                    {
                                        dgvBankExcelUpload.Rows[row_counter].Cells["d_n"].Value = dtData1.Rows[0][0].ToString();
                                        dgvBankExcelUpload.Rows[row_counter].Cells["desc"].Value = dtData1.Rows[0][2].ToString();
                                        dgvBankExcelUpload.Rows[row_counter].Cells["city"].Value = dtData1.Rows[0][3].ToString();
                                        dgvBankExcelUpload.Rows[row_counter].Cells["a_n"].Value = dtData1.Rows[0][6].ToString();
                                        dgvBankExcelUpload.Rows[row_counter].Cells["s_a"].Value = dtData1.Rows[0][7].ToString();
                                        dgvBankExcelUpload.Rows[row_counter].Cells["d_c"].Value = dtData1.Rows[0][8].ToString();
                                        dgvBankExcelUpload.Rows[row_counter].Cells["r_p"].Value = dtData1.Rows[0][9].ToString();
                                        dgvBankExcelUpload.Rows[row_counter].DefaultCellStyle.BackColor = Color.Green;
                                    }
                                }
                            }
                        }
                    }
                    else if (Convert.ToSingle(dgvBankExcelUpload.Rows[row_counter].Cells["CreditAmt"].Value.ToString()) != 0)
                    {
                        temp_float = Convert.ToSingle(dgvBankExcelUpload.Rows[row_counter].Cells["CreditAmt"].Value.ToString());
                        ConnectionWithAccess.query = "select f23.d_d, f23.d_n, f1.[desc] as [Desc], f1.city, f23.bamt, f23.mess, f23.a_n, f23.s_a, f23.d_c, f23.r_p from " + ConnectionWithAccess.tablename[23] + " f23  inner join " + ConnectionWithAccess.tablename[1] + " f1 on f23.a_n = f1.a_n and f23.s_a = f1.s_a where f23.prd = '" + ConnectionWithAccess.mprd + "' and f23.d_c = " + cb_BU_from_dc.SelectedValue.ToString() + " and r_p = '2' and f1.d_y = '@@@' and F23.PASS_DATE = @D_D_Date and f23.bamt = " + temp_float;
                        search_on_particular_date_in_select_query("@d_d_date", temp_datetime);
                        DataTable dtData1 = ConnectionCommand.fGetDataTable();
                        if (dtData1 != null && dtData1.Rows.Count > 0)
                        {
                            if (dtData1.Rows.Count > 1)
                                dgvBankExcelUpload.Rows[row_counter].DefaultCellStyle.BackColor = Color.Blue;
                            else
                            {
                                if (dtData1.Rows[0][0] != null)
                                {
                                    dgvBankExcelUpload.Rows[row_counter].Cells["d_n"].Value = dtData1.Rows[0][0].ToString();
                                    dgvBankExcelUpload.Rows[row_counter].Cells["desc"].Value = dtData1.Rows[0][2].ToString();
                                    dgvBankExcelUpload.Rows[row_counter].Cells["city"].Value = dtData1.Rows[0][3].ToString();
                                    dgvBankExcelUpload.Rows[row_counter].Cells["a_n"].Value = dtData1.Rows[0][6].ToString();
                                    dgvBankExcelUpload.Rows[row_counter].Cells["s_a"].Value = dtData1.Rows[0][7].ToString();
                                    dgvBankExcelUpload.Rows[row_counter].Cells["d_c"].Value = dtData1.Rows[0][8].ToString();
                                    dgvBankExcelUpload.Rows[row_counter].Cells["r_p"].Value = dtData1.Rows[0][9].ToString();
                                    dgvBankExcelUpload.Rows[row_counter].DefaultCellStyle.BackColor = Color.Green;
                                }
                            }
                        }
                        else
                        {
                            ConnectionWithAccess.query = "select f23.d_d, f23.d_n, f1.[desc] as [Desc], f1.city, f23.bamt, f23.mess, f23.a_n, f23.s_a, f23.d_c, f23.r_p from " + ConnectionWithAccess.tablename[23] + " f23  inner join " + ConnectionWithAccess.tablename[1] + " f1 on f23.a_n = f1.a_n and f23.s_a = f1.s_a where f23.prd = '" + ConnectionWithAccess.mprd + "' and f23.d_c = " + cb_BU_from_dc.SelectedValue.ToString() + " and r_p = '1' and f1.d_y = '@@@' and F23.PASS_DATE = @D_D_Date and f23.bamt = " + temp_float;
                            search_on_particular_date_in_select_query("@d_d_date", temp_datetime);
                            dtData1 = ConnectionCommand.fGetDataTable();
                            if (dtData1 != null && dtData1.Rows.Count > 0)
                            {
                                if (dtData1.Rows.Count > 1)
                                    dgvBankExcelUpload.Rows[row_counter].DefaultCellStyle.BackColor = Color.Blue;
                                else
                                {
                                    if (dtData1.Rows[0][0] != null)
                                    {
                                        dgvBankExcelUpload.Rows[row_counter].Cells["d_n"].Value = dtData1.Rows[0][0].ToString();
                                        dgvBankExcelUpload.Rows[row_counter].Cells["desc"].Value = dtData1.Rows[0][2].ToString();
                                        dgvBankExcelUpload.Rows[row_counter].Cells["city"].Value = dtData1.Rows[0][3].ToString();
                                        dgvBankExcelUpload.Rows[row_counter].Cells["a_n"].Value = dtData1.Rows[0][6].ToString();
                                        dgvBankExcelUpload.Rows[row_counter].Cells["s_a"].Value = dtData1.Rows[0][7].ToString();
                                        dgvBankExcelUpload.Rows[row_counter].Cells["d_c"].Value = dtData1.Rows[0][8].ToString();
                                        dgvBankExcelUpload.Rows[row_counter].Cells["r_p"].Value = dtData1.Rows[0][9].ToString();
                                        dgvBankExcelUpload.Rows[row_counter].DefaultCellStyle.BackColor = Color.Green;
                                    }
                                }
                            }
                        }
                    }

                }
            }
        }

        # endregion

        private void braccountdg_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                rowIndex = braccountdg.CurrentCell.RowIndex;
                ConnectionWithAccess.mdesc = braccountdg.Rows[rowIndex].Cells[0].Value.ToString();
                ConnectionWithAccess.mcity = braccountdg.Rows[rowIndex].Cells[1].Value.ToString();
                bra_n.Text = braccountdg.Rows[rowIndex].Cells[2].Value.ToString();
                brs_a.Text = braccountdg.Rows[rowIndex].Cells[3].Value.ToString();
                show_images();
                braccountdg.Visible = false;
                brpartycode.Text = ConnectionWithAccess.mdesc;
                brpartycity.Text = ConnectionWithAccess.mcity;
            }
        }

        //public static void BackupDatabase(string backUpFile)
        //{
        //    ServerConnection con = new ServerConnection(@"xxxxx\SQLEXPRESS");
        //    Server server = new Server(con);
        //    Backup source = new Backup();
        //    source.Action = BackupActionType.Database;
        //    source.Database = "MyDataBaseName";
        //    BackupDeviceItem destination = new BackupDeviceItem(backUpFile, DeviceType.File);
        //    source.Devices.Add(destination);
        //    source.SqlBackup(server);
        //    con.Disconnect();
        //}

        //public static void RestoreDatabase(string backUpFile)
        //{
        //    ServerConnection con = new ServerConnection(@"xxxxx\SQLEXPRESS");
        //    Server server = new Server(con);
        //    Restore destination = new Restore();
        //    destination.Action = RestoreActionType.Database;
        //    destination.Database = "MyDataBaseName"; ;
        //    BackupDeviceItem source = new BackupDeviceItem(backUpFile, DeviceType.File);
        //    destination.Devices.Add(source);
        //    destination.ReplaceDatabase = true;
        //    destination.SqlRestore(server);
        //}

        #region Filter From Datatables
        DataTable dt_Item_Master_List = null, dt_Account_Master_List, dt_Period_Master_List;
        DataTable dt_item_sale_purchase_master = null;
        DataTable dt_Party_Master_List = null;
        DataTable full_account_Master_List = null;

        private void fLoad_All_DataTables()
        {
            fLoad_Item_Master_List();
            fLoad_Account_Master_List();
            fLoad_full_account_master_list();
            fLoad_Party_Master_List();
            fload_Period_Master_List();
            fLoad_Item_sale_purchase_Master_List();
        }

        private void fLoad_Party_Master_List()
        {
            dt_Party_Master_List = null;
            //ConnectionWithAccess.query = "select [desc], city, a_n,s_a,d_y from " + ConnectionWithAccess.tablename[1] + " where s_a <> '@@@' and (d_y is null or d_y ='' or d_y = '@@@') order by [desc], city";
            ConnectionWithAccess.query = "select [desc], city, a_n,s_a,d_y from " + ConnectionWithAccess.tablename[1] + " where s_a <> '@@@' and d_y = '@@@' order by [desc], city";
            dt_Party_Master_List = ConnectionCommand.fGetDataTable();
        }

        private void fLoad_Item_Master_List()
        {
            dt_Item_Master_List = null;
            ConnectionWithAccess.query = "select [type], item_code, [title],packing,box,price,clo_stk,cat,igst_per,hsn_code,p_price from " + ConnectionWithAccess.tablename[05] + " order by [title]";
            dt_Item_Master_List = ConnectionCommand.fGetDataTable();
            ConnectionWithAccess.query = "select distinct location from " + ConnectionWithAccess.tablename[5];
            ConnectionCommand.retrieval(mix_reports_d_c_combo_box);
        }

        private void fLoad_Item_sale_purchase_Master_List()
        {
            dt_item_sale_purchase_master = null;
            ConnectionWithAccess.query = "select [type], item_code, [title],price,cat,igst_per,hsn_code,a_n,s_a from " + ConnectionWithAccess.tablename[03] + " order by [title]";
            dt_item_sale_purchase_master = ConnectionCommand.fGetDataTable();
        }

        private void fLoad_Account_Master_List()
        {
            dt_Account_Master_List = null;
            //ConnectionWithAccess.query = "select f1.[desc], f1.city, f1.a_n, f1.s_a, f1.d_y, f2.[desc] as [Master Account] from " + ConnectionWithAccess.tablename[1] + " f1 left outer join " + ConnectionWithAccess.tablename[1] + " f2 on f2.a_n = f1.a_n where f2.s_a = '@@@' order by f1.[desc],f1.city";

            ConnectionWithAccess.query = "select distinct f1.[desc], f1.city, f1.a_n, f1.s_a, f1.d_y, " +
                " switch ( f1.d_y = '@@@', f2.desc, f1.d_y <> '@@@', f3.desc) as [Master Account] " +
                " from (" + ConnectionWithAccess.tablename[1] + " f1 " +
                " left outer join " + ConnectionWithAccess.tablename[1] + " f2 on f2.a_n = f1.a_n) " +
                " left outer join " + ConnectionWithAccess.tablename[1] + " f3 on f3.a_n = f1.a_n and f3.s_a = f1.s_a " +
                " where f2.s_a = '@@@' and f3.d_y = '@@@' " +
                " order by f1.a_n,f1.s_a,f1.d_y ";

            dt_Account_Master_List = ConnectionCommand.fGetDataTable();
        }

        private void fLoad_full_account_master_list()
        {
            full_account_Master_List = null;
            ConnectionWithAccess.query = "select distinct f1.[desc], f1.city, f1.a_n, f1.s_a, f1.d_y, " +
                " switch ( f1.d_y = '@@@', f2.desc, f1.d_y <> '@@@', f3.desc) as [Master Account] " +
                " from (" + ConnectionWithAccess.tablename[1] + " f1 " +
                " left outer join " + ConnectionWithAccess.tablename[1] + " f2 on f2.a_n = f1.a_n) " +
                " left outer join " + ConnectionWithAccess.tablename[1] + " f3 on f3.a_n = f1.a_n and f3.s_a = f1.s_a " +
                " where f2.s_a = '@@@' and f3.d_y = '@@@' " +
                " order by f1.a_n,f1.s_a,f1.d_y ";
            full_account_Master_List = ConnectionCommand.fGetDataTable();
        }

        private void fload_Period_Master_List()
        {
            dt_Period_Master_List = null;
            ConnectionWithAccess.query = "select prd, [start], [end], [lock], gp, vat, data_tran, s_form from " + ConnectionWithAccess.tablename[50] + " order by prd";
            dt_Period_Master_List = ConnectionCommand.fGetDataTable();
        }

        private void vFilterDataTableAndFillGrid(DataGridView mDataGridView, DataTable dtTable, string strFilterExpression)
        {
            if (dtTable != null && dtTable.Rows.Count > 0)
            {
                DataRow[] drRows = dtTable.Select(strFilterExpression);
                mDataGridView.AutoGenerateColumns = false;

                if (drRows != null && drRows.Length > 0)
                {
                    mDataGridView.DataSource = drRows.CopyToDataTable();
                }
                else
                    mDataGridView.DataSource = null;
            }
        }
        #endregion Filter From Datatables

        public void common_account_help(string search_account_name)
        {
            function_working = "Account Ledger";
            ledger_account_help.Visible = true;
            ledger_item_help.Visible = false;
            //ConnectionWithAccess.query = "select f1.[desc], f1.city, f1.a_n, f1.s_a , f2.[desc] as [Master Account] from " + ConnectionWithAccess.tablename[1] + " f1 left outer join " + ConnectionWithAccess.tablename[1] + " f2 on f2.a_n = f1.a_n where f2.s_a = '@@@' and f1.[desc] like '%" + search_account_name + "%' order by f1.[desc],f1.city";
            //ConnectionCommand.accountHelp_datatable_Seperate(ledger_account_help, "ledger_account_help");
            vFilterDataTableAndFillGrid(ledger_account_help, dt_Account_Master_List, "[desc] like '%" + search_account_name + "%'");
            if (ledger_account_help.Rows.Count == 1)
            {
                //ConnectionWithAccess.query = "select f1.[desc], f1.city, f1.a_n, f1.s_a , f2.[desc] as [Master Account] from " + ConnectionWithAccess.tablename[1] + " f1 left outer join " + ConnectionWithAccess.tablename[1] + " f2 on f2.a_n = f1.a_n where f2.s_a = '@@@' and f1.[city] like '%" + search_account_name + "%' order by f1.[desc],f1.city";
                //ConnectionCommand.accountHelp_datatable_Seperate(ledger_account_help, "ledger_account_help");
                vFilterDataTableAndFillGrid(ledger_account_help, dt_Account_Master_List, "[city] like '%" + search_account_name + "%'");
                if (ledger_account_help.Rows.Count == 1)
                {
                    lbl_ledger_master_account_name.Visible = false;
                    ledger_account_help.Visible = false;
                    ledger_item_help.Visible = true;
                    function_working = "Item Ledger";
                    vFilterDataTableAndFillGrid(ledger_item_help, dt_Item_Master_List, "[title] like '%" + search_account_name + "%' ");
                    //ConnectionWithAccess.query = "select [type], item_code, [title],packing,box,price,clo_stk,cat,igst_per,hsn_code from " + ConnectionWithAccess.tablename[05] + " where [title] like '%" + search_account_name + "%' order by [title]";
                    //ConnectionCommand.accountHelp_datatable_Seperate(ledger_item_help, "ledger_item_help", "[title] ASC");
                }
            }
            else
                move_cursor_to_button_position("ledger_account_help");
        }

        private string common_account_head(string ma_n)
        {
            ConnectionWithAccess.macc_desc = "";
            if (ma_n != null)
            {
                ConnectionWithAccess.macc_desc = null;
                ConnectionWithAccess.query = "select distinct [desc], city from " + ConnectionWithAccess.tablename[1] + " where a_n = '" + ma_n + "' and s_a ='@@@'";
                DataTable dtData1 = ConnectionCommand.fGetDataTable();

                if (dtData1 != null && dtData1.Rows.Count > 0)
                {
                    if (dtData1.Rows[0][0] != null)
                    {
                        ConnectionWithAccess.macc_desc = dtData1.Rows[0][0].ToString();
                    }
                }
            }
            return ConnectionWithAccess.macc_desc;
        }

        private void CheckBox1_CheckedChanged(object sender, EventArgs e)
        {
            if (Convert.ToDateTime(ConnectionWithAccess.medate) >= DateTime.Today)
            {
                last_date = DateTime.Today;
                first_date = Convert.ToDateTime(ConnectionWithAccess.msdate);
            }
            else
            {
                first_date = Convert.ToDateTime(ConnectionWithAccess.msdate);
                last_date = Convert.ToDateTime(ConnectionWithAccess.medate);
            }
            //if (cb_ledger_full_period.Checked == true)
            //{
            //    Ledfrom.MinDate = Convert.ToDateTime(ConnectionWithAccess.com_start_date);
            //    LedTo.MinDate = Convert.ToDateTime(ConnectionWithAccess.com_start_date);
            //    LedTo.MaxDate = Convert.ToDateTime(ConnectionWithAccess.com_end_date);
            //    Ledfrom.Value = Convert.ToDateTime(ConnectionWithAccess.com_start_date);
            //}
            //else
            //    Ledfrom.Value = Convert.ToDateTime(ConnectionWithAccess.msdate);
            LedTo.Value = last_date;

        }

        private void pi_party_help_KeyDown(object sender, KeyEventArgs e)
        {
            DispEmail.Clear();
            sipartyname.Clear();
            sipartyaddress.Clear();
            sicontactdetails.Clear();
            pitransport.Items.Clear();
            pibasicamt.Text = "0.00";
            pitaxamt.Text = "0.00";
            piroundoffamt.Text = "0.00";
            pigrossamt.Text = "0.00";
            pitaxcode.Text = "0";
            if (e.KeyCode == Keys.Enter)
            {
                ConnectionWithAccess.query = "select a_n,s_a,d_y,[desc], city from " + ConnectionWithAccess.tablename[1] + " where a_n = (select distinct a_n from " + ConnectionWithAccess.tablename[21] + " where d_c = " + pidbc.SelectedValue.ToString() + " and d_n = 999999) and s_a <> '@@@' and (d_y is null or d_y ='') and ([desc] like '%" + pi_party_help.SelectedCells[0].Value + "%')";
                DataTable dtData1 = ConnectionCommand.fGetDataTable();
                if (dtData1 != null && dtData1.Rows.Count > 0)
                {
                    if (dtData1.Rows[0][0] != null)
                    {
                        pia_n.Text = dtData1.Rows[0][0].ToString();
                        pis_a.Text = dtData1.Rows[0][1].ToString();
                        show_images();
                    }
                }
                populate_screen();
                ConnectionWithAccess.query = "select tx_code,tax_rate, [desc] from " + ConnectionWithAccess.tablename[6] + " where d_c = " + Convert.ToInt32(pidbc.SelectedValue.ToString()) + " and tx_code = " + pitaxcode.Text;
                dtData1 = ConnectionCommand.fGetDataTable();

                if (dtData1 != null && dtData1.Rows.Count > 0)
                {
                    if (dtData1.Rows[0][0] != null)
                    {
                        pitaxrate.Text = dtData1.Rows[0][1].ToString();
                        pitaxdesc.Text = dtData1.Rows[0][2].ToString();
                    }
                    else
                    {
                        pitaxdesc.Text = "";
                        pitaxrate.Text = "0.00";
                    }
                }
                else
                {
                    pitaxdesc.Text = "";
                    pitaxrate.Text = "0.00";
                }
                pi_party_help.Visible = false;
                pipartycode.Enabled = false;
                picity.Enabled = false;
            }
            else
            {
                if (e.KeyCode == Keys.Down)
                    rowIndex = pi_party_help.CurrentRow.Index + 1;
                else
                    if (e.KeyCode == Keys.Up)
                    rowIndex = pi_party_help.CurrentRow.Index - 1;
                ConnectionWithAccess.query = "select a_n,s_a,d_y,[desc], city from " + ConnectionWithAccess.tablename[1] + " where a_n = (select distinct a_n from " + ConnectionWithAccess.tablename[22] + " where d_c = " + pidbc.SelectedValue.ToString() + " and d_n = 999999) and s_a <> '@@@' and ([desc] like '%" + pi_party_help.Rows[rowIndex].Cells[0].Value + "%')";
                DataTable dtData1 = ConnectionCommand.fGetDataTable();
                if (dtData1 != null && dtData1.Rows.Count > 0)
                {
                    if (dtData1.Rows[0][0] != null)
                    {
                        pia_n.Text = dtData1.Rows[0][0].ToString();
                        pis_a.Text = dtData1.Rows[0][1].ToString();
                    }
                }
                show_images();
            }
        }

        private void master_account_help_dg_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                ConnectionWithAccess.query = "select a_n,s_a,d_y,[desc], city from " + ConnectionWithAccess.tablename[1] + " where a_n = (select distinct a_n from " + ConnectionWithAccess.tablename[21] + " where d_c = " + pidbc.SelectedValue.ToString() + " and d_n = 999999) and s_a <> '@@@' and (d_y is null or d_y ='') and ([desc] like '%" + pi_party_help.SelectedCells[0].Value + "%')";
                DataTable dtData1 = ConnectionCommand.fGetDataTable();
                if (dtData1 != null && dtData1.Rows.Count > 0)
                {
                    if (dtData1.Rows[0][0] != null)
                    {
                        tbA_N.Text = dtData1.Rows[0][0].ToString();
                        tbS_A.Text = dtData1.Rows[0][1].ToString();
                        tbd_y.Text = dtData1.Rows[0][2].ToString();
                    }
                }

                if (ConnectionWithAccess.md_y.Equals(""))
                    ConnectionWithAccess.query = "select phone1, f4.add1, f4.add2, f1.city, tpt, email, tx_code, bst, f4.cst from " + ConnectionWithAccess.tablename[1] + " f1, " + ConnectionWithAccess.tablename[4] + " f4 where f1.a_n = f4.a_n and f1.s_a = f4.s_a and f1.d_y = f4.d_y and f1.a_n = '" + tbA_N.Text + "' and f1.s_a = '" + tbS_A.Text + "'";
                else
                    ConnectionWithAccess.query = "select phone1, f4.add1, f4.add2, f1.city, tpt, email, tx_code, bst, f4.cst from " + ConnectionWithAccess.tablename[1] + " f1, " + ConnectionWithAccess.tablename[4] + " f4 where f1.a_n = f4.a_n and f1.s_a = f4.s_a and f1.d_y = f4.d_y and f1.a_n = '" + tbA_N.Text + "' and f1.s_a = '" + tbS_A.Text + "' and f1.d_y = '" + ConnectionWithAccess.md_y + "'";
                dtData1 = ConnectionCommand.fGetDataTable();
                if (dtData1 != null && dtData1.Rows.Count > 0)
                {
                    if (dtData1.Rows[0][0] != null)
                    {
                        sicontactdetails.Text = dtData1.Rows[0][0].ToString();
                        sipartyaddress.Text = dtData1.Rows[0][1].ToString() + ' ' + dtData1.Rows[0][2].ToString() + ' ' + dtData1.Rows[0][3].ToString();
                        pitransport.Text = dtData1.Rows[0][4].ToString();
                        DispEmail.Text = dtData1.Rows[0][5].ToString();
                        pitaxcode.Text = dtData1.Rows[0][6].ToString();
                        pitx_code.Text = dtData1.Rows[0][6].ToString();
                    }
                    else
                    {
                        pitaxdesc.Text = "";
                        pitaxrate.Text = "0.00";
                    }
                }
                ConnectionWithAccess.query = "select tx_code,tax_rate, [desc] from " + ConnectionWithAccess.tablename[6] + " where d_c = " + Convert.ToInt32(sidbc.SelectedValue.ToString()) + " and tx_code = " + sitaxcode.Text;
                dtData1 = ConnectionCommand.fGetDataTable();
                if (dtData1 != null && dtData1.Rows.Count > 0)
                {
                    if (dtData1.Rows[0][0] != null)
                    {
                        pitaxrate.Text = dtData1.Rows[0][1].ToString();
                        pitaxdesc.Text = dtData1.Rows[0][2].ToString();
                    }
                    else
                    {
                        pitaxdesc.Text = "";
                        pitaxrate.Text = "0.00";
                    }
                }
                else
                {
                    pitaxdesc.Text = "";
                    pitaxrate.Text = "0.00";
                }
                pi_party_help.Visible = false;
                pipartycode.Enabled = false;
                picity.Enabled = false;
            }
            else
            {
                if (e.KeyCode == Keys.Down)
                {
                    rowIndex = pi_party_help.CurrentRow.Index + 1;
                }
                else
                    if (e.KeyCode == Keys.Up)
                {
                    rowIndex = pi_party_help.CurrentRow.Index - 1;
                }
                ConnectionWithAccess.query = "select a_n,s_a,d_y,[desc], city from " + ConnectionWithAccess.tablename[1] + " where a_n = (select distinct a_n from " + ConnectionWithAccess.tablename[22] + " where d_c = " + pidbc.SelectedValue.ToString() + " and d_n = 999999) and s_a <> '@@@' and ([desc] like '%" + pi_party_help.Rows[rowIndex].Cells[0].Value + "%')";
                DataTable dtData1 = ConnectionCommand.fGetDataTable();
                if (dtData1 != null && dtData1.Rows.Count > 0)
                {
                    if (dtData1.Rows[0][0] != null)
                    {
                        tbA_N.Text = dtData1.Rows[0][0].ToString();
                        tbS_A.Text = dtData1.Rows[0][1].ToString();
                        tbd_y.Text = dtData1.Rows[0][2].ToString();
                    }
                }
                show_images();
            }
        }

        private void select_account_for_master()
        {
            rowIndex = master_account_help_dg.CurrentCell.RowIndex;
            if (tbDesc.ReadOnly == false)
            {
                if (cbParent.Text != "Unknown")
                {
                    tbA_N.Text = master_account_help_dg.Rows[rowIndex].Cells[2].Value.ToString();
                    tbS_A.Text = Convert.ToString(master_account_help_dg.Rows[rowIndex].Cells[3].Value);
                    ConnectionWithAccess.mdesc = Convert.ToString(master_account_help_dg.Rows[rowIndex].Cells[0].Value);
                    tbCity.Text = master_account_help_dg.Rows[rowIndex].Cells[1].Value.ToString();
                    tbDesc.Text = ConnectionWithAccess.mdesc;
                    fill_transport(tbA_N.Text, tbCity.Text, tbTPT);
                    update_master_account_screen_details(tbA_N.Text, tbS_A.Text, tbd_y.Text);
                    tbopenbalance.Enabled = true;
                }
                else
                {
                    //cbParent.Text = master_account_help_dg.Rows[rowIndex].Cells[4].Value.ToString();
                    tbA_N.Text = master_account_help_dg.Rows[rowIndex].Cells[2].Value.ToString();
                    tbS_A.Text = Convert.ToString(master_account_help_dg.Rows[rowIndex].Cells[3].Value);
                    ConnectionWithAccess.mdesc = Convert.ToString(master_account_help_dg.Rows[rowIndex].Cells[0].Value);
                    tbCity.Text = master_account_help_dg.Rows[rowIndex].Cells[1].Value.ToString();
                    tbDesc.Text = ConnectionWithAccess.mdesc;
                    fill_transport(tbA_N.Text, tbCity.Text, tbTPT);
                    update_master_account_screen_details(tbA_N.Text, tbS_A.Text, tbd_y.Text);
                    tbopenbalance.Enabled = true;
                }
            }
            else
            {
                tbA_N.Text = master_account_help_dg.Rows[rowIndex].Cells[2].Value.ToString();
                tbS_A.Text = Convert.ToString(master_account_help_dg.Rows[rowIndex].Cells[3].Value);
                tbd_y.Text = master_account_help_dg.Rows[rowIndex].Cells[4].Value.ToString();
                ConnectionWithAccess.mdesc = Convert.ToString(master_account_help_dg.Rows[rowIndex].Cells[0].Value);
                tbdelivery_city.Text = master_account_help_dg.Rows[rowIndex].Cells[1].Value.ToString();
                tbdelivery.Text = ConnectionWithAccess.mdesc;
                fill_transport(tbA_N.Text, tbCity.Text, tbTPT);
                update_master_account_screen_details(tbA_N.Text, tbS_A.Text, tbd_y.Text);
                tbopenbalance.Enabled = false;
            }
            show_images();
            master_account_help_dg.Visible = false;
            Bank_Details.Visible = true;
            tbDesc.ReadOnly = true;
            tbCity.ReadOnly = true;
        }

        private void ledger_account_help_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyValue == 13)
            {
                if (maintab.SelectedIndex == 3 && subtabreports.SelectedIndex == 1)
                {
                    rowIndex = ledger_account_help.CurrentCell.RowIndex;
                    tb_ledger_account_name.Text = ledger_account_help.Rows[rowIndex].Cells[0].Value.ToString();
                    tb_ledger_account_city.Text = ledger_account_help.Rows[rowIndex].Cells[1].Value.ToString();
                    ledger_account_help.Visible = false;
                    lbl_ledger_master_account_name.Visible = false;
                    btn_gen_ledg.Visible = true;
                    //if (rla_n.Text == "4002")
                    //    cb_add_purchase_items_in_ledger.Visible = true;
                    //if (rla_n.Text == "2002")
                    //    cb_add_sale_items_in_ledger.Visible = true;
                }
            }
            else
            {
                get_common_account_head();
            }
        }

        private void piitemlist_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                mRowIndex = piitemlist.SelectedCells[0].RowIndex;
                ConnectionWithAccess.query = "select type, item_code, title from " + ConnectionWithAccess.tablename[05] + " where (type = '" + mtype + "' and item_code = '" + mitem_code + "') or title = '" + mtitle + "'";
                DataTable dtData1 = ConnectionCommand.fGetDataTable();
                if (dtData1 != null && dtData1.Rows.Count > 0)
                {
                    if (dtData1.Rows[0][0] != null)
                    {
                        piitemlist.Rows[mRowIndex].Cells[0].Value = dtData1.Rows[0][0].ToString();
                        piitemlist.Rows[mRowIndex].Cells[1].Value = dtData1.Rows[0][1].ToString();
                        piitemlist.Rows[mRowIndex].Cells[2].Value = dtData1.Rows[0][2].ToString();
                    }
                }
            }
        }

        private void piitemlist_RowValidating(object sender, DataGridViewCellCancelEventArgs e)
        {
            calculatepurcItemTotal();
        }

        private void piitemlist_EditingControlShowing(object sender, DataGridViewEditingControlShowingEventArgs e)
        {
            e.Control.TextChanged += new EventHandler(textBox_TextChanged);
            cntObject = e.Control;
            cntObject.TextChanged += textBox_TextChanged;
        }

        private void pitx_code_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Down)
            {
                pitaxlist_dgv.Focus();
            }
        }

        private void pitaxlist_dgv_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                rowIndex = pitaxlist_dgv.CurrentCell.RowIndex;
                mtx_code = Convert.ToString(pitaxlist_dgv.Rows[rowIndex].Cells[0].Value);
                pitaxrate.Text = Convert.ToString(pitaxlist_dgv.Rows[rowIndex].Cells[1].Value);
                pitaxdesc.Text = Convert.ToString(pitaxlist_dgv.Rows[rowIndex].Cells[2].Value);
                pitx_code.Text = mtx_code;
                pitaxlist_dgv.Visible = false;
            }
        }

        private void bp_datagridview_KeyDown(object sender, KeyEventArgs e)
        {

        }

        #region keyup event

        private void crpartycode_KeyUp(object sender, KeyEventArgs e)
        {
            ConnectionWithAccess.data_entry_working = "Cash Receipt";
            if (ConnectionWithAccess.cash_a_n == "2010")
            {
                //ConnectionWithAccess.query = "select f1.[desc], f1.city, f1.a_n, f1.s_a, f2.[desc] as [Master Account] from " + ConnectionWithAccess.tablename[1] + " f1 left outer join " + ConnectionWithAccess.tablename[1] + " f2 on f2.a_n = f1.a_n where f2.s_a = '@@@' and f1.[desc] like '%" + crpartycode.Text + "%' order by f1.[desc], f1.city";
                //ConnectionCommand.accountHelp_datatable(cr_datagridview, "cr_datagridview");
                vFilterDataTableAndFillGrid(cr_datagridview, dt_Account_Master_List, "[desc] like '%" + crpartycode.Text + "%' ");
                if (cr_datagridview.Rows.Count == 1)
                {
                    //ConnectionWithAccess.query = "select f1.[desc], f1.city, f1.a_n, f1.s_a , f2.[desc] as [Master Account] from " + ConnectionWithAccess.tablename[1] + " f1 left outer join " + ConnectionWithAccess.tablename[1] + " f2 on f2.a_n = f1.a_n where f2.s_a = '@@@' and f1.[city] like '%" + crpartycode.Text + "%' order by f1.[desc], f1.city";
                    //ConnectionCommand.accountHelp_datatable(cr_datagridview, "cr_datagridview");
                    vFilterDataTableAndFillGrid(cr_datagridview, dt_Account_Master_List, "[city] like '%" + crpartycode.Text + "%' ");
                }
            }
            else
            {
                //ConnectionWithAccess.query = "select f1.[desc], f1.city, f1.a_n, f1.s_a, f2.[desc] as [Master Account] from " + ConnectionWithAccess.tablename[1] + " f1 left outer join " + ConnectionWithAccess.tablename[1] + " f2 on f2.a_n = f1.a_n where f2.s_a = '@@@' and f2.a_n = '" + cr_book_a_n.Text + "' and f1.d_y = '@@@' and f1.[desc] like '%" + crpartycode.Text + "%' order by f1.[desc], f1.city";
                //ConnectionCommand.accountHelp_datatable(cr_datagridview, "cr_datagridview");
                string stra_n = get_a_n_from_d_c("C", Convert.ToInt32(crdbc.SelectedValue.ToString()));
                vFilterDataTableAndFillGrid(cr_datagridview, dt_Party_Master_List, "a_n = '" + stra_n + "' and [desc] like '%" + crpartycode.Text + "%' ");
                if (cr_datagridview.Rows.Count == 1)
                {
                    //ConnectionWithAccess.query = "select f1.[desc], f1.city, f1.a_n, f1.s_a , f2.[desc] as [Master Account] from " + ConnectionWithAccess.tablename[1] + " f1 left outer join " + ConnectionWithAccess.tablename[1] + " f2 on f2.a_n = f1.a_n where f2.s_a = '@@@' and f1.[city] like '%" + crpartycode.Text + "%' order by f1.[desc], f1.city";
                    //ConnectionCommand.accountHelp_datatable(cr_datagridview, "cr_datagridview");
                    vFilterDataTableAndFillGrid(cr_datagridview, dt_Party_Master_List, "a_n = '" + stra_n + "' and [city] like '%" + crpartycode.Text + "%' ");
                }
            }

            move_cursor_to_button_position("cr_datagridview");
        }

        private void cppartycode_KeyUp(object sender, KeyEventArgs e)
        {
            ConnectionWithAccess.data_entry_working = "Cash Payment";
            //ConnectionWithAccess.query = "select f1.[desc], f1.city, f1.a_n, f1.s_a , f2.[desc] as [Master Account] from " + ConnectionWithAccess.tablename[1] + " f1 left outer join " + ConnectionWithAccess.tablename[1] + " f2 on f2.a_n = f1.a_n where f2.s_a = '@@@' and f1.[desc] like '%" + cppartycode.Text + "%' order by f1.[desc], f1.city";
            //ConnectionCommand.accountHelp_datatable_Seperate(cp_datagridview, "cp_datagridview");
            vFilterDataTableAndFillGrid(cp_datagridview, dt_Account_Master_List, "[desc] like '%" + cppartycode.Text + "%' ");
            if (cp_datagridview.Rows.Count == 1)
            {
                //ConnectionWithAccess.query = "select f1.[desc], f1.city, f1.a_n, f1.s_a , f2.[desc] as [Master Account] from " + ConnectionWithAccess.tablename[1] + " f1 left outer join " + ConnectionWithAccess.tablename[1] + " f2 on f2.a_n = f1.a_n where f2.s_a = '@@@' and f1.[city] like '%" + cppartycode.Text + "%' order by f1.[desc], f1.city";
                //ConnectionCommand.accountHelp_datatable(cp_datagridview, "cp_datagridview");
                vFilterDataTableAndFillGrid(cp_datagridview, dt_Account_Master_List, "[city] like '%" + cppartycode.Text + "%' ");
            }
            else
                move_cursor_to_button_position("cp_datagridview");
        }

        private void pibasicamt_KeyUp(object sender, KeyEventArgs e)
        {
            //if (piitemlist.Rows.Count <= 1)
            //{
            //    purchase_invoice_amount = Convert.ToDouble(pibasicamt.Text);
            //    if (pitaxrate.Text != "")
            //    {
            //        pitaxamt.Text = Convert.ToString(Convert.ToDouble(pibasicamt.Text) * Convert.ToDouble(pitaxrate.Text) / 100);
            //        purchase_invoice_amount += Convert.ToDouble(pitaxamt.Text);
            //    }
            //    else
            //        pitaxamt.Text = "0.00";
            //    if (tb_pi_igst_tax_amount.Text != "" && tb_pi_igst_tax_amount.Text != "0.00")
            //        purchase_invoice_amount += Convert.ToDouble(tb_pi_igst_tax_amount.Text);
            //    if (pi_freight_amt.Text != "" && pi_freight_amt.Text != "0.00")
            //        purchase_invoice_amount += Convert.ToDouble(pi_freight_amt.Text);
            //    if (pi_packing_amt.Text != "" && pi_packing_amt.Text != "0.00")
            //        purchase_invoice_amount += Convert.ToDouble(pi_packing_amt.Text);
            //    if (pi_insurance_amt.Text != "" && pi_insurance_amt.Text != "0.00")
            //        purchase_invoice_amount += Convert.ToDouble(pi_insurance_amt.Text);
            //    if (pi_other_amt.Text != "" && pi_other_amt.Text != "0.00")
            //        purchase_invoice_amount += Convert.ToDouble(pi_other_amt.Text);
            //    calculate_roundoff();
            //    if (piroundoffamt.Text != "" && piroundoffamt.Text != "0.00")
            //        purchase_invoice_amount += Convert.ToDouble(piroundoffamt.Text);
            //    purchase_invoice_amount = Math.Round(purchase_invoice_amount, 2);
            //    pigrossamt.Text = Convert.ToString(purchase_invoice_amount);
            //}
            if (pibasicamt.Text != "0.00")
            {
                pi_freight_amt.ReadOnly = false;
                pi_packing_amt.ReadOnly = false;
                pi_insurance_amt.ReadOnly = false;
                pi_other_amt.ReadOnly = false;
                if (periodofgst)
                {
                    //tb_pi_igst_tax_amount.Text = "0.00";
                    //pi_invoice_tax_amount = 0;
                    //int totalrowcount = piitemlist.Rows.Count;
                    //purchase_invoice_amount = 0;
                    //for (int i = 0; i < totalrowcount; i++)
                    //{
                    //    if (piitemlist.Rows[i].Cells[7].Value != System.DBNull.Value && piitemlist.Rows[i].Cells[7].Value != null)
                    //        purchase_invoice_amount = purchase_invoice_amount + Convert.ToDouble(piitemlist.Rows[i].Cells[7].Value);
                    //    if (piitemlist.Rows[i].Cells[9].Value != System.DBNull.Value && piitemlist.Rows[i].Cells[9].Value != null)
                    //        pi_invoice_tax_amount += (Convert.ToDouble(piitemlist.Rows[i].Cells[7].Value) * Convert.ToDouble(piitemlist.Rows[i].Cells[9].Value) / 100);
                    //}
                    //if (purchase_invoice_amount == 0 && pibasicamt.Text != "" && pibasicamt.Text != "0.00")
                    purchase_invoice_amount = Convert.ToDouble(pibasicamt.Text);
                    tb_pi_igst_tax_amount.Text = Convert.ToString(pi_invoice_tax_amount);
                    purchase_invoice_amount += Convert.ToDouble(tb_pi_igst_tax_amount.Text);
                    if (pi_freight_amt.Text != "")
                        purchase_invoice_amount += Convert.ToDouble(pi_freight_amt.Text);
                    if (pi_packing_amt.Text != "")
                        purchase_invoice_amount += Convert.ToDouble(pi_packing_amt.Text);
                    if (pi_insurance_amt.Text != "")
                        purchase_invoice_amount += Convert.ToDouble(pi_insurance_amt.Text);
                    if (pi_other_amt.Text != "")
                        purchase_invoice_amount += Convert.ToDouble(pi_other_amt.Text);
                    calculate_roundoff();
                    if (piroundoffamt.Text != "" && piroundoffamt.Text != "0.00")
                        purchase_invoice_amount += Convert.ToDouble(piroundoffamt.Text);
                    purchase_invoice_amount = Math.Round(purchase_invoice_amount, 2);
                    pigrossamt.Text = Convert.ToString(purchase_invoice_amount);
                }
                else
                {
                    purchase_invoice_amount = Convert.ToDouble(pibasicamt.Text);
                    if (pitaxrate.Text != "")
                    {
                        pitaxamt.Text = Convert.ToString(Convert.ToDouble(pibasicamt.Text) * Convert.ToDouble(pitaxrate.Text) / 100);
                        purchase_invoice_amount += Convert.ToDouble(pitaxamt.Text);
                    }
                    else
                        pitaxamt.Text = "";
                    if (tb_pi_igst_tax_amount.Text != "" && tb_pi_igst_tax_amount.Text != "0.00")
                        purchase_invoice_amount += Convert.ToDouble(tb_pi_igst_tax_amount.Text);
                    if (pi_freight_amt.Text != "" && pi_freight_amt.Text != "0.00")
                        purchase_invoice_amount += Convert.ToDouble(pi_freight_amt.Text);
                    if (pi_packing_amt.Text != "" && pi_packing_amt.Text != "0.00")
                        purchase_invoice_amount += Convert.ToDouble(pi_packing_amt.Text);
                    if (pi_insurance_amt.Text != "" && pi_insurance_amt.Text != "0.00")
                        purchase_invoice_amount += Convert.ToDouble(pi_insurance_amt.Text);
                    if (pi_other_amt.Text != "" && pi_other_amt.Text != "0.00")
                        purchase_invoice_amount += Convert.ToDouble(pi_other_amt.Text);
                    calculate_roundoff();
                    if (piroundoffamt.Text != "" && piroundoffamt.Text != "0.00")
                        purchase_invoice_amount += Convert.ToDouble(piroundoffamt.Text);
                    purchase_invoice_amount = Math.Round(purchase_invoice_amount, 2);
                    pigrossamt.Text = Convert.ToString(purchase_invoice_amount);
                }
            }
            else
            {
                pi_freight_amt.Text = "0.00";
                pi_packing_amt.Text = "0.00";
                pi_insurance_amt.Text = "0.00";
                pi_other_amt.Text = "0.00";
                pigrossamt.Text = "0.00";
                pi_freight_amt.ReadOnly = true;
                pi_packing_amt.ReadOnly = true;
                pi_insurance_amt.ReadOnly = true;
                pi_other_amt.ReadOnly = true;
            }
        }

        private void bp_igst_per_KeyUp(object sender, KeyEventArgs e)
        {
            if (bp_basicamt.Text != "")
            {
                if (bp_igst_per.Text != "0.00" && bp_igst_per.Text != "")
                    bp_igstamt.Text = (Convert.ToDouble(bp_basicamt.Text) * Convert.ToDouble(bp_igst_per.Text) / 100).ToString();
                bpamt.Text = (Convert.ToDouble(bp_basicamt.Text) + Convert.ToDouble(bp_igstamt.Text)).ToString();
            }
        }

        private void bp_basicamt_KeyUp(object sender, KeyEventArgs e)
        {
            if (bp_basicamt.Text != "")
            {
                if (bp_igst_per.Text != "0.00" && bp_igst_per.Text != "")
                    bp_igstamt.Text = (Convert.ToDouble(bp_basicamt.Text) * Convert.ToDouble(bp_igst_per.Text) / 100).ToString();
                if (bp_igstamt.Text == "")
                    bp_igstamt.Text = "0.00";
                bpamt.Text = (Convert.ToDouble(bp_basicamt.Text) + Convert.ToDouble(bp_igstamt.Text)).ToString();
            }
        }

        private void bpamt_KeyUp(object sender, KeyEventArgs e)
        {
            //double.TryParse(bpamt.Text, out temp_double);
            //if (temp_double == 0 && bpamt.Text.Length > 1)
            //{
            //    bpamt.Text = bpamt.Text.Substring(0, bpamt.Text.Length - 1);
            //    bpamt.SelectionStart = bpamt.Text.Length;
            //}
            //else if (temp_double == 0 && bpamt.Text == "")
            //    bpamt.Text = "";
            //else
            //    bpamt.Text = temp_double.ToString();
            //if (bp_igst_per.Text != "0.00" && bp_igst_per.Text != "")
            //    bp_basicamt.Text = (temp_double / Convert.ToDouble(bp_igst_per.Text) * 10).ToString();
            //else
            //bp_basicamt.Text = temp_double.ToString();
            if (bp_igst_per.Text != "0.00" && bp_igst_per.Text != "")
                bp_basicamt.Text = (Convert.ToDouble(bpamt.Text) / Convert.ToDouble(bp_igst_per.Text) * 10).ToString();
            else
                bp_basicamt.Text = bpamt.Text;
        }

        private void bpdocno_KeyUp(object sender, KeyEventArgs e)
        {
            if (bpdocno.Text != "")
            {
                ConnectionWithAccess.query = "select f23.D_D, f23.D_N, f1.[desc] as [Desc], f1.city as [city], f23.bamt, f23.ck_no,f23.ck_dt,f23.bank,f23.pass_date,f23.mess,f23.a_n,f23.s_a, f23.b_t, f23.r_p,f23.IGST_PER,f23.IGST_AMT,f23.BASIC_AMT from " + ConnectionWithAccess.tablename[23] + " f23 inner join " + ConnectionWithAccess.tablename[1] + " f1 on f1.a_n = f23.a_n and f1.s_a = f23.s_a  where f23.prd = '" + ConnectionWithAccess.mprd + "' and d_c = " + bpdbc.SelectedValue.ToString() + " and F23.d_d = @D_D_Date and f23.r_p = '4' and f23.d_n = " + bpdocno.Text;
                search_on_particular_date_in_select_query("@d_d_date", bpdatetime.Value);
                DataTable dtData1 = ConnectionCommand.fGetDataTable();
                if (dtData1 != null && dtData1.Rows.Count > 0)
                {
                    if (dtData1.Rows[0][0] != null)
                    {
                        bppartycode.Text = dtData1.Rows[0][2].ToString();
                        bppartyname.Text = dtData1.Rows[0][2].ToString();
                        bppartycity.Text = dtData1.Rows[0][3].ToString();
                        bpamt.Text = Convert.ToString(Convert.ToDouble(dtData1.Rows[0]["BAMT"].ToString()) * -1);
                        bpchkno.Text = dtData1.Rows[0][5].ToString();
                        //bpchkdate.MinDate = Convert.ToDateTime(ConnectionWithAccess.msdate);
                        //bpchkdate.MaxDate = Convert.ToDateTime(ConnectionWithAccess.medate);
                        if (dtData1.Rows[0][6].ToString() != "")
                            bpchkdate.Value = Convert.ToDateTime(dtData1.Rows[0][6].ToString());
                        if (dtData1.Rows[0][8].ToString() != "")
                            bppassdate.Value = Convert.ToDateTime(dtData1.Rows[0][8].ToString());
                        bpcomm.Text = dtData1.Rows[0][9].ToString();
                        bpa_n.Text = dtData1.Rows[0][10].ToString();
                        bps_a.Text = dtData1.Rows[0][11].ToString();
                        bp_igst_per.Text = dtData1.Rows[0][14].ToString();
                        bp_igstamt.Text = dtData1.Rows[0][15].ToString();
                        bp_basicamt.Text = dtData1.Rows[0][16].ToString();
                        get_account_details_from_01(bpa_n.Text, bps_a.Text);
                        get_account_details_from_04(bpa_n.Text, bps_a.Text);
                        bppartycontact.Text = account_detail_from_04[17] + " ," + account_detail_from_04[18] + " ," + account_detail_from_04[19] + " ," + account_detail_from_04[20];
                        bppartyaddress.Text = account_detail_from_04[4] + " ," + account_detail_from_04[5] + " ," + account_detail_from_04[6] + " ," + account_detail_from_04[7];
                        bp_master_acc_name.Text = common_account_head(bpa_n.Text);
                        bppartyoverallbalance.Text = Convert.ToString(get_account_balance(bpa_n.Text, bps_a.Text, Convert.ToString(bpdatetime.Text)));
                        //b_t = 2 for balance, b_t = 3 for passed, b_t = 4 for failed.
                        if (dtData1.Rows[0][12].ToString() == "2")
                            bpchkstatus.SelectedIndex = 0;
                        else if (dtData1.Rows[0][12].ToString() == "3")
                        {
                            bpchkstatus.SelectedIndex = 1;
                            old_bank_payment_amount = Convert.ToDouble(bpamt.Text);
                        }
                        else if (dtData1.Rows[0][12].ToString() == "4")
                            bpchkstatus.SelectedIndex = 2;
                        tb_bp_mobilenumber.Text = account_detail_from_04[17];
                        bp_basicamt.ReadOnly = false;
                        bp_igst_per.ReadOnly = false;
                        bpamt.ReadOnly = false;
                        bp_dgv_gst_tax_brief.Visible = true;
                        btn_cheque_print.Visible = true;
                        temp_double = 0;
                        bp_dgv_gst_tax_brief.DataSource = null;
                        ConnectionWithAccess.query = "select f8.bamt, f8.igst_per, f8.igst_amt, f8.gamt from " + ConnectionWithAccess.tablename[8] + " f8 where f8.book = 'b' and f8.prd = '" + ConnectionWithAccess.mprd + "' and f8.d_c = " + bpdbc.SelectedValue.ToString() + " and f8.r_p = '4' and F8.d_n = " + bpdocno.Text;
                        ConnectionCommand.accountHelp_datatable_Seperate(bp_dgv_gst_tax_brief, "bp_dgv_gst_tax_brief");
                        if (bp_dgv_gst_tax_brief.Rows.Count > 1)
                        {
                            for (row_counter = 0; row_counter < bp_dgv_gst_tax_brief.Rows.Count; row_counter++)
                            {
                                temp_double += Convert.ToSingle(bp_dgv_gst_tax_brief.Rows[row_counter].Cells[2].Value);
                            }
                            //bpamt.Text = temp_double.ToString();
                        }
                    }
                    bpamt.Focus();
                    move_cursor_to_button_position("atbnew");
                }
                else
                {
                    bp_basicamt.ReadOnly = true;
                    bp_igst_per.ReadOnly = true;
                    bpamt.ReadOnly = true;
                    tb_bp_mobilenumber.Text = "";
                    old_bank_payment_amount = 0;
                    if (DateTime.Today > Convert.ToDateTime(ConnectionWithAccess.medate))
                        bpdatetime.Value = Convert.ToDateTime(ConnectionWithAccess.medate);
                    else
                        bpdatetime.Value = DateTime.Today;
                    bpamt.Text = "0.00";
                    bpchkdate.Text = null;
                    bpchkno.Text = "0";
                    bpchkstatus.SelectedIndex = 1;
                    bpcomm.Text = null;
                    bpcurbankbal.Text = null;
                    bppartycode.Text = null;
                    bppartycity.Text = null;
                    bp_basicamt.Text = "0.00";
                    bp_igst_per.Text = "0.00";
                    bp_igstamt.Text = "0.00";
                    fill_bank_trans_list();
                    get_account_name_from_d_c("B", Convert.ToInt32(bpdbc.SelectedValue.ToString()));
                    bpcurbankbal.Text = Convert.ToString(get_bank_balance(ConnectionWithAccess.bank_a_n, "@@@", DateTime.Today.ToShortDateString()));
                    bp_dgv_gst_tax_brief.Visible = false;
                    btn_cheque_print.Visible = false;
                    bppartycode.Focus();
                }
            }
        }

        private void cp_basicamt_KeyUp(object sender, KeyEventArgs e)
        {
            if (cp_basicamt.Text != "")
            {
                if (cp_igst_per.Text != "0.00" && cp_igst_per.Text != "")
                    cp_igstamt.Text = (Convert.ToDouble(cp_basicamt.Text) * Convert.ToDouble(cp_igst_per.Text) / 100).ToString();
                if (cp_igstamt.Text == "")
                    cp_igstamt.Text = "0.00";
                cpamt.Text = (Convert.ToDouble(cp_basicamt.Text) + Convert.ToDouble(cp_igstamt.Text)).ToString();
            }
        }

        private void cp_igst_per_KeyUp(object sender, KeyEventArgs e)
        {
            if (cp_basicamt.Text != "")
            {
                if (cp_igst_per.Text != "0.00" && cp_igst_per.Text != "")
                    cp_igstamt.Text = (Convert.ToDouble(cp_basicamt.Text) * Convert.ToDouble(cp_igst_per.Text) / 100).ToString();
                cpamt.Text = (Convert.ToDouble(cp_basicamt.Text) + Convert.ToDouble(cp_igstamt.Text)).ToString();
            }
        }

        private void cpamt_KeyUp(object sender, KeyEventArgs e)
        {
            if (cp_igst_per.Text != "0.00" && cp_igst_per.Text != "")
                cp_basicamt.Text = (Convert.ToDouble(cpamt.Text) / Convert.ToDouble(cp_igst_per.Text) * 10).ToString();
            else
                cp_basicamt.Text = cpamt.Text;
        }

        private void si_freight_amt_KeyUp(object sender, KeyEventArgs e)
        {
            if (sibasicamt.Text != "0")
            {
                si_freight_amt.ReadOnly = false;
                si_packing_amt.ReadOnly = false;
                si_insurance_amt.ReadOnly = false;
                si_other_amt.ReadOnly = false;
                if (periodofgst)
                {
                    tb_si_igst_tax_amount.Text = "0.00";
                    si_invoice_tax_amount = 0;
                    int totalrowcount = siitemlist.Rows.Count;
                    sale_invoice_amount = 0;
                    for (int i = 0; i < totalrowcount; i++)
                    {
                        if (siitemlist.Rows[i].Cells[7].Value != System.DBNull.Value)
                            sale_invoice_amount = sale_invoice_amount + Convert.ToDouble(siitemlist.Rows[i].Cells[7].Value);
                        if (siitemlist.Rows[i].Cells[9].Value == System.DBNull.Value || siitemlist.Rows[i].Cells[9].Value == null)
                            siitemlist.Rows[i].Cells[9].Value = "0";
                        si_invoice_tax_amount += (Convert.ToDouble(siitemlist.Rows[i].Cells[7].Value) * Convert.ToDouble(siitemlist.Rows[i].Cells[9].Value) / 100);

                    }
                    tb_si_igst_tax_amount.Text = Convert.ToString(si_invoice_tax_amount);
                    sale_invoice_amount += Convert.ToDouble(tb_si_igst_tax_amount.Text);
                    if (si_freight_amt.Text != "" && si_freight_amt.Text != "0.00")
                        sale_invoice_amount += Convert.ToDouble(si_freight_amt.Text);
                    if (si_packing_amt.Text != "" && si_packing_amt.Text != "0.00")
                        sale_invoice_amount += Convert.ToDouble(si_packing_amt.Text);
                    if (si_insurance_amt.Text != "" && si_insurance_amt.Text != "0.00")
                        sale_invoice_amount += Convert.ToDouble(si_insurance_amt.Text);
                    if (si_other_amt.Text != "" && si_other_amt.Text != "0.00")
                        sale_invoice_amount += Convert.ToDouble(si_other_amt.Text);
                    calculate_roundoff();
                    if (siroundoffamt.Text != "" && siroundoffamt.Text != "0.00")
                        sale_invoice_amount += Convert.ToDouble(siroundoffamt.Text);
                    sigrossamt.Text = Convert.ToString(sale_invoice_amount);
                }
            }
        }

        private void tbCurStock_KeyUp(object sender, KeyEventArgs e)
        {

        }

        private void blstclosingstock_KeyUp(object sender, KeyEventArgs e)
        {
            if (maintab.SelectedIndex == 3)
            {
                if ((cb_emerg_sale.Checked == true || cb_emerg_purchase.Checked == true || cb_emerg_bank.Checked == true || cb_emerg_cash.Checked == true || cb_emerg_journal.Checked == true) && gp_percentage_change == false)
                {
                    emerg_prd = cbBalShPer.Text;
                    double mTAMT, mSAMT, mRSAMT, mGP_AMT, mOSAMT, mPAMT, mTRAMT, mGP, mpl_exp, mgp_per;
                    mGP = ConnectionWithAccess.gp_percent * -1;
                    //this.Text = "Please wait Emerging Gross Profit and Closing Stock";
                    balance_amount = new string[0];
                    list_of_balance_amount.Clear();
                    ConnectionWithAccess.query = "select amt from " + ConnectionWithAccess.tablename[51] + " where prd = '" + emerg_prd + "' and a_n >= '61' and a_n <= '65ZZZZ' and s_a ='@@@'";
                    DataTable dtData1 = ConnectionCommand.fGetDataTable();
                    if (dtData1 != null && dtData1.Rows.Count > 0)
                    {
                        for (int iRowCount = 0; iRowCount < dtData1.Rows.Count; iRowCount++)
                        {
                            if (dtData1.Rows[iRowCount][0] != null)
                            {
                                list_of_balance_amount.Add(dtData1.Rows[iRowCount][0].ToString());
                            }
                        }
                    }
                    ConnectionWithAccess.query = "select amt from " + ConnectionWithAccess.tablename[51] + " where prd = '" + emerg_prd + "' and a_n >= '7001' and a_n <= '70ZZZZ' and s_a ='@@@'";
                    dtData1 = ConnectionCommand.fGetDataTable();
                    if (dtData1 != null && dtData1.Rows.Count > 0)
                    {
                        for (int iRowCount = 0; iRowCount < dtData1.Rows.Count; iRowCount++)
                        {
                            if (dtData1.Rows[iRowCount][0] != null)
                            {
                                list_of_balance_amount.Add(dtData1.Rows[iRowCount][0].ToString());
                            }
                        }
                    }
                    mTRAMT = 0;
                    for (int i = 0; i < list_of_balance_amount.Count; i++)
                    {
                        mTRAMT = mTRAMT + Convert.ToDouble(list_of_balance_amount[i]);
                    }
                    mSAMT = Math.Round(get_account_balance_from_51(emerg_prd, "6000", "@@@"), 2);
                    mRSAMT = Math.Round(get_account_balance_from_51(emerg_prd, "6000R1", "@@@"), 2);
                    mGP_AMT = mSAMT * ConnectionWithAccess.gp_percent / 100;
                    mOSAMT = Math.Round(get_account_balance_from_51(emerg_prd, "2001", "@@@"), 2);
                    mPAMT = Math.Round(get_account_balance_from_51(emerg_prd, "7000", "@@@"), 2);
                    mTAMT = ((mSAMT + mRSAMT + mGP_AMT + mOSAMT + mPAMT + mTRAMT) * -1);
                    mTAMT = Math.Round(mTAMT, 2);
                    //mTAMT = (-mSAMT - mRSAMT - mOSAMT - mPAMT - mTRAMT) - ((mSAMT + mRSAMT) * 1 / 100 * -1);
                    //mTAMT = Math.Round(mTAMT, 2);
                    if (blstclosingstock.Text != "" && blstclosingstock.Text != "-")
                        mTAMT = Convert.ToDouble(blstclosingstock.Text);
                    else
                        mTAMT = 0;
                    ConnectionWithAccess.closing_stock = mTAMT;
                    mgp_per = ((((-mSAMT - mRSAMT - mOSAMT - mPAMT - mTRAMT) - mTAMT) * 1) * 100) / (mSAMT + mRSAMT);
                    mgp_per = Math.Round(mgp_per, 4);
                    mGP_AMT = mTAMT - mSAMT - mRSAMT - mOSAMT - mPAMT - mTRAMT;
                    ConnectionWithAccess.gross_profit = mGP_AMT;
                    //ConnectionWithAccess.closing_stock = mTAMT;
                    //this.Text = "Please wait Emerging Gross Profit and Closing Stock";
                    list_of_balance_amount.Clear();
                    ConnectionWithAccess.query = "select amt from " + ConnectionWithAccess.tablename[51] + " where prd = '" + emerg_prd + "' and a_n >= '75A' and a_n <= '75ZZZZ' and s_a ='@@@'";
                    dtData1 = ConnectionCommand.fGetDataTable();
                    if (dtData1 != null && dtData1.Rows.Count > 0)
                    {
                        for (int iRowCount = 0; iRowCount < dtData1.Rows.Count; iRowCount++)
                        {
                            if (dtData1.Rows[iRowCount][0] != null)
                            {
                                list_of_balance_amount.Add(dtData1.Rows[iRowCount][0].ToString());
                            }
                        }
                    }
                    mpl_exp = 0;
                    for (int i = 0; i < list_of_balance_amount.Count; i++)
                    {
                        mpl_exp = mpl_exp + Convert.ToDouble(list_of_balance_amount[i]);
                    }
                    blstsales.Text = mSAMT.ToString();
                    blstrepairs.Text = mRSAMT.ToString();
                    blstgp.Text = mGP_AMT.ToString();
                    blstopenstock.Text = mOSAMT.ToString();
                    blstpurchase.Text = mPAMT.ToString();
                    blsttradexp.Text = mTRAMT.ToString();
                    blstplexpense.Text = mpl_exp.ToString();
                    blstgp.Text = Convert.ToString(ConnectionWithAccess.gross_profit);
                    blstplgp.Text = Convert.ToString(ConnectionWithAccess.gross_profit);
                    ConnectionWithAccess.net_profit = Math.Round((ConnectionWithAccess.gross_profit - Convert.ToDouble(blstplexpense.Text)), 2);
                    blstnetprofit.Text = Convert.ToString(ConnectionWithAccess.net_profit);
                    blstgp_per.Text = Convert.ToString(mgp_per);
                }
                else
                {
                    ConnectionWithAccess.closing_stock = Math.Round(get_account_balance_from_51(emerg_prd, "2001", "@@@"), 2);
                    ConnectionWithAccess.gross_profit = 0;
                }
            }
        }

        private void tbgst_number_KeyUp(object sender, KeyEventArgs e)
        {
            try
            {
                if (tbgst_number.Text != "")
                {
                    if (tbgst_number.Text.Length >= 2)
                    {
                        mfound = "N";
                        for (int i = 0; i < State_gst_code.Count(); i++)
                        {
                            if (tbstate.Text.Trim().ToLower() == State_gst_code[i].Trim().ToLower())
                            {
                                //System.Text.RegularExpressions.Regex rPan = new System.Text.RegularExpressions.Regex("^[0-9]{2}[A-Z]{5}[0-9]{4}[A-Z]{1}[0-9]{1}[Z]{1}[0-9]{1}$");
                                if (Convert.ToInt32(tbgst_number.Text.Substring(0, 2)) != Convert.ToInt32(i.ToString()))
                                    tbgst_number.BackColor = Color.Red;
                                else
                                {
                                    mfound = "Y";
                                    tbgst_number.BackColor = Color.Green;
                                    tbgst_number.Text = tbgst_number.Text.ToUpper();
                                }
                            }
                        }
                        if (mfound == "N")
                            tbgst_number.BackColor = Color.Red;
                        else
                        {
                            if (tbgst_number.Text.Trim().Length == 15)
                            {
                                if (!fValidateGSTNumberFormat(tbgst_number.Text.Trim()))
                                {
                                    tbgst_number.BackColor = Color.Red;
                                    MessageBox.Show("Invalid GST Number");
                                    //e.Cancel = true;
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            { }
        }

        private void tbItemRate_KeyUp(object sender, KeyEventArgs e)
        {
            if (tb_purc_price.Text == "")
            {
                tb_purc_price.Text = (Convert.ToDouble(tbItemRate.Text) - (Convert.ToDouble(tbItemRate.Text) * 20 / 100)).ToString();
            }
        }

        private void tb_purc_price_KeyUp(object sender, KeyEventArgs e)
        {
            if (tbItemRate.Text == "")
            {
                tbItemRate.Text = (Convert.ToDouble(tb_purc_price.Text) + (Convert.ToDouble(tb_purc_price.Text) * 20 / 100)).ToString();
            }
        }

        private void tbCity_KeyUp(object sender, KeyEventArgs e)
        {
            dgvStdCodeHelp.DataSource = null;
            DataTable dtFilter = dtStdCodes.Clone();
            dtStdCodes.Select("STATION like '%" + tbCity.Text.Trim() + "%' ").CopyToDataTable(dtFilter, LoadOption.OverwriteChanges);
            dgvStdCodeHelp.DataSource = dtFilter;
            if (dgvStdCodeHelp.Rows.Count > 1)
            {
                if (dgvStdCodeHelp.Rows[0].Cells[3].Value.ToString() != tbstate.Text)
                {
                    dgvStdCodeHelp.Visible = true;
                    tbstate.BackColor = Color.Red;
                }
            }
            if (bstdcode && tbCity.Text != "" && dgvStdCodeHelp.Visible == true)
            {
                dgvStdCodeHelp.Columns[0].Visible = false;
                dgvStdCodeHelp.Columns[1].Width = 120;
                dgvStdCodeHelp.Columns[2].Width = 120;
                dgvStdCodeHelp.Columns[3].Width = 120;
            }
            move_cursor_to_button_position("dgvStdCodeHelp");
        }

        private void jjbamt_KeyUp(object sender, KeyEventArgs e)
        {
            if (jjbamt.Text != "")
            {
                if (jjigst_per.Text != "0.00" && jjigst_per.Text != "")
                    jjigst_amt.Text = (Convert.ToDouble(jjbamt.Text) * Convert.ToDouble(jjigst_per.Text) / 100).ToString();
                if (jjigst_amt.Text == "")
                    jjigst_amt.Text = "0.00";
                jjamt.Text = (Math.Round(Convert.ToDouble(jjbamt.Text) + Convert.ToDouble(jjigst_amt.Text), 2)).ToString();
            }
        }

        private void jjigst_per_KeyUp(object sender, KeyEventArgs e)
        {
            if (jjbamt.Text != "")
            {
                if (jjigst_per.Text != "0.00" && jjigst_per.Text != "")
                    jjigst_amt.Text = (Math.Round(Convert.ToDouble(jjbamt.Text) * Convert.ToDouble(jjigst_per.Text) / 100, 2)).ToString();

                jjamt.Text = (Math.Round(Convert.ToDouble(jjbamt.Text) + Convert.ToDouble(jjigst_amt.Text), 2)).ToString();
            }
        }

        private void jjamt_KeyUp(object sender, KeyEventArgs e)
        {
            if (jjigst_per.Text != "0.00" && jjigst_per.Text != "" && jjamt.Text != "")
            {
                temp_double = Convert.ToDouble("1." + jjigst_per.Text.Trim().Replace(".", ""));
                jjbamt.Text = (Math.Round(Convert.ToDouble(jjamt.Text) / Convert.ToDouble(temp_double), 2)).ToString();
                jjigst_amt.Text = Math.Round(Convert.ToDouble(jjamt.Text) - Convert.ToDouble(jjbamt.Text), 2).ToString();
            }
            else
                jjbamt.Text = jjamt.Text;
        }

        private void crdatetime_KeyUp(object sender, KeyEventArgs e)
        {
            if (crdbc.SelectedValue.ToString() != "")
            {

                //ConnectionWithAccess.query = "SELECT max(d_n) +1 from " + ConnectionWithAccess.tablename[24] + " where prd = '" + ConnectionWithAccess.mprd + "' and d_n <> 999999 and d_c = " + crdbc.SelectedValue.ToString() + " and d_d = #" + crdatetime.Text + "#";
                ConnectionWithAccess.query = "SELECT max(d_n) +1 from " + ConnectionWithAccess.tablename[24] + " where prd = '" + ConnectionWithAccess.mprd + "' and d_n <> 999999 and d_c = " + crdbc.SelectedValue.ToString();
                ConnectionCommand.ExportToText(crdbc, crdocno);
                //temp_word = Convert.ToString(crdatetime.Value.Year) + Convert.ToString(crdatetime.Value.Month) + Convert.ToString(crdatetime.Value.Date.ToString().Substring(0, crdatetime.Value.ToString().IndexOf("/")));
                //crdocno.Text = crdocno.Text.Replace(temp_word, "");
            }
        }

        private void tb_ledger_account_name_KeyUp(object sender, KeyEventArgs e)
        {
            if (maintab.SelectedIndex == 3 && subtabreports.SelectedIndex == 1)
            {
                pdf_viewer2.Visible = false;
                ledger_account_help.Visible = true;
                lbl_ledger_master_account_name.Visible = true;
                LedDGV.Visible = false;
                btn_gen_ledg.Visible = false;
                LblWhatsupBalanceAmunt.Visible = false;
                LblWhatsupBalanceDate.Visible = false;
                LblWhatsupMobileNUmber.Visible = false;
                search_account_name = tb_ledger_account_name.Text;
                if (search_account_name != "")
                    common_account_help(search_account_name);
            }
        }

        private void tb_outstanding_acc_name_KeyUp(object sender, KeyEventArgs e)
        {
            ro_account_help.Visible = true;
            function_working = "Outstanding Account";
            ConnectionWithAccess.query = "select f1.[desc], f1.city, f1.a_n, f1.s_a , f2.[desc] as [Master Account] from " + ConnectionWithAccess.tablename[1] + " f1 left outer join " + ConnectionWithAccess.tablename[1] + " f2 on f2.a_n = f1.a_n where f2.s_a = '@@@' and f1.d_y = '@@@'  and f1.[desc] like '%" + tb_outstanding_acc_name.Text + "%'";
            ConnectionCommand.accountHelp_datatable_Seperate(ro_account_help, "ro_account_help");
            if (ro_account_help.Rows.Count == 1)
            {
                ConnectionWithAccess.query = "select f1.[desc], f1.city, f1.a_n, f1.s_a , f2.[desc] as [Master Account] from " + ConnectionWithAccess.tablename[1] + " f1 left outer join " + ConnectionWithAccess.tablename[1] + " f2 on f2.a_n = f1.a_n where f2.s_a = '@@@' and f1.d_y = '@@@'  and f1.[city] like '%" + tb_outstanding_acc_name.Text + "%'";
                ConnectionCommand.accountHelp_datatable_Seperate(ro_account_help, "ro_account_help");
                if (ro_account_help.Rows.Count == 1)
                    ro_account_help.Visible = false;
            }
        }

        private void sopartycode_KeyUp(object sender, KeyEventArgs e)
        {
            so_party_help.Visible = true;
            ConnectionWithAccess.data_entry_working = "Sale Order Party";
            //ConnectionWithAccess.query = "select [desc], city, a_n,s_a,d_y from " + ConnectionWithAccess.tablename[1] + " where a_n = (select distinct a_n from " + ConnectionWithAccess.tablename[21] + " where d_c = " + Convert.ToInt32(sodbc.SelectedValue.ToString()) + " and d_n = 999999) and s_a <> '@@@' and (d_y is null or d_y ='') and [desc] like '%" + sopartycode.Text + "%'";
            ConnectionWithAccess.query = "select [desc], city, a_n,s_a,(select [desc] from " + ConnectionWithAccess.tablename[1] + " where a_n = (select distinct a_n from " + ConnectionWithAccess.tablename[7] + " where d_c = " + Convert.ToInt32(sodbc.SelectedValue.ToString()) + " and d_n = 999999) and s_a ='@@@')  from " + ConnectionWithAccess.tablename[1] + " where a_n = (select distinct a_n from " + ConnectionWithAccess.tablename[7] + " where d_c = " + Convert.ToInt32(sodbc.SelectedValue.ToString()) + " and d_n = 999999) and s_a <> '@@@' and (d_y is null or d_y ='@@@') and [desc] like '%" + sopartycode.Text + "%' order by [desc], city";
            ConnectionCommand.accountHelp_datatable(so_party_help, "so_party_help");
            if (so_party_help.Rows.Count == 1)
            {
                ConnectionWithAccess.query = "select [desc], city, a_n,s_a,(select [desc] from " + ConnectionWithAccess.tablename[1] + " where a_n = (select distinct a_n from " + ConnectionWithAccess.tablename[7] + " where d_c = " + Convert.ToInt32(sodbc.SelectedValue.ToString()) + " and d_n = 999999) and s_a ='@@@')  from " + ConnectionWithAccess.tablename[1] + " where a_n = (select distinct a_n from " + ConnectionWithAccess.tablename[7] + " where d_c = " + Convert.ToInt32(sodbc.SelectedValue.ToString()) + " and d_n = 999999) and s_a <> '@@@' and (d_y is null or d_y ='@@@') and [city] like '%" + sopartycode.Text + "%' order by [desc], city";
                ConnectionCommand.accountHelp_datatable(so_party_help, "so_party_help");
            }
        }

        private void siitemlist_KeyUp(object sender, KeyEventArgs e)
        {
            if (siitemlist.CurrentCell != null)
            {
                ConnectionWithAccess.data_entry_working = "Sale Item";
                mRowIndex = siitemlist.CurrentCell.RowIndex;
                columnIndex = siitemlist.CurrentCell.ColumnIndex;
                if (e.KeyCode != Keys.Down && e.KeyCode != Keys.Left && e.KeyCode != Keys.Right && e.KeyCode != Keys.Up)
                {
                    mtype = Convert.ToString(siitemlist.Rows[siitemlistrowindex].Cells[0].Value);
                    mitem_code = Convert.ToString(siitemlist.Rows[siitemlistrowindex].Cells[1].Value);
                    get_item_details_from_05_using_type_item_code(mtype, mitem_code);
                    if (siitemlist.Rows[mRowIndex].Cells[3].Value == null || siitemlist.Rows[mRowIndex].Cells[3].Value == System.DBNull.Value)
                        siitemlist.Rows[mRowIndex].Cells[3].Value = "0";
                    if (siitemlist.Rows[mRowIndex].Cells[4].Value == null || siitemlist.Rows[mRowIndex].Cells[4].Value == System.DBNull.Value)
                        siitemlist.Rows[mRowIndex].Cells[4].Value = "0";
                    if (siitemlist.Rows[mRowIndex].Cells[5].Value == null || siitemlist.Rows[mRowIndex].Cells[5].Value == System.DBNull.Value)
                        siitemlist.Rows[mRowIndex].Cells[5].Value = "0.00";
                    if (siitemlist.Rows[mRowIndex].Cells[6].Value == null || siitemlist.Rows[mRowIndex].Cells[6].Value == System.DBNull.Value)
                        siitemlist.Rows[mRowIndex].Cells[6].Value = "0.00";
                    if (columnIndex == 3)
                    {
                        mcase = Convert.ToDouble(siitemlist.Rows[mRowIndex].Cells[3].Value);
                        if (item_details_from_05.Count > 3)
                            siitemlist.Rows[mRowIndex].Cells[4].Value = Convert.ToDouble(mcase * Convert.ToDouble(item_details_from_05[3]));
                        mbox = Convert.ToDouble(siitemlist.Rows[mRowIndex].Cells[4].Value);
                        if (item_details_from_05.Count > 3)
                            siitemlist.Rows[mRowIndex].Cells[5].Value = Convert.ToDouble(mbox * Convert.ToDouble(item_details_from_05[4]));
                        mamount = Convert.ToDouble(siitemlist.Rows[mRowIndex].Cells[5].Value) * Convert.ToDouble(siitemlist.Rows[mRowIndex].Cells[6].Value);
                        siitemlist.Rows[mRowIndex].Cells[7].Value = Convert.ToString(mamount);
                    }
                    else if (columnIndex == 4)
                    {
                        mbox = Convert.ToDouble(siitemlist.Rows[mRowIndex].Cells[4].Value);
                        if (item_details_from_05.Count > 3)
                            siitemlist.Rows[mRowIndex].Cells[5].Value = Convert.ToDouble(mbox * Convert.ToDouble(item_details_from_05[4]));
                        mamount = Convert.ToDouble(siitemlist.Rows[mRowIndex].Cells[5].Value) * Convert.ToDouble(siitemlist.Rows[mRowIndex].Cells[6].Value);
                        siitemlist.Rows[mRowIndex].Cells[7].Value = Convert.ToString(mamount);
                    }
                    else if (columnIndex == 5)
                    {
                        if (!chb_allow_stock_check_bypass.Checked)
                        {
                            mqty = Convert.ToSingle(siitemlist.Rows[siitemlistrowindex].Cells[5].Value.ToString());
                            double.TryParse(item_details_from_05[7].ToString(), out temp_double);
                            if (temp_double == 0.0)
                                MessageBox.Show("Sorry, There is no Stock to Sell");
                            else if (mqty > temp_double)
                            {
                                MessageBox.Show("Sorry, Available Stock for sell Quantity is " + temp_double.ToString());
                                if (temp_double > 0)
                                    mqty = temp_double;
                                else
                                    mqty = 0;
                                siitemlist.Rows[siitemlistrowindex].Cells[4].Value = Convert.ToDouble(mqty / Convert.ToDouble(item_details_from_05[4]));
                                siitemlist.Rows[siitemlistrowindex].Cells[5].Value = mqty;
                                mamount = mcase * mbox * mqty * mprice;
                                siitemlist.Rows[siitemlistrowindex].Cells[7].Value = Convert.ToString(mamount);
                            }
                        }
                    }
                    calculateSaleItemTotal();
                    show_images();
                }
            }
        }

        private void tbdelivery_desc_KeyUp(object sender, KeyEventArgs e)
        {
            lbl_master_master_account_name.Visible = true;
            if (cbParent.SelectedItem != null)
            {
                if (cbParent.SelectedItem.Equals("Unknown"))
                {
                    ConnectionWithAccess.query = "select [desc], city, a_n, s_a from " + ConnectionWithAccess.tablename[1] + " where [desc] like '%" + tbDesc.Text + "%'";
                    ConnectionCommand.accountHelp_datatable_Seperate(master_account_help_dg, "master_account_help_dg");
                    if (master_account_help_dg.CurrentRow != null)
                        lbl_master_master_account_name.Text = common_account_head(master_account_help_dg.CurrentRow.Cells[2].Value.ToString());
                    else
                    {
                        MessageBox.Show("Account Cannot be saved with Unknown Parent Account");
                        lbl_master_master_account_name.Text = null;
                    }
                }
                else
                {
                    if (!cb_change_master_account_name.Checked)
                    {
                        ConnectionWithAccess.query = "select [desc], city, a_n, s_a from " + ConnectionWithAccess.tablename[1] + " where a_n like '" + tbA_N.Text + "%' and [desc] like '" + tbDesc.Text + "%'";
                        ConnectionCommand.accountHelp_datatable_Seperate(master_account_help_dg, "master_account_help_dg");
                        if (master_account_help_dg.CurrentRow != null)
                            lbl_master_master_account_name.Text = common_account_head(master_account_help_dg.CurrentRow.Cells[2].Value.ToString());
                        else
                        {
                            ConnectionWithAccess.query = "select [desc], city, a_n, s_a from " + ConnectionWithAccess.tablename[1] + " where a_n like '" + tbA_N.Text + "%' and [city] like '" + tbDesc.Text + "%'";
                            ConnectionCommand.accountHelp_datatable_Seperate(master_account_help_dg, "master_account_help_dg");
                            if (master_account_help_dg.CurrentRow == null)
                            {
                                master_account_help_dg.Visible = false;
                                tbS_A.Text = "@@@";
                                tbd_y.Text = "@@@";
                            }
                        }
                    }
                    else
                    {
                        temp_a_n = tbA_N.Text;
                        temp_s_a = tbS_A.Text;
                    }
                }
            }
            else
            {
                ConnectionWithAccess.query = "select [desc], city, a_n, s_a from " + ConnectionWithAccess.tablename[1] + " where a_n like '" + tbA_N.Text + "%' and s_a <> '@@@' and [desc] like '%" + tbDesc.Text + "%'";
                ConnectionCommand.accountHelp_datatable_Seperate(master_account_help_dg, "master_account_help_dg");
                if (master_account_help_dg.CurrentRow != null)
                    lbl_master_master_account_name.Text = common_account_head(master_account_help_dg.CurrentRow.Cells[2].Value.ToString());
                else
                {
                    MessageBox.Show("Account Cannot be saved with Unknown Parent Account");
                    lbl_master_master_account_name.Text = null;
                }
            }
        }

        private void tbdelivery_KeyUp(object sender, KeyEventArgs e)
        {
            if (!cb_change_master_account_name.Checked)
            {
                master_account_help_dg.Visible = true;
                Bank_Details.Visible = false;
            }
            tbDesc.ReadOnly = true;
            tbCity.ReadOnly = true;
            lbl_master_master_account_name.Visible = true;
            if (cbParent.SelectedItem != null)
            {
                if (!cb_change_master_account_name.Checked)
                {
                    if (tbA_N.Text.Substring(0, 4) == "2002")
                        ConnectionWithAccess.query = "select [desc], city, a_n,s_a,d_y from " + ConnectionWithAccess.tablename[1] + " where a_n = '" + tbA_N.Text + "' and s_a = '" + tbS_A.Text + "' and d_y <> '@@@' and [desc] like '" + tbdelivery.Text + "%' order by d_y";
                    else
                        ConnectionWithAccess.query = "select [desc], city, a_n,s_a,d_y from " + ConnectionWithAccess.tablename[1] + " where a_n = '" + tbA_N.Text + "' and d_y = '@@@' and [desc] like '" + tbdelivery.Text + "%' order by d_y";
                    ConnectionCommand.accountHelp_datatable_Seperate(master_account_help_dg, "master_account_help_dg");
                    if (master_account_help_dg.CurrentRow != null)
                        lbl_master_master_account_name.Text = common_account_head(master_account_help_dg.CurrentRow.Cells[2].Value.ToString());
                    else
                        master_account_help_dg.Visible = false;
                }
                else
                {
                    temp_a_n = tbA_N.Text;
                    temp_s_a = tbS_A.Text;
                }
            }
        }

        private void tbStd_KeyUp(object sender, KeyEventArgs e)
        {
            if (dtStdCodes.Rows.Count == 0)
                load_std_code_in_datatable();
            dgvStdCodeHelp.DataSource = null;

            DataTable dtFilter = dtStdCodes.Clone();
            dtStdCodes.Select("STD_CODE like '" + tbStd.Text.Trim() + "%' ").CopyToDataTable(dtFilter, LoadOption.OverwriteChanges);

            dgvStdCodeHelp.DataSource = dtFilter;
            dgvStdCodeHelp.Columns[0].Visible = false;
            dgvStdCodeHelp.Columns[1].Width = 120;
            dgvStdCodeHelp.Columns[2].Width = 120;
            dgvStdCodeHelp.Columns[3].Width = 120;
            dgvStdCodeHelp.Visible = true;
        }

        private void sideliverycode_KeyUp(object sender, KeyEventArgs e)
        {
            siitemlist.Enabled = false;
            sipartycode.ReadOnly = true;
            si_party_help.Visible = true;
            ConnectionWithAccess.data_entry_working = "Sale Party Delivery";
            //ConnectionWithAccess.query = "select [desc], city, a_n,s_a,d_y,(select [desc] from " + ConnectionWithAccess.tablename[1] + " where a_n = (select distinct a_n from " + ConnectionWithAccess.tablename[21] + " where d_c = " + Convert.ToInt32(sidbc.SelectedValue.ToString()) + " and d_n = 999999) and s_a ='@@@')  from " + ConnectionWithAccess.tablename[1] + " where a_n = (select distinct a_n from " + ConnectionWithAccess.tablename[21] + " where d_c = " + Convert.ToInt32(sidbc.SelectedValue.ToString()) + " and d_n = 999999) and s_a <> '@@@' and (d_y is null or d_y ='' or d_y = '@@@') and [desc] like '%" + sideliverycode.Text + "%'";
            ConnectionWithAccess.query = "select [desc], city, a_n,s_a,d_y,(select [desc] from " + ConnectionWithAccess.tablename[1] + " where a_n = '" + sia_n.Text + "' and s_a ='@@@')  from " + ConnectionWithAccess.tablename[1] + " where a_n = '" + sia_n.Text + "' and s_a = '" + sis_a.Text + "'and d_y <> '@@@' and [desc] like '%" + sideliverycode.Text + "%'";
            ConnectionCommand.accountHelp_datatable_Seperate(si_party_help, "si_party_help");

            //vFilterDataTableAndFillGrid(si_party_help, dt_Party_Master_List, "a_n = '" + sia_n.Text + "' and s_a = '" + sis_a.Text + "' and [desc] like '%" + sideliverycode.Text + "%' ");
            if (si_party_help.Rows.Count == 1)
            {
                sideliverycode.Text = sideliverycode.Text.Substring(0, sideliverycode.Text.Length - 1);
                sideliverycode.SelectionStart = sideliverycode.Text.Length;
            }
            move_cursor_to_button_position("si_party_help");
        }

        private void simple_docno_KeyUp(object sender, KeyEventArgs e)
        {
            oldsaleinvoicedetails();
            sale_invoice_item_filling();
            set_invoice_date(21, simple_docno.Text, 1);
        }

        private void simple_partyname_KeyUp(object sender, KeyEventArgs e)
        {
            ConnectionWithAccess.data_entry_working = "Simple Sale Party";
            //if (!bsiPartyChangeIgnore && si_party_help.Visible == true)
            //{
            ConnectionWithAccess.query = "select [desc], city, a_n,s_a,d_y,'' from " + ConnectionWithAccess.tablename[1] + " where a_n = '2002' and s_a <> '@@@' and (d_y is null or d_y ='' or d_y = '@@@') and [desc] like '%" + simple_partyname.Text + "%'";
            ConnectionCommand.accountHelp_datatable(simple_party_help, "si_party_help");
            if (simple_party_help.Rows.Count == 1)
            {
                ConnectionWithAccess.query = "select [desc], city, a_n,s_a,d_y,(select [desc] from " + ConnectionWithAccess.tablename[1] + " where a_n = (select distinct a_n from " + ConnectionWithAccess.tablename[21] + " where d_c = 1 and d_n = 999999) and s_a ='@@@')  from " + ConnectionWithAccess.tablename[1] + " where a_n = (select distinct a_n from " + ConnectionWithAccess.tablename[21] + " where d_c = 1 and d_n = 999999) and s_a <> '@@@' and (d_y is null or d_y ='' or d_y = '@@@') and [city] like '%" + simple_partyname.Text + "%'";
                ConnectionCommand.accountHelp_datatable(simple_party_help, "si_party_help");
                if (simple_party_help.Rows.Count == 1)
                {
                    simple_partyname.Text = simple_partyname.Text.Substring(0, simple_partyname.Text.Length - 1);
                    simple_partyname.SelectionStart = simple_partyname.Text.Length;
                }
            }
            else
                simple_party_help.Visible = true;
            //}
        }

        private void simple_itemsalelist_KeyUp(object sender, KeyEventArgs e)
        {
            if (simple_itemsalelist.CurrentCell != null)
            {
                //rowIndex = simple_itemsalelist.CurrentCell.RowIndex;
                ConnectionWithAccess.data_entry_working = "Simple Sale Item";
                if (Control.ModifierKeys == Keys.Down)
                {
                    mtype = Convert.ToString(simple_itemsalelist.Rows[rowIndex].Cells[0].Value);
                    mitem_code = Convert.ToString(simple_itemsalelist.Rows[rowIndex].Cells[1].Value);
                    mtitle = Convert.ToString(simple_itemsalelist.Rows[mRowIndex].Cells[2].Value);
                }
                else
                {
                    columnIndex = simple_itemsalelist.CurrentCell.ColumnIndex;
                    if (columnIndex == 7)
                    {
                        mamount = Convert.ToSingle(simple_itemsalelist.Rows[rowIndex].Cells[7].Value.ToString());
                        mbox = Convert.ToDouble(item_details_from_05[3]);
                        mqty = Convert.ToDouble(item_details_from_05[4]);
                        mprice = mamount / (mcase * mbox * mqty);
                        simple_itemsalelist.Rows[rowIndex].Cells[6].Value = mprice;
                    }
                    calculate_simple_SaleItemTotal();
                    show_images();
                }
            }
        }

        private void sritemlist_KeyUp(object sender, KeyEventArgs e)
        {
            if (sritemlist.CurrentCell != null)
            {
                ConnectionWithAccess.data_entry_working = "Sale Replacement Item";
                mRowIndex = sritemlist.CurrentCell.RowIndex;
                columnIndex = sritemlist.CurrentCell.ColumnIndex;
                if (e.KeyCode != Keys.Down && e.KeyCode != Keys.Left && e.KeyCode != Keys.Right && e.KeyCode != Keys.Up)
                {
                    mtype = Convert.ToString(sritemlist.Rows[sritemlistrowindex].Cells[0].Value);
                    mitem_code = Convert.ToString(sritemlist.Rows[sritemlistrowindex].Cells[1].Value);
                    get_item_details_from_05_using_type_item_code(mtype, mitem_code);
                    if (columnIndex == 3)
                    {
                        mcase = Convert.ToDouble(sritemlist.Rows[sritemlistrowindex].Cells[3].Value);
                        sritemlist.Rows[sritemlistrowindex].Cells[4].Value = Convert.ToDouble(mcase * Convert.ToDouble(item_details_from_05[3]));
                        mbox = Convert.ToDouble(sritemlist.Rows[sritemlistrowindex].Cells[4].Value);
                        sritemlist.Rows[sritemlistrowindex].Cells[5].Value = Convert.ToDouble(mbox * Convert.ToDouble(item_details_from_05[4]));
                        mamount = Convert.ToDouble(sritemlist.Rows[sritemlistrowindex].Cells[5].Value) * Convert.ToDouble(sritemlist.Rows[sritemlistrowindex].Cells[6].Value);
                        sritemlist.Rows[sritemlistrowindex].Cells[7].Value = Convert.ToString(mamount);
                    }
                    else if (columnIndex == 4)
                    {

                        mbox = Convert.ToDouble(sritemlist.Rows[sritemlistrowindex].Cells[4].Value);
                        sritemlist.Rows[sritemlistrowindex].Cells[5].Value = Convert.ToDouble(mbox * Convert.ToDouble(item_details_from_05[4]));
                        mamount = Convert.ToDouble(sritemlist.Rows[sritemlistrowindex].Cells[5].Value) * Convert.ToDouble(sritemlist.Rows[sritemlistrowindex].Cells[6].Value);
                        sritemlist.Rows[sritemlistrowindex].Cells[7].Value = Convert.ToString(mamount);
                    }
                    calculateSaleItemTotal();
                    show_images();

                    //    if (!chb_allow_stock_check_bypass.Checked && item_details_from_05.Count > 6)
                    //    {

                    //        double.TryParse(item_details_from_05[6].ToString(), out temp_double);
                    //        if (temp_double == 0.0)
                    //            MessageBox.Show("Sorry, There is no Stock to Sell");
                    //        else if (mqty > temp_double)
                    //        {
                    //            MessageBox.Show("Sorry, Available Stock for sell Quantity is " + temp_double.ToString());
                    //            if (temp_double > 0)
                    //                mqty = temp_double;
                    //            else
                    //                mqty = 0;
                    //            sritemlist.Rows[sritemlistrowindex].Cells[4].Value = Convert.ToDouble(mqty / Convert.ToDouble(item_details_from_05[4]));
                    //            sritemlist.Rows[sritemlistrowindex].Cells[5].Value = mqty;
                    //            mamount = mcase * mbox * mqty * mprice;
                    //            sritemlist.Rows[sritemlistrowindex].Cells[7].Value = Convert.ToString(mamount);
                    //        }
                    //    }
                }
            }
        }

        private void pipartycode_KeyUp(object sender, KeyEventArgs e)
        {
            if (pidbc.SelectedValue != null)
            {
                string stra_n;
                ConnectionWithAccess.data_entry_working = "Purchase Party";
                if (pidbc.Text != "JOB WORK")
                    stra_n = get_a_n_from_d_c("P", Convert.ToInt32(pidbc.SelectedValue.ToString()));
                else
                    stra_n = get_a_n_from_d_c("JR", Convert.ToInt32(pidbc.SelectedValue.ToString()));
                vFilterDataTableAndFillGrid(pi_party_help, dt_Party_Master_List, "a_n = '" + stra_n + "' and [desc] like '%" + pipartycode.Text + "%' ");
                if (pi_party_help.Rows.Count == 1)
                {
                    vFilterDataTableAndFillGrid(pi_party_help, dt_Party_Master_List, "a_n = '" + stra_n + "' and [city] like '%" + pipartycode.Text + "%' ");
                    if (pi_party_help.Rows.Count == 1)
                    {
                        if (pipartycode.Text.Length > 1)
                        {
                            pipartycode.Text = pipartycode.Text.Substring(0, pipartycode.Text.Length - 1);
                            pipartycode.SelectionStart = pipartycode.Text.Length;
                        }
                    }
                }
                move_cursor_to_button_position("pi_party_help");
            }
        }

        private void popartycode_KeyUp(object sender, KeyEventArgs e)
        {
            if (podbc.SelectedValue != null)
            {
                ConnectionWithAccess.data_entry_working = "Purchase Order Party";
                string stra_n = get_a_n_from_d_c("P", Convert.ToInt32(podbc.SelectedValue.ToString()));
                vFilterDataTableAndFillGrid(po_party_help, dt_Party_Master_List, "a_n = '" + stra_n + "' and [desc] like '%" + popartycode.Text + "%' ");
                if (po_party_help.Rows.Count == 1)
                {
                    vFilterDataTableAndFillGrid(po_party_help, dt_Party_Master_List, "a_n = '" + stra_n + "' and [city] like '%" + popartycode.Text + "%' ");
                    if (po_party_help.Rows.Count == 1)
                    {
                        if (popartycode.Text.Length > 1)
                        {
                            popartycode.Text = popartycode.Text.Substring(0, popartycode.Text.Length - 1);
                            popartycode.SelectionStart = popartycode.Text.Length;
                        }
                    }
                }
                move_cursor_to_button_position("po_party_help");
            }
        }

        # endregion

        private void select_party_for_cash()
        {
            if (subtabcash.SelectedIndex == 0)
            {
                rowIndex = cr_datagridview.CurrentCell.RowIndex;
                cra_n.Text = cr_datagridview.Rows[rowIndex].Cells[2].Value.ToString();
                crs_a.Text = Convert.ToString(cr_datagridview.Rows[rowIndex].Cells[3].Value);
                ConnectionWithAccess.mdesc = Convert.ToString(cr_datagridview.Rows[rowIndex].Cells[0].Value);
                crpartycode.Text = Convert.ToString(cr_datagridview.Rows[rowIndex].Cells[0].Value);
                crpartycity.Text = Convert.ToString(cr_datagridview.CurrentRow.Cells[1].Value);
                show_images();
                cr_datagridview.Visible = false;
            }
            else if (subtabcash.SelectedIndex == 1)
            {
                rowIndex = cp_datagridview.CurrentCell.RowIndex;
                cpa_n.Text = cp_datagridview.Rows[rowIndex].Cells[2].Value.ToString();
                cps_a.Text = cp_datagridview.Rows[rowIndex].Cells[3].Value.ToString();
                cpd_y.Text = cp_datagridview.Rows[rowIndex].Cells[4].Value.ToString();
                ConnectionWithAccess.mdesc = Convert.ToString(cp_datagridview.Rows[rowIndex].Cells[0].Value);
                cppartycode.Text = Convert.ToString(cp_datagridview.Rows[rowIndex].Cells[0].Value);
                //cppartycity.Text = Convert.ToString(cp_datagridview.Rows[rowIndex].Cells["cp_help_city"].Value);
                show_images();
                cp_datagridview.Visible = false;
            }
        }

        private void cp_datagridview_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                rowIndex = cp_datagridview.CurrentCell.RowIndex;
                ConnectionWithAccess.mdesc = cp_datagridview.Rows[rowIndex].Cells[0].Value.ToString();
                ConnectionWithAccess.mcity = cp_datagridview.Rows[rowIndex].Cells[1].Value.ToString();
                cpa_n.Text = cp_datagridview.Rows[rowIndex].Cells[2].Value.ToString();
                cps_a.Text = cp_datagridview.Rows[rowIndex].Cells[3].Value.ToString();
                show_images();
                cp_datagridview.Visible = false;
                cppartycode.Text = cp_datagridview.Rows[rowIndex].Cells[0].Value.ToString();
                cppartycity.Text = cp_datagridview.Rows[rowIndex].Cells[1].Value.ToString();
                cpamt.ReadOnly = false;
            }
        }

        private void cr_datagridview_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                rowIndex = cr_datagridview.CurrentCell.RowIndex;
                ConnectionWithAccess.mdesc = cr_datagridview.Rows[rowIndex].Cells[0].Value.ToString();
                ConnectionWithAccess.mcity = cr_datagridview.Rows[rowIndex].Cells[1].Value.ToString();
                cra_n.Text = cr_datagridview.Rows[rowIndex].Cells[2].Value.ToString();
                crs_a.Text = cr_datagridview.Rows[rowIndex].Cells[3].Value.ToString();
                show_images();
                cr_datagridview.Visible = false;
                crpartycode.Text = cr_datagridview.Rows[rowIndex].Cells[0].Value.ToString();
                crpartycity.Text = cr_datagridview.Rows[rowIndex].Cells[1].Value.ToString();
            }
        }

        private Int32 get_d_c_from_a_n(string book, string ma_n)
        {
            temp_d_c = 0;
            if (book != null && ma_n != null)
            {
                if (dtMasterData != null && dtMasterData.Rows.Count > 0)
                {
                    DataRow[] drd_cRow = dtMasterData.Select("book ='" + book + "' and a_n = '" + ma_n + "' ");
                    if (drd_cRow != null && drd_cRow.Length > 0)
                        temp_d_c = Convert.ToInt32(drd_cRow[0]["d_c"].ToString());
                }
            }
            return temp_d_c;

            //temp_int = 0;
            //if (book != "" && ma_n != "")
            //{
            //    if (dtMasterData != null && dtMasterData.Rows.Count > 0)
            //    {
            //        for (row_counter = 0; row_counter < dtMasterData.Rows.Count; row_counter++)
            //        {
            //            if (dtMasterData.Rows[row_counter]["book"].ToString() == book && dtMasterData.Rows[row_counter]["a_n"].ToString() == ma_n)
            //            {
            //                temp_d_c = Convert.ToInt32(dtMasterData.Rows[row_counter]["d_c"].ToString());
            //                break;
            //            }
            //        }
            //    }
            //}
            //return temp_d_c;
        }

        private string get_a_n_from_d_c(string book, int md_c)
        {
            temp_a_n = "";
            if (dtMasterData != null && dtMasterData.Rows.Count > 0)
            {
                DataRow[] drd_cRow = dtMasterData.Select("book ='" + book + "' and d_c = " + md_c.ToString() + " ");
                if (drd_cRow != null && drd_cRow.Length > 0)
                    temp_a_n = drd_cRow[0]["a_n"].ToString();
            }
            return temp_a_n;
        }

        private string get_account_name_from_d_c(string book, int md_c)
        {
            ConnectionWithAccess.mdesc = null;
            if (dtMasterData != null && dtMasterData.Rows.Count > 0)
            {
                DataRow[] drd_cRow = dtMasterData.Select("book ='" + book + "' and d_c = " + md_c.ToString() + " ");
                if (drd_cRow != null && drd_cRow.Length > 0)
                    ConnectionWithAccess.mdesc = drd_cRow[0]["desc"].ToString();
            }
            return ConnectionWithAccess.mdesc;

            //ConnectionWithAccess.mdesc = null;
            //if (dtMasterData != null && dtMasterData.Rows.Count > 0)
            //{
            //    for (row_counter = 0; row_counter < dtMasterData.Rows.Count; row_counter++)
            //    {
            //        if (dtMasterData.Rows[row_counter]["book"].ToString() == book && Convert.ToInt32(dtMasterData.Rows[row_counter]["d_c"].ToString()) == md_c)
            //        {
            //            ConnectionWithAccess.mdesc = dtMasterData.Rows[row_counter]["desc"].ToString();
            //            if (book == "B")
            //                ConnectionWithAccess.bank_a_n = dtMasterData.Rows[row_counter]["a_n"].ToString();
            //            else if (book == "C")
            //                ConnectionWithAccess.cash_a_n = dtMasterData.Rows[row_counter]["a_n"].ToString();
            //            break;
            //        }
            //    }
            //}
            //return ConnectionWithAccess.mdesc;
        }

        private void printDocument1_PrintPage(object sender, System.Drawing.Printing.PrintPageEventArgs e)
        {
            //e.Graphics.DrawImage(pic.Image, 0, 0);
        }

        private void SendToPrinter(string report_filename)
        {
            if (File.Exists(report_filename))
            {
                var pi = new ProcessStartInfo(report_filename);
                pi.UseShellExecute = true;
                pi.Verb = "print";
                var process = System.Diagnostics.Process.Start(pi);
            }
            else
                MessageBox.Show("Sorry Report File Not Found : " + report_filename);
        }

        private void generate_company_details_pdf()
        {
            pdf_filename = ConnectionWithAccess.data_drive + "acc\\" + ConnectionWithAccess.mNIK + "\\reports\\company_details";
            if (chb_add_datetime_in_output.Checked)
                pdf_filename += "_" + DateTime.Now.Day + "_" + DateTime.Now.Month + "_" + DateTime.Now.Year + "_" + DateTime.Now.TimeOfDay.Hours + "_" + DateTime.Now.TimeOfDay.Minutes;
            pdf_filename += ".pdf";
            ConnectionWithAccess.create_file_folder(pdf_filename);
            doc1 = new Document(PageSize.A4, 25, 25, 10, 20);
            FileStream FS1 = File.Create(pdf_filename);
            writer = PdfWriter.GetInstance(doc1, FS1);
            doc1.Open();
            current_pdf_page_number = 1;
            Paragraph para = new Paragraph("");
            para.Font.Size = 25;
            temp_word = "01. Name";
            print_pdf_line(cour_11, temp_word, 25, 0);
            temp_word = ConnectionWithAccess.company_details[1] + "     {" + ConnectionWithAccess.mNIK + "}";
            print_pdf_line(cour_11_bold_red, temp_word, 130, -16);
            temp_word = "02. Address1";
            print_pdf_line(cour_11, temp_word, 25, 0);
            temp_word = ConnectionWithAccess.company_details[2];
            print_pdf_line(cour_11_bold_red, temp_word, 130, -16);
            temp_word = "03. Address2";
            print_pdf_line(cour_11, temp_word, 25, 0);
            temp_word = ConnectionWithAccess.company_details[3];
            print_pdf_line(cour_11_bold_red, temp_word, 130, -16);
            temp_word = "04. City                                                               Pincode";
            print_pdf_line(cour_11, temp_word, 25, 0);
            temp_word = ConnectionWithAccess.company_details[4];
            print_pdf_line(cour_11_bold_red, temp_word, 130, -16);
            temp_word = ConnectionWithAccess.company_details[6];
            print_pdf_line(cour_11_bold_red, temp_word, 300, -16);
            temp_word = "05. State";
            print_pdf_line(cour_11, temp_word, 25, 0);
            temp_word = ConnectionWithAccess.company_details[5];
            print_pdf_line(cour_11_bold_red, temp_word, 130, -16);
            temp_word = "06. Phone Off.";
            print_pdf_line(cour_11, temp_word, 25, 0);
            temp_word = ConnectionWithAccess.company_details[7];
            print_pdf_line(cour_11_bold_red, temp_word, 130, -16);
            temp_word = "07. Phone Resi1.";
            print_pdf_line(cour_11, temp_word, 25, 0);
            temp_word = ConnectionWithAccess.company_details[8];
            print_pdf_line(cour_11_bold_red, temp_word, 130, -16);
            temp_word = "08. Phone Mob1.";
            print_pdf_line(cour_11, temp_word, 25, 0);
            temp_word = ConnectionWithAccess.company_details[9];
            print_pdf_line(cour_11_bold_red, temp_word, 130, -16);
            temp_word = "09. Phone Mob2.";
            print_pdf_line(cour_11, temp_word, 25, 0);
            temp_word = ConnectionWithAccess.company_details[10];
            print_pdf_line(cour_11_bold_red, temp_word, 130, -16);

            temp_word = "10.A.Email Id.";
            print_pdf_line(cour_11, temp_word, 25, 0);
            if (ConnectionWithAccess.company_details[11].Contains("["))
                temp_word = ConnectionWithAccess.company_details[11].Substring(0, ConnectionWithAccess.company_details[11].IndexOf("["));
            else
                temp_word = ConnectionWithAccess.company_details[11];
            print_pdf_line(cour_11_bold_red, temp_word, 130, -16);

            temp_word = "11. Properitor";
            print_pdf_line(cour_11, temp_word, 25, 0);
            temp_word = ConnectionWithAccess.company_details[12];
            print_pdf_line(cour_11_bold_red, temp_word, 130, -16);

            temp_word = "12. Pan Card. #";
            print_pdf_line(cour_11, temp_word, 25, 0);
            temp_word = ConnectionWithAccess.company_details[13];
            print_pdf_line(cour_11_bold_red, temp_word, 130, -16);

            temp_word = "13. Type of Busi.1";
            print_pdf_line(cour_11, temp_word, 25, 0);
            temp_word = ConnectionWithAccess.company_details[14];
            print_pdf_line(cour_11_bold_red, temp_word, 130, -16);

            temp_word = "14. Type of Busi.2";
            print_pdf_line(cour_11, temp_word, 25, 0);
            temp_word = ConnectionWithAccess.company_details[15];
            print_pdf_line(cour_11_bold_red, temp_word, 130, -16);
            temp_word = "15. Type of Busi.3";
            print_pdf_line(cour_11, temp_word, 25, 0);
            temp_word = ConnectionWithAccess.company_details[16];
            print_pdf_line(cour_11_bold_red, temp_word, 130, -16);

            temp_word = "16. B.S.T. #";
            print_pdf_line(cour_11, temp_word, 25, 0);
            temp_word = ConnectionWithAccess.company_details[17];
            print_pdf_line(cour_11_bold_red, temp_word, 130, -16);

            temp_word = "17. T.I.N. #";
            print_pdf_line(cour_11, temp_word, 25, 0);
            temp_word = ConnectionWithAccess.company_details[18];
            print_pdf_line(cour_11_bold_red, temp_word, 130, -16);

            temp_word = "18. L.B.T. #";
            print_pdf_line(cour_11, temp_word, 25, 0);
            temp_word = ConnectionWithAccess.company_details[19];
            print_pdf_line(cour_11_bold_red, temp_word, 130, -16);

            temp_word = "19.Aadhar Card";
            print_pdf_line(cour_11, temp_word, 25, 0);
            temp_word = ConnectionWithAccess.company_details[20];
            print_pdf_line(cour_11_bold_red, temp_word, 130, -16);
            temp_word = "20. Bank A/c. #";
            print_pdf_line(cour_11, temp_word, 25, 0);
            temp_word = process_bank_account_number(ConnectionWithAccess.company_details[21]);
            print_pdf_line(cour_11_bold_red, temp_word, 130, -16);
            temp_word = "21.Comments";
            print_pdf_line(cour_11, temp_word, 25, 0);
            temp_word = ConnectionWithAccess.company_details[22];
            print_pdf_line(cour_11_bold_red, temp_word, 130, -16);

            temp_word = "22.Date of Birth";
            print_pdf_line(cour_11, temp_word, 25, 0);
            temp_word = ConnectionWithAccess.company_details[23];
            print_pdf_line(cour_11_bold_red, temp_word, 130, -16);

            temp_word = "23.Induvisal/Part.";
            print_pdf_line(cour_11, temp_word, 25, 0);
            temp_word = ConnectionWithAccess.company_details[24];
            print_pdf_line(cour_11_bold_red, temp_word, 130, -16);

            temp_word = "24.Extra";
            print_pdf_line(cour_11, temp_word, 25, 0);
            temp_word = ConnectionWithAccess.company_details[25];
            print_pdf_line(cour_11_bold_red, temp_word, 130, -16);

            temp_word = "25.C.S.T. Num ";
            print_pdf_line(cour_11, temp_word, 25, 0);
            temp_word = ConnectionWithAccess.company_details[26];
            print_pdf_line(cour_11_bold_red, temp_word, 130, -16);

            temp_word = "26.C.S.T. Tin ";
            print_pdf_line(cour_11, temp_word, 25, 0);
            temp_word = ConnectionWithAccess.company_details[27];
            print_pdf_line(cour_11_bold_red, temp_word, 130, -16);

            temp_word = "27.Website ";
            print_pdf_line(cour_11, temp_word, 25, 0);
            temp_word = ConnectionWithAccess.company_details[28];
            print_pdf_line(cour_11_bold_red, temp_word, 130, -16);

            temp_word = "28.I.F.C. Code ";
            print_pdf_line(cour_11, temp_word, 25, 0);
            temp_word = ConnectionWithAccess.company_details[29];
            print_pdf_line(cour_11_bold_red, temp_word, 130, -16);

            temp_word = "29.Bank Name ";
            print_pdf_line(cour_11, temp_word, 25, 0);
            temp_word = ConnectionWithAccess.company_details[30];
            print_pdf_line(cour_11_bold_red, temp_word, 130, -16);

            temp_word = "30.S.Inv.Print";
            print_pdf_line(cour_11, temp_word, 25, 0);
            temp_word = ConnectionWithAccess.company_details[31];
            print_pdf_line(cour_11_bold_red, temp_word, 130, -16);

            temp_word = "31.G.S.T. #";
            print_pdf_line(cour_11, temp_word, 25, 0);
            temp_word = ConnectionWithAccess.company_details[32];
            print_pdf_line(cour_11_bold_red, temp_word, 130, -16);

            temp_word = "32.Bypass Pass.";
            print_pdf_line(cour_11, temp_word, 25, 0);
            temp_word = ConnectionWithAccess.company_details[33];
            print_pdf_line(cour_11_bold_red, temp_word, 130, -16);

            temp_word = "33. STD.";
            print_pdf_line(cour_11, temp_word, 25, 0);
            temp_word = ConnectionWithAccess.company_details[34];
            print_pdf_line(cour_11_bold_red, temp_word, 130, -16);

            temp_word = "34.Company font";
            print_pdf_line(cour_11, temp_word, 25, 0);
            temp_word = ConnectionWithAccess.company_details[35];
            print_pdf_line(cour_11_bold_red, temp_word, 130, -16);

            temp_word = "35.Print Dist. ";
            print_pdf_line(cour_11, temp_word, 25, 0);
            temp_word = ConnectionWithAccess.company_details[36];
            print_pdf_line(cour_11_bold_red, temp_word, 130, -16);

            temp_word = "36.Backup. E.Id.";
            print_pdf_line(cour_11, temp_word, 25, 0);
            temp_word = ConnectionWithAccess.company_details[37];
            print_pdf_line(cour_11_bold_red, temp_word, 130, -16);

            doc1.Close();
            pdf_invoice.BringToFront();
            pdf_invoice.Visible = true;
            pdf_invoice.LoadFile(pdf_filename);
        }

        private void jour_datagridview_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                rowIndex = jour_datagridview.CurrentCell.RowIndex;
                if (jjpartycode1.Enabled == true)
                {
                    ConnectionWithAccess.mdesc = jour_datagridview.Rows[rowIndex].Cells[0].Value.ToString();
                    ConnectionWithAccess.mcity = jour_datagridview.Rows[rowIndex].Cells[1].Value.ToString();
                    ja_n.Text = jour_datagridview.Rows[rowIndex].Cells[2].Value.ToString();
                    js_a.Text = jour_datagridview.Rows[rowIndex].Cells[3].Value.ToString();
                    show_images();
                    jour_datagridview.Visible = false;
                    jjpartycode1.Text = ConnectionWithAccess.mdesc;
                    jour_datagridview.Visible = false;
                    jjpartycode2.Enabled = true;
                }
                else if (jjpartycode2.Enabled == true)
                {
                    ConnectionWithAccess.mdesc = jour_datagridview.Rows[rowIndex].Cells[0].Value.ToString();
                    ConnectionWithAccess.mcity = jour_datagridview.Rows[rowIndex].Cells[1].Value.ToString();
                    jna_n.Text = jour_datagridview.Rows[rowIndex].Cells[2].Value.ToString();
                    jns_a.Text = jour_datagridview.Rows[rowIndex].Cells[3].Value.ToString();
                    show_images();
                    jour_datagridview.Visible = false;
                    jjpartycode1.Text = ConnectionWithAccess.mdesc;
                    jour_datagridview.Visible = false;
                    jjpartycode1.Enabled = true;
                }
            }
        }

        private void select_party_for_jour()
        {
            if (working_journal_payer_payee == "payee")
            {
                ja_n.Text = jour_datagridview.CurrentRow.Cells[2].Value.ToString();
                js_a.Text = Convert.ToString(jour_datagridview.CurrentRow.Cells[3].Value);
                ConnectionWithAccess.mdesc = Convert.ToString(jour_datagridview.CurrentRow.Cells[0].Value);
                jjpartycode1.Text = Convert.ToString(jour_datagridview.CurrentRow.Cells[0].Value);
                get_account_details_from_01(ja_n.Text, js_a.Text);
                get_account_details_from_04(ja_n.Text, js_a.Text);
                lbl_payee_name.Text = account_detail_from_01[4];
                lbl_payee_con_details.Text = account_detail_from_04[17] + " ," + account_detail_from_04[18] + " ," + account_detail_from_04[19] + " ," + account_detail_from_04[20] + " ," + account_detail_from_04[21];
                lbl_payee_address.Text = account_detail_from_04[4] + " ," + account_detail_from_04[5] + " ," + account_detail_from_04[7];
                show_images();
                jjpartycode2.Enabled = true;
                jjpartycode2.Focus();
            }
            else if (working_journal_payer_payee == "payer")
            {
                jna_n.Text = jour_datagridview.CurrentRow.Cells[2].Value.ToString();
                jns_a.Text = Convert.ToString(jour_datagridview.CurrentRow.Cells[3].Value);
                ConnectionWithAccess.mdesc = Convert.ToString(jour_datagridview.CurrentRow.Cells[0].Value);
                jjpartycode2.Text = Convert.ToString(jour_datagridview.CurrentRow.Cells[0].Value);
                get_account_details_from_01(jna_n.Text, jns_a.Text);
                get_account_details_from_04(jna_n.Text, jns_a.Text);
                lbl_payer_name.Text = account_detail_from_01[4];
                lbl_payer_con_details.Text = account_detail_from_04[17] + " ," + account_detail_from_04[18] + " ," + account_detail_from_04[19] + " ," + account_detail_from_04[20] + " ," + account_detail_from_04[21];
                lbl_payer_address.Text = account_detail_from_04[4] + " ," + account_detail_from_04[5] + " ," + account_detail_from_04[7];
                show_images();
                if (jour_datagridview.CurrentRow != null)
                {
                    lbl_jour_payer_acc_head.Visible = true;
                    lbl_jour_payer_acc_head.Text = common_account_head(jna_n.Text);
                }
                jjpartycode1.Enabled = true;
                jjamt.ReadOnly = false;
                jjbamt.ReadOnly = false;
                jjigst_per.ReadOnly = false;
                jj_dgv_gst_tax_brief.Visible = true;
                jjamt.Focus();
                move_cursor_to_button_position("atbnew");
            }
            jour_datagridview.Visible = false;

        }

        //public static string get_old_prd_name(string prd)
        //{
        //    char c = Convert.ToChar(prd.ToUpper());
        //    asc_value = Convert.ToInt32(c);
        //    emerg_oprd = Convert.ToString(Convert.ToChar(asc_value - 1));
        //    return emerg_oprd;
        //}

        //public static string get_next_prd_name(string prd)
        //{
        //    char c = Convert.ToChar(prd.ToUpper());
        //    asc_value = Convert.ToInt32(c);
        //    emerg_nprd = Convert.ToString(Convert.ToChar(asc_value + 1));
        //    return emerg_nprd;
        //}

        #region emerg

        private void emerg_balance_function_old()
        {
            disable_all_keys();
            if (ConnectionWithAccess.mNIK == "AP2")
                update_gp_per_of_ap2();
            if (cb_emerg_full_period.Checked == true)
            {
                list_of_period_array.Clear();
                ConnectionWithAccess.query = "select prd from " + ConnectionWithAccess.tablename[50] + " order by prd";
                DataTable dtData1 = ConnectionCommand.fGetDataTable();
                if (dtData1 != null && dtData1.Rows.Count > 0)
                {
                    int mcolumncount = dtData1.Columns.Count;
                    for (int iRowCount = 0; iRowCount < dtData1.Rows.Count; iRowCount++)
                    {
                        list_of_period_array.Add(dtData1.Rows[iRowCount][0].ToString());
                    }
                }
                if (list_of_period_array.Count > 1)
                {
                    temp_int = 1;
                    for (int array_count = 1; array_count < list_of_period_array.Count(); array_count++)
                    {
                        if (list_of_period_array[array_count] == ConnectionWithAccess.mprd)
                        {
                            temp_int = array_count;
                            array_count = list_of_period_array.Count();
                        }
                    }
                    for (int array_count = temp_int; array_count < list_of_period_array.Count(); array_count++)
                    {
                        emerg_prd = list_of_period_array[array_count];
                        emerg_oprd = ConnectionWithAccess.get_old_prd_name(emerg_prd);
                        emerg_nprd = ConnectionWithAccess.get_next_prd_name(emerg_prd);
                        ConnectionWithAccess.query = "select [lock],[start],[end] from " + ConnectionWithAccess.tablename[50] + " where prd = '" + emerg_prd + "'";
                        dtData1 = ConnectionCommand.fGetDataTable();

                        if (dtData1 != null && dtData1.Rows.Count > 0)
                        {
                            if (dtData1.Rows[0][0] != null)
                            {
                                ConnectionWithAccess.prd_lock = dtData1.Rows[0][0].ToString();
                                start_date = dtData1.Rows[0][1].ToString();
                                end_date = dtData1.Rows[0][2].ToString();
                                start_date = start_date.Substring(0, start_date.IndexOf(" "));
                                end_date = end_date.Substring(0, end_date.IndexOf(" "));
                                ConnectionWithAccess.msdate = start_date;
                                ConnectionWithAccess.medate = end_date;
                            }
                        }
                        if (ConnectionWithAccess.prd_lock != "Y")
                        {
                            emerg_balance_process(emerg_prd, emerg_oprd);
                            //generate_temporary_pdf_file_for_testing();
                            emerg_closing_stock_to_opening_stock(emerg_prd, emerg_oprd);
                            update_at_the_rate_of_customers_and_suppliers(emerg_prd);
                            get_gp_percent_from_file_fifty(emerg_prd);
                            calculate_gross_profit_using_gp_per(emerg_prd);
                            //calculate_gross_profit_using_closing_stock(emerg_prd);
                            if (emerg_prd != "@")
                                save_balance_sheet_gp_values(emerg_prd);
                            calculate_closing_capital_balance_and_add_in_new_period(emerg_prd, emerg_oprd);
                            add_contains_of_balance_sheet_in_gridview(emerg_prd, false);
                            if (!balance_sheet_tally && cb_emerg_stop.Checked)
                            {
                                MessageBox.Show("Balance Sheet Not Tally " + emerg_prd);
                                array_count = list_of_period_array.Count();
                                go_to_selected_period(emerg_prd);
                            }
                        }
                    }
                }
            }
            else
            {
                emerg_prd = ConnectionWithAccess.mprd;
                emerg_oprd = ConnectionWithAccess.get_old_prd_name(emerg_prd);
                emerg_nprd = ConnectionWithAccess.get_next_prd_name(emerg_prd);
                ConnectionWithAccess.query = "select [lock],[start],[end] from " + ConnectionWithAccess.tablename[50] + " where prd = '" + emerg_prd + "'";
                DataTable dtData1 = ConnectionCommand.fGetDataTable();
                if (dtData1 != null && dtData1.Rows.Count > 0)
                {
                    if (dtData1.Rows[0][0] != null)
                    {
                        ConnectionWithAccess.prd_lock = dtData1.Rows[0][0].ToString();
                        start_date = dtData1.Rows[0][1].ToString();
                        end_date = dtData1.Rows[0][2].ToString();
                        start_date = start_date.Substring(0, start_date.IndexOf(" "));
                        end_date = end_date.Substring(0, end_date.IndexOf(" "));
                        ConnectionWithAccess.msdate = start_date;
                        ConnectionWithAccess.medate = end_date;
                    }
                }
                if (ConnectionWithAccess.prd_lock != "Y")
                {
                    emerg_balance_process(emerg_prd, emerg_oprd);
                    emerg_closing_stock_to_opening_stock(emerg_prd, emerg_oprd);
                    update_at_the_rate_of_customers_and_suppliers(emerg_prd);
                    get_gp_percent_from_file_fifty(emerg_prd);
                    calculate_gross_profit_using_gp_per(emerg_prd);
                    //calculate_gross_profit_using_closing_stock(emerg_prd);
                    if (emerg_prd != "@")
                        save_balance_sheet_gp_values(emerg_prd);
                    calculate_closing_capital_balance_and_add_in_new_period(emerg_prd, emerg_oprd);
                    add_contains_of_balance_sheet_in_gridview(emerg_prd, false);
                    if (!balance_sheet_tally)
                        MessageBox.Show("Balance Sheet Not Tally " + emerg_prd);
                }
            }
            delete_all_with_amount_equal_to_zero();
            text_to_display_on_top_function();
            enable_all_keys();
        }

        private void emerg_balance_function_new()
        {
            disable_all_keys();
            if (ConnectionWithAccess.mNIK == "AP2")
                update_gp_per_of_ap2();
            if (cb_emerg_full_period.Checked == true)
            {
                list_of_period_array.Clear();
                ConnectionWithAccess.query = "select prd from " + ConnectionWithAccess.tablename[50] + " order by prd";
                DataTable dtData1 = ConnectionCommand.fGetDataTable();
                if (dtData1 != null && dtData1.Rows.Count > 0)
                {
                    int mcolumncount = dtData1.Columns.Count;
                    for (int iRowCount = 1; iRowCount < dtData1.Rows.Count; iRowCount++)
                    {
                        list_of_period_array.Add(dtData1.Rows[iRowCount][0].ToString());
                    }
                }
                if (list_of_period_array.Count > 1)
                {
                    //comment this loop to start from A Period

                    //temp_int = 1;
                    //for (int array_count = 1; array_count < list_of_period_array.Count(); array_count++)
                    //{
                    //    if (list_of_period_array[array_count] == ConnectionWithAccess.mprd)
                    //    {
                    //        temp_int = array_count;
                    //        array_count = list_of_period_array.Count();
                    //    }
                    //}
                    temp_int = 0;
                    for (int array_count = temp_int; array_count < list_of_period_array.Count(); array_count++)
                    {
                        emerg_prd = list_of_period_array[array_count];
                        emerg_oprd = ConnectionWithAccess.get_old_prd_name(emerg_prd);
                        emerg_nprd = ConnectionWithAccess.get_next_prd_name(emerg_prd);
                        get_period_details_from_50(emerg_prd);
                        start_date = ConnectionWithAccess.msdate;
                        end_date = ConnectionWithAccess.medate;
                        start_date = start_date.Substring(0, start_date.IndexOf(" "));
                        end_date = end_date.Substring(0, end_date.IndexOf(" "));
                        ConnectionWithAccess.mprd = emerg_prd;
                        if (ConnectionWithAccess.prd_lock != "Y")
                        {
                            emerg_balance_process_using_DT(emerg_prd, emerg_oprd);
                            emerg_closing_stock_to_opening_stock_New(emerg_prd, emerg_oprd);
                            update_at_the_rate_of_customers_and_suppliers_New(emerg_prd);
                            get_gp_percent_from_file_fifty_New(emerg_prd);
                            calculate_gross_profit_using_gp_per_New(emerg_prd);
                            //calculate_gross_profit_using_closing_stock(emerg_prd);
                            if (emerg_prd != "@")
                                save_balance_sheet_gp_values_New(emerg_prd);
                            calculate_closing_capital_balance_and_add_in_new_period_New(emerg_prd, emerg_oprd);
                            add_contains_of_balance_sheet_in_gridview_New(emerg_prd, false);
                            if (!balance_sheet_tally && cb_emerg_stop.Checked)
                            {
                                MessageBox.Show("Balance Sheet Not Tally " + emerg_prd);
                                array_count = list_of_period_array.Count();
                                go_to_selected_period(emerg_prd);
                            }
                            else
                            {
                                if (cb_emerg_lock_period.Checked == true && array_count < list_of_period_array.Count() - 1)
                                {
                                    ConnectionWithAccess.query = "update " + ConnectionWithAccess.tablename[50] + " set [lock] = 'Y' where prd = '" + emerg_prd + "'";
                                    ConnectionCommand.fUpdateInsertDeleteData();
                                }
                                end_date = ConnectionWithAccess.medate;

                            }
                        }
                    }
                    go_to_selected_period(emerg_prd);
                }
                else
                {
                    int array_count = 0;
                    emerg_prd = list_of_period_array[array_count];
                    emerg_oprd = ConnectionWithAccess.get_old_prd_name(emerg_prd);
                    emerg_nprd = ConnectionWithAccess.get_next_prd_name(emerg_prd);
                    get_period_details_from_50(emerg_prd);
                    start_date = ConnectionWithAccess.msdate;
                    end_date = ConnectionWithAccess.medate;
                    start_date = start_date.Substring(0, start_date.IndexOf(" "));
                    end_date = end_date.Substring(0, end_date.IndexOf(" "));
                    ConnectionWithAccess.mprd = emerg_prd;
                    if (ConnectionWithAccess.prd_lock != "Y")
                    {
                        emerg_balance_process_using_DT(emerg_prd, emerg_oprd);
                        emerg_closing_stock_to_opening_stock_New(emerg_prd, emerg_oprd);
                        update_at_the_rate_of_customers_and_suppliers_New(emerg_prd);
                        get_gp_percent_from_file_fifty_New(emerg_prd);
                        calculate_gross_profit_using_gp_per_New(emerg_prd);
                        //calculate_gross_profit_using_closing_stock(emerg_prd);
                        if (emerg_prd != "@")
                            save_balance_sheet_gp_values_New(emerg_prd);
                        calculate_closing_capital_balance_and_add_in_new_period_New(emerg_prd, emerg_oprd);
                        add_contains_of_balance_sheet_in_gridview_New(emerg_prd, false);
                        if (!balance_sheet_tally && cb_emerg_stop.Checked)
                        {
                            MessageBox.Show("Balance Sheet Not Tally " + emerg_prd);
                            array_count = list_of_period_array.Count();
                            go_to_selected_period(emerg_prd);
                        }
                        else
                        {
                            if (cb_emerg_lock_period.Checked == true && array_count < list_of_period_array.Count() - 1)
                            {
                                ConnectionWithAccess.query = "update " + ConnectionWithAccess.tablename[50] + " set [lock] = 'Y' where prd = '" + emerg_prd + "'";
                                ConnectionCommand.fUpdateInsertDeleteData();
                            }
                            end_date = ConnectionWithAccess.medate;

                        }
                    }
                }
            }
            else
            {
                emerg_prd = ConnectionWithAccess.mprd;
                emerg_oprd = ConnectionWithAccess.get_old_prd_name(emerg_prd);
                emerg_nprd = ConnectionWithAccess.get_next_prd_name(emerg_prd);
                get_period_details_from_50(emerg_prd);
                start_date = ConnectionWithAccess.msdate;
                end_date = ConnectionWithAccess.medate;
                start_date = start_date.Substring(0, start_date.IndexOf(" "));
                if (end_date.Contains(" "))
                    end_date = end_date.Substring(0, end_date.IndexOf(" "));
                if (ConnectionWithAccess.prd_lock != "Y")
                {
                    emerg_balance_process_using_DT(emerg_prd, emerg_oprd);
                    //generate_temporary_pdf_file_for_testing();
                    emerg_closing_stock_to_opening_stock_New(emerg_prd, emerg_oprd);
                    update_at_the_rate_of_customers_and_suppliers_New(emerg_prd);
                    get_gp_percent_from_file_fifty_New(emerg_prd);
                    calculate_gross_profit_using_gp_per_New(emerg_prd);
                    //calculate_gross_profit_using_closing_stock(emerg_prd);
                    if (ConnectionWithAccess.mNIK == "AP2" && emerg_prd == "U")
                    {
                        update_amount_in_51(emerg_prd, "2010", "@@@", 8808);
                    }
                    if (emerg_prd != "@")
                        save_balance_sheet_gp_values_New(emerg_prd);
                    //calculate_closing_capital_balance_and_add_in_new_period_New(emerg_prd, emerg_oprd);
                    calculate_closing_capital_balance_and_add_in_new_period(emerg_prd, emerg_oprd);
                    add_contains_of_balance_sheet_in_gridview_New(emerg_prd, false);
                    if (!balance_sheet_tally)
                        MessageBox.Show("Balance Sheet Not Tally " + emerg_prd);
                    else
                    {
                        if (cb_emerg_lock_period.Checked == true)
                        {
                            ConnectionWithAccess.query = "update " + ConnectionWithAccess.tablename[50] + " set [lock] = 'Y' where prd = '" + emerg_prd + "'";
                            ConnectionCommand.fUpdateInsertDeleteData();
                        }
                    }
                }
            }
            delete_all_with_amount_equal_to_zero();

            enable_all_keys();
        }

        private bool check_for_period_locked_unlocked(string mprd)
        {
            ConnectionWithAccess.query = "select [lock] from " + ConnectionWithAccess.tablename[50] + " where prd = '" + mprd + "'";
            DataTable dtData1 = ConnectionCommand.fGetDataTable();
            if (dtData1 != null && dtData1.Rows.Count > 0)
            {
                if (dtData1.Rows[0][0] != null)
                {
                    if (dtData1.Rows[0][0].ToString() != "Y")
                        return false;
                    else
                        return true;
                }
                else
                    return true;
            }
            else
                return false;
        }

        private void delete_all_with_amount_equal_to_zero()
        {
            ConnectionWithAccess.query = "delete from " + ConnectionWithAccess.tablename[51] + " where amt = 0";
            ConnectionCommand.fUpdateInsertDeleteData();
        }

        private void generate_temporary_pdf_file_for_testing()
        {
            pdf_filename = ConnectionWithAccess.data_drive + "acc\\" + ConnectionWithAccess.mNIK + "\\reports\\Temporary_pdf_file_for_testing.pdf";
            //pdf_filename = ConnectionWithAccess.remove_filename_error(pdf_filename);
            ConnectionWithAccess.create_file_folder(pdf_filename);
            doc1 = new Document(PageSize.A4, 5, 5, 5, 5);
            FileStream FS1 = File.Create(pdf_filename);
            writer = PdfWriter.GetInstance(doc1, FS1);
            doc1.Open();
            current_pdf_page_number = 1;
            add_header_footer = true;
            pdf_top_heading = null;
            require_header_footer = false;
            Paragraph para = new Paragraph();
            temp_double = 0;
            temp_word = ".";
            int position = 0;
            print_pdf_line(cour_9_bold, " ", 0, 0);
            for (int i = 0; i < list_of_temporary_emerg_data.Count; i++)
            {
                if (position == 0)
                {
                    print_pdf_line(cour_9_bold, list_of_temporary_emerg_data[i], 0, 0);
                    position++;
                }
                else if (position == 1)
                {
                    print_pdf_line(cour_9_bold, list_of_temporary_emerg_data[i], 200, -16);
                    position++;
                }
                else if (position == 2)
                {
                    print_pdf_line(cour_9_bold, list_of_temporary_emerg_data[i], 400, -16);
                    position = 0;
                }
            }
            doc1.Close();
            require_header_footer = true;
        }

        private void check_for_difference_in_balance_sheet(string emerg_prd)
        {
            //DataTable balsheet = new DataTable();
            //string strQuery = "select prd,[start],[end],gp,[lock] from " + ConnectionWithAccess.tablename[50] + " where prd = '" + e.KeyChar.ToString() + "' ";
            //ConnectionWithAccess.connection.Open();

            //try
            //{
            //    var adapter = new OleDbDataAdapter(strQuery, ConnectionWithAccess.connection);
            //    adapter.Fill(balsheet);
            //}
            //catch (Exception ex)
            //{ }
            cbBalShPer.Text = emerg_prd;
            StringBuilder strQuery = new StringBuilder();
            strQuery.Append(" select '', f1.a_n, f1.s_a, '','' , '' , f1.[DESC], '', f51.AMT from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and f51.S_A = f1.S_A where f51.prd = '" + cbBalShPer.Text + "' and f51.D_D = #01-01-1901# and f51.amt > 0 and f51.s_a = '@@@' and f51.a_n like '2%' and f51.a_n <> '2001' UNION ALL");
            strQuery.Append(" select '', f1.a_n, f1.s_a, '','' , '' , f1.[DESC], '', f51.AMT from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and f51.S_A = f1.S_A where f51.prd = '" + cbBalShPer.Text + "' and f51.D_D = #01-01-1901# and f51.amt > 0 and f51.s_a = '@@@' and f51.a_n like '3%' and f51.a_n <> '3001'and f51.a_n <> '3500' and f51.a_n <> '3501' UNION ALL");
            strQuery.Append(" select '', f1.a_n, f1.s_a, '','' , ''  , f1.[DESC], '', f51.AMT from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and f51.S_A = f1.S_A where f51.prd = '" + cbBalShPer.Text + "' and f51.D_D = #01-01-1901# and f51.amt > 0 and f51.s_a <> '@@@' and f51.a_n LIKE '35%' UNION ALL");
            strQuery.Append(" select '', f1.a_n, f1.s_a, '','' , ''  , f1.[DESC], '', f51.AMT from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and f51.S_A = f1.S_A where f51.prd = '" + cbBalShPer.Text + "' and f51.D_D = #01-01-1901# and f51.amt > 0 and f51.s_a = '@@@' and f51.a_n like '4%' UNION ALL");
            strQuery.Append(" select '', f1.a_n, f1.s_a, f1.[DESC] , '', f51.AMT, '', '','' from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and f51.S_A = f1.S_A where f51.prd = '" + cbBalShPer.Text + "' and f51.D_D = #01-01-1901# and f51.amt > 0 and f51.s_a = '@@@' and f51.a_n = '3001' UNION ALL");
            strQuery.Append(" select '', f1.a_n, f1.s_a, '','' , ''  , f1.[DESC], '', (f51.AMT * -1) from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and f51.S_A = f1.S_A where f51.prd = '" + cbBalShPer.Text + "' and f51.D_D = #01-01-1901# and f51.amt < 0 and f51.s_a = '@@@' and f51.a_n like '5%' UNION ALL");
            strQuery.Append(" select '', f1.a_n, f1.s_a, f1.[DESC] , '', (f51.AMT * -1), '', '','' from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and f51.S_A = f1.S_A where f51.prd = '" + cbBalShPer.Text + "' and f51.D_D = #01-01-1901# and f51.amt < 0 and f51.s_a = '@@@' and f51.a_n like '2%' UNION ALL");
            strQuery.Append(" select '', f1.a_n, f1.s_a, f1.[DESC] , '', (f51.AMT * -1), '', '','' from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and f51.S_A = f1.S_A where f51.prd = '" + cbBalShPer.Text + "' and f51.D_D = #01-01-1901# and f51.amt < 0 and f51.s_a = '@@@' and f51.a_n like '3%' and f51.a_n <> '3000' and f51.a_n <> '3500' and f51.a_n <> '3501' UNION ALL");
            strQuery.Append(" select '', f1.a_n, f1.s_a, f1.[DESC] , '', (f51.AMT * -1), '', '','' from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and f51.S_A = f1.S_A where f51.prd = '" + cbBalShPer.Text + "' and f51.D_D = #01-01-1901# and f51.amt < 0 and f51.s_a = '@@@' and f51.a_n like '2%' UNION ALL");
            strQuery.Append(" select '', f1.a_n, f1.s_a, f1.[DESC] , '', (f51.AMT * -1), '', '','' from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and f51.S_A = f1.S_A where f51.prd = '" + cbBalShPer.Text + "' and f51.D_D = #01-01-1901# and f51.amt < 0 and (f51.s_a <> '@@@' and f51.s_a <> '') and f51.a_n LIKE '35%' and f51.a_n <> '3500' UNION ALL");
            strQuery.Append(" select '', f1.a_n, f1.s_a, f1.[DESC] , '', (f51.AMT * -1), '', '','' from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and f51.S_A = f1.S_A where f51.prd = '" + cbBalShPer.Text + "' and f51.D_D = #01-01-1901# and f51.amt < 0 and f51.s_a = '@@@' and f51.a_n like '2%' UNION ALL");
            strQuery.Append(" select '', f1.a_n, f1.s_a, f1.[DESC] , '', (f51.AMT * -1), '', '','' from " + ConnectionWithAccess.tablename[51] + " f51 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f51.A_N = f1.A_N and f51.S_A = f1.S_A where f51.prd = '" + cbBalShPer.Text + "' and f51.D_D = #01-01-1901# and f51.amt < 0 and f51.s_a = '@@@' and f51.a_n like '4%'");
            ConnectionWithAccess.query = strQuery.ToString();
            dataset.Clear();
            dataadapter = new OleDbDataAdapter(ConnectionWithAccess.query, ConnectionWithAccess.connection);
            dataadapter.Fill(dataset);

        }

        private void emerg_balance_process(string emerg_prd, string emerg_oprd)
        {
            temp_sale_amt = 0;
            temp_sale_replace_amt = 0;
            temp_purchase_amt = 0;
            ConnectionWithAccess.closing_stock = 0;
            list_of_emerg_data.Clear();
            ConnectionWithAccess.query = "delete from " + ConnectionWithAccess.tablename[51] + " where prd >= '" + emerg_prd + "'";
            ConnectionCommand.fUpdateInsertDeleteData();
            if (cb_emerg_old.Checked == true)
            {
                this.Text = "Please wait Emerging Period {" + emerg_prd + "}";
                ConnectionWithAccess.query = "select prd,a_n,s_a,amt from " + ConnectionWithAccess.tablename[51] + " where prd = '" + emerg_oprd + "' and a_n like '1%' and s_a = '@@@' and d_d = #01/01/1901# and amt <> 0 order by a_n,s_a";
                DataTable dtData1 = ConnectionCommand.fGetDataTable();
                if (dtData1 != null && dtData1.Rows.Count > 0)
                {
                    temp_word1 = dtData1.Rows[0][1].ToString().Trim();
                    temp_double = 0;
                    for (int iRowCount = 0; iRowCount < dtData1.Rows.Count; iRowCount++)
                    {
                        if (dtData1.Rows[iRowCount][0] != null)
                        {
                            check_data_type(dtData1.Rows[iRowCount][3].ToString());
                            if (data_type == "Numeric")
                            {
                                if (dtData1.Rows[iRowCount][1].ToString().Trim() == temp_word1)
                                    temp_double += Convert.ToDouble(dtData1.Rows[iRowCount][3].ToString());
                                else
                                {
                                    //temp_word1 = dtData1.Rows[iRowCount][1].ToString();
                                    temp_word = emerg_prd + " ," + temp_word1 + " ," + "@@@" + "," + Convert.ToString(temp_double) + " ,O, 0";
                                    list_of_emerg_data.Add(temp_word);
                                    temp_word1 = dtData1.Rows[iRowCount][1].ToString().Trim();
                                    temp_double = Convert.ToDouble(dtData1.Rows[iRowCount][3].ToString());
                                }
                            }
                        }
                    }
                    temp_word = emerg_prd + " ," + temp_word1 + " ," + "@@@" + "," + Convert.ToString(temp_double) + " ,O, 0";
                    list_of_emerg_data.Add(temp_word);
                }
                ConnectionWithAccess.query = "select prd,a_n,s_a,amt from " + ConnectionWithAccess.tablename[51] + " where prd = '" + emerg_oprd + "' and a_n not like '1%' and a_n not like '30%' and a_n not like '7%' and d_d = #01/01/1901# and a_n not like '6000%' and a_n not like '65%' and a_n not like '7998%' and amt <> 0";
                dtData1 = ConnectionCommand.fGetDataTable();
                if (dtData1 != null && dtData1.Rows.Count > 0)
                {
                    for (int iRowCount = 0; iRowCount < dtData1.Rows.Count; iRowCount++)
                    {
                        if (dtData1.Rows[iRowCount][0] != null)
                        {
                            temp_word = emerg_prd + " ," + dtData1.Rows[iRowCount][1].ToString() + " ," + dtData1.Rows[iRowCount][2].ToString() + " ," + dtData1.Rows[iRowCount][3].ToString() + " ,O, 0";
                            list_of_emerg_data.Add(temp_word);
                        }
                    }
                }
                ConnectionWithAccess.query = "select prd,a_n,s_a,amt from " + ConnectionWithAccess.tablename[51] + " where prd = '" + emerg_oprd + "' and a_n like '3%' and a_n <> '3000' and a_n <> '3001' and s_a ='@@@' and d_d = #01/01/1901# and a_n not like '6000%' and a_n not like '7998%' and amt <> 0";
                dtData1 = ConnectionCommand.fGetDataTable();
                if (dtData1 != null && dtData1.Rows.Count > 0)
                {
                    for (int iRowCount = 0; iRowCount < dtData1.Rows.Count; iRowCount++)
                    {
                        if (dtData1.Rows[iRowCount][0] != null)
                        {
                            temp_word = emerg_prd + " ," + dtData1.Rows[iRowCount][1].ToString() + " ," + dtData1.Rows[iRowCount][2].ToString() + " ," + dtData1.Rows[iRowCount][3].ToString() + " ,O, 0";
                            list_of_emerg_data.Add(temp_word);
                        }
                    }
                }
            }
            if (cb_emerg_sale.Checked == true)
            {
                //this.Text = "Please wait Emerging " + ConnectionWithAccess.tablename[21];
                ConnectionWithAccess.query = "select prd,a_n,s_a,gamt,d_c,tamt,tx_code from " + ConnectionWithAccess.tablename[21] + " where prd = '" + emerg_prd + "' and s_a <> '@@@' and gamt <> 0";
                DataTable dtData1 = ConnectionCommand.fGetDataTable();
                if (dtData1 != null && dtData1.Rows.Count > 0)
                {
                    for (int iRowCount = 0; iRowCount < dtData1.Rows.Count; iRowCount++)
                    {
                        if (dtData1.Rows[iRowCount][0] != null)
                        {
                            temp_word = dtData1.Rows[iRowCount][0].ToString() + " ," + dtData1.Rows[iRowCount][1].ToString() + " ," + dtData1.Rows[iRowCount][2].ToString() + " ," + dtData1.Rows[iRowCount][3].ToString() + " ,S" + "," + dtData1.Rows[iRowCount][5].ToString() + " ," + dtData1.Rows[iRowCount][4].ToString() + " ," + dtData1.Rows[iRowCount][6].ToString();
                            //if (dtData1.Rows[iRowCount][6].ToString() != "7")
                            //    temp_sale_amt += Convert.ToDouble(dtData1.Rows[iRowCount][3].ToString());
                            //else
                            //    temp_sale_replace_amt += Convert.ToDouble(dtData1.Rows[iRowCount][3].ToString());
                            list_of_emerg_data.Add(temp_word);

                        }
                    }
                }
                else
                    update_amount_in_51(ConnectionWithAccess.mprd, "2002", "@@@", 0);
                temporary_array = new string[0];
                for (int i = 0; i < list_of_emerg_data.Count(); i++)
                {
                    if (i == 29)
                        temp_word = "";
                    var cellArray = list_of_emerg_data[i].Split(new[] { ',' });
                    if (cellArray[4].ToString() == "S")
                    {
                        if (cellArray[7].ToString() != "7")
                            temp_word = cellArray[0] + " ," + "6000" + "," + "@@@" + "," + (Convert.ToDouble(cellArray[3]) * -1) + " ,E" + "," + cellArray[5] + " ," + cellArray[6] + " ," + cellArray[7];
                        else
                            temp_word = cellArray[0] + " ," + "6000R1" + "," + "@@@" + "," + (Convert.ToDouble(cellArray[3]) * -1) + " ,E" + "," + cellArray[5] + " ," + cellArray[6] + " ," + cellArray[7];
                        list_of_emerg_data.Add(temp_word);
                    }
                }
                //this.Text = "Please wait Emerging " + ConnectionWithAccess.tablename[30];
                ConnectionWithAccess.query = "select prd,a_n,s_a,gamt,d_c,tamt,tx_code from " + ConnectionWithAccess.tablename[30] + " where prd = '" + emerg_prd + "'";
                dtData1 = ConnectionCommand.fGetDataTable();
                if (dtData1 != null && dtData1.Rows.Count > 0)
                {
                    for (int iRowCount = 0; iRowCount < dtData1.Rows.Count; iRowCount++)
                    {
                        if (dtData1.Rows[iRowCount][3] != null && dtData1.Rows[iRowCount][3].ToString().Trim() != "")
                        {
                            if (Convert.ToDouble(dtData1.Rows[iRowCount][3].ToString()) != 0)  // check for only b_t = 3 (means bank cheque passed)
                            {
                                temp_word = dtData1.Rows[iRowCount][0].ToString() + " ," + dtData1.Rows[iRowCount][1].ToString() + " ," + dtData1.Rows[iRowCount][2].ToString() + " ," + Convert.ToDouble(dtData1.Rows[iRowCount][3].ToString()) * -1.00 + " ,R" + "," + dtData1.Rows[iRowCount][5].ToString() + " ," + dtData1.Rows[iRowCount][4].ToString() + " ," + dtData1.Rows[iRowCount][6].ToString();
                                list_of_emerg_data.Add(temp_word);
                                temp_word = dtData1.Rows[iRowCount][0].ToString() + " ," + dtData1.Rows[iRowCount][1].ToString() + " ," + "@@@" + "," + Convert.ToDouble(dtData1.Rows[iRowCount][3].ToString()) * -1.00 + " ,R" + "," + dtData1.Rows[iRowCount][5].ToString() + " ," + dtData1.Rows[iRowCount][4].ToString() + " ," + dtData1.Rows[iRowCount][6].ToString();
                                list_of_emerg_data.Add(temp_word);
                                temp_word = dtData1.Rows[iRowCount][0].ToString() + " ," + "7001" + "," + "@@@" + "," + Convert.ToDouble(dtData1.Rows[iRowCount][3].ToString()) + " ,R" + "," + dtData1.Rows[iRowCount][5].ToString() + " ," + dtData1.Rows[iRowCount][4].ToString() + " ," + dtData1.Rows[iRowCount][6].ToString();
                                list_of_emerg_data.Add(temp_word);
                            }
                        }
                    }
                }
            }
            if (cb_emerg_purchase.Checked == true)
            {
                //this.Text = "Please wait Emerging " + ConnectionWithAccess.tablename[22];
                ConnectionWithAccess.query = "select prd,a_n,s_a,gamt,d_c from " + ConnectionWithAccess.tablename[22] + " where prd = '" + emerg_prd + "'and s_a <> '@@@'";
                DataTable dtData1 = ConnectionCommand.fGetDataTable();
                if (dtData1 != null && dtData1.Rows.Count > 0)
                {
                    for (int iRowCount = 0; iRowCount < dtData1.Rows.Count; iRowCount++)
                    {
                        if (dtData1.Rows[iRowCount][3] != null)
                        {
                            temp_word = dtData1.Rows[iRowCount][0].ToString() + " ," + dtData1.Rows[iRowCount][1].ToString() + " ," + dtData1.Rows[iRowCount][2].ToString() + " ," + (Convert.ToDouble(dtData1.Rows[iRowCount][3].ToString()) * -1) + " ,P" + "," + dtData1.Rows[iRowCount][4].ToString();
                            list_of_emerg_data.Add(temp_word);
                            temp_word = dtData1.Rows[iRowCount][0].ToString() + " ," + dtData1.Rows[iRowCount][1].ToString() + " ," + "@@@" + "," + (Convert.ToDouble(dtData1.Rows[iRowCount][3].ToString()) * -1) + " ,P" + "," + dtData1.Rows[iRowCount][4].ToString();
                            list_of_emerg_data.Add(temp_word);
                            temp_word = dtData1.Rows[iRowCount][0].ToString() + " ," + "7000" + "," + "@@@" + "," + dtData1.Rows[iRowCount][3].ToString() + " ,E" + "," + dtData1.Rows[iRowCount][4].ToString();
                            list_of_emerg_data.Add(temp_word);
                        }
                    }
                }
            }
            if (cb_emerg_bank.Checked == true)
            {
                //this.Text = "Please wait Emerging " + ConnectionWithAccess.tablename[23];
                //ConnectionWithAccess.query = "select prd,a_n,s_a,(bamt * -1),d_c,b_t,tran_d_c from " + ConnectionWithAccess.tablename[23] + " where prd = '" + emerg_prd + "' and b_t = '3' and tran_d_c <= 1 order by pass_date";
                ConnectionWithAccess.query = "select prd,a_n,s_a,(bamt * -1),d_c,b_t,tran_d_c,pass_date from " + ConnectionWithAccess.tablename[23] + " where prd = '" + emerg_prd + "' and b_t = '3' and tran_d_c <= 1 and pass_date >= @From and pass_date <= @To order by pass_date,d_n";
                parameters_for_date_range(ConnectionWithAccess.msdate, ConnectionWithAccess.medate);
                DataTable dtData1 = ConnectionCommand.fGetDataTable();
                if (dtData1 != null && dtData1.Rows.Count > 0)
                {
                    for (int iRowCount = 0; iRowCount < dtData1.Rows.Count; iRowCount++)
                    {
                        if (dtData1.Rows[iRowCount][3] != null)
                        {
                            if (dtData1.Rows[iRowCount][5].ToString() == "3")  // check for only b_t = 3 (means bank cheque passed)
                            {
                                temp_word = dtData1.Rows[iRowCount][0].ToString() + " ," + dtData1.Rows[iRowCount][1].ToString() + " ," + dtData1.Rows[iRowCount][2].ToString() + " ," + dtData1.Rows[iRowCount][3].ToString() + " ,B" + "," + dtData1.Rows[iRowCount][4].ToString() + " ," + dtData1.Rows[iRowCount][5].ToString() + " ," + dtData1.Rows[iRowCount][6].ToString() + "," + dtData1.Rows[iRowCount][7].ToString();
                                list_of_emerg_data.Add(temp_word);
                                temp_a_n = get_a_n_from_d_c("B", Convert.ToInt32(dtData1.Rows[iRowCount][4].ToString()));
                                temp_word = dtData1.Rows[iRowCount][0].ToString() + " ," + temp_a_n + " ," + "@@@" + "," + (Convert.ToDouble(dtData1.Rows[iRowCount][3].ToString()) * -1).ToString() + " ,B" + "," + dtData1.Rows[iRowCount][4].ToString() + " ," + dtData1.Rows[iRowCount][5].ToString() + " ," + dtData1.Rows[iRowCount][6].ToString() + "," + dtData1.Rows[iRowCount][7].ToString();
                                list_of_emerg_data.Add(temp_word);
                                if (dtData1.Rows[iRowCount][1].ToString() == "7999")
                                {
                                    if (dtData1.Rows[iRowCount][2].ToString() == "WIT")
                                    {
                                        temp_word = dtData1.Rows[iRowCount][0].ToString() + " ," + "2010" + " ," + "@@@" + "," + (Convert.ToDouble(dtData1.Rows[iRowCount][3].ToString()) * 1).ToString() + " ,C" + "," + dtData1.Rows[iRowCount][4].ToString() + " ," + dtData1.Rows[iRowCount][5].ToString() + " ," + dtData1.Rows[iRowCount][6].ToString() + "," + dtData1.Rows[iRowCount][7].ToString();
                                        list_of_emerg_data.Add(temp_word);
                                    }
                                    else if (dtData1.Rows[iRowCount][2].ToString() == "DEP")
                                    {
                                        temp_word = dtData1.Rows[iRowCount][0].ToString() + " ," + "2010" + " ," + "@@@" + "," + (Convert.ToDouble(dtData1.Rows[iRowCount][3].ToString()) * 1).ToString() + " ,C" + "," + dtData1.Rows[iRowCount][4].ToString() + " ," + dtData1.Rows[iRowCount][5].ToString() + " ," + dtData1.Rows[iRowCount][6].ToString() + "," + dtData1.Rows[iRowCount][7].ToString();
                                        list_of_emerg_data.Add(temp_word);
                                    }
                                }
                            }
                        }
                    }
                }
                //ConnectionWithAccess.query = "select prd,a_n,s_a,bamt,d_c,b_t,tran_d_c from " + ConnectionWithAccess.tablename[23] + " where prd = '" + emerg_prd + "' and b_t = '3' and tran_d_c <> 0 order by pass_date";
                ConnectionWithAccess.query = "select prd,a_n,s_a,bamt,d_c,b_t,tran_d_c,pass_date from " + ConnectionWithAccess.tablename[23] + " where prd = '" + emerg_prd + "' and b_t = '3' and tran_d_c <> 0 and pass_date >= @From and pass_date <= @To order by pass_date,d_n";
                parameters_for_date_range(ConnectionWithAccess.msdate, ConnectionWithAccess.medate);
                dtData1 = ConnectionCommand.fGetDataTable();
                if (dtData1 != null && dtData1.Rows.Count > 0)
                {
                    for (int iRowCount = 0; iRowCount < dtData1.Rows.Count; iRowCount++)
                    {
                        if (dtData1.Rows[iRowCount][3] != null)
                        {
                            if (dtData1.Rows[iRowCount][5].ToString() == "3")  // check for only b_t = 3 (means bank cheque passed)
                            {
                                temp_word = dtData1.Rows[iRowCount][0].ToString() + " ," + dtData1.Rows[iRowCount][1].ToString() + " ," + dtData1.Rows[iRowCount][2].ToString() + " ," + dtData1.Rows[iRowCount][3].ToString() + " ,B" + "," + dtData1.Rows[iRowCount][4].ToString() + " ," + dtData1.Rows[iRowCount][5].ToString() + " ," + dtData1.Rows[iRowCount][6].ToString() + "," + dtData1.Rows[iRowCount][7].ToString();
                                list_of_emerg_data.Add(temp_word);
                                temp_a_n = get_a_n_from_d_c("B", Convert.ToInt32(dtData1.Rows[iRowCount][6].ToString()));
                                temp_word = dtData1.Rows[iRowCount][0].ToString() + " ," + temp_a_n + " ," + "@@@" + "," + (Convert.ToDouble(dtData1.Rows[iRowCount][3].ToString()) * -1).ToString() + " ,B" + "," + dtData1.Rows[iRowCount][4].ToString() + " ," + dtData1.Rows[iRowCount][5].ToString() + " ," + dtData1.Rows[iRowCount][6].ToString() + "," + dtData1.Rows[iRowCount][7].ToString();
                                list_of_emerg_data.Add(temp_word);

                            }
                        }
                    }
                }
            }
            if (cb_emerg_cash.Checked == true)
            {
                //this.Text = "Please wait Emerging " + ConnectionWithAccess.tablename[24];
                ConnectionWithAccess.query = "select prd,a_n,s_a,(camt *-1),d_c,d_d from " + ConnectionWithAccess.tablename[24] + " where prd = '" + emerg_prd + "' and camt <> 0 and a_n <> '7999' order by d_d";
                DataTable dtData1 = ConnectionCommand.fGetDataTable();
                if (dtData1 != null && dtData1.Rows.Count > 0)
                {
                    for (int iRowCount = 0; iRowCount < dtData1.Rows.Count; iRowCount++)
                    {
                        if (dtData1.Rows[iRowCount][3] != null)
                        {
                            if (Convert.ToDouble(dtData1.Rows[iRowCount][3].ToString()) != 0)  // check for only b_t = 3 (means bank cheque passed)
                            {
                                temp_word = dtData1.Rows[iRowCount][0].ToString() + " ," + dtData1.Rows[iRowCount][1].ToString() + " ," + dtData1.Rows[iRowCount][2].ToString() + " ," + dtData1.Rows[iRowCount][3].ToString() + " ,C" + "," + dtData1.Rows[iRowCount][4].ToString() + "," + dtData1.Rows[iRowCount][5].ToString();
                                list_of_emerg_data.Add(temp_word);
                                temp_a_n = get_a_n_from_d_c("C", Convert.ToInt32(dtData1.Rows[iRowCount][4].ToString()));
                                temp_word = dtData1.Rows[iRowCount][0].ToString() + " ," + temp_a_n + " ," + "@@@" + "," + (Convert.ToDouble(dtData1.Rows[iRowCount][3].ToString()) * -1).ToString() + " ," + ",C" + "," + dtData1.Rows[iRowCount][4].ToString() + "," + dtData1.Rows[iRowCount][5].ToString();
                                list_of_emerg_data.Add(temp_word);
                            }
                        }
                    }
                }
            }
            if (cb_emerg_journal.Checked == true)
            {
                //this.Text = "Please wait Emerging " + ConnectionWithAccess.tablename[25];
                ConnectionWithAccess.query = "select prd,a_n,s_a,jamt,d_c,na_n,ns_a from " + ConnectionWithAccess.tablename[25] + " where prd = '" + emerg_prd + "' and jamt > 0.00";
                DataTable dtData1 = ConnectionCommand.fGetDataTable();
                if (dtData1 != null && dtData1.Rows.Count > 0)
                {
                    for (int iRowCount = 0; iRowCount < dtData1.Rows.Count; iRowCount++)
                    {
                        if (dtData1.Rows[iRowCount][3] != null)
                        {
                            if (Convert.ToDouble(dtData1.Rows[iRowCount][3].ToString()) != 0)  // check for only b_t = 3 (means bank cheque passed)
                            {
                                temp_word = dtData1.Rows[iRowCount][0].ToString() + " ," + dtData1.Rows[iRowCount][1].ToString() + " ," + dtData1.Rows[iRowCount][2].ToString() + " ," + dtData1.Rows[iRowCount][3].ToString() + " ,J" + "," + dtData1.Rows[iRowCount][4].ToString();
                                temp_word2 = dtData1.Rows[iRowCount][0].ToString() + " ," + dtData1.Rows[iRowCount][5].ToString() + " ," + dtData1.Rows[iRowCount][6].ToString() + " ," + Convert.ToDouble(dtData1.Rows[iRowCount][3].ToString()) * -1 + " ,J" + "," + dtData1.Rows[iRowCount][4].ToString();
                                list_of_emerg_data.Add(temp_word);
                                list_of_emerg_data.Add(temp_word2);
                            }
                        }
                    }
                }
            }
            temp_temp_emerg_data.Clear();
            temporary_array = new string[0];
            temp_count = list_of_emerg_data.Count();
            for (int i = 0; i < list_of_emerg_data.Count(); i++)
            {
                if (i == 29)
                    temp_word = "";
                var cellArray = list_of_emerg_data[i].Split(new[] { ',' });
                if (cellArray[1].ToString().Trim() != "")
                {
                    if (cellArray[1].ToString().Trim() == "1020")
                        temp_word = "sanjay";
                    //if (cellArray[1].ToString().Trim() == "2011")
                    //    temp_temp_emerg_data.Add(list_of_emerg_data[i]);
                    if (cellArray[1].ToString().Trim() == "2010")
                        temp_temp_emerg_data.Add(list_of_emerg_data[i]);
                    if (cellArray[4].ToString() == "O")
                    {
                        temp_word = cellArray[1].ToString();
                        update_amount_in_51(cellArray[0].ToString(), cellArray[1].ToString(), cellArray[2].ToString(), Convert.ToDouble(cellArray[3]));
                    }
                    else

                        if ((cellArray[1].ToString().Substring(0, 2) == "65" || cellArray[1].ToString().Substring(0, 2) == "70" || cellArray[1].ToString().Substring(0, 2) == "75") && cellArray[1].ToString() != "7000" && cellArray[1].ToString() != "7001")
                    {
                        if (cellArray[2].ToString() != "@@@")
                            add_amount_in_51(cellArray[0].ToString(), cellArray[1].ToString(), "@@@", Convert.ToDouble(cellArray[3]));
                        else

                            add_amount_in_51(cellArray[0].ToString(), cellArray[1].ToString(), cellArray[2].ToString(), Convert.ToDouble(cellArray[3]));
                    }
                    else if (cellArray[1].ToString().Substring(0, 1) == "1")
                    {
                        add_amount_in_51(cellArray[0].ToString(), cellArray[1].ToString(), cellArray[2].ToString(), Convert.ToDouble(cellArray[3]));
                        add_amount_in_51(cellArray[0].ToString(), cellArray[1].ToString(), "@@@", Convert.ToDouble(cellArray[3]));
                    }
                    else
                        add_amount_in_51(cellArray[0].ToString(), cellArray[1].ToString(), cellArray[2].ToString(), Convert.ToDouble(cellArray[3]));
                }
                //else
                //    temp_word = "sanjay";
                //this.Text = "Please wait Emerging " + list_of_emerg_data[i];
            }
            fUpdate_Amt_in_01_from_51(emerg_prd);
        }

        private void emerg_closing_stock_to_opening_stock(string emerg_prd, string emerg_oprd)
        {
            //this.Text = "Please wait Emerging Opening Stock";
            ConnectionWithAccess.query = "select amt from " + ConnectionWithAccess.tablename[51] + " where prd = '" + emerg_oprd + "' and a_n = '5000' and s_a = '@@@' and d_d = #01/01/1901#";
            DataTable dtData1 = ConnectionCommand.fGetDataTable();
            if (dtData1 != null && dtData1.Rows.Count > 0)
            {
                for (int iRowCount = 0; iRowCount < dtData1.Rows.Count; iRowCount++)
                {
                    if (dtData1.Rows[iRowCount][0] != null)
                    {
                        if (Convert.ToDouble(dtData1.Rows[iRowCount][0].ToString()) != 0)  // check for only b_t = 3 (means bank cheque passed)
                        {
                            temp_double = Convert.ToDouble(dtData1.Rows[iRowCount][0].ToString());
                            update_amount_in_51(emerg_prd, "2001", "@@@", (temp_double * -1));
                        }
                    }
                }
            }
            temp_double = 0;
        }

        bool gp_percentage_change = true;
        private void calculate_gross_profit_using_gp_per(string emerg_prd)
        {
            if ((cb_emerg_sale.Checked == true || cb_emerg_purchase.Checked == true || cb_emerg_bank.Checked == true || cb_emerg_cash.Checked == true || cb_emerg_journal.Checked == true))
            {
                double mTAMT, mSAMT, mRSAMT, mGP_AMT, mOSAMT, mPAMT, mTRAMT, mGP, mpl_exp;
                mGP = ConnectionWithAccess.gp_percent * -1;
                //this.Text = "Please wait Emerging Gross Profit and Closing Stock";
                balance_amount = new string[0];
                //list_of_balance_amount.Clear();
                //ConnectionWithAccess.query = "select amt from " + ConnectionWithAccess.tablename[51] + " where prd = '" + emerg_prd + "' and a_n >= '61' and a_n <= '65ZZZZ' and s_a ='@@@'";
                //DataTable dtData1 = ConnectionCommand.fGetDataTable();
                //if (dtData1 != null && dtData1.Rows.Count > 0)
                //{
                //    for (int iRowCount = 0; iRowCount < dtData1.Rows.Count; iRowCount++)
                //    {
                //        if (dtData1.Rows[iRowCount][0] != null)
                //        {
                //            list_of_balance_amount.Add(dtData1.Rows[iRowCount][0].ToString());
                //        }
                //    }
                //}
                //ConnectionWithAccess.query = "select amt,a_n,s_a from " + ConnectionWithAccess.tablename[51] + " where prd = '" + emerg_prd + "' and a_n >= '7001' and a_n <= '70ZZZZ' and s_a ='@@@'";
                //dtData1 = ConnectionCommand.fGetDataTable();
                //if (dtData1 != null && dtData1.Rows.Count > 0)
                //{
                //    for (int iRowCount = 0; iRowCount < dtData1.Rows.Count; iRowCount++)
                //    {
                //        if (dtData1.Rows[iRowCount][0] != null)
                //        {
                //            list_of_balance_amount.Add(dtData1.Rows[iRowCount][0].ToString());
                //        }
                //    }
                //}
                //mTRAMT = 0;
                //for (int i = 0; i < list_of_balance_amount.Count; i++)
                //{
                //    mTRAMT = mTRAMT + Convert.ToDouble(list_of_balance_amount[i]);
                //}

                ConnectionWithAccess.query = "select sum(amt) as amt from " + ConnectionWithAccess.tablename[51] + " where prd = '" + emerg_prd + "' and ((a_n >= '61' and a_n <= '65ZZZZ') or (a_n >= '7001' and a_n <= '70ZZZZ')) and s_a ='@@@'";
                double.TryParse(ConnectionCommand.fGetExecuteScalar(), out mTRAMT);

                mSAMT = Math.Round(get_account_balance_from_51(emerg_prd, "6000", "@@@"), 2);
                mRSAMT = Math.Round(get_account_balance_from_51(emerg_prd, "6000R1", "@@@"), 2);
                mGP_AMT = mSAMT * ConnectionWithAccess.gp_percent / 100;
                mOSAMT = Math.Round(get_account_balance_from_51(emerg_prd, "2001", "@@@"), 2);
                mPAMT = Math.Round(get_account_balance_from_51(emerg_prd, "7000", "@@@"), 2);
                //mTAMT = ((mSAMT + mRSAMT + mGP_AMT + mOSAMT + mPAMT + mTRAMT) * -1);
                //mTAMT = Math.Round(mTAMT, 2);
                if (mSAMT == 0 && mRSAMT == 0 && mOSAMT == 0 && mTRAMT == 0)
                    mTAMT = mPAMT;
                else
                {
                    if (cb_emerg_sale.Checked == true && cb_emerg_purchase.Checked == true && cb_emerg_bank.Checked == true && cb_emerg_cash.Checked == true && cb_emerg_journal.Checked == true)
                        mTAMT = (-mSAMT - mRSAMT - mOSAMT - mPAMT - mTRAMT) - ((mSAMT + mRSAMT) * mGP / 100 * -1);
                    else
                    {
                        //mTAMT = (-mSAMT - mRSAMT - mPAMT - mTRAMT + mOSAMT);
                        mTAMT = mOSAMT;
                    }
                }
                mTAMT = Math.Round(mTAMT, 2);
                mGP_AMT = mTAMT - mSAMT - mRSAMT - mOSAMT - mPAMT - mTRAMT;
                if (mGP_AMT < 0)
                {
                    mGP_AMT = (-mSAMT - mRSAMT - mOSAMT - mPAMT - mTRAMT);
                }
                mGP_AMT = Math.Round(mGP_AMT, 0);
                ConnectionWithAccess.gross_profit = mGP_AMT;
                ConnectionWithAccess.closing_stock = mTAMT;
                balance_amount = new string[0];
                //list_of_balance_amount.Clear();
                //ConnectionWithAccess.query = "select amt from " + ConnectionWithAccess.tablename[51] + " where prd = '" + emerg_prd + "' and a_n >= '75A' and a_n <= '75ZZZZ' and s_a ='@@@'";
                //DataTable dtData1 = ConnectionCommand.fGetDataTable();
                //if (dtData1 != null && dtData1.Rows.Count > 0)
                //{
                //    for (int iRowCount = 0; iRowCount < dtData1.Rows.Count; iRowCount++)
                //    {
                //        if (dtData1.Rows[iRowCount][0] != null)
                //        {
                //            list_of_balance_amount.Add(dtData1.Rows[iRowCount][0].ToString());
                //        }
                //    }
                //}
                ////this.Text = "Please wait Emerging Gross Profit and Closing Stock";
                //mpl_exp = 0;
                //for (int i = 0; i < list_of_balance_amount.Count; i++)
                //{
                //    mpl_exp = mpl_exp + Convert.ToDouble(list_of_balance_amount[i]);
                //}

                ConnectionWithAccess.query = "select sum(amt) as amt from " + ConnectionWithAccess.tablename[51] + " where prd = '" + emerg_prd + "' and a_n >= '75' and a_n <= '75ZZZZ' and s_a ='@@@'";
                double.TryParse(ConnectionCommand.fGetExecuteScalar(), out mpl_exp);

                blstsales.Text = mSAMT.ToString();
                blstrepairs.Text = mRSAMT.ToString();
                blstgp.Text = mGP_AMT.ToString();
                blstopenstock.Text = mOSAMT.ToString();
                blstpurchase.Text = mPAMT.ToString();
                blsttradexp.Text = mTRAMT.ToString();
                blstplexpense.Text = mpl_exp.ToString();
                blstgp.Text = Convert.ToString(ConnectionWithAccess.gross_profit);
                blstplgp.Text = Convert.ToString(ConnectionWithAccess.gross_profit);
                blstclosingstock.Text = Convert.ToString(ConnectionWithAccess.closing_stock);
                ConnectionWithAccess.net_profit = Math.Round((Convert.ToDouble(blstgp.Text) - Convert.ToDouble(blstplexpense.Text)), 0);
                blstnetprofit.Text = Convert.ToString(ConnectionWithAccess.net_profit);
                //blstgp_per.Text = Convert.ToString(Convert.ToSingle((((-mSAMT - mRSAMT - mOSAMT - mPAMT - mTRAMT) - mTAMT) * 1) * 100) / (mSAMT + mRSAMT));
            }
            else
            {
                //if (cb_emerg_full_period.Checked)
                ConnectionWithAccess.closing_stock = Math.Round(get_account_balance_from_51(emerg_prd, "2001", "@@@"), 0);
                ConnectionWithAccess.gross_profit = 0;
            }
        }

        private void calculate_gross_profit_using_closing_stock(string emerg_prd)
        {
            if ((cb_emerg_sale.Checked == true || cb_emerg_purchase.Checked == true || cb_emerg_bank.Checked == true || cb_emerg_cash.Checked == true || cb_emerg_journal.Checked == true))
            {
                double mTAMT, mSAMT, mRSAMT, mGP_AMT, mOSAMT, mPAMT, mTRAMT, mGP, mpl_exp;
                mGP = ConnectionWithAccess.gp_percent * -1;
                //this.Text = "Please wait Emerging Gross Profit and Closing Stock";
                balance_amount = new string[0];
                list_of_balance_amount.Clear();
                ConnectionWithAccess.query = "select amt from " + ConnectionWithAccess.tablename[51] + " where prd = '" + emerg_prd + "' and a_n >= '61' and a_n <= '65ZZZZ' and s_a ='@@@'";
                DataTable dtData1 = ConnectionCommand.fGetDataTable();
                if (dtData1 != null && dtData1.Rows.Count > 0)
                {
                    for (int iRowCount = 0; iRowCount < dtData1.Rows.Count; iRowCount++)
                    {
                        if (dtData1.Rows[iRowCount][0] != null)
                        {
                            list_of_balance_amount.Add(dtData1.Rows[iRowCount][0].ToString());
                        }
                    }
                }
                ConnectionWithAccess.query = "select amt from " + ConnectionWithAccess.tablename[51] + " where prd = '" + emerg_prd + "' and a_n >= '7001' and a_n <= '70ZZZZ' and s_a ='@@@'";
                dtData1 = ConnectionCommand.fGetDataTable();
                if (dtData1 != null && dtData1.Rows.Count > 0)
                {
                    for (int iRowCount = 0; iRowCount < dtData1.Rows.Count; iRowCount++)
                    {
                        if (dtData1.Rows[iRowCount][0] != null)
                        {
                            list_of_balance_amount.Add(dtData1.Rows[iRowCount][0].ToString());
                        }
                    }
                }
                mTRAMT = 0;
                for (int i = 0; i < list_of_balance_amount.Count; i++)
                {
                    mTRAMT = mTRAMT + Convert.ToDouble(list_of_balance_amount[i]);
                }
                mSAMT = Math.Round(get_account_balance_from_51(emerg_prd, "6000", "@@@"), 2);
                mRSAMT = Math.Round(get_account_balance_from_51(emerg_prd, "6000R1", "@@@"), 2);
                mGP_AMT = mSAMT * ConnectionWithAccess.gp_percent / 100;
                mOSAMT = Math.Round(get_account_balance_from_51(emerg_prd, "2001", "@@@"), 2);
                mPAMT = Math.Round(get_account_balance_from_51(emerg_prd, "7000", "@@@"), 2);
                //mTAMT = ((mSAMT + mRSAMT + mGP_AMT + mOSAMT + mPAMT + mTRAMT) * -1);
                //mTAMT = Math.Round(mTAMT, 2);
                mTAMT = (-mSAMT - mRSAMT - mOSAMT - mPAMT - mTRAMT) - ((mSAMT + mRSAMT) * mGP / 100 * -1);
                mTAMT = Math.Round(mTAMT, 2);
                mGP_AMT = mTAMT - mSAMT - mRSAMT - mOSAMT - mPAMT - mTRAMT;
                ConnectionWithAccess.gross_profit = mGP_AMT;
                ConnectionWithAccess.closing_stock = mTAMT;
                balance_amount = new string[0];
                list_of_balance_amount.Clear();
                ConnectionWithAccess.query = "select amt from " + ConnectionWithAccess.tablename[51] + " where prd = '" + emerg_prd + "' and a_n >= '75A' and a_n <= '75ZZZZ' and s_a ='@@@'";
                dtData1 = ConnectionCommand.fGetDataTable();
                if (dtData1 != null && dtData1.Rows.Count > 0)
                {
                    for (int iRowCount = 0; iRowCount < dtData1.Rows.Count; iRowCount++)
                    {
                        if (dtData1.Rows[iRowCount][0] != null)
                        {
                            list_of_balance_amount.Add(dtData1.Rows[iRowCount][0].ToString());
                        }
                    }
                }
                //this.Text = "Please wait Emerging Gross Profit and Closing Stock";
                mpl_exp = 0;
                for (int i = 0; i < list_of_balance_amount.Count; i++)
                {
                    mpl_exp = mpl_exp + Convert.ToDouble(list_of_balance_amount[i]);
                }
                blstsales.Text = mSAMT.ToString();
                blstrepairs.Text = mRSAMT.ToString();
                blstgp.Text = mGP_AMT.ToString();
                blstopenstock.Text = mOSAMT.ToString();
                blstpurchase.Text = mPAMT.ToString();
                blsttradexp.Text = mTRAMT.ToString();
                blstplexpense.Text = mpl_exp.ToString();
                blstgp.Text = Convert.ToString(ConnectionWithAccess.gross_profit);
                blstplgp.Text = Convert.ToString(ConnectionWithAccess.gross_profit);
                blstclosingstock.Text = Convert.ToString(ConnectionWithAccess.closing_stock);
                ConnectionWithAccess.net_profit = Math.Round((ConnectionWithAccess.gross_profit - Convert.ToDouble(blstplexpense.Text)), 2);
                blstnetprofit.Text = Convert.ToString(ConnectionWithAccess.net_profit);
                //blstgp_per.Text = Convert.ToString(Convert.ToSingle((((-mSAMT - mRSAMT - mOSAMT - mPAMT - mTRAMT) - mTAMT) * 1) * 100) / (mSAMT + mRSAMT));
            }
            else
            {
                if (cb_emerg_full_period.Checked)
                    ConnectionWithAccess.closing_stock = Math.Round(get_account_balance_from_51(emerg_prd, "2001", "@@@"), 0);
                ConnectionWithAccess.gross_profit = 0;
            }
        }

        private void save_balance_sheet_gp_values(string emerg_prd)
        {
            if (cb_emerg_sale.Checked == true && cb_emerg_purchase.Checked == true && cb_emerg_bank.Checked == true && cb_emerg_cash.Checked == true && cb_emerg_journal.Checked == true)
            {
                update_amount_in_51(emerg_prd, "5000", "@@@", (Convert.ToDouble(ConnectionWithAccess.closing_stock) * -1));
                update_amount_in_51(ConnectionWithAccess.get_next_prd_name(emerg_prd), "2001", "@@@", (Convert.ToDouble(ConnectionWithAccess.closing_stock)));
                update_amount_in_51(emerg_prd, "719999", "@@@", (Convert.ToDouble(ConnectionWithAccess.gross_profit)));
                update_amount_in_51(emerg_prd, "7998", "@@@", (Convert.ToDouble(ConnectionWithAccess.net_profit)));
                ConnectionWithAccess.query = "select gp from " + ConnectionWithAccess.tablename[50] + " where prd = '" + emerg_prd + "'";
                DataTable dtData1 = ConnectionCommand.fGetDataTable();
                if (dtData1 != null && dtData1.Rows.Count > 0)
                {
                    ConnectionWithAccess.query = "update " + ConnectionWithAccess.tablename[50] + " set gp = " + (ConnectionWithAccess.gp_percent) + " where prd ='" + emerg_prd + "'";
                    ConnectionCommand.fUpdateInsertDeleteData();
                }
            }
            else if (cb_emerg_sale.Checked == true || cb_emerg_purchase.Checked == true)
            {
                update_amount_in_51(emerg_prd, "5000", "@@@", (Convert.ToDouble(ConnectionWithAccess.closing_stock) * -1));
                update_amount_in_51(ConnectionWithAccess.get_next_prd_name(emerg_prd), "2001", "@@@", (Convert.ToDouble(ConnectionWithAccess.closing_stock)));
                update_amount_in_51(emerg_prd, "719999", "@@@", (Convert.ToDouble(ConnectionWithAccess.gross_profit)));
                update_amount_in_51(emerg_prd, "7998", "@@@", (Convert.ToDouble(ConnectionWithAccess.net_profit)));
            }
            else
            {
                update_amount_in_51(emerg_prd, "5000", "@@@", (Convert.ToDouble(ConnectionWithAccess.closing_stock) * -1));
                update_amount_in_51(ConnectionWithAccess.get_next_prd_name(emerg_prd), "2001", "@@@", (Convert.ToDouble(ConnectionWithAccess.closing_stock)));
            }
        }

        private void calculate_closing_capital_balance_and_add_in_new_period(string emerg_prd, string emerg_oprd)
        {
            if (cb_emerg_sale.Checked == true || cb_emerg_purchase.Checked == true || cb_emerg_bank.Checked == true || cb_emerg_cash.Checked == true || cb_emerg_journal.Checked == true)
            {
                temp_double = get_account_balance_from_51(emerg_oprd, "3001", "@@@");
                update_amount_in_51(emerg_prd, "3000", "@@@", temp_double * -1);
                temp_double = 0;
                update_amount_in_51(emerg_prd, "3001", "@@@", 0);
                //add_contains_of_capital_account_in_gridview(emerg_prd);
                //debitamount = 0;
                //creditamount = 0;
                //for (int i = 0; i < BalShDGV.Rows.Count; i++)
                //{
                //    if (BalShDGV.Rows[i].Cells[5].Value != null)
                //    {
                //        if (BalShDGV.Rows[i].Cells[5].Value.ToString() != "")
                //        {
                //            if (Convert.ToDouble(BalShDGV.Rows[i].Cells[5].Value.ToString()) > 0)
                //                debitamount += Convert.ToDouble(BalShDGV.Rows[i].Cells[5].Value.ToString());
                //        }
                //    }
                //    if (BalShDGV.Rows[i].Cells[8].Value != null)
                //    {
                //        if (BalShDGV.Rows[i].Cells[8].Value.ToString() != "")
                //        {
                //            if (Convert.ToDouble(BalShDGV.Rows[i].Cells[8].Value.ToString()) > 0)
                //                creditamount += Convert.ToDouble(BalShDGV.Rows[i].Cells[8].Value.ToString());
                //        }
                //    }
                //}
                //temp_double = creditamount - debitamount;


                ConnectionWithAccess.query = query_contains_for_capital_account_union(emerg_prd);
                DataTable dtNewTable = ConnectionCommand.fGetDataTable();

                if (dtNewTable != null)
                {
                    debitamount = 0;
                    creditamount = 0;
                    for (int i = 0; i < dtNewTable.Rows.Count; i++)
                    {
                        if (dtNewTable.Rows[i][5].ToString() != null)
                        {
                            if (dtNewTable.Rows[i][5].ToString() != "")
                            {
                                if (Convert.ToDouble(dtNewTable.Rows[i][5].ToString()) > 0)
                                    debitamount += Convert.ToDouble(dtNewTable.Rows[i][5].ToString());
                            }
                        }
                        if (dtNewTable.Rows[i][8].ToString() != null)
                        {
                            if (dtNewTable.Rows[i][8].ToString() != "")
                            {
                                if (Convert.ToDouble(dtNewTable.Rows[i][8].ToString()) > 0)
                                    creditamount += Convert.ToDouble(dtNewTable.Rows[i][8].ToString());
                            }
                        }
                    }
                    temp_double = creditamount - debitamount;
                }
                temp_double = Math.Round(temp_double, 0);
                update_amount_in_51(emerg_prd, "3001", "@@@", temp_double);
                update_amount_in_51(ConnectionWithAccess.get_next_prd_name(emerg_prd), "3000", "@@@", temp_double * -1);
            }
            else
            {
                temp_double = get_account_balance_from_51(emerg_oprd, "3001", "@@@");
                temp_double = Math.Round(temp_double, 0);
                update_amount_in_51(emerg_prd, "3000", "@@@", temp_double * -1);
                update_amount_in_51(emerg_prd, "3001", "@@@", temp_double);
                temp_double = get_account_balance_from_51(emerg_prd, "2001", "@@@");
                update_amount_in_51(emerg_prd, "5000", "@@@", temp_double * -1);
            }
        }

        private void update_advances_from_customers_and_suppliers(string emerg_prd)
        {
            temp_double = get_account_balance_from_51(emerg_oprd, "2004", "@@@");
            if (temp_double != 0.0)
            {
                add_amount_in_51(emerg_prd, "4002", "@@@", temp_double);
                //update_amount_in_51(emerg_prd, "2004", "@@@", 0.00);
            }
            temp_double = get_account_balance_from_51(emerg_oprd, "2003", "@@@");
            if (temp_double != 0.0)
            {
                add_amount_in_51(emerg_prd, "2002", "@@@", temp_double);
                update_amount_in_51(emerg_prd, "2003", "@@@", 0.00);
            }
            balance_amount = new string[0];
            //this.Text = "Please wait Emerging " + ConnectionWithAccess.tablename[51];
            list_of_balance_amount.Clear();
            ConnectionWithAccess.query = "select prd,a_n,s_a,amt from " + ConnectionWithAccess.tablename[51] + " where prd = '" + emerg_prd + "' and a_n = '2002' and amt < 0 order by a_n,s_a";
            DataTable dtData1 = ConnectionCommand.fGetDataTable();
            //dtData1 = ConnectionCommand.fGetDataTable();
            if (dtData1 != null && dtData1.Rows.Count > 0)
            {
                for (int iRowCount = 0; iRowCount < dtData1.Rows.Count; iRowCount++)
                {
                    if (dtData1.Rows[iRowCount][0] != null)
                    {
                        list_of_balance_amount.Add(dtData1.Rows[iRowCount][0].ToString());
                    }
                }
            }
            temp_double = 0;
            for (int i = 0; i < list_of_balance_amount.Count; i++)
            {
                var cellArray = list_of_balance_amount[i].Split(new[] { ',' });
                if (cellArray[4].ToString() == "AR")
                    temp_double += Convert.ToDouble(cellArray[3]);
            }
            if (temp_double != 0.0)
            {
                update_amount_in_51(emerg_prd, "2003", "@@@", temp_double);
                add_amount_in_51(emerg_prd, "2002", "@@@", temp_double * -1);
            }
            balance_amount = new string[0];
            list_of_balance_amount.Clear();
            //this.Text = "Please wait Emerging " + ConnectionWithAccess.tablename[51];
            ConnectionWithAccess.query = "select prd,a_n,s_a,amt from " + ConnectionWithAccess.tablename[51] + " where prd = '" + emerg_prd + "' and a_n = '4002' and s_a <> '@@@' and amt > 0.00 order by a_n,s_a";
            dtData1 = ConnectionCommand.fGetDataTable();
            if (dtData1 != null && dtData1.Rows.Count > 0)
            {
                for (int iRowCount = 0; iRowCount < dtData1.Rows.Count; iRowCount++)
                {
                    if (dtData1.Rows[iRowCount][0] != null)
                    {
                        list_of_balance_amount.Add(dtData1.Rows[iRowCount][0].ToString());
                    }
                }
            }
            temp_double = 0;
            for (int i = 0; i < list_of_balance_amount.Count; i++)
            {
                var cellArray = list_of_balance_amount[i].Split(new[] { ',' });
                if (cellArray[4].ToString() == "AP")
                    temp_double += Convert.ToDouble(cellArray[3]);
            }
            if (temp_double != 0.0)
            {
                update_amount_in_51(emerg_prd, "2004", "@@@", temp_double);
                add_amount_in_51(emerg_prd, "4002", "@@@", temp_double * -1);
            }
        }

        private void update_at_the_rate_of_customers_and_suppliers(string emerg_prd)
        {
            //this.Text = "Please wait Emerging " + ConnectionWithAccess.tablename[51];
            update_amount_in_51(emerg_prd, "2002", "@@@", 0.00);
            update_amount_in_51(emerg_prd, "2003", "@@@", 0.00);
            update_amount_in_51(emerg_prd, "2004", "@@@", 0.00);
            update_amount_in_51(emerg_prd, "4002", "@@@", 0.00);
            balance_amount = new string[0];
            list_of_balance_amount.Clear();
            ConnectionWithAccess.query = "select prd,a_n,s_a,amt from " + ConnectionWithAccess.tablename[51] + " where prd = '" + emerg_prd + "' and a_n = '2002' and amt > 0 order by a_n,s_a";
            DataTable dtData1 = ConnectionCommand.fGetDataTable();
            if (dtData1 != null && dtData1.Rows.Count > 0)
            {
                for (int iRowCount = 0; iRowCount < dtData1.Rows.Count; iRowCount++)
                {
                    if (dtData1.Rows[iRowCount][3] != null)
                    {
                        temp_word = dtData1.Rows[iRowCount][0].ToString() + " ," + dtData1.Rows[iRowCount][1].ToString() + " ," + dtData1.Rows[iRowCount][2].ToString() + " ," + dtData1.Rows[iRowCount][3].ToString() + " ,CO";
                        list_of_balance_amount.Add(temp_word);
                    }
                }
            }
            //this.Text = "Please wait Emerging " + ConnectionWithAccess.tablename[51];
            ConnectionWithAccess.query = "select prd,a_n,s_a,amt from " + ConnectionWithAccess.tablename[51] + " where prd = '" + emerg_prd + "' and a_n = '2002' and amt < 0 order by a_n,s_a";
            dtData1 = ConnectionCommand.fGetDataTable();
            if (dtData1 != null && dtData1.Rows.Count > 0)
            {
                for (int iRowCount = 0; iRowCount < dtData1.Rows.Count; iRowCount++)
                {
                    if (dtData1.Rows[iRowCount][3] != null)
                    {
                        temp_word = dtData1.Rows[iRowCount][0].ToString() + " ," + dtData1.Rows[iRowCount][1].ToString() + " ," + dtData1.Rows[iRowCount][2].ToString() + " ," + dtData1.Rows[iRowCount][3].ToString() + " ,AR";
                        list_of_balance_amount.Add(temp_word);
                    }
                }
            }
            //this.Text = "Please wait Emerging " + ConnectionWithAccess.tablename[51];
            ConnectionWithAccess.query = "select prd,a_n,s_a,amt from " + ConnectionWithAccess.tablename[51] + " where prd = '" + emerg_prd + "' and a_n = '4002' and amt < 0 order by a_n,s_a";
            dtData1 = ConnectionCommand.fGetDataTable();
            if (dtData1 != null && dtData1.Rows.Count > 0)
            {
                for (int iRowCount = 0; iRowCount < dtData1.Rows.Count; iRowCount++)
                {
                    if (dtData1.Rows[iRowCount][3] != null)
                    {
                        temp_word = dtData1.Rows[iRowCount][0].ToString() + " ," + dtData1.Rows[iRowCount][1].ToString() + " ," + dtData1.Rows[iRowCount][2].ToString() + " ," + dtData1.Rows[iRowCount][3].ToString() + " ,SO";
                        list_of_balance_amount.Add(temp_word);
                    }
                }
            }
            ConnectionWithAccess.query = "select prd,a_n,s_a,amt from " + ConnectionWithAccess.tablename[51] + " where prd = '" + emerg_prd + "' and a_n = '4002' and amt > 0 order by a_n,s_a";
            //this.Text = "Please wait Emerging " + ConnectionWithAccess.tablename[51];
            dtData1 = ConnectionCommand.fGetDataTable();
            if (dtData1 != null && dtData1.Rows.Count > 0)
            {
                for (int iRowCount = 0; iRowCount < dtData1.Rows.Count; iRowCount++)
                {
                    if (dtData1.Rows[iRowCount][3] != null)
                    {
                        temp_word = dtData1.Rows[iRowCount][0].ToString() + " ," + dtData1.Rows[iRowCount][1].ToString() + " ," + dtData1.Rows[iRowCount][2].ToString() + " ," + dtData1.Rows[iRowCount][3].ToString() + " ,AP";
                        list_of_balance_amount.Add(temp_word);
                    }
                }
            }
            temp_double = 0;
            for (int i = 0; i < list_of_balance_amount.Count; i++)
            {
                var cellArray = list_of_balance_amount[i].Split(new[] { ',' });
                if (cellArray[4].ToString() == "CO")
                    temp_double += Convert.ToDouble(cellArray[3]);
            }
            if (temp_double != 0.0)
                update_amount_in_51(emerg_prd, "2002", "@@@", temp_double);
            temp_double = 0;
            for (int i = 0; i < list_of_balance_amount.Count; i++)
            {
                var cellArray = list_of_balance_amount[i].Split(new[] { ',' });
                if (cellArray[4].ToString() == "AR")
                    temp_double += Convert.ToDouble(cellArray[3]);
            }
            if (temp_double != 0.0)
                update_amount_in_51(emerg_prd, "2003", "@@@", temp_double);
            temp_double = 0;
            for (int i = 0; i < list_of_balance_amount.Count; i++)
            {
                var cellArray = list_of_balance_amount[i].Split(new[] { ',' });
                if (cellArray[4].ToString() == "SO")
                    temp_double += Convert.ToDouble(cellArray[3]);
            }
            if (temp_double != 0.0)
                update_amount_in_51(emerg_prd, "4002", "@@@", temp_double);
            temp_double = 0;
            for (int i = 0; i < list_of_balance_amount.Count; i++)
            {
                var cellArray = list_of_balance_amount[i].Split(new[] { ',' });
                if (cellArray[4].ToString() == "AP")
                    temp_double += Convert.ToDouble(cellArray[3]);
            }
            if (temp_double != 0.0)
                update_amount_in_51(emerg_prd, "2004", "@@@", temp_double);
        }

        private void update_emerg_amount_in_51(string mprd, string ma_n, string ms_a, double mamount, string book, int d_c)
        {
            ma_n = ma_n.Trim();
            ms_a = ms_a.Trim();
            if (ms_a == "@@@")
                temp_word = "";
            if (ma_n == "70ICC")
                temp_word = "sanjay";
            if (ma_n == "2010")
                temp_word = "sanjay";
            if (book == "B")
            {
                mold_amount = 0;
                if (ms_a == "@@@")
                {
                    add_amount_in_51(mprd, ma_n, "@@@", mamount);
                }
                else
                {
                    add_amount_in_51(mprd, ma_n, ms_a, mamount);
                    get_a_n_from_d_c("B", d_c);
                    add_amount_in_51(mprd, ma_n, "@@@", mamount);
                }
            }
            else if (book == "C")
            {
                mold_amount = 0;
                if (ms_a == "@@@")
                {
                    add_amount_in_51(mprd, ma_n, "@@@", mamount);
                }
                else
                {
                    add_amount_in_51(mprd, ma_n, ms_a, mamount);
                    get_a_n_from_d_c("C", d_c);
                    add_amount_in_51(mprd, ma_n, "@@@", mamount);
                }
            }
            else
            {
                add_amount_in_51(mprd, ma_n, ms_a, mamount);
            }
        }

        private void fUpdate_Amt_in_01_from_51(string strPRD)
        {
            string strQuery = string.Empty;
            strQuery += "update " + ConnectionWithAccess.tablename[1] + " inner join " + ConnectionWithAccess.tablename[51] + "  on " + ConnectionWithAccess.tablename[51] + ".s_a = " + ConnectionWithAccess.tablename[1] + ".s_a " +
                " and " + ConnectionWithAccess.tablename[51] + ".a_n = " + ConnectionWithAccess.tablename[1] + ".a_n " +
                " set " + ConnectionWithAccess.tablename[1] + ".Y" + strPRD + " = " + ConnectionWithAccess.tablename[51] + ".AMT " +
                " where " + ConnectionWithAccess.tablename[51] + ".PRD = '" + strPRD + "' and " + ConnectionWithAccess.tablename[51] + ".s_a <> '@@@' ";
            ConnectionWithAccess.query = strQuery;
            ConnectionCommand.fUpdateInsertDeleteData();
        }

        #endregion

        private void disable_all_keys()
        {
            maintab.Enabled = false;
            subtabDataEntry.Enabled = false;
            subtabMasters.Enabled = false;
            subtabsettings.Enabled = false;
            subtabsale.Enabled = false;
            subtabpurchase.Enabled = false;
            subtabbank.Enabled = false;
            subtabcash.Enabled = false;
            subtabhelp.Enabled = false;
        }

        private void enable_all_keys()
        {
            maintab.Enabled = true;
            subtabDataEntry.Enabled = true;
            subtabMasters.Enabled = true;
            subtabsettings.Enabled = true;
            subtabsale.Enabled = true;
            subtabpurchase.Enabled = true;
            subtabbank.Enabled = true;
            subtabcash.Enabled = true;
            subtabhelp.Enabled = true;
            text_to_display_on_top_function();
        }

        private void bp_datagridview_Click_1(object sender, EventArgs e)
        {
            select_party_for_bank();
            bp_dgv_gst_tax_brief.Visible = true;
            bp_basicamt.ReadOnly = false;
            bp_igst_per.ReadOnly = false;
            bpamt.ReadOnly = false;
            bppartyname.Text = ConnectionWithAccess.mdesc;
            bppartycontact.Text = ConnectionWithAccess.accountcontact;
            bppartyaddress.Text = ConnectionWithAccess.accountaddress;
            bppartyoverallbalance.Text = Convert.ToString(get_account_balance(bpa_n.Text, bps_a.Text, Convert.ToString(bpdatetime.Text)));
            if (bp_datagridview.CurrentRow != null)
                bp_master_acc_name.Text = common_account_head(bpa_n.Text);
            bptranlist.Visible = true;
            if (bpdocno.Text != "")
            {
                bp_dgv_gst_tax_brief.DataSource = null;
                ConnectionWithAccess.query = "select f8.bamt, f8.igst_per, f8.igst_amt, f8.gamt from " + ConnectionWithAccess.tablename[8] + " f8 where f8.book = 'b' and f8.prd = '" + ConnectionWithAccess.mprd + "' and f8.d_c = " + bpdbc.SelectedValue.ToString() + " and f8.r_p = '4' and F8.d_n = " + bpdocno.Text + " and F8.d_d = @D_D_Date";
                search_on_particular_date_in_select_query("@d_d_date", bpdatetime.Value);
                ConnectionCommand.accountHelp_datatable_Seperate(bp_dgv_gst_tax_brief, "bp_dgv_gst_tax_brief");

                //ConnectionWithAccess.query = "select f8.bamt, f8.igst_per, f8.igst_amt, f8.gamt from " + ConnectionWithAccess.tablename[8] + " f8 where f8.book = 'b' and f8.prd = '" + ConnectionWithAccess.mprd + "' and f8.d_c = " + bpdbc.SelectedValue.ToString() + " and f8.r_p = '4' and F8.d_n = " + bpdocno.Text;
                //ConnectionCommand.accountHelp_datatable_Seperate(bp_dgv_gst_tax_brief, "bp_dgv_gst_tax_brief");
            }
            bpamt.Focus();
            move_cursor_to_button_position("atbnew");
        }

        private void bp_datagridview_KeyDown_1(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                ConnectionWithAccess.mdesc = bp_datagridview.CurrentRow.Cells[0].Value.ToString();
                ConnectionWithAccess.mcity = bp_datagridview.CurrentRow.Cells[1].Value.ToString();
                bpa_n.Text = bp_datagridview.CurrentRow.Cells[2].Value.ToString();
                bps_a.Text = bp_datagridview.CurrentRow.Cells[3].Value.ToString();
                show_images();
                bp_datagridview.Visible = false;
                bppartycode.Text = ConnectionWithAccess.mdesc;
                bppartycity.Text = ConnectionWithAccess.mcity;
            }
        }

        private void update_masters_items_screen_details(string mtitle)
        {
            if (maintab.SelectedIndex == 2)
            {
                if (mtitle != "")
                {
                    master_item_help.Visible = false;
                    get_item_details_from_05_using_title(tbTitle.Text);
                    if (item_details_from_05.Count > 6)
                    {
                        tbItemType.Text = item_details_from_05[0];
                        tbItemCode.Text = item_details_from_05[1];
                        tbCB.Text = item_details_from_05[3];
                        tbBQ.Text = item_details_from_05[4];
                        tbItemRate.Text = item_details_from_05[5];
                        tb_item_open_stock.Text = item_details_from_05[6];
                        temp_double = Convert.ToDouble(item_details_from_05[6]); // get current stock for update new current stock
                        tbCurStock.Text = item_details_from_05[7];
                        if (item_details_from_05[8] == "0")
                            cbItemUnit.SelectedIndex = 0;
                        else
                            cbItemUnit.Text = item_details_from_05[8];
                        tb_igst_tax_rate.Text = item_details_from_05[9];
                        tb_hsn_code.Text = item_details_from_05[10];
                        tb_purc_price.Text = item_details_from_05[11];
                        cb_item_in_use.SelectedIndex = Convert.ToInt32(item_details_from_05[12]);
                        tb_item_printed.Text = item_details_from_05[13];
                        tb_item_pitch.Text = item_details_from_05[14];
                        tb_item_length.Text = item_details_from_05[15];
                        tb_item_breadth.Text = item_details_from_05[16];
                        tb_item_moq.Text = item_details_from_05[17];
                        tbMinStock.Text = item_details_from_05[18];
                        tb_item_location.Text = item_details_from_05[19];
                        fill_dgv_item_in_which_batch_list();
                        cb_item_location.Text = tb_item_location.Text;
                        cb_item_location.Visible = true;
                        cb_item_location.Enabled = true;
                        //move_cursor_to_button_position("atbsave");
                    }
                    cb_change_item_name.Visible = true;
                    show_images();
                }
            }
        }

        private void load_bank_names()
        {
            if (bankname != null)
            {
                //ConnectionWithAccess.mtextfilename = ConnectionWithAccess.data_drive + "visual studio\\projects\\sharp\\bank_list.txt";
                ConnectionWithAccess.mtextfilename = ConnectionWithAccess.setup_drive + "sharp\\bank_list.txt";
                if (File.Exists(ConnectionWithAccess.mtextfilename))
                {
                    temporary_array = File.ReadAllLines(ConnectionWithAccess.mtextfilename);
                    for (int i = 0; i < temporary_array.Length; i++)
                    {
                        bankname.Items.Add(temporary_array[i]);
                    }
                }
                else
                    MessageBox.Show("Bank List File Not Found");
            }
        }

        private void save_bank_details()
        {
            if (maintab.SelectedIndex == 2 && subtabMasters.SelectedIndex == 0)
            {
                isRecord = 0;
                ConnectionWithAccess.query = "select 1 from " + ConnectionWithAccess.tablename[27] + " where a_n = '" + tbA_N.Text + "' and s_a = '" + tbS_A.Text + "'";
                DataTable dtData1 = ConnectionCommand.fGetDataTable();
                if (dtData1 != null && dtData1.Rows.Count > 0)
                {
                    isRecord = 1;
                }
                if (isRecord == 1)
                    ConnectionWithAccess.query = "update " + ConnectionWithAccess.tablename[27] + " set bankname = '" + bankname.Text + "', bankaddress = '" + BANKADDRESS.Text + "', bankcity = '" + BANKCITY.Text + "', bankaccno = '" + BANKACCNUMBER.Text + "' , bankneft = '" + BANKNEFTIFSC.Text + "' where a_n = '" + tbA_N.Text + "' and s_a = '" + tbS_A.Text + "'";
                else
                    ConnectionWithAccess.query = "insert into " + ConnectionWithAccess.tablename[27] + " (a_n,s_a,bankname,bankaddress,bankcity,bankaccno,bankneft) values('" + tbA_N.Text + "','" + tbS_A.Text + "','" + bankname.Text + "','" + BANKADDRESS.Text + "','" + BANKCITY.Text + "','" + BANKACCNUMBER.Text + "' ,'" + BANKNEFTIFSC.Text + "')";
                ConnectionCommand.fUpdateInsertDeleteData();
            }
        }

        private int get_bank_d_c_from_account_number(string bank_account_number)
        {
            ConnectionWithAccess.md_c = 0;
            if (dtMasterData != null && dtMasterData.Rows.Count > 0)
            {
                for (row_counter = 0; row_counter < dtMasterData.Rows.Count; row_counter++)
                {
                    if (dtMasterData.Rows[row_counter]["bank_account_number"].ToString() == bank_account_number)
                    {
                        ConnectionWithAccess.md_c = Convert.ToInt32(dtMasterData.Rows[row_counter]["d_c"].ToString());
                        break;
                    }
                }
            }
            return ConnectionWithAccess.md_c;
        }

        private void fill_tax_d_c()
        {
            if (rb_sale_tax.Checked == true)
            {
                ConnectionWithAccess.query = "select d_c from " + ConnectionWithAccess.tablename[21] + " where d_n = 999999";
                ConnectionCommand.retrieval(cb_tax_d_c);
            }
            else
            {
                ConnectionWithAccess.query = "select d_c from " + ConnectionWithAccess.tablename[22] + " where d_n = 999999";
                ConnectionCommand.retrieval(cb_tax_d_c);
            }
        }

        private void cb_all_sale_item_list_CheckedChanged(object sender, EventArgs e)
        {
            if (cb_all_sale_item_list.Checked == true)
            {
                cb_all_sale_invoice_list.Checked = false;
                cb_all_sale_invoice_ledger.Checked = false;
                fill_all_sale_item_list();
            }
            else
            {
                sale_invoice_dgv.Visible = false;
            }
        }

        private void cb_all_sale_invoice_list_CheckedChanged(object sender, EventArgs e)
        {
            if (cb_all_sale_invoice_list.Checked == true)
            {
                cb_all_sale_item_list.Checked = false;
                cb_all_sale_invoice_ledger.Checked = false;
                fill_all_sale_invoice_list();
            }
            else
            {
                sale_invoice_dgv.Visible = false;
            }
        }

        private void fill_sale_invoice_dg()
        {
            if (sia_n.Text != "" && sis_a.Text != "")
            {
                if (cb_all_sale_item_list.Checked == true)
                {
                    fill_all_sale_item_list();
                }
                else if (cb_all_sale_invoice_list.Checked == true)
                {
                    fill_all_sale_invoice_list();
                }
                else if (cb_all_sale_invoice_ledger.Checked == true)
                {
                    fill_all_sale_invoice_ledger();
                }
            }
        }

        private void fill_all_sale_item_list()
        {
            sale_invoice_dgv.Visible = true;
            sale_invoice_dgv.DataSource = null;
            sale_invoice_dgv.BringToFront();
            ConnectionWithAccess.query = "select distinct f21.D_D, f21.D_N,f5.title,f3.qty,f3.price,f3.amount from " + ConnectionWithAccess.tablename[1] + " f1, " + ConnectionWithAccess.tablename[03] + " f3, " + ConnectionWithAccess.tablename[05] + " f5, " + ConnectionWithAccess.tablename[21] + " f21 where f1.a_n = f21.a_n and f1.s_a = f21.s_a  and f21.prd = '" + ConnectionWithAccess.mprd + "' and f21.d_c = " + Convert.ToInt32(sidbc.SelectedValue.ToString()) + " and f3.prd = f21.prd and f3.d_c = f21.d_c and f3.d_n = f21.d_n and f21.a_n = '" + sia_n.Text + "' and f21.s_a = '" + sis_a.Text + "' and f3.item_code = f5.item_code order by f21.d_n desc";
            ConnectionCommand.accountHelp_datatable(sale_invoice_dgv, "sale_invoice_dgv");
            sale_invoice_dgv.Columns[0].HeaderText = "Date";
            sale_invoice_dgv.Columns[1].HeaderText = "Inv.num";
            sale_invoice_dgv.Columns[2].HeaderText = "Title";
            sale_invoice_dgv.Columns[3].HeaderText = "Quantity";
            sale_invoice_dgv.Columns[4].HeaderText = "Price";
            sale_invoice_dgv.Columns[5].HeaderText = "Amount";
            sale_invoice_dgv.Columns[0].Width = 75;
            sale_invoice_dgv.Columns[1].Width = 60;
            sale_invoice_dgv.Columns[2].Width = 280;
            sale_invoice_dgv.Columns[3].Width = 90;
            sale_invoice_dgv.Columns[4].Width = 90;
            sale_invoice_dgv.Columns[5].Width = 120;
            sale_invoice_dgv.Columns[0].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;
            sale_invoice_dgv.Columns[1].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;
            sale_invoice_dgv.Columns[2].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleLeft;
            sale_invoice_dgv.Columns[3].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;
            sale_invoice_dgv.Columns[4].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;
            sale_invoice_dgv.Columns[5].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;
            if (sale_invoice_dgv.Rows.Count <= 1)
            {
                ConnectionWithAccess.mDateTime = Convert.ToDateTime(ConnectionWithAccess.msdate);
            }
        }

        private void fill_all_sale_invoice_list()
        {
            sale_invoice_dgv.Visible = true;
            sale_invoice_dgv.DataSource = null;
            ConnectionWithAccess.query = "select distinct f21.D_D, f21.D_N, f21.bamt, f21.tamt, f21.gamt from " + ConnectionWithAccess.tablename[1] + " f1, " + ConnectionWithAccess.tablename[21] + " f21 where f21.a_n = f1.a_n and f1.s_a = f21.s_a  and f21.prd = '" + ConnectionWithAccess.mprd + "' and f21.d_c = " + Convert.ToInt32(sidbc.SelectedValue.ToString()) + " and f21.a_n = '" + sia_n.Text + "' and f21.s_a = '" + sis_a.Text + "' order by f21.d_n desc";
            ConnectionCommand.accountHelp_datatable(sale_invoice_dgv, "sale_invoice_dgv");
            sale_invoice_dgv.Columns[0].HeaderText = "Date";
            sale_invoice_dgv.Columns[1].HeaderText = "Inv.num";
            sale_invoice_dgv.Columns[2].HeaderText = "Basic";
            sale_invoice_dgv.Columns[3].HeaderText = "Tax";
            sale_invoice_dgv.Columns[4].HeaderText = "Gross";
            sale_invoice_dgv.Columns[0].Width = 75;
            sale_invoice_dgv.Columns[1].Width = 60;
            sale_invoice_dgv.Columns[2].Width = 120;
            sale_invoice_dgv.Columns[3].Width = 120;
            sale_invoice_dgv.Columns[4].Width = 120;
            sale_invoice_dgv.Columns[0].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;
            sale_invoice_dgv.Columns[1].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;
            sale_invoice_dgv.Columns[2].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;
            sale_invoice_dgv.Columns[3].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;
            sale_invoice_dgv.Columns[4].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;
            //getTotal(sale_invoice_dgv, 2);
            //getTotal(sale_invoice_dgv, 3);
            //getTotal(sale_invoice_dgv, 4);
            if (sale_invoice_dgv.Rows.Count <= 1)
            {
                ConnectionWithAccess.mDateTime = Convert.ToDateTime(ConnectionWithAccess.msdate);
            }
        }

        private void fill_all_sale_invoice_ledger()
        {
            sale_invoice_dgv.Visible = true;
            sale_invoice_dgv.DataSource = null;
            ConnectionWithAccess.query = query_contains_for_ledger_account_union(sia_n.Text, sis_a.Text, (sidatetime.Value).ToString());
            ConnectionCommand.accountHelp_datatable(sale_invoice_dgv, "sale_invoice_dgv");
            //sale_invoice_dgv.Columns[0].HeaderText = "DATE SORT";
            //sale_invoice_dgv.Columns[1].HeaderText = "A_N";
            //sale_invoice_dgv.Columns[2].HeaderText = "S_A";
            //sale_invoice_dgv.Columns[3].HeaderText = "Date";
            //sale_invoice_dgv.Columns[4].HeaderText = "Document";
            //sale_invoice_dgv.Columns[5].HeaderText = "Type";
            //sale_invoice_dgv.Columns[6].HeaderText = "Debit";
            //sale_invoice_dgv.Columns[7].HeaderText = "Credit";
            //sale_invoice_dgv.Columns[8].HeaderText = "Balance";
            //sale_invoice_dgv.Columns[0].Width = 75;
            //sale_invoice_dgv.Columns[1].Width = 60;
            //sale_invoice_dgv.Columns[2].Width = 60;
            //sale_invoice_dgv.Columns[3].Width = 75;
            //sale_invoice_dgv.Columns[4].Width = 75;
            //sale_invoice_dgv.Columns[5].Width = 15;
            //sale_invoice_dgv.Columns[6].Width = 120;
            //sale_invoice_dgv.Columns[7].Width = 120;
            //sale_invoice_dgv.Columns[8].Width = 120;
            sale_invoice_dgv.Columns[0].Visible = false;
            sale_invoice_dgv.Columns[1].Visible = false;
            sale_invoice_dgv.Columns[2].Visible = false;
            sale_invoice_dgv.Columns[9].Visible = false;
            sale_invoice_dgv.Columns[10].Visible = false;
            sale_invoice_dgv.Columns[11].Visible = false;
            sale_invoice_dgv.Columns[12].Visible = false;
            sale_invoice_dgv.Columns[6].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;
            sale_invoice_dgv.Columns[7].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;
            sale_invoice_dgv.Columns[8].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;
            if (sale_invoice_dgv.Columns.Count > 1)
            {
                if (sale_invoice_dgv.Rows.Count > 0)
                {
                    update_gridview_balances(sale_invoice_dgv, 6, 7, 8);
                    //getTotal(sale_invoice_dgv, 6);
                    //getTotal(sale_invoice_dgv, 7);
                }
            }
        }

        private void cb_all_sale_invoice_ledger_CheckedChanged(object sender, EventArgs e)
        {
            if (cb_all_sale_invoice_ledger.Checked == true)
            {
                cb_all_sale_invoice_list.Checked = false;
                cb_all_sale_item_list.Checked = false;
                fill_all_sale_invoice_ledger();
            }
            else
            {
                sale_invoice_dgv.Visible = false;
            }
        }

        private void clear_all_datagridview_after_period_change()
        {
            sidbc.Text = "";
            sisalelistdg.DataSource = null;
            sosalelistdg.DataSource = null;
            pipurchaselist.DataSource = null;
            braccountdg.DataSource = null;
        }

        private void additional_accounts_process()
        {
            cb_additional_a_n.Items.Clear();
            cb_additional_a_n.Enabled = true;
            if (additional_account.SelectedItem.Equals("BANK ACCOUNT"))
            {
                ConnectionWithAccess.fix_account_a_n = "2011";
                ConnectionWithAccess.query = "select distinct d_c from " + ConnectionWithAccess.tablename[23] + " where d_n = 999999";
                ConnectionCommand.retrieval(cb_master_d_c);
                if (cb_master_d_c.Items.Count == 1)
                {
                    cb_master_d_c.Enabled = false;
                    cb_master_d_c.SelectedIndex = 0;
                }
                get_a_n_from_d_c("B", Convert.ToInt32(cb_master_d_c.Text));
            }
            else if (additional_account.SelectedItem.Equals("OLD CAPITAL ACCOUNT"))
                ConnectionWithAccess.fix_account_a_n = "3000";
            else if (additional_account.SelectedItem.Equals("CAPITAL ACCOUNT"))
                ConnectionWithAccess.fix_account_a_n = "3001";
            else if (additional_account.SelectedItem.Equals("CASH IN HAND"))
            {
                ConnectionWithAccess.fix_account_a_n = "2010";
                ConnectionWithAccess.query = "select distinct d_c from " + ConnectionWithAccess.tablename[24] + " where d_n = 999999";
                ConnectionCommand.retrieval(cb_master_d_c);
                if (cb_master_d_c.Items.Count == 1)
                {
                    cb_master_d_c.Enabled = false;
                    cb_master_d_c.SelectedIndex = 0;
                }
                get_a_n_from_d_c("C", Convert.ToInt32(cb_master_d_c.Text));
            }
            else if (additional_account.SelectedItem.Equals("INCOMES/EXPENSES(TRADING A/c.)"))
                ConnectionWithAccess.fix_account_a_n = "70";
            else if (additional_account.SelectedItem.Equals("FIXED ASSETS"))
                ConnectionWithAccess.fix_account_a_n = "1";
            else if (additional_account.SelectedItem.Equals("INCOMES/EXPENSES(P&L A/c.)"))
                ConnectionWithAccess.fix_account_a_n = "75";
            else if (additional_account.SelectedItem.Equals("LOANS GIVEN"))
                ConnectionWithAccess.fix_account_a_n = "3500";
            else if (additional_account.SelectedItem.Equals("LOANS TAKEN"))
                ConnectionWithAccess.fix_account_a_n = "3501";
            else if (additional_account.SelectedItem.Equals("LOANS"))
                ConnectionWithAccess.fix_account_a_n = "3555";
            else if (additional_account.SelectedItem.Equals("Taxes and Duties"))
                ConnectionWithAccess.fix_account_a_n = "3600";

            else if (additional_account.SelectedItem.Equals("Job Work"))
                ConnectionWithAccess.fix_account_a_n = jb_osm_a_n;
            else if (additional_account.SelectedItem.Equals("SUNDRY CREDITORS"))
            {
                ConnectionWithAccess.fix_account_a_n = "4002";
                ConnectionWithAccess.query = "select a_n from " + ConnectionWithAccess.tablename[1] + " where a_n like '" + ConnectionWithAccess.fix_account_a_n + "%' and s_a ='@@@'";
                ConnectionCommand.retrieval(cb_additional_a_n);
                if (ConnectionWithAccess.fix_account_a_n == "")
                    cb_additional_a_n.Items.Add(ConnectionWithAccess.fix_account_a_n);
                if (cb_additional_a_n.Items.Count > 0)
                    cb_additional_a_n.SelectedIndex = 0;
                if (cb_additional_a_n.Items.Count == 1)
                    cb_additional_a_n.Enabled = false;
                get_account_details_from_01(cb_additional_a_n.Text, "@@@");
            }
            else if (additional_account.SelectedItem.Equals("SUNDRY DEBTORS"))
            {
                ConnectionWithAccess.fix_account_a_n = "2002";
                ConnectionWithAccess.query = "select a_n from " + ConnectionWithAccess.tablename[1] + " where a_n like '" + ConnectionWithAccess.fix_account_a_n + "%' and s_a ='@@@'";
                ConnectionCommand.retrieval(cb_additional_a_n);
                if (ConnectionWithAccess.fix_account_a_n == "")
                    cb_additional_a_n.Items.Add(ConnectionWithAccess.fix_account_a_n);
                if (cb_additional_a_n.Items.Count > 0)
                    cb_additional_a_n.SelectedIndex = 0;
                if (cb_additional_a_n.Items.Count == 1)
                    cb_additional_a_n.Enabled = false;
                get_account_details_from_01(cb_additional_a_n.Text, "@@@");
            }
            //tb_additional_desc.Text = ConnectionWithAccess.accountname;
        }

        private void save_additional_account()
        {
            ConnectionWithAccess.query = "select a_n from " + ConnectionWithAccess.tablename[1] + " where a_n = '" + cb_additional_a_n.Text + "' and [DESC] = '" + tb_additional_desc.Text + "'";
            DataTable dtData1 = ConnectionCommand.fGetDataTable();
            if (dtData1 != null && dtData1.Rows.Count > 0)
                ConnectionWithAccess.query = "update " + ConnectionWithAccess.tablename[1] + " set city = '" + tb_additional_city.Text + "', pin = " + tb_additional_pincode.Text + " where a_n = '" + cb_additional_a_n.Text + "' and [DESC] = '" + tb_additional_desc.Text + "' and city = '" + tb_additional_city.Text + "'";
            else
                ConnectionWithAccess.query = "insert into " + ConnectionWithAccess.tablename[1] + " (r_c, a_n,s_a,d_y,[desc], city,pin) values('3','" + cb_additional_a_n.Text + "', '' , '' , '" + tb_additional_desc.Text + "', '" + tb_additional_city.Text + "', " + Convert.ToInt32(tb_additional_pincode.Text) + ")";
            ConnectionCommand.fUpdateInsertDeleteData();
            ConnectionWithAccess.query = "select 1 from " + ConnectionWithAccess.tablename[4] + " where a_n = '" + cb_additional_a_n.Text + "' and s_a ='@@@'";
            dtData1 = ConnectionCommand.fGetDataTable();
            if (dtData1 != null && dtData1.Rows.Count > 0)
                ConnectionWithAccess.query = "update " + ConnectionWithAccess.tablename[4] + " set city  = '" + tb_additional_city.Text + "', add1 = '" + tb_additional_add1.Text + "', add2 = '" + tb_additional_add2.Text + "', add3 = '" + tb_additional_add3.Text + "' where a_n = '" + cb_additional_a_n.Text + "' and s_a ='@@@'";
            else
                ConnectionWithAccess.query = "insert into " + ConnectionWithAccess.tablename[4] + " (a_n,s_a,d_y,city,add1,add2,add3) values('" + cb_additional_a_n.Text + "', '', '', '" + tb_additional_city.Text + "', '" + tb_additional_add1.Text + "' , '" + tb_additional_add2.Text + "' , '" + tb_additional_add3.Text + "')";
            ConnectionCommand.fUpdateInsertDeleteData();
        }

        private void find_bank_account_name_from_d_c(int mD_C)
        {
            ConnectionWithAccess.query = "select distinct mess from " + ConnectionWithAccess.tablename[23] + " where d_n = 999999 and d_c = " + Convert.ToInt32(tbDBC.Text);
            DataTable dtData1 = ConnectionCommand.fGetDataTable();

            if (dtData1 != null && dtData1.Rows.Count > 0)
            {
                if (dtData1.Rows[0][0] != null)
                {
                    tbbank_accnumber.Text = dtData1.Rows[0][0].ToString();
                }
            }
        }

        bool bsrPartyChangeIgnore = false;

        private void sritemlist_EditingControlShowing(object sender, DataGridViewEditingControlShowingEventArgs e)
        {
            if (!issrTxtChangedAssigned)
            {
                ConnectionWithAccess.data_entry_working = "Sale Item";
                //e.Control.TextChanged += new EventHandler(textBox_TextChanged);
                cntObject = e.Control;
                cntObject.TextChanged += textBox_TextChanged;
                issrTxtChangedAssigned = true;
            }
        }

        private void soitemlist_KeyDown(object sender, KeyEventArgs e)
        {
            ConnectionWithAccess.data_entry_working = "Sale Item";
            if (e.KeyCode == Keys.Enter)
            {
                mRowIndex = soitemlist.SelectedCells[0].RowIndex;
                ConnectionWithAccess.query = "select type, item_code, title from " + ConnectionWithAccess.tablename[05] + " where (type = '" + mtype + "' and item_code = '" + mitem_code + "') or title = '" + mtitle + "'";
                DataTable dtData1 = ConnectionCommand.fGetDataTable();
                if (dtData1 != null && dtData1.Rows.Count > 0)
                {
                    if (dtData1.Rows[0][0] != null)
                    {
                        temp_word = dtData1.Rows[0][0].ToString();
                        soitemlist.SelectedCells[0].Value = dtData1.Rows[0][0].ToString();
                        soitemlist.SelectedCells[1].Value = dtData1.Rows[0][1].ToString();
                        soitemlist.SelectedCells[2].Value = dtData1.Rows[0][2].ToString();
                    }
                }
            }
        }

        private void BtnLedgerWhastupBalanceAmount_Click(object sender, EventArgs e)
        {
            //PleaseWait objPleaseWait = new PleaseWait("Please wait Sending Message on Whatsup");
            //objPleaseWait.Show();
            SendWhatsupMessage();
            LblWhatsupBalanceAmunt.Visible = false;
            LblWhatsupBalanceDate.Visible = false;
            LblWhatsupMobileNUmber.Visible = false;
            //objPleaseWait.Close();
        }

        private void SendMessageOnWhatsup(string ReceiverMobileNumber, string WhatsuppMessage)
        {
            if (ReceiverMobileNumber.Length == 10)
            {
                string FullUrlWithMessage = "";
                string TempUrl = "https://wa.me/91";
                WhatsuppMessage = WhatsuppMessage.Replace(" ", "%20");
                FullUrlWithMessage = TempUrl + ReceiverMobileNumber + "?text=" + WhatsuppMessage;
                Process.Start("chrome.exe", @FullUrlWithMessage);
            }
            else
                MessageBox.Show("Sorry, Invalid Mobile Number");
        }

        private void SendWhatsupMessage()
        {
            string WhatsupNumber = "";
            if (CheckForInternetConnection() == false)
            {
                MessageBox.Show("Sorry,No Internet Service Available for Whatsup Service");
            }
            else
            {
                //ConnectionWithAccess.query = "select mobilenumber from " + ConnectionWithAccess.tablename[10] + " order by mobilenumber";
                //DataTable dtData1 = ConnectionCommand.fGetDataTable();
                //if (dtData1.Rows.Count <= 0)
                //    return;
                //WhatsupNumber = dtData1.Rows[0]["mobilenumber"].ToString();
                //lbl_balance_sms_count.Text = "Available Sms : " + (total_sms_count - dtData1.Rows.Count).ToString();
                //if ((total_sms_count - dtData1.Rows.Count) > 1)
                //{
                //PleaseWait objPleaseWait = new PleaseWait("Please wait Sending Sms");
                //objPleaseWait.Show();
                //Application.DoEvents();
                if (maintab.SelectedIndex == 1 && subtabDataEntry.SelectedIndex == 0 && subtabsale.SelectedIndex == 0)
                {
                    //text_for_sms = "Thanks for Purchasing Goods worth Rs. " + sigrossamt.Text + " From M/s." + ConnectionWithAccess.company_details[1] + " ," + ConnectionWithAccess.company_details[4] + " against invoice # " + sidocno.Text + " dt. " + sidatetime.Text;
                    if (ConnectionWithAccess.company_details[38] != "")
                        text_for_sms = account_detail_from_01[4].Trim() + "-" + account_detail_from_01[8].Trim() + " Thanks for Purc.Goods of Rs." + sigrossamt.Text + " From " + ConnectionWithAccess.company_details[38] + " on " + sidatetime.Text + " Inv. - " + sidocno.Text;
                    else
                        text_for_sms = account_detail_from_01[4].Trim() + "-" + account_detail_from_01[8].Trim() + " Thanks for Purc.Goods of Rs." + sigrossamt.Text + " on " + sidatetime.Text + " Inv. - " + sidocno.Text;
                    text_for_sms = text_for_sms.Replace("  ", " ");
                    if (sisale_lr_no.Text.Trim() != "")
                        text_for_sms += "  ,lr no-" + sisale_lr_no.Text.Trim() + " /dt -" + dtp_sisale_lr_date.Value.ToShortDateString() + ",trans. " + sitransport.Text;
                    SendMessageOnWhatsup(tb_si_mobilenumber.Text, text_for_sms);
                    SMS.SendSMS(tb_si_mobilenumber.Text, text_for_sms, "Sale Invoice");
                    update_sms_table(tb_si_mobilenumber.Text, text_for_sms, "Sale Invoice", SMS.sms_response);
                }
                else if (maintab.SelectedIndex == 1 && subtabDataEntry.SelectedIndex == 1 && subtabsale.SelectedIndex == 0)
                {
                    get_account_details_from_01(pia_n.Text, pis_a.Text);
                    text_for_sms = "Purchased Goods worth Rs. " + pigrossamt.Text + " From M/s." + account_detail_from_01[4] + " ," + account_detail_from_01[8] + ".";
                    SendMessageOnWhatsup(tb_si_mobilenumber.Text, text_for_sms);
                    SMS.SendSMS(tb_pi_mobilenumber.Text, text_for_sms, "Sale Invoice");
                    update_sms_table(tb_si_mobilenumber.Text, text_for_sms, "Sale Invoice", SMS.sms_response);
                }
                else if (maintab.SelectedIndex == 1 && subtabDataEntry.SelectedIndex == 2 && subtabbank.SelectedIndex == 0)
                {
                    get_account_details_from_01(bra_n.Text, brs_a.Text);
                    text_for_sms = "Thanks received Payment of Rs. " + bramt.Text + " From M/s." + account_detail_from_01[4] + " ," + account_detail_from_01[8] + ".";
                    //SMS.SendSMS(tb_br_mobilenumber.Text, text_for_sms, "Sale Invoice");
                    update_sms_table(tb_pi_mobilenumber.Text, text_for_sms, "Bank Receipt", SMS.sms_response);
                }
                else if (maintab.SelectedIndex == 1 && subtabDataEntry.SelectedIndex == 2 && subtabbank.SelectedIndex == 1)
                {
                    get_account_details_from_01(bpa_n.Text, bps_a.Text);
                    text_for_sms = "Alloted Payment through Bank of Rs. " + bpamt.Text + " to " + account_detail_from_01[4] + " ," + account_detail_from_01[8] + ".";
                    //SMS.SendSMS(si_mobilenumber.Text, text_for_sms, "Sale Invoice");
                    update_sms_table(tb_br_mobilenumber.Text, text_for_sms, "Bank Payment", SMS.sms_response);
                }
                //else if (maintab.SelectedIndex == 1 && subtabDataEntry.SelectedIndex == 2 && subtabbank.SelectedIndex == 2)
                //{
                //    get_account_details_from_01(bda_n.Text, bds_a.Text);
                //    text_for_sms = "Thanks received Payment of Rs. " + bdamt.Text + " From M/s." + account_detail_from_01[4] + " ," + account_detail_from_01[8] + ".";
                //    //SMS.SendSMS(si_mobilenumber.Text, text_for_sms, "Sale Invoice");
                //    update_sms_table(tb_bd_mobilenumber.Text, text_for_sms, "Bank Deposit", SMS.sms_response);
                //}
                //else if (maintab.SelectedIndex == 1 && subtabDataEntry.SelectedIndex == 2 && subtabbank.SelectedIndex == 3)
                //{
                //    get_account_details_from_01(bwa_n.Text, bws_a.Text);
                //    text_for_sms = "Alloted Payment through Bank of Rs. " + bwamt.Text + " to " + account_detail_from_01[4] + " ," + account_detail_from_01[8] + ".";
                //    //SMS.SendSMS(si_mobilenumber.Text, text_for_sms, "Sale Invoice");
                //    update_sms_table(tb_bw_mobilenumber.Text, text_for_sms, "Bank Withdrawal", SMS.sms_response);
                //}
                else if (maintab.SelectedIndex == 1 && subtabDataEntry.SelectedIndex == 3 && subtabcash.SelectedIndex == 0)
                {
                    get_account_details_from_01(cra_n.Text, crs_a.Text);
                    text_for_sms = "Thanks received cash Rs. " + cramt.Text + " From M/s." + ConnectionWithAccess.company_details[38] + ". on " + DateTime.Today.ToShortDateString();
                    //SMS.SendSMS(si_mobilenumber.Text, text_for_sms, "Sale Invoice");
                    update_sms_table(tb_cr_mobilenumber.Text, text_for_sms, "Cash Receipt", SMS.sms_response);
                }
                else if (maintab.SelectedIndex == 1 && subtabDataEntry.SelectedIndex == 3 && subtabcash.SelectedIndex == 1)
                {
                    get_account_details_from_01(cpa_n.Text, cps_a.Text);
                    text_for_sms = "Cash paid Rs. " + cpamt.Text + " to " + ConnectionWithAccess.company_details[38] + ". on " + DateTime.Today.ToShortDateString();
                    //SMS.SendSMS(si_mobilenumber.Text, text_for_sms, "Sale Invoice");
                    update_sms_table(tb_cp_mobilenumber.Text, text_for_sms, "Cash Payment", SMS.sms_response);
                }
                else if (maintab.SelectedIndex == 2 && subtabMasters.SelectedIndex == 0)
                {
                    if (temp_word == "Company Bank Details")
                    {
                        text_for_sms = "Name.";
                        text_for_sms += ConnectionWithAccess.company_details[1] + "        ";
                        text_for_sms += ConnectionWithAccess.company_details[30] + "        ";
                        text_for_sms += "Branch." + ConnectionWithAccess.company_details[4] + "         ,   ";
                        text_for_sms += "IFSC CODE." + ConnectionWithAccess.company_details[29] + "      ,     ";
                        text_for_sms += "A/c." + process_bank_account_number(ConnectionWithAccess.company_details[21]);
                        text_for_sms = text_for_sms.Replace("&", "and");
                        SendMessageOnWhatsup(tb_si_mobilenumber.Text, text_for_sms);
                        SMS.SendSMS(tbMNo1.Text, text_for_sms, "Company Details");
                        update_sms_table(tbMNo1.Text, text_for_sms, "Company Details", SMS.sms_response);
                    }
                }
                else if (maintab.SelectedIndex == 3 && subtabreports.SelectedIndex == 1)
                {
                    text_for_sms = "_*Reminder*_.:";
                    text_for_sms += "Accounting Balance as per our Accounts Rs.";
                    text_for_sms += "*" + Convert.ToDouble(LedDGV.Rows[current_row].Cells[8].Value.ToString()) + "*";
                    text_for_sms += " as on ";
                    temp_word = LedDGV.Rows[current_row].Cells[3].Value.ToString();
                    if (temp_word.Contains(" "))
                        temp_word = temp_word.Substring(0, temp_word.IndexOf(" "));
                    text_for_sms += "*" + temp_word + "*";
                    text_for_sms += " From *" + ConnectionWithAccess.company_details[1] + "*";
                    text_for_sms = text_for_sms.Replace("&", "and");
                    WhatsupNumber = account_detail_from_04[17];
                    SendMessageOnWhatsup(WhatsupNumber, text_for_sms);

                    update_sms_table(account_detail_from_04[17], text_for_sms, "Account Balance", SMS.sms_response);

                    btn_sms_account_balance.Visible = false;
                    lbl_sms_balance_amount.Visible = false;
                    BtnLedgerWhastupBalanceAmount.Visible = false;
                    lbl_sms_balance_date.Visible = false;
                    lbl_sms_balance_mobile_number.Visible = false;
                }
                //objPleaseWait.Close();
                //ConnectionWithAccess.query = "select mobilenumber from " + ConnectionWithAccess.tablename[10] + " order by mobilenumber";
                //dtData1 = ConnectionCommand.fGetDataTable();
                //lbl_balance_sms_count.Text = "Available Sms : " + (total_sms_count - dtData1.Rows.Count).ToString();
                //}
                //else
                //    MessageBox.Show("Sorry, There is no Sms credit available");

                if (text_for_sms != "" && text_for_sms != null)
                    Clipboard.SetText(text_for_sms);
            }
        }

        private void atbsearch_Click(object sender, EventArgs e)
        {

        }

        private void st_ItemClicked(object sender, ToolStripItemClickedEventArgs e)
        {

        }

        private void rb_invoice_CheckedChanged(object sender, EventArgs e)
        {

        }

        private void soitemlist_EditingControlShowing(object sender, DataGridViewEditingControlShowingEventArgs e)
        {
            ConnectionWithAccess.data_entry_working = "Sale Item";
            e.Control.TextChanged += new EventHandler(textBox_TextChanged);
            cntObject = e.Control;
            cntObject.TextChanged += textBox_TextChanged;
        }

        private void soitemlist_SelectionChanged(object sender, EventArgs e)
        {
            ConnectionWithAccess.data_entry_working = "Sale Item";
            if (Control.ModifierKeys == Keys.Down)
            {
                mRowIndex = soitemlist.SelectedCells[0].RowIndex;
                mtype = Convert.ToString(soitemlist.Rows[mRowIndex].Cells[0].Value);
                mitem_code = Convert.ToString(soitemlist.Rows[mRowIndex].Cells[1].Value);
                mtitle = Convert.ToString(soitemlist.Rows[mRowIndex].Cells[2].Value);
            }
            else
            {
                columnIndex = soitemlist.CurrentCell.ColumnIndex;
                if (columnIndex == 3)
                {
                    mcase = 1;
                    mtype = Convert.ToString(soitemlist.Rows[soitemlistrowindex].Cells[0].Value);
                    mitem_code = Convert.ToString(soitemlist.Rows[soitemlistrowindex].Cells[1].Value);
                    mtitle = Convert.ToString(soitemlist.Rows[soitemlistrowindex].Cells[2].Value);
                    ConnectionWithAccess.query = "select packing, box from " + ConnectionWithAccess.tablename[05] + " where [type] = '" + mtype + "' and item_code = '" + mitem_code + "'";
                    DataTable dtData1 = ConnectionCommand.fGetDataTable();
                    if (dtData1 != null && dtData1.Rows.Count > 0)
                    {
                        if (dtData1.Rows[0][0] != null)
                        {
                            temp_word = dtData1.Rows[0][0].ToString();
                            mcase = Convert.ToDouble(soitemlist.Rows[soitemlistrowindex].Cells[3].Value);
                            mbox = Convert.ToDouble(dtData1.Rows[0][0].ToString());
                            mqty = Convert.ToDouble(dtData1.Rows[0][1].ToString());
                            soitemlist.Rows[soitemlistrowindex].Cells[4].Value = mbox * mcase;
                            soitemlist.Rows[soitemlistrowindex].Cells[5].Value = (Convert.ToDouble(soitemlist.Rows[soitemlistrowindex].Cells[4].Value)) * mqty;
                            soitemlist.Rows[soitemlistrowindex].Cells[7].Value = (Convert.ToDouble(soitemlist.Rows[soitemlistrowindex].Cells[5].Value)) * (Convert.ToDouble(soitemlist.Rows[soitemlistrowindex].Cells[6].Value));
                            calculateSaleorderItemTotal();
                        }
                    }
                }
                else if (columnIndex == 4)
                {
                    soitemlist.Rows[soitemlistrowindex].Cells[5].Value = (Convert.ToDouble(soitemlist.Rows[soitemlistrowindex].Cells[4].Value)) * mqty;
                    soitemlist.Rows[soitemlistrowindex].Cells[7].Value = (Convert.ToDouble(soitemlist.Rows[soitemlistrowindex].Cells[5].Value)) * (Convert.ToDouble(soitemlist.Rows[soitemlistrowindex].Cells[6].Value));
                    calculateSaleorderItemTotal();
                }
                else if (columnIndex == 5 || columnIndex == 6)
                {
                    mcase = Convert.ToDouble(soitemlist.Rows[soitemlistrowindex].Cells[3].Value);
                    mbox = Convert.ToDouble(soitemlist.Rows[soitemlistrowindex].Cells[4].Value);
                    mqty = Convert.ToDouble(soitemlist.Rows[soitemlistrowindex].Cells[5].Value);
                    mprice = Convert.ToDouble(soitemlist.Rows[soitemlistrowindex].Cells[6].Value);
                    mamount = mqty * mprice;
                    soitemlist.Rows[soitemlistrowindex].Cells[7].Value = Convert.ToString(mamount);
                    calculateSaleorderItemTotal();
                }
            }
            int totalrowcount = soitemlist.Rows.Count;
            sale_order_amount = 0;
            for (int i = 0; i < totalrowcount; i++)
            {
                sale_order_amount = sale_order_amount + Convert.ToDouble(soitemlist.Rows[i].Cells[7].Value);
            }
        }

        private void button2_Click(object sender, EventArgs e)
        {

        }

        private void CbDbTableName_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (CbDbTableName.Text == "AP2_0050")
            {
                var table = CbDbTableName.SelectedItem;

                ConnectionWithAccess.query = "select * from " + CbDbTableName.Text;
                DataTable dtData = ConnectionCommand.fGetDataTable();
                if (dtData != null && dtData.Rows.Count > 0)
                {
                    DgDbTableData.DataSource = dtData;
                    ClbDbColumn.Items.Clear();
                    foreach (DataGridViewColumn column in DgDbTableData.Columns)
                    {
                        string HeaderName = column.HeaderText.ToString();
                        ClbDbColumn.Items.Add(HeaderName);
                    }
                }
                ConnectionWithAccess.query = "select distinct prd,PeriodId from " + CbDbTableName.Text;
                dtData = ConnectionCommand.fGetDataTable();
                if (dtData != null && dtData.Rows.Count > 0)
                {
                    fFillDropdown(CbDbPSelectedPrd, "PRD", "PeriodId", dtData);
                }
                GbDbPrdCombo.Visible = true;
                LoadNewDataGrid();
            }
            else
                GbDbPrdCombo.Visible = false;
        }

        private void BtnDbSaveTextFile_Click(object sender, EventArgs e)
        {
            SaveFileDialog saveFileDialog = new SaveFileDialog();
            saveFileDialog.Filter = "Text Files|*.txt";
            saveFileDialog.Title = "Save Checked Columns";

            if (saveFileDialog.ShowDialog() == DialogResult.OK)
            {
                string filePath = saveFileDialog.FileName;

                StringBuilder contentBuilder = new StringBuilder();

                // Get the selected checkboxes and save their names
                foreach (var item in ClbDbColumn.CheckedItems)
                {
                    string columnName = item.ToString();
                    contentBuilder.AppendLine(columnName);
                }

                File.WriteAllText(filePath, contentBuilder.ToString());

                MessageBox.Show("Selected checkboxes data saved successfully.");
            }
        }

        private void TbDataMerge_Click(object sender, EventArgs e)
        {
            OpenFileDialog openFileDialog = new OpenFileDialog();
            openFileDialog.Filter = "Text Files|*.txt";
            openFileDialog.Title = "Load Checked Columns";

            if (openFileDialog.ShowDialog() == DialogResult.OK)
            {
                string filePath = openFileDialog.FileName;

                // Uncheck all items in checkedListBox1
                for (int i = 0; i < ClbDbColumn.Items.Count; i++)
                {
                    ClbDbColumn.SetItemChecked(i, false);
                }

                selectedColumns = File.ReadAllLines(filePath).ToList();

                // Check the previously selected items in checkedListBox1
                foreach (string columnName in selectedColumns)
                {
                    int index = ClbDbColumn.Items.IndexOf(columnName);
                    if (index >= 0)
                    {
                        ClbDbColumn.SetItemChecked(index, true);
                    }
                }

                MessageBox.Show("Selected checkboxes data loaded successfully.");
            }
        }

        private void BtnDbClearData_Click(object sender, EventArgs e)
        {
            for (int i = 0; i < ClbDbColumn.Items.Count; i++)
            {
                ClbDbColumn.SetItemChecked(i, false);
            }

            //selectedColumns = File.ReadAllLines("D:\\AP2\\CheckedColumns.txt").ToList();
        }


        private void BtnDbExportwithiID_Click(object sender, EventArgs e)
        {
            if (CbDbTableName.Text == "AP2_0050")
            {
                ConnectionWithAccess.query = "select * from " + CbDbTableName.Text + " order by PRD";
                DataTable dtData = ConnectionCommand.fGetDataTable();
                if (dtData != null && dtData.Rows.Count > 0)
                {
                    for (row_pointer = 0; row_pointer < dtData.Rows.Count; row_pointer++)
                    {
                        ConnectionWithAccess.query = "insert into " + "ACC_PRD" + " (ADDR_ID,PRD,START,END,GP,DATA_TRAN,LOCK,VAT,S_FORM,USER,insert_dt_tm,PERIOD_ID) values("

                            + "'" + row_pointer + "'"
                            + ",'" + dtData.Rows[row_pointer]["PRD"].ToString() + "'"
                            + ",'" + dtData.Rows[row_pointer]["START"].ToString() + "'"
                            + ",'" + dtData.Rows[row_pointer]["END"].ToString() + "'"
                            + ",'" + dtData.Rows[row_pointer]["GP"].ToString() + "'"
                            + ",'" + dtData.Rows[row_pointer]["DATA_TRAN"].ToString() + "'"
                            + ",'" + dtData.Rows[row_pointer]["LOCK"].ToString() + "'"
                            + ",'" + dtData.Rows[row_pointer]["VAT"].ToString() + "'"
                            + ",'" + dtData.Rows[row_pointer]["S_FORM"].ToString() + "'"
                            + ",'" + dtData.Rows[row_pointer]["USER"].ToString() + "'"
                            + ",'" + dtData.Rows[row_pointer]["insert_dt_tm"].ToString() + "'"
                            + ",'" + dtData.Rows[row_pointer]["PERIOD_ID"].ToString() + "'"
                            + ")";
                        ConnectionCommand.fUpdateInsertDeleteData();

                    }
                }
            }
            LoadNewDataGrid();
            MessageBox.Show("Data Inserted Successfully");
        }

        private void LoadNewDataGrid()
        {
            if (CbDbTableName.Text == "AP2_0050")
            {
                ConnectionWithAccess.query = "select * from " + "ACC_PRD" + " order by PRD";
                DataTable dtData = ConnectionCommand.fGetDataTable();
                if (dtData != null && dtData.Rows.Count > 0)
                {
                    DgvDbExportedData.DataSource = dtData;
                    DgvDbExportedData.Visible = true;
                }
                else
                {
                    DgvDbExportedData.Visible = false;
                }
            }
        }

        private void BtnDbDeleteDataFromNewTable_Click(object sender, EventArgs e)
        {
            if (CbDbTableName.Text == ConnectionWithAccess.tablename[50])
            {
                ConnectionWithAccess.query = "Delete from " + "ACC_PRD";
                //+ " where a_n = '" + tbA_N.Text.Trim() + "' and s_a = '" + tbS_A.Text.Trim() + "'";
                ConnectionCommand.fUpdateInsertDeleteData();
                LoadNewDataGrid();
            }
        }

        private void CbDbTable_SelectedIndexChanged(object sender, EventArgs e)
        {
            // if (e.ColumnIndex == DgvDbExportedData.Columns["Selected"].Index && e.RowIndex >= 0)
            if (CbDbTable.Text == "FROM TABLE")
            {
                DgDbTableData.Visible = true;
                DgvDbExportedData.Visible = false;
                CbDbTable.Visible = false;
            }
            else if (CbDbTable.Text == "DATA TABLE")
            {
                DgDbTableData.Visible = false;
                DgvDbExportedData.Visible = true;
                CbDbTable.Visible = false;
            }
            else if (CbDbTable.Text == "TO TABLE")
            {
                DgDbTableData.Visible = false;
                DgvDbExportedData.Visible = false;
                CbDbTable.Visible = true;
            }
        }

        private void BtnDbLoadDataTxtFile_Click(object sender, EventArgs e)
        {
            OpenFileDialog openFileDialog = new OpenFileDialog();
            openFileDialog.Filter = "Text Files|*.txt";
            openFileDialog.Title = "Load Checked Columns";

            if (openFileDialog.ShowDialog() == DialogResult.OK)
            {
                string filePath = openFileDialog.FileName;

                // Uncheck all items in checkedListBox1
                for (int i = 0; i < ClbDbColumn.Items.Count; i++)
                {
                    ClbDbColumn.SetItemChecked(i, false);
                }

                selectedColumns = File.ReadAllLines(filePath).ToList();

                // Check the previously selected items in checkedListBox1
                foreach (string columnName in selectedColumns)
                {
                    int index = ClbDbColumn.Items.IndexOf(columnName);
                    if (index >= 0)
                    {
                        ClbDbColumn.SetItemChecked(index, true);
                    }
                }

                MessageBox.Show("Selected checkboxes data loaded successfully.");
            }
        }

        //private void generate_qr_code()
        //{
        //    QRCodeGenerator qrGenerator = new QRCodeGenerator();
        //    QRCodeGenerator.QRCode qrCode = qrGenerator.CreateQrCode(textBoxQRCode.Text, QRCodeGenerator.ECCLevel.Q);
        //    pictureBoxQRCode.BackgroundImage = qrCode.GetGraphic(20);
        //}


        private void generate_barcode(string barcode_string)
        {
            //string barcode = sipartycode.Text;
            if (barcode_string.Length > 0)
            {
                Bitmap bitmap = new Bitmap(barcode_string.Length * 40, 150);
                string strBarcodeImage = ConnectionWithAccess.data_drive + "acc\\" + ConnectionWithAccess.mNIK + "\\reports\\" + "Barcode.png";
                using (Graphics graphics = Graphics.FromImage(bitmap))
                {
                    System.Drawing.Font oFont = new System.Drawing.Font("IDAutomationHC39M Free Version", 20);

                    PointF point = new PointF(2f, 2f);
                    SolidBrush black = new SolidBrush(Color.Black);
                    SolidBrush white = new SolidBrush(Color.White);
                    //graphics.FillRectangle(white, 0, 0, bitmap.Width, bitmap.Height);
                    graphics.FillRectangle(white, 0, 0, 444, 50);
                    //graphics.DrawString("*" + barcode_string + "*", oFont, black, point);
                    graphics.DrawString(barcode_string, oFont, black, point);
                }

                using (MemoryStream ms = new MemoryStream())
                {
                    barcode_filename = ConnectionWithAccess.data_drive + "acc\\" + ConnectionWithAccess.mNIK + "\\reports\\temp_barcode.png";
                    bitmap.Save(barcode_filename, ImageFormat.Png);
                    //pb_barcode.Visible = true;
                    //pb_barcode.Location = new System.Drawing.Point(930, 4);
                    //pb_barcode.Size = new System.Drawing.Size(444, 50);
                    //pb_barcode.Image = bitmap;
                    ////pb_barcode.Height = bitmap.Height;
                    ////pb_barcode.Width = bitmap.Width;
                }
            }
            else
                pb_barcode.Visible = false;
        }

        private void cb_all_purchase_item_list_CheckedChanged(object sender, EventArgs e)
        {
            if (cb_all_purchase_item_list.Checked == true)
            {
                cb_all_purchase_invoice_list.Checked = false;
                cb_all_purchase_invoice_ledger.Checked = false;
                fill_all_purchase_item_list();
            }
            else
            {
                pi_party_help.Visible = false;
            }
        }

        private void fill_purchase_invoice_dg()
        {
            if (pia_n.Text != "" && pis_a.Text != "")
            {
                if (cb_all_purchase_item_list.Checked == true)
                {
                    fill_all_purchase_item_list();
                }
                else if (cb_all_purchase_invoice_list.Checked == true)
                {
                    fill_all_purchase_invoice_list();
                }
                else if (cb_all_purchase_invoice_ledger.Checked == true)
                {
                    fill_all_purchase_invoice_ledger();
                }
            }
        }

        private void fill_all_purchase_item_list()
        {
            pi_party_help.Visible = true;
            pi_party_help.DataSource = null;
            ConnectionWithAccess.query = "select distinct f22.D_D, f22.D_N,f5.title,f3.qty,f3.price,f3.amount from " + ConnectionWithAccess.tablename[1] + " f1, " + ConnectionWithAccess.tablename[03] + " f3, " + ConnectionWithAccess.tablename[05] + " f5, " + ConnectionWithAccess.tablename[22] + " f22 where f1.a_n = f22.a_n and f1.s_a = f22.s_a and f22.prd = '" + ConnectionWithAccess.mprd + "' and f22.d_c = " + Convert.ToInt32(pidbc.SelectedValue.ToString()) + " and f3.prd = f22.prd and f3.d_c = f22.d_c and f3.d_n = f22.d_n and f22.a_n = '" + pia_n.Text + "' and f22.s_a = '" + pis_a.Text + "' and f3.item_code = f5.item_code order by f22.d_n desc";
            ConnectionCommand.accountHelp(pi_party_help, "pi_datagridview");
            pi_party_help.Columns[0].HeaderText = "Date";
            pi_party_help.Columns[1].HeaderText = "Inv.num";
            pi_party_help.Columns[2].HeaderText = "Title";
            pi_party_help.Columns[3].HeaderText = "Quantity";
            pi_party_help.Columns[4].HeaderText = "Price";
            pi_party_help.Columns[5].HeaderText = "Amount";
            pi_party_help.Columns[0].Width = 75;
            pi_party_help.Columns[1].Width = 60;
            pi_party_help.Columns[2].Width = 280;
            pi_party_help.Columns[3].Width = 90;
            pi_party_help.Columns[4].Width = 90;
            pi_party_help.Columns[5].Width = 120;
            pi_party_help.Columns[0].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;
            pi_party_help.Columns[1].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;
            pi_party_help.Columns[2].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleLeft;
            pi_party_help.Columns[3].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;
            pi_party_help.Columns[4].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;
            pi_party_help.Columns[5].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;
            if (pi_party_help.Rows.Count <= 1)
            {
                ConnectionWithAccess.mDateTime = Convert.ToDateTime(ConnectionWithAccess.msdate);
            }
        }

        private void fill_all_purchase_invoice_list()
        {
            pi_party_help.Visible = true;
            //pi_party_help.Rows.Clear();
            ConnectionWithAccess.query = "select distinct f22.D_D, f22.D_N, f22.bamt, f22.tamt, f22.gamt from " + ConnectionWithAccess.tablename[1] + " f1, " + ConnectionWithAccess.tablename[22] + " f22 where f1.a_n = f22.a_n and f1.s_a = f22.s_a and f22.prd = '" + ConnectionWithAccess.mprd + "' and f22.d_c = " + Convert.ToInt32(pidbc.SelectedValue.ToString()) + " and f22.a_n = '" + pia_n.Text + "' and f22.s_a = '" + pis_a.Text + "' order by f22.d_n desc";
            ConnectionCommand.accountHelp(pi_party_help, "pi_datagridview");
            pi_party_help.Columns[0].HeaderText = "Date";
            pi_party_help.Columns[1].HeaderText = "Inv.num";
            pi_party_help.Columns[2].HeaderText = "basic";
            pi_party_help.Columns[3].HeaderText = "Tax";
            pi_party_help.Columns[4].HeaderText = "Gross";
            pi_party_help.Columns[0].Width = 75;
            pi_party_help.Columns[1].Width = 60;
            pi_party_help.Columns[2].Width = 120;
            pi_party_help.Columns[3].Width = 120;
            pi_party_help.Columns[4].Width = 120;
            pi_party_help.Columns[0].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;
            pi_party_help.Columns[1].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;
            pi_party_help.Columns[2].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;
            pi_party_help.Columns[3].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;
            pi_party_help.Columns[4].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;
            //update_gridview_balances(pi_datagridview, 2, 3, 4);
            //getTotal(pi_party_help, 2);
            //getTotal(pi_party_help, 3);
            //getTotal(pi_party_help, 4);
            if (pi_party_help.Rows.Count <= 1)
            {
                ConnectionWithAccess.mDateTime = Convert.ToDateTime(ConnectionWithAccess.msdate);
            }
        }

        private void fill_all_purchase_invoice_ledger()
        {
            pi_party_help.Visible = true;
            pi_party_help.Rows.Clear();
            ConnectionWithAccess.query = "select distinct '',f51.a_n, f51.s_a, f51.d_d, 'Open', 'O' as 'Type', f51.amt, '',f51.amt from " + ConnectionWithAccess.tablename[51] + " f51, " + ConnectionWithAccess.tablename[1] + " f1 where f51.prd = '@' and f51.a_n = '" + pia_n.Text + "' and f51.s_a = '" + pis_a.Text + "' and d_d = #01-01-1901#";
            ConnectionCommand.accountHelp(pi_party_help, "LEDGER");
            ConnectionWithAccess.query = "select '',f22.a_n, f22.s_a, f22.d_d ,f22.d_n,'P' as 'Type', '',f22.gamt ,'' from " + ConnectionWithAccess.tablename[1] + " f1, " + ConnectionWithAccess.tablename[22] + " f22 where f1.a_n = f22.a_n and f1.s_a = f22.s_a and f22.a_n = '" + pia_n.Text + "' and f22.s_a = '" + pis_a.Text + "'";
            ConnectionCommand.multiplerows(pi_party_help, "LEDGER");
            ConnectionWithAccess.query = "select '',f23.a_n, f23.s_a, f23.d_d, f23.d_n,'B' as 'Type', f23.bamt,'','' from " + ConnectionWithAccess.tablename[23] + " f23 where f23.a_n = '" + pia_n.Text + "' and f23.s_a = '" + pis_a.Text + "'" + " and f23.b_t = '3' and f23.bamt < 0";
            ConnectionCommand.multiplerows(pi_party_help, "LEDGER");
            ConnectionWithAccess.query = "select '',f23.a_n, f23.s_a, f23.d_d, f23.d_n,'B' as 'Type', '',f23.bamt from " + ConnectionWithAccess.tablename[23] + " f23 where f23.a_n = '" + pia_n.Text + "' and f23.s_a = '" + pis_a.Text + "'" + " and f23.b_t = '3' and f23.bamt > 0";
            ConnectionCommand.multiplerows(pi_party_help, "LEDGER");
            ConnectionWithAccess.query = "select '',f24.a_n, f24.s_a, f24.d_d, f24.d_n,'C' as 'Type', (f24.Camt * -1),'','' from " + ConnectionWithAccess.tablename[24] + " f24 where f24.a_n = '" + pia_n.Text + "' and f24.s_a = '" + pis_a.Text + "' and f24.camt < 0";
            ConnectionCommand.multiplerows(pi_party_help, "LEDGER");
            ConnectionWithAccess.query = "select '',f24.a_n, f24.s_a, f24.d_d, f24.d_n,'C' as 'Type', '',f24.Camt,''  from " + ConnectionWithAccess.tablename[24] + " f24 where f24.a_n = '" + pia_n.Text + "' and f24.s_a = '" + pis_a.Text + "' and f24.camt > 0";
            ConnectionCommand.multiplerows(pi_party_help, "LEDGER");
            ConnectionWithAccess.query = "select '',f25.a_n, f25.s_a, f25.d_d, f25.d_n,'J' as 'Type', '',f25.jamt, '' from " + ConnectionWithAccess.tablename[25] + " f25 where f25.a_n = '" + pia_n.Text + "' and f25.s_a = '" + pis_a.Text + "'";
            ConnectionCommand.multiplerows(pi_party_help, "LEDGER");
            ConnectionWithAccess.query = "select '',f25.a_n, f25.s_a, f25.d_d, f25.d_n,'J' as 'Type', f25.jamt,'', '' from " + ConnectionWithAccess.tablename[25] + " f25 where f25.na_n = '" + pia_n.Text + "' and f25.ns_a = '" + pis_a.Text + "'";
            ConnectionCommand.multiplerows(pi_party_help, "LEDGER");
            ConnectionWithAccess.query = "select '',f30.a_n, f30.s_a, f30.d_d, f30.d_n,'R' as 'Type', f30.gamt,'', '' from " + ConnectionWithAccess.tablename[30] + " f30 where f30.a_n = '" + pia_n.Text + "' and f30.s_a = '" + pis_a.Text + "'";
            ConnectionCommand.multiplerows(pi_party_help, "LEDGER");
            pi_party_help.Columns[0].HeaderText = "DATE SORT";
            pi_party_help.Columns[1].HeaderText = "A_N";
            pi_party_help.Columns[2].HeaderText = "S_A";
            pi_party_help.Columns[3].HeaderText = "Date";
            pi_party_help.Columns[4].HeaderText = "Document";
            pi_party_help.Columns[5].HeaderText = "Type";
            pi_party_help.Columns[6].HeaderText = "Debit";
            pi_party_help.Columns[7].HeaderText = "Credit";
            pi_party_help.Columns[8].HeaderText = "Balance";
            pi_party_help.Columns[0].Width = 75;
            pi_party_help.Columns[1].Width = 60;
            pi_party_help.Columns[2].Width = 60;
            pi_party_help.Columns[3].Width = 75;
            pi_party_help.Columns[4].Width = 75;
            pi_party_help.Columns[5].Width = 15;
            pi_party_help.Columns[6].Width = 120;
            pi_party_help.Columns[7].Width = 120;
            pi_party_help.Columns[8].Width = 120;
            if (pi_party_help.Columns.Count > 1)
            {
                if (pi_party_help.Rows.Count > 0)
                {
                    update_gridview_balances(pi_party_help, 6, 7, 8);
                    //getTotal(pi_party_help, 6);
                    //getTotal(pi_party_help, 7);
                }
            }
        }

        private void cb_all_purchase_invoice_list_CheckedChanged(object sender, EventArgs e)
        {
            if (cb_all_purchase_invoice_list.Checked == true)
            {
                cb_all_purchase_item_list.Checked = false;
                cb_all_purchase_invoice_ledger.Checked = false;
                fill_all_purchase_invoice_list();
            }
            else
            {
                pi_party_help.Visible = false;
            }
        }

        private void cb_all_purchase_invoice_ledger_CheckedChanged(object sender, EventArgs e)
        {
            if (cb_all_purchase_invoice_ledger.Checked == true)
            {
                cb_all_purchase_invoice_list.Checked = false;
                cb_all_purchase_item_list.Checked = false;
                fill_all_purchase_invoice_ledger();
            }
            else
            {
                pi_party_help.Visible = false;
            }
        }

        private string change_date_format(string old_date)
        {
            temp_word = Convert.ToString(old_date);
            month_int = temp_word.IndexOf("/");
            date_int = temp_word.IndexOf("/", month_int + 1);
            old_date = temp_word.Substring(month_int + 1, date_int - month_int - 1) + "/" + temp_word.Substring(0, month_int) + "/" + temp_word.Substring(date_int + 1, temp_word.Length - date_int - 1);
            return old_date;
        }

        private string change_date_to_tally_format(string old_date)
        {
            //temp_word = old_date;
            temp_datetime = Convert.ToDateTime(old_date);
            //temp_date = temp_datetime.ToString("dd").ToString();
            //temp_month = temp_datetime.ToString("MMMM").ToString().Substring(0,3);
            //temp_year = temp_datetime.ToString("yy").ToString();
            //month_int = temp_word.IndexOf("/");
            //date_int = temp_word.IndexOf("/", month_int + 1);
            old_date = temp_datetime.ToString("dd").ToString() + "-" + temp_datetime.ToString("MMMM").ToString().Substring(0, 3) + "-" + temp_datetime.ToString("yy").ToString();
            //old_date = temp_word.Substring(month_int + 1, date_int - month_int - 1) + "-" + temp_word1 + "-" + temp_word.Substring(date_int + 3, temp_word.Length - date_int - 3);
            return old_date;
        }

        private void generate_full_brief_purchase()
        {
            if (sale_purchase_party.Length > 0)
            {
                ConnectionWithAccess.ma_n = null;
                ConnectionWithAccess.ms_a = null;
                report_filetype = cbRepType.Text + " " + cbRepSubType.Text + " ";
                pdf_filename = ConnectionWithAccess.report_file_location + (report_filetype).Replace(" ", "");
                if (chb_add_datetime_in_output.Checked)
                    pdf_filename += "_" + DateTime.Now.Day + "_" + DateTime.Now.Month + "_" + DateTime.Now.Year + "_" + DateTime.Now.TimeOfDay.Hours + "_" + DateTime.Now.TimeOfDay.Minutes;
                pdf_filename += ".pdf";
                //pdf_filename = ConnectionWithAccess.remove_filename_error(pdf_filename);
                ConnectionWithAccess.create_file_folder(pdf_filename);
                doc1 = new Document(PageSize.A4, 5, 5, 5, 5);
                FileStream FS1 = File.Create(pdf_filename);
                writer = PdfWriter.GetInstance(doc1, FS1);
                doc1.Open();
                current_pdf_page_number = 1;
                add_header_footer = true;
                header_text_message = report_filetype + " " + " From : " + change_date_format(RepFrom.Text) + " to " + change_date_format(RepTo.Text);
                pdf_top_heading = "       Date          Doc.          Name                                                    City                                     Balance";
                Paragraph para = new Paragraph();
                lineno = 3;
                temp_double = 0;
                temp_word = ".";
                print_pdf_line(cour_9_bold, temp_word.Trim(), 30, 5);
                temp_word = " ";
                print_pdf_line(cour_9_bold, temp_word.Trim(), 30, 5);
                var cellArray = sale_purchase_party[0].Split(new[] { ',' });
                ConnectionWithAccess.ma_n = cellArray[12].ToString();
                ConnectionWithAccess.ms_a = cellArray[13].ToString();
                for (row_pointer = 0; row_pointer < sale_purchase_party.Length; row_pointer++)
                {
                    cellArray = sale_purchase_party[row_pointer].Split(new[] { ',' });
                    temp_word = change_date_format(cellArray[1]);
                    print_pdf_line(cour_9_bold, temp_word, para_IndentationLeft_position(0, temp_word, "cour_9"), 0);
                    temp_word = cellArray[2];
                    print_pdf_line(cour_9_bold, temp_word, para_IndentationLeft_position(35, temp_word, "cour_9"), -16);
                    temp_word = cellArray[3];
                    print_pdf_line(cour_9_bold, temp_word.Trim(), 130, -16);
                    temp_word = cellArray[4];
                    print_pdf_line(cour_9_bold, temp_word.Trim(), 340, -16);
                    temp_word = cellArray[8];
                    print_pdf_line(cour_9_bold, temp_word, para_IndentationLeft_position(360, temp_word, "cour_9"), -16);
                    temp_double = temp_double + Convert.ToSingle(temp_word);
                    fill_all_purchase_item_list_for_array(cellArray[10].ToString(), cellArray[11].ToString(), cellArray[12].ToString(), cellArray[13].ToString(), cellArray[2].ToString());
                    if (pi_party_help.Rows.Count > 0)
                    {
                        for (row_pointer2 = 0; row_pointer2 < pi_party_help.Rows.Count; row_pointer2++)
                        {
                            if (actual_line_number_of_page >= 44)
                            {
                                //temp_word = "-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------";
                                //print_pdf_line(cour_9, temp_word, 20, 0);
                                //print_pdf_line(cour_9, " ", 50, 24);
                                print_header_footer_with_top_contains(pdf_top_heading);
                                lineno = 3;
                                actual_line_number_of_page = 0;
                            }
                            if (ckbx_include_payments.Checked == true)
                            {
                                if (ConnectionWithAccess.ma_n != cellArray[12].ToString() && ConnectionWithAccess.ms_a != cellArray[13].ToString())
                                {
                                    fill_all_payment_for_array(ConnectionWithAccess.mprd, ConnectionWithAccess.ma_n, ConnectionWithAccess.ms_a);
                                    ConnectionWithAccess.ma_n = cellArray[12].ToString();
                                    ConnectionWithAccess.ms_a = cellArray[13].ToString();
                                }
                            }
                            if (pi_party_help.Rows[row_pointer2].Cells[2].Value != null)
                            {
                                temp_word = pi_party_help.Rows[row_pointer2].Cells[2].Value.ToString();
                                print_pdf_line(cour_9, temp_word.Trim(), 100, 0);
                            }
                            if (pi_party_help.Rows[row_pointer2].Cells[3].Value != null)
                            {
                                temp_word = pi_party_help.Rows[row_pointer2].Cells[3].Value.ToString();
                                print_pdf_line(cour_9, temp_word, para_IndentationLeft_position(330, temp_word, "cour_9"), -16);
                            }
                            if (pi_party_help.Rows[row_pointer2].Cells[4].Value != null)
                            {
                                temp_word = pi_party_help.Rows[row_pointer2].Cells[4].Value.ToString();
                                print_pdf_line(cour_9, temp_word, para_IndentationLeft_position(380, temp_word, "cour_9"), -16);
                            }
                            if (pi_party_help.Rows[row_pointer2].Cells[5].Value != null)
                            {
                                temp_word = pi_party_help.Rows[row_pointer2].Cells[5].Value.ToString();
                                print_pdf_line(cour_9, temp_word, para_IndentationLeft_position(440, temp_word, "cour_9"), -16);
                            }
                            lineno++;
                        }
                    }
                    lineno++;
                    if (actual_line_number_of_page >= 46)
                    {
                        print_pdf_line(cour_9, " ", 50, 5);
                        print_header_footer_with_top_contains(pdf_top_heading);
                        lineno = 3;
                        actual_line_number_of_page = 0;
                    }
                }
                temp_word = "------------";
                print_pdf_line(cour_9, temp_word.Trim(), 520, 0);
                print_pdf_line(cour_9_bold, "Final Total", 425, -5);
                temp_word = Convert.ToString(Convert.ToInt32(temp_double)) + ".00";
                print_pdf_line(cour_9_bold, temp_word, para_IndentationLeft_position(480, temp_word, "cour_9"), -16);
                temp_word = "------------";
                print_pdf_line(cour_9, temp_word.Trim(), 520, -5);
                //temp_word = "-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------";
                //print_pdf_line(cour_9, temp_word, 20, -5);
                if (ckbx_include_payments.Checked == true)
                {
                    fill_all_payment_for_array(ConnectionWithAccess.mprd, ConnectionWithAccess.ma_n, ConnectionWithAccess.ms_a);
                    if (pi_party_help.Rows.Count > 0)
                    {
                        for (row_pointer2 = 0; row_pointer2 < pi_party_help.Rows.Count; row_pointer2++)
                        {
                            if (actual_line_number_of_page >= 44)
                            {
                                temp_word = "-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------";
                                print_pdf_line(cour_9, temp_word, 20, 0);
                                print_pdf_line(cour_9, " ", 50, 24);
                                //                pdf_top_heading = "Date            Doc.          Name                                                                              City                                      Balance";
                                print_header_footer_with_top_contains(pdf_top_heading);
                                lineno = 3;
                                actual_line_number_of_page = 0;
                            }
                            if (pi_party_help.Rows[row_pointer2].Cells[3].Value != null)
                            {
                                temp_word = pi_party_help.Rows[row_pointer2].Cells[3].Value.ToString();
                                print_pdf_line(cour_9, temp_word.Trim(), 10, 0);
                            }
                            if (pi_party_help.Rows[row_pointer2].Cells[4].Value != null)
                            {
                                temp_word = pi_party_help.Rows[row_pointer2].Cells[4].Value.ToString();
                                print_pdf_line(cour_9, temp_word.Trim(), 100, 0);
                            }
                            //if (pi_datagridview.Rows[row_pointer2].Cells[5].Value != null)
                            //{
                            //    temp_word = pi_datagridview.Rows[row_pointer2].Cells[5].Value.ToString();
                            //    print_pdf_line(cour_9, temp_word, para_IndentationLeft_position(330, temp_word, "cour_9"), -16);
                            //}
                            //if (pi_datagridview.Rows[row_pointer2].Cells[6].Value != null)
                            //{
                            //    temp_word = pi_datagridview.Rows[row_pointer2].Cells[6].Value.ToString();
                            //    print_pdf_line(cour_9, temp_word, para_IndentationLeft_position(380, temp_word, "cour_9"), -16);
                            //}
                            //if (pi_datagridview.Rows[row_pointer2].Cells[7].Value != null)
                            //{
                            //    temp_word = pi_datagridview.Rows[row_pointer2].Cells[7].Value.ToString();
                            //    print_pdf_line(cour_9, temp_word, para_IndentationLeft_position(440, temp_word, "cour_9"), -16);
                            //}
                            lineno++;
                        }
                    }
                }
                print_footer();
                doc1.Close();
            }
            pi_party_help.Visible = true;
            pdf_viewer1.Visible = true;
            pdf_viewer2.Visible = false;
            pdf_viewer3.Visible = false;
            pdf_viewer_report_outstanding.Visible = false;
            pdf_viewer1.BringToFront();
            pdf_viewer1.Visible = false;
            pdf_viewer1.LoadFile(pdf_filename);
        }

        private void fill_all_purchase_item_list_for_array(string mprd, string pidbc, string pia_n, string pis_a, string strpidocno)
        {
            pi_party_help.Visible = true;
            pi_party_help.BringToFront();
            try
            {
                dataset.Clear();
                pi_party_help.Rows.Clear();
            }
            catch (Exception ex)
            { }
            if (cbRepType.Text == "Sale")
                ConnectionWithAccess.query = "select f21.D_D, f21.D_N,f3.title,f3.qty,f3.price,f3.amount from " + ConnectionWithAccess.tablename[03] + " f3, " + ConnectionWithAccess.tablename[21] + " f21 where f21.prd = '" + mprd + "' and f21.d_c = " + Convert.ToInt32(pidbc) + " and f21.a_n = '" + pia_n + "' and f21.s_a = '" + pis_a + "' and f21.d_n " + (strpidocno.Trim() == string.Empty ? "is null" : "= " + strpidocno.Trim()) + " AND F3.a_n = f21.a_n AND F3.D_C = f21.d_c and f3.s_a = f21.s_a and f3.d_n " + (strpidocno.Trim() == string.Empty ? "is null" : "= " + strpidocno.Trim()) + " order by f21.d_n desc";
            else
                ConnectionWithAccess.query = "select f22.D_D, f22.D_N,f3.title,f3.qty,f3.price,f3.amount from " + ConnectionWithAccess.tablename[03] + " f3, " + ConnectionWithAccess.tablename[22] + " f22 where f22.prd = '" + mprd + "' and f22.d_c = " + Convert.ToInt32(pidbc) + " and f22.a_n = '" + pia_n + "' and f22.s_a = '" + pis_a + "' and f22.d_n " + (strpidocno.Trim() == string.Empty ? "is null" : "= " + strpidocno.Trim()) + " AND F3.a_n = f22.a_n AND F3.D_C = f22.d_c and f3.s_a = f22.s_a and f3.d_n " + (strpidocno.Trim() == string.Empty ? "is null" : "= " + strpidocno.Trim()) + " order by f22.d_n desc";
            dataadapter = new OleDbDataAdapter(ConnectionWithAccess.query, ConnectionWithAccess.connection);
            dataadapter.Fill(dataset);
            pi_party_help.DataSource = dataset;
            pi_party_help.DataMember = "Table";
        }

        private void fill_all_payment_for_array(string mprd, string ma_n, string ms_a)
        {
            pi_party_help.Visible = true;
            pi_party_help.BringToFront();
            try
            {
                dataset.Clear();
                pi_party_help.Rows.Clear();
            }
            catch (Exception ex)
            { }
            if (cbRepType.Text == "Sale")
            {
                dataadapter = new OleDbDataAdapter(ConnectionWithAccess.query, ConnectionWithAccess.connection);
                ConnectionWithAccess.query = "select '',f23.a_n, f23.s_a, f23.d_d, f23.d_n,'B' as 'Type', '', f23.Bamt ,'' from " + ConnectionWithAccess.tablename[23] + " f23 where f23.a_n = '" + ma_n + "' and f23.s_a = '" + ms_a + "' and f23.bamt > 0";
                dataadapter.Fill(dataset);
                ConnectionWithAccess.query = "select '',f23.a_n, f23.s_a, f23.d_d, f23.d_n,'B' as 'Type', (f23.Bamt * -1) ,''  from " + ConnectionWithAccess.tablename[23] + " f23 where f23.a_n = '" + ma_n + "' and f23.s_a = '" + ms_a + "' and f23.bamt < 0";
                //dataadapter = new  OleDbDataAdapter(ConnectionWithAccess.query, ConnectionWithAccess.connection);
                dataadapter.Fill(dataset);
                ConnectionWithAccess.query = "select '',f24.a_n, f24.s_a, f24.d_d, f24.d_n,'C' as 'Type', '', f24.Camt ,'' from " + ConnectionWithAccess.tablename[24] + " f24 where f24.a_n = '" + ma_n + "' and f24.s_a = '" + ms_a + "' and f24.camt > 0";
                //dataadapter = new  OleDbDataAdapter(ConnectionWithAccess.query, ConnectionWithAccess.connection);
                dataadapter.Fill(dataset);
                ConnectionWithAccess.query = "select '',f24.a_n, f24.s_a, f24.d_d, f24.d_n,'C' as 'Type', (f24.Camt * -1) ,''  from " + ConnectionWithAccess.tablename[24] + " f24 where f24.a_n = '" + ma_n + "' and f24.s_a = '" + ms_a + "' and f24.camt < 0";
                //dataadapter = new  OleDbDataAdapter(ConnectionWithAccess.query, ConnectionWithAccess.connection);
                dataadapter.Fill(dataset);
            }
            else
                ConnectionWithAccess.query = "select f22.D_D, f22.D_N,f3.title,f3.qty,f3.price,f3.amount from " + ConnectionWithAccess.tablename[03] + " f3, " + ConnectionWithAccess.tablename[22] + " f22 where f22.prd = '" + mprd + "' and f22.d_c = " + Convert.ToInt32(pidbc) + " and f22.a_n = '" + pia_n + "' and f22.s_a = '" + pis_a + "' and f22.d_n " + (pidocno.Text.Trim() == string.Empty ? "is null" : "= " + pidocno.Text.Trim()) + " AND F3.a_n = f22.a_n AND F3.D_C = f22.d_c and f3.s_a = f22.s_a and f3.d_n " + (pidocno.Text.Trim() == string.Empty ? "is null" : "= " + pidocno.Text.Trim()) + " order by f22.d_n desc";
            //dataadapter = new  OleDbDataAdapter(ConnectionWithAccess.query, ConnectionWithAccess.connection);
            //dataadapter.Fill(dataset);
            pi_party_help.DataSource = dataset;
            pi_party_help.DataMember = "Table";
        }

        private void Scan_documents(string strModuleName)
        {
            clear_all_images();
            invisible_all_image();
            ImageScan objImgScan = new ImageScan();
            objImgScan.strScanImageModule = strModuleName;// "Purchase_";
            objImgScan.ShowDialog();
        }

        private void SetZoomValue(ImagePanel imgPanel)
        {
            decimal dWidthRatio = (Convert.ToDecimal(imgPanel.Width) / Convert.ToDecimal(imgPanel.Image.Width));
            decimal dHeightRatio = (Convert.ToDecimal(imgPanel.Height) / Convert.ToDecimal(imgPanel.Image.Height));
            decimal iZoom = dWidthRatio > dHeightRatio ? dWidthRatio : dHeightRatio;
            int iZoomValue = Convert.ToInt32(Math.Round(iZoom, 0)) * 20;
            if (iZoomValue < cp_master_acc_name.Minimum)
                iZoomValue = cp_master_acc_name.Minimum;
            cp_master_acc_name.Value = iZoomValue < cp_master_acc_name.Maximum ? iZoomValue : cp_master_acc_name.Maximum;
            imgPanel.Zoom = cp_master_acc_name.Value * 0.02f;
        }

        private void show_images()
        {
            if (cb_common_image.Checked == true)
            {
                invisible_all_image();
                find_scan_image_type();
                file_folder = ConnectionWithAccess.data_drive + "acc\\" + ConnectionWithAccess.mNIK + "\\scanned_images\\";
                strImageFileName = file_folder + ConnectionWithAccess.mNIK + "_Busi_card_" + ConnectionWithAccess.ma_n + "_" + ConnectionWithAccess.ms_a + ".jpeg";
                if (File.Exists(strImageFileName))
                {
                    if (maintab.SelectedIndex == 2)
                    {
                        cp_master_acc_name.Location = new System.Drawing.Point(500, 570);
                        pb_visiting_card.Location = new System.Drawing.Point(850, 350);
                    }
                    else
                    {
                        cp_master_acc_name.Location = new System.Drawing.Point(700, 600);
                        pb_visiting_card.Location = new System.Drawing.Point(25, 400);
                    }
                    pb_visiting_card.Size = new System.Drawing.Size(470, 260);
                    scan_image_filename = strImageFileName;
                    cp_master_acc_name.Visible = true;
                    pb_visiting_card.Visible = true;
                    pb_visiting_card.Image = new Bitmap(strImageFileName); //System.Drawing.Image.FromFile(strImageFileName);
                    SetZoomValue(pb_visiting_card);
                    Clipboard.SetText(strImageFileName);
                    //pb_visiting_card.SizeMode = PictureBoxSizeMode.Zoom;
                }
                strImageFileName = file_folder + ConnectionWithAccess.mNIK + "_Inv" + scan_image_type + ".jpeg";
                if (File.Exists(strImageFileName))
                {
                    scan_image_filename = strImageFileName;
                    cp_master_acc_name.Visible = true;
                    pb_invoice_imgPanel.Visible = true;
                    pb_invoice_imgPanel.Image = new Bitmap(strImageFileName);// System.Drawing.Image.FromFile(strImageFileName);
                    SetZoomValue(pb_invoice_imgPanel);
                    //Bitmap b = new Bitmap(strImageFileName
                    pb_invoice_imgPanel.BringToFront();
                    Clipboard.SetText(strImageFileName);
                    // pb_invoice_imgPanel.SizeMode = PictureBoxSizeMode.Zoom;
                }
                if (maintab.SelectedIndex == 1 && subtabDataEntry.SelectedIndex == 1 && subtabpurchase.SelectedIndex == 0)
                {
                    strImageFileName = file_folder + ConnectionWithAccess.mNIK + "_Per_" + pia_n.Text + "_" + pis_a.Text + ".jpeg";
                    if (File.Exists(strImageFileName))
                    {
                        scan_image_filename = strImageFileName;
                        cp_master_acc_name.Visible = true;
                        pb_personal_photo.Visible = true;
                        pb_personal_photo.Image = new Bitmap(strImageFileName); //System.Drawing.Image.FromFile(strImageFileName);
                        SetZoomValue(pb_personal_photo);
                        Clipboard.SetText(strImageFileName);
                        //pb_personal_photo.SizeMode = PictureBoxSizeMode.Zoom;
                    }
                }
                strImageFileName = file_folder + ConnectionWithAccess.mNIK + "_Tra" + scan_image_type + ".jpeg";
                if (File.Exists(strImageFileName))
                {
                    scan_image_filename = strImageFileName;
                    rb_transport_copy.Visible = true;
                    rb_transport_copy.Checked = true;
                    cp_master_acc_name.Visible = true;
                    pb_transport_copy.Visible = true;
                    pb_transport_copy.Image = new Bitmap(strImageFileName); //System.Drawing.Image.FromFile(strImageFileName);
                    SetZoomValue(pb_transport_copy);
                    Clipboard.SetText(strImageFileName);
                    //pb_receipt.SizeMode = PictureBoxSizeMode.Zoom;
                }
                strImageFileName = file_folder + ConnectionWithAccess.mNIK + "_Product_" + scan_image_type + ".jpeg";
                if (File.Exists(strImageFileName))
                {
                    scan_image_filename = strImageFileName;

                    cp_master_acc_name.Visible = true;
                    cp_master_acc_name.Location = new System.Drawing.Point(1050, 570);
                    pb_product.Visible = true;
                    pb_product.Image = new Bitmap(strImageFileName); //System.Drawing.Image.FromFile(strImageFileName);
                    SetZoomValue(pb_product);
                    Clipboard.SetText(strImageFileName);
                    //pb_product.SizeMode = PictureBoxSizeMode.Zoom;
                }
                else
                {
                    strImageFileName = file_folder + ConnectionWithAccess.mNIK + "_Che" + scan_image_type + ".jpeg";
                    if (File.Exists(strImageFileName))
                    {
                        scan_image_filename = strImageFileName;
                        cp_master_acc_name.Visible = true;
                        pb_transport_copy.Visible = true;
                        pb_transport_copy.Image = new Bitmap(strImageFileName); //System.Drawing.Image.FromFile(strImageFileName);
                        SetZoomValue(pb_transport_copy);
                        Clipboard.SetText(strImageFileName);
                        //pb_receipt.SizeMode = PictureBoxSizeMode.Zoom;
                    }
                }
                cp_master_acc_name.BringToFront();
            }
            else
            {
                invisible_all_image();
                scan_image_filename = "";
            }
        }

        private void find_scan_image_type()
        {

            //              100 sale invoice 
            //              110 purchase invoice
            //              120 bank receipt
            //              121 bank payment
            //              122 bank deposit
            //              123 bank withdrawal
            //              130 cash receipt
            //              131 cash payment
            //              140 journal
            //              20 masters accounts
            //              21 masters items
            //              22 masters tax
            //              23 masters daybook
            //              24 masters period
            //              25 masters additional
            scan_image_type = "";
            ConnectionWithAccess.ma_n = "";
            ConnectionWithAccess.ms_a = "";
            ConnectionWithAccess.accountname = "";
            ConnectionWithAccess.accountcity = "";
            ImageScan.image_title = "";
            if (current_working_tab == "100")
            {
                scan_image_type = "_" + ConnectionWithAccess.mprd + "_" + sidbc.SelectedValue.ToString() + "_" + sidocno.Text;
                ConnectionWithAccess.ma_n = sia_n.Text;
                ConnectionWithAccess.ms_a = sis_a.Text;
                ConnectionWithAccess.accountname = sipartycode.Text;
                ConnectionWithAccess.accountcity = sicity.Text;
                ImageScan.image_title = sipartycode.Text + " ," + sicity.Text;
            }
            else if (current_working_tab == "101")
            {
                scan_image_type = "_" + ConnectionWithAccess.mprd + "_" + srdbc.SelectedValue.ToString() + "_" + srdocno.Text;
                ConnectionWithAccess.ma_n = sra_n.Text;
                ConnectionWithAccess.ms_a = srs_a.Text;
                ConnectionWithAccess.accountname = srpartycode.Text;
                ConnectionWithAccess.accountcity = "";
                ImageScan.image_title = srpartycode.Text;
            }
            else if (current_working_tab == "102")
            {
                scan_image_type = "_" + ConnectionWithAccess.mprd + "_" + sodbc.SelectedValue.ToString() + "_" + sodocno.Text;
                ConnectionWithAccess.ma_n = soa_n.Text;
                ConnectionWithAccess.ms_a = sos_a.Text;
                ConnectionWithAccess.accountname = sopartycode.Text;
                ConnectionWithAccess.accountcity = "";
                ImageScan.image_title = sopartycode.Text;
            }
            else if (current_working_tab == "110")
            {
                scan_image_type = "_" + ConnectionWithAccess.mprd + "_" + pidbc.SelectedValue.ToString() + "_" + pia_n.Text + "_" + pis_a.Text + "_" + pidocno.Text;
                ConnectionWithAccess.ma_n = pia_n.Text;
                ConnectionWithAccess.ms_a = pis_a.Text;
                ConnectionWithAccess.accountname = pipartycode.Text;
                ConnectionWithAccess.accountcity = picity.Text;
                ImageScan.image_title = pipartycode.Text + " ," + picity.Text;
            }
            else if (current_working_tab == "111")
            {
                scan_image_type = "_" + ConnectionWithAccess.mprd + "_" + prpartycode.Text + "_" + prdbc.SelectedValue.ToString() + "_" + prdocno.Text;
                ConnectionWithAccess.ma_n = pra_n.Text;
                ConnectionWithAccess.ms_a = prs_a.Text;
                ConnectionWithAccess.accountname = prpartycode.Text;
                ConnectionWithAccess.accountcity = "";
                ImageScan.image_title = prpartycode.Text;
            }
            else if (current_working_tab == "120")
            {
                scan_image_type = "_" + ConnectionWithAccess.mprd + "_" + brdbc.SelectedValue.ToString() + "_" + brdocno.Text;
                ConnectionWithAccess.ma_n = bra_n.Text;
                ConnectionWithAccess.ms_a = brs_a.Text;
                ConnectionWithAccess.accountname = brpartycode.Text;
                ConnectionWithAccess.accountcity = brpartycity.Text;
                ImageScan.image_title = brpartycode.Text + " ," + brpartycity.Text;
            }
            else if (current_working_tab == "121")
            {
                scan_image_type = "_" + ConnectionWithAccess.mprd + "_" + bpdbc.SelectedValue.ToString() + "_" + bpdocno.Text;
                ConnectionWithAccess.ma_n = bpa_n.Text;
                ConnectionWithAccess.ms_a = bps_a.Text;
                ConnectionWithAccess.accountname = bppartycode.Text;
                ConnectionWithAccess.accountcity = bppartycity.Text;
                ImageScan.image_title = bppartycode.Text + " ," + bppartycity.Text;
            }
            else if (current_working_tab == "122")
            {
                scan_image_type = "_" + ConnectionWithAccess.mprd + "_" + bddbc.SelectedValue.ToString() + "_" + bddocno.Text;
                ConnectionWithAccess.ma_n = bda_n.Text;
                ConnectionWithAccess.ms_a = "@@@";
                ConnectionWithAccess.accountname = bdpartycode.Text;
                ConnectionWithAccess.accountcity = "";
                ImageScan.image_title = bdpartycode.Text;
            }
            else if (current_working_tab == "123")
            {
                scan_image_type = "_" + ConnectionWithAccess.mprd + "_" + bwdbc.SelectedValue.ToString() + "_" + bwdocno.Text;
                ConnectionWithAccess.ma_n = bwa_n.Text;
                ConnectionWithAccess.ms_a = "@@@";
            }
            else if (current_working_tab == "130")
            {
                scan_image_type = "_" + ConnectionWithAccess.mprd + "_" + crdbc.SelectedValue.ToString() + "_" + crdocno.Text;
                ConnectionWithAccess.ma_n = cra_n.Text;
                ConnectionWithAccess.ms_a = crs_a.Text;
                ConnectionWithAccess.accountname = crpartycode.Text;
                ConnectionWithAccess.accountcity = "";
                ImageScan.image_title = crpartycode.Text;
            }
            else if (current_working_tab == "131")
            {
                scan_image_type = "_" + ConnectionWithAccess.mprd + "_" + cpdbc.SelectedValue.ToString() + "_" + cpdocno.Text;
                ConnectionWithAccess.ma_n = cpa_n.Text;
                ConnectionWithAccess.ms_a = cps_a.Text;
                ConnectionWithAccess.accountname = cppartycode.Text;
                ConnectionWithAccess.accountcity = "";
                ImageScan.image_title = cppartycode.Text;
            }
            else if (current_working_tab == "20")
            {
                ImageScan.image_title = tbDesc.Text + "_" + tbCity.Text;
                scan_image_type = tbA_N.Text + "_" + tbS_A.Text;
                ConnectionWithAccess.ma_n = tbA_N.Text;
                ConnectionWithAccess.ms_a = tbS_A.Text;
                ConnectionWithAccess.accountname = tbDesc.Text;
                ConnectionWithAccess.accountcity = tbCity.Text;
            }
            else if (current_working_tab == "21")
            {
                ImageScan.image_title = tbTitle.Text;
                scan_image_type = tbItemType.Text + "_" + tbItemCode.Text;
            }
            else if (current_working_tab == "31")
            {
                //scan_image_type = "_" + ConnectionWithAccess.mprd + "_" + cpdbc.SelectedValue.ToString() + "_" + cpdocno.Text;
                ConnectionWithAccess.ma_n = rla_n.Text;
                ConnectionWithAccess.ms_a = rls_a.Text;
                ConnectionWithAccess.accountname = tb_ledger_account_name.Text;
                ConnectionWithAccess.accountcity = "";
                ImageScan.image_title = tb_ledger_account_name.Text;
            }
            //scan_image_type = "_" + tbItemCode.Text.Trim();// tbTitle.Text;
            atbscan.Visible = false;
            //Scan_documents(scan_image_type);
            //Scan_documents(maintab.SelectedTab.Text);
            atbscan.Visible = true;
        }

        //public void Show_Scanned_image()
        //{
        //    string strImageFileName = string.Empty;
        //    string strFullImagePath = string.Empty;
        //    string img_prefix = string.Empty;

        //    if (cbType.Text == "Business Card")
        //        img_prefix = "Busi_card";
        //    else if (cbType.Text == "Product")
        //        img_prefix = "Product";
        //    else if (cbType.Text != null)
        //        img_prefix = cbType.Text.Substring(0, 3);

        //    //if (cbType.Text == "Business Card")
        //    //    strImageFileName = file_folder + ConnectionWithAccess.mNIK + "_Busi_card_" + ConnectionWithAccess.accountname + "_" + ConnectionWithAccess.accountcity + ".jpeg";
        //    //else if (cbType.Text == "Product")
        //    //    strImageFileName = file_folder + ConnectionWithAccess.mNIK + "_Product_" + strScanImageModule + ".jpeg";
        //    //else
        //    //    strImageFileName = file_folder + ConnectionWithAccess.mNIK + "_" + img_prefix + strScanImageModule + ".jpeg";
        //    ////strImageFileName = file_folder + ConnectionWithAccess.mNIK + "_" + img_prefix + strScanImageModule + "_" + DateTime.Now.ToString("yyyy-MM-dd HHmmss") + ".jpeg";
        //    //strImageFileName = MainForm.remove_wrong_character_from_file(strImageFileName);


        //    if (current_working_tab == "100")
        //    {
        //        strImageFileName = ConnectionWithAccess.mNIK + "_" + img_prefix + "_" + ConnectionWithAccess.mprd + "_" + sidbc.SelectedValue.ToString() + "_" + sidocno.Text;
        //    }
        //    else if (current_working_tab == "101")
        //    {
        //        strImageFileName = ConnectionWithAccess.mNIK + "_" + img_prefix + "_" + ConnectionWithAccess.mprd + "_" + srdbc.SelectedValue.ToString() + "_" + srdocno.Text;
        //    }
        //    else if (current_working_tab == "102")
        //    {
        //        strImageFileName = ConnectionWithAccess.mNIK + "_" + img_prefix + "_" + ConnectionWithAccess.mprd + "_" + sodbc.SelectedValue.ToString() + "_" + sodocno.Text;
        //    }
        //    else if (current_working_tab == "110")
        //    {
        //        strImageFileName = ConnectionWithAccess.mNIK + "_" + img_prefix + "_" + ConnectionWithAccess.mprd + "_" + pipartycode.Text + "_" + pidbc.SelectedValue.ToString() + "_" + pidocno.Text;
        //    }
        //    else if (current_working_tab == "111")
        //    {
        //        strImageFileName = ConnectionWithAccess.mNIK + "_" + img_prefix + "_" + ConnectionWithAccess.mprd + "_" + prpartycode.Text + "_" + prdbc.SelectedValue.ToString() + "_" + prdocno.Text;
        //    }
        //    else if (current_working_tab == "120")
        //    {
        //        strImageFileName = ConnectionWithAccess.mNIK + "_" + img_prefix + "_" + ConnectionWithAccess.mprd + "_" + brdbc.SelectedValue.ToString() + "_" + brdocno.Text;
        //    }
        //    else if (current_working_tab == "121")
        //    {
        //        strImageFileName = ConnectionWithAccess.mNIK + "_" + img_prefix + "_" + ConnectionWithAccess.mprd + "_" + bpdbc.SelectedValue.ToString() + "_" + bpdocno.Text;
        //    }
        //    else if (current_working_tab == "122")
        //    {
        //        strImageFileName = ConnectionWithAccess.mNIK + "_" + img_prefix + "_" + ConnectionWithAccess.mprd + "_" + bddbc.SelectedValue.ToString() + "_" + bddocno.Text;
        //    }
        //    else if (current_working_tab == "123")
        //    {
        //        strImageFileName = ConnectionWithAccess.mNIK + "_" + img_prefix + "_" + ConnectionWithAccess.mprd + "_" + bwdbc.SelectedValue.ToString() + "_" + bwdocno.Text;
        //    }
        //    else if (current_working_tab == "130")
        //    {
        //        strImageFileName = ConnectionWithAccess.mNIK + "_" + img_prefix + "_" + ConnectionWithAccess.mprd + "_" + crdbc.SelectedValue.ToString() + "_" + crdocno.Text;
        //    }
        //    else if (current_working_tab == "131")
        //    {
        //        strImageFileName = ConnectionWithAccess.mNIK + "_" + img_prefix + "_" + ConnectionWithAccess.mprd + "_" + cpdbc.SelectedValue.ToString() + "_" + cpdocno.Text;

        //    }
        //    else if (current_working_tab == "21")
        //    {
        //        strImageFileName = ConnectionWithAccess.mNIK + "_" + img_prefix + "_" + "_" + tbItemCode.Text.Trim();// tbTitle.Text;

        //    }

        //    if (!string.IsNullOrEmpty(strImageFileName))
        //    {
        //        strImageFileName = MainForm.remove_wrong_character_from_file(strImageFileName);

        //        strFullImagePath = ConnectionWithAccess.data_drive + "acc\\" + ConnectionWithAccess.mNIK + "\\scanned_images\\" + strImageFileName + ".jpeg";
        //        if (File.Exists(strFullImagePath))
        //        {
        //            pb_common.Visible = true;
        //            pb_common.SizeMode = PictureBoxSizeMode.AutoSize;
        //            pb_common.ImageLocation = strFullImagePath;
        //        }
        //    }

        //}

        public static string remove_wrong_character_from_file(string filename)
        {
            filename = filename.Replace("/", "");
            filename = filename.Replace("-", "");
            filename = filename.Replace("\"", "");
            return filename;
        }

        private void bar_code_image(string bar_code_string)
        {
            string barcode = bar_code_string;
            Bitmap bitmap = new Bitmap(barcode.Length * 39, 50);
            using (Graphics graphics = Graphics.FromImage(bitmap))
            {
                System.Drawing.Font oFont = new System.Drawing.Font("IDAutomationHC39M Free Version", 20);
                PointF point = new PointF(2f, 2f);
                SolidBrush black = new SolidBrush(Color.Black);
                SolidBrush white = new SolidBrush(Color.White);
                graphics.FillRectangle(white, 0, 0, bitmap.Width, bitmap.Height);
                graphics.DrawString("*" + barcode + "*", oFont, black, point);
            }
            using (MemoryStream ms = new MemoryStream())
            {
                bitmap.Save(ms, ImageFormat.Png);
                pb_common.Image = bitmap;
                pb_common.Height = bitmap.Height;
                pb_common.Width = bitmap.Width;

            }
        }

        private void load_std_code_in_gridview()
        {
            stdisd_filename = ConnectionWithAccess.setup_drive + "sharp\\STDISD.txt";
            if (File.Exists(stdisd_filename))
            {
                string[] cellArray;
                stdisd_array = new string[0];
                stdisd_array = File.ReadAllLines(stdisd_filename);
                if (stdisd_array.Length > 1)
                {
                    //oleDbCmd.CommandText = "SELECT * FROM DATAFILE";
                    //adapter = new OleDbDataAdapter(oleDbCmd.CommandText, VoterConn);
                    //adapter.Fill(ds, "Table");
                    cellArray = stdisd_array[0].Split(new[] { ',' });
                    //dgv_stdisd.Location = new System.Drawing.Point(75, 75);
                    //dgv_stdisd.Size = new System.Drawing.Size(1200, 450);
                    dgv_stdisd.DataSource = null;
                    dgv_stdisd.ColumnCount = cellArray.Length;
                    dgv_stdisd.ColumnHeadersVisible = true;
                    dgv_stdisd.Rows.Clear();
                    for (column_counter = 0; column_counter < cellArray.Length; column_counter++)
                    {
                        dgv_stdisd.Columns[column_counter].HeaderText = cellArray[column_counter];
                    }
                    string column_size = "100,100,100,60,60,60,60,28,29,30,31,32,33,34,35,36,37,38,39,41,42,43,44";
                    var cellArray1 = column_size.Split(new[] { ',' });
                    for (int a = 0; a < cellArray.Length; a++)
                    {
                        dgv_stdisd.Columns[a].Width = Convert.ToInt32(cellArray1[a]);
                    }
                    //dgv_stdisd.Columns[0].HeaderText = "Old Word";
                    //dgv_stdisd.Columns[1].HeaderText = "New Word";
                    //dgv_stdisd.Columns[0].Width = 120;
                    //dgv_stdisd.Columns[1].Width = 120;
                    //gdvword.Columns[0].DefaultCellStyle.Font = new System.Drawing.Font("Arial", 15, FontStyle.Regular);
                    //gdvword.Columns[1].DefaultCellStyle.Font = new System.Drawing.Font("Arial", 15, FontStyle.Regular);
                    //gdvword.Columns[1].SortMode = DataGridViewColumnSortMode.Automatic;
                    dgv_stdisd.Columns[0].ReadOnly = true;
                    dgv_stdisd.Visible = false;
                    foreach (var cellValues in stdisd_array.Skip(0))
                    {
                        //var cellArray = cellValues.Split(new[] { ',' });
                        cellArray = cellValues.Split(new[] { ',' });
                        if (cellArray.Length == dgv_stdisd.Columns.Count)
                            dgv_stdisd.Rows.Add(cellArray);
                        else
                            dgv_stdisd.Rows.Add(cellArray);
                        word = cellValues;
                        //wordArrayList1.Add(cellValues);
                    }
                }
            }
        }

        private void load_std_code_in_datatable()
        {
            stdisd_filename = ConnectionWithAccess.setup_drive + "sharp\\STDISD.txt";
            if (File.Exists(stdisd_filename))
            {
                string[] cellArray;
                stdisd_array = new string[0];
                stdisd_array = File.ReadAllLines(stdisd_filename);
                if (stdisd_array.Length > 1)
                {
                    cellArray = stdisd_array[0].Split(new[] { ',' });
                    for (column_counter = 0; column_counter < cellArray.Length; column_counter++)
                    {
                        DataColumn dc = new DataColumn(cellArray[column_counter]);
                        dtStdCodes.Columns.Add(dc);
                    }
                    State_gst_code.Add("");
                    foreach (var cellValues in stdisd_array.Skip(1))
                    {
                        cellArray = cellValues.Split(new[] { ',' });
                        if (cellArray[0] == "INDIA")
                        {
                            DataRow drNewRow = dtStdCodes.NewRow();
                            if (cellArray.Length > 4)
                            {
                                string strSub = cellValues.Substring(cellValues.IndexOf("\""), cellValues.LastIndexOf("\"") - cellValues.IndexOf("\""));//.Replace(",", "~~");
                                string strcellValues = cellValues.Replace(strSub, strSub.Replace(",", "~~"));
                                cellArray = strcellValues.Split(new[] { ',' });

                                for (int i = 0; i < cellArray.Length; i++)
                                {
                                    drNewRow[i] = cellArray[i].Replace("~~", ",");
                                }
                            }
                            else
                            {
                                for (int i = 0; i < cellArray.Length; i++)
                                {
                                    drNewRow[i] = cellArray[i];
                                }
                            }
                            dtStdCodes.Rows.Add(drNewRow);
                        }
                        else
                        {
                            cellArray = cellValues.Split(new[] { ',' });
                            State_gst_code.Add(cellArray[1]);
                        }
                    }
                }
            }
        }

        private void delete_data_before_date(string tablename, string mdatetime)
        {
            truncate(tablename);
            //if (tablename == "003" || tablename == "021" || tablename == "021" || tablename == "022" || tablename == "023" || tablename == "024" || tablename == "025" || tablename == "030")
            //{
            //    if (ConnectionWithAccess.connection.State == ConnectionState.Open) { ConnectionWithAccess.connection.Close(); }
            //    DateTime vFDate = Convert.ToDateTime(mdatetime);
            //    ConnectionWithAccess.command.CommandText = "delete from " + ConnectionWithAccess.mNIK + "_0" + tablename + " where d_d < @FD";//#" + mdatetime + "#";
            //    ConnectionWithAccess.command.Parameters.Clear();
            //    ConnectionWithAccess.command.Parameters.AddWithValue("@FD", vFDate);

            //    prd_end_date = Convert.ToDateTime(mdatetime);
            //    ConnectionWithAccess.command.CommandText = "delete from " + ConnectionWithAccess.mNIK + "_0" + tablename + " where d_d < @FD";//#" + mdatetime + "#";
            //    ConnectionWithAccess.command.Parameters.AddWithValue("@FD", prd_end_date);

            //    //ConnectionWithAccess.command.CommandText = "delete from " + ConnectionWithAccess.mNIK + "_0" + tablename + " where d_d.value < format(#" + mdatetime + "#, 'dd/mm/yyyy')"; 
            //    ConnectionWithAccess.connection.Open();
            //    ConnectionWithAccess.command.ExecuteNonQuery();
            //    ConnectionWithAccess.connection.Close();
            //}
            //else if (tablename != "001" && tablename != "004" && tablename != "005" && tablename != "006")
            //{
            //    truncate(tablename);
            //}
        }

        private void check_pincode_and_stdcode_and_update_state()
        {
            if (maintab.SelectedIndex == 2)
            {
                if (dtStdCodes.Rows.Count == 0)
                    load_std_code_in_datatable();

                dgvStdCodeHelp.DataSource = null;
                DataTable dtFilter = dtStdCodes.Clone();
                dtStdCodes.Select("STATION like '" + tbCity.Text.Trim() + "' ").CopyToDataTable(dtFilter, LoadOption.OverwriteChanges);
                dgvStdCodeHelp.DataSource = dtFilter;
                dgvStdCodeHelp.Columns[0].Visible = false;
                dgvStdCodeHelp.Columns[1].Width = 120;
                dgvStdCodeHelp.Columns[2].Width = 120;
                dgvStdCodeHelp.Columns[3].Width = 120;
                if (dgvStdCodeHelp.Rows.Count == 2)
                {
                    if (tbStd.Text == "")
                        tbStd.Text = dgvStdCodeHelp.Rows[0].Cells["std_code"].Value.ToString();
                    if (tbstate.Text == "")
                    {
                        tbstate.Text = dgvStdCodeHelp.Rows[0].Cells["state_abb"].Value.ToString();
                        tbstate.BackColor = Color.Red;
                    }
                }
            }
        }

        private void vDeleteItem()
        {
            bool isItemUsed = false;
            //if (!string.IsNullOrEmpty(tbItemCode.Text.Trim()))
            //{
            string strQuery = "SELECT count(0) from " + ConnectionWithAccess.tablename[03] + " where item_code = '" + tbItemCode.Text.Trim() + "' ";
            isItemUsed = ConnectionWithAccess.CheckItemExists(strQuery);

            if (!isItemUsed)
            {
                try
                {
                    ConnectionWithAccess.query = "Delete from " + ConnectionWithAccess.tablename[05] + " where item_code = '" + tbItemCode.Text.Trim() + "' ";
                    ConnectionCommand.fUpdateInsertDeleteData();
                    vClearItemDetails();
                    MessageBox.Show("Item '" + tbTitle.Text.Trim() + "' deleted");
                    fLoad_Item_Master_List();
                    itemlistmastertab();
                }
                catch (Exception ex)
                {

                }
            }
            else
            {
                MessageBox.Show("Item '" + tbTitle.Text.Trim() + "' is in use and cannot be deleted");
            }
            //}
        }

        private void vDeleteAccount()
        {
            if (tbd_y.Text == "" || tbd_y.Text == "@@@")
            {
                bool isaccountused = false;
                if (!string.IsNullOrEmpty(tbA_N.Text.Trim()) && !string.IsNullOrEmpty(tbS_A.Text.Trim()))
                {
                    string strQuery = "SELECT count(0) from " + ConnectionWithAccess.tablename[03] + " where a_n = '" + tbA_N.Text.Trim() + "' and s_a = '" + tbS_A.Text.Trim() + "'";
                    isaccountused = ConnectionWithAccess.CheckItemExists(strQuery);
                    if (!isaccountused)
                    {
                        strQuery = "SELECT count(0) from " + ConnectionWithAccess.tablename[21] + " where a_n = '" + tbA_N.Text.Trim() + "' and s_a = '" + tbS_A.Text.Trim() + "'";
                        isaccountused = ConnectionWithAccess.CheckItemExists(strQuery);
                        if (!isaccountused)
                        {
                            strQuery = "SELECT count(0) from " + ConnectionWithAccess.tablename[22] + " where a_n = '" + tbA_N.Text.Trim() + "' and s_a = '" + tbS_A.Text.Trim() + "'";
                            isaccountused = ConnectionWithAccess.CheckItemExists(strQuery);
                            if (!isaccountused)
                            {
                                strQuery = "SELECT count(0) from " + ConnectionWithAccess.tablename[23] + " where a_n = '" + tbA_N.Text.Trim() + "' and s_a = '" + tbS_A.Text.Trim() + "'";
                                isaccountused = ConnectionWithAccess.CheckItemExists(strQuery);
                                if (!isaccountused)
                                {
                                    strQuery = "SELECT count(0) from " + ConnectionWithAccess.tablename[24] + " where a_n = '" + tbA_N.Text.Trim() + "' and s_a = '" + tbS_A.Text.Trim() + "'";
                                    isaccountused = ConnectionWithAccess.CheckItemExists(strQuery);
                                    if (!isaccountused)
                                    {
                                        strQuery = "SELECT count(0) from " + ConnectionWithAccess.tablename[25] + " where a_n = '" + tbA_N.Text.Trim() + "' and s_a = '" + tbS_A.Text.Trim() + "'";
                                        isaccountused = ConnectionWithAccess.CheckItemExists(strQuery);
                                        if (!isaccountused)
                                        {
                                            strQuery = "SELECT count(0) from " + ConnectionWithAccess.tablename[30] + " where a_n = '" + tbA_N.Text.Trim() + "' and s_a = '" + tbS_A.Text.Trim() + "'";
                                            isaccountused = ConnectionWithAccess.CheckItemExists(strQuery);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (!isaccountused)
                    {
                        try
                        {
                            ConnectionWithAccess.query = "Delete from " + ConnectionWithAccess.tablename[1] + " where a_n = '" + tbA_N.Text.Trim() + "' and s_a = '" + tbS_A.Text.Trim() + "'";
                            ConnectionCommand.fUpdateInsertDeleteData();
                            ConnectionWithAccess.query = "Delete from " + ConnectionWithAccess.tablename[4] + " where a_n = '" + tbA_N.Text.Trim() + "' and s_a = '" + tbS_A.Text.Trim() + "'";
                            ConnectionCommand.fUpdateInsertDeleteData();
                            MessageBox.Show("Account '" + tbDesc.Text.Trim() + "' deleted");
                            fLoad_Account_Master_List();
                            refresh_master_account();
                        }
                        catch (Exception ex)
                        { }
                    }
                    else
                    {
                        MessageBox.Show("Account '" + tbDesc.Text.Trim() + "' is in use and cannot be deleted");
                    }
                }
            }
            else
            {
                bool isaccountused = false;
                if (!string.IsNullOrEmpty(tbA_N.Text.Trim()) && !string.IsNullOrEmpty(tbS_A.Text.Trim()) && !string.IsNullOrEmpty(tbd_y.Text.Trim()))
                {
                    string strQuery = "SELECT count(0) from " + ConnectionWithAccess.tablename[21] + " where a_n = '" + tbA_N.Text.Trim() + "' and s_a = '" + tbS_A.Text.Trim() + "' and d_y = '" + tbd_y.Text.Trim() + "'";
                    isaccountused = ConnectionWithAccess.CheckItemExists(strQuery);
                    //if (!isaccountused)
                    //{
                    //    strQuery = "SELECT count(0) from " + ConnectionWithAccess.tablename[21] + " where a_n = '" + tbA_N.Text.Trim() + "' and s_a = '" + tbS_A.Text.Trim() + "' and d_y = '" + tbd_y.Text.Trim() + "'";
                    //    isaccountused = ConnectionWithAccess.CheckItemExists(strQuery);
                    //}
                    if (!isaccountused)
                    {
                        try
                        {
                            ConnectionWithAccess.query = "Delete from " + ConnectionWithAccess.tablename[1] + " where a_n = '" + tbA_N.Text.Trim() + "' and s_a = '" + tbS_A.Text.Trim() + "' and d_y = '" + tbd_y.Text.Trim() + "' ";
                            ConnectionCommand.fUpdateInsertDeleteData();
                            ConnectionWithAccess.query = "Delete from " + ConnectionWithAccess.tablename[4] + " where a_n = '" + tbA_N.Text.Trim() + "' and s_a = '" + tbS_A.Text.Trim() + "' and s_a = '" + tbS_A.Text.Trim() + "'";
                            ConnectionCommand.fUpdateInsertDeleteData();
                            fLoad_Account_Master_List();
                            refresh_master_account();
                            MessageBox.Show("Account '" + tbdelivery.Text.Trim() + "' deleted");
                        }
                        catch (Exception ex)
                        { }
                    }
                    else
                    {
                        MessageBox.Show("Account '" + tbDesc.Text.Trim() + "' is in use and cannot be deleted");
                    }
                }
            }
        }

        private void vDeletedaybook()
        {
            if (tbDBC.Text == "")
            {
                //temp_a_n = 
                bool isaccountused = false;
                if (!string.IsNullOrEmpty(temp_a_n) && !string.IsNullOrEmpty(tbS_A.Text.Trim()))
                {
                    string strQuery = "SELECT count(0) from " + ConnectionWithAccess.tablename[03] + " where a_n = '" + tbA_N.Text.Trim() + "' and s_a = '" + tbS_A.Text.Trim() + "'";
                    isaccountused = ConnectionWithAccess.CheckItemExists(strQuery);
                    if (!isaccountused)
                    {
                        strQuery = "SELECT count(0) from " + ConnectionWithAccess.tablename[21] + " where a_n = '" + tbA_N.Text.Trim() + "' and s_a = '" + tbS_A.Text.Trim() + "'";
                        isaccountused = ConnectionWithAccess.CheckItemExists(strQuery);
                        if (!isaccountused)
                        {
                            strQuery = "SELECT count(0) from " + ConnectionWithAccess.tablename[22] + " where a_n = '" + tbA_N.Text.Trim() + "' and s_a = '" + tbS_A.Text.Trim() + "'";
                            isaccountused = ConnectionWithAccess.CheckItemExists(strQuery);
                            if (!isaccountused)
                            {
                                strQuery = "SELECT count(0) from " + ConnectionWithAccess.tablename[23] + " where a_n = '" + tbA_N.Text.Trim() + "' and s_a = '" + tbS_A.Text.Trim() + "'";
                                isaccountused = ConnectionWithAccess.CheckItemExists(strQuery);
                                if (!isaccountused)
                                {
                                    strQuery = "SELECT count(0) from " + ConnectionWithAccess.tablename[24] + " where a_n = '" + tbA_N.Text.Trim() + "' and s_a = '" + tbS_A.Text.Trim() + "'";
                                    isaccountused = ConnectionWithAccess.CheckItemExists(strQuery);
                                    if (!isaccountused)
                                    {
                                        strQuery = "SELECT count(0) from " + ConnectionWithAccess.tablename[25] + " where a_n = '" + tbA_N.Text.Trim() + "' and s_a = '" + tbS_A.Text.Trim() + "'";
                                        isaccountused = ConnectionWithAccess.CheckItemExists(strQuery);
                                        if (!isaccountused)
                                        {
                                            strQuery = "SELECT count(0) from " + ConnectionWithAccess.tablename[30] + " where a_n = '" + tbA_N.Text.Trim() + "' and s_a = '" + tbS_A.Text.Trim() + "'";
                                            isaccountused = ConnectionWithAccess.CheckItemExists(strQuery);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (!isaccountused)
                    {
                        try
                        {
                            ConnectionWithAccess.query = "Delete from " + ConnectionWithAccess.tablename[1] + " where a_n = '" + tbA_N.Text.Trim() + "' and s_a = '" + tbS_A.Text.Trim() + "'";
                            ConnectionCommand.fUpdateInsertDeleteData();
                            ConnectionWithAccess.query = "Delete from " + ConnectionWithAccess.tablename[4] + " where a_n = '" + tbA_N.Text.Trim() + "' and s_a = '" + tbS_A.Text.Trim() + "'";
                            ConnectionCommand.fUpdateInsertDeleteData();
                            MessageBox.Show("Account '" + tbDesc.Text.Trim() + "' deleted");
                            itemlistmastertab();
                        }
                        catch (Exception ex)
                        { }
                    }
                    else
                    {
                        MessageBox.Show("Account '" + tbDesc.Text.Trim() + "' is in use and cannot be deleted");
                    }
                }
            }
            else
            {
                bool isaccountused = false;
                if (!string.IsNullOrEmpty(tbA_N.Text.Trim()) && !string.IsNullOrEmpty(tbS_A.Text.Trim()) && !string.IsNullOrEmpty(tbd_y.Text.Trim()))
                {
                    string strQuery = "SELECT count(0) from " + ConnectionWithAccess.tablename[21] + " where a_n = '" + tbA_N.Text.Trim() + "' and s_a = '" + tbS_A.Text.Trim() + "' and d_y = '" + tbd_y.Text.Trim() + "'";
                    isaccountused = ConnectionWithAccess.CheckItemExists(strQuery);
                    //if (!isaccountused)
                    //{
                    //    strQuery = "SELECT count(0) from " + ConnectionWithAccess.tablename[21] + " where a_n = '" + tbA_N.Text.Trim() + "' and s_a = '" + tbS_A.Text.Trim() + "' and d_y = '" + tbd_y.Text.Trim() + "'";
                    //    isaccountused = ConnectionWithAccess.CheckItemExists(strQuery);
                    //}
                    if (!isaccountused)
                    {
                        try
                        {
                            ConnectionWithAccess.query = "Delete from " + ConnectionWithAccess.tablename[1] + " where a_n = '" + tbA_N.Text.Trim() + "' and s_a = '" + tbS_A.Text.Trim() + "' and d_y = '" + tbd_y.Text.Trim() + "' ";
                            ConnectionCommand.fUpdateInsertDeleteData();
                            ConnectionWithAccess.query = "Delete from " + ConnectionWithAccess.tablename[4] + " where a_n = '" + tbA_N.Text.Trim() + "' and s_a = '" + tbS_A.Text.Trim() + "' and s_a = '" + tbS_A.Text.Trim() + "'";
                            ConnectionCommand.fUpdateInsertDeleteData();
                            MessageBox.Show("Account '" + tbdelivery.Text.Trim() + "' deleted");
                            refresh_master_account();
                        }
                        catch (Exception ex)
                        { }
                    }
                    else
                    {
                        MessageBox.Show("Account '" + tbDesc.Text.Trim() + "' is in use and cannot be deleted");
                    }
                }
            }
        }

        public static string strSelectedFont = string.Empty;

        private void ItemListDG_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                tbTitle.Text = Convert.ToString(ItemListDG.CurrentRow.Cells[2].Value);
                update_masters_items_screen_details(tbTitle.Text);
            }
            else
            {
                if (e.KeyCode == Keys.Down)
                {
                    rowIndex = ItemListDG.CurrentRow.Index + 1;
                    tbTitle.Text = Convert.ToString(ItemListDG.Rows[rowIndex].Cells[2].Value);
                    update_masters_items_screen_details(tbTitle.Text);
                }
                else if (e.KeyCode == Keys.Up)
                {
                    rowIndex = ItemListDG.CurrentRow.Index - 1;
                    tbTitle.Text = Convert.ToString(ItemListDG.Rows[rowIndex].Cells[2].Value);
                    update_masters_items_screen_details(tbTitle.Text);
                }
            }
        }

        private void sritemlist_RowValidating(object sender, DataGridViewCellCancelEventArgs e)
        {
            ConnectionWithAccess.data_entry_working = "Sale Replacement Item";
            calculateSalereplaceItemTotal();
        }

        private void check_for_compulsory_records()
        {
            ConnectionWithAccess.query = "select [desc] from " + ConnectionWithAccess.tablename[1] + " where a_n = '2002' and s_a = '@@@' and d_y = '@@@'";
            DataTable dtdata1 = ConnectionCommand.fGetDataTable();
            if (dtdata1 != null && dtdata1.Rows.Count == 0)
            {
                ConnectionWithAccess.query = "insert into " + ConnectionWithAccess.tablename[1] + " (r_c, a_n,s_a,d_y,[desc]) values('3','2002','@@@', '@@@','SUNDRY DEBITORS')";
                ConnectionCommand.fUpdateInsertDeleteData();
            }

            ConnectionWithAccess.query = "select [desc] from " + ConnectionWithAccess.tablename[1] + " where a_n = '4002' and s_a = '@@@' and d_y = '@@@'";
            dtdata1 = ConnectionCommand.fGetDataTable();
            if (dtdata1 != null && dtdata1.Rows.Count == 0)
            {
                ConnectionWithAccess.query = "insert into " + ConnectionWithAccess.tablename[1] + " (r_c, a_n,s_a,d_y,[desc]) values('3','4002','@@@', '@@@','SUNDRY CREDITORS')";
                ConnectionCommand.fUpdateInsertDeleteData();
            }

            ConnectionWithAccess.query = "select [desc] from " + ConnectionWithAccess.tablename[1] + " where a_n = '3555' and s_a = '@@@'";
            dtdata1 = ConnectionCommand.fGetDataTable();
            if (dtdata1 != null && dtdata1.Rows.Count == 0)
            {
                ConnectionWithAccess.query = "insert into " + ConnectionWithAccess.tablename[1] + " (r_c, a_n,s_a,d_y,[desc]) values('3','3555','@@@', '@@@','LOANS')";
                ConnectionCommand.fUpdateInsertDeleteData();
            }
            ConnectionWithAccess.query = "select [desc] from " + ConnectionWithAccess.tablename[1] + " where a_n = '6700' and s_a = '@@@' and d_y = '@@@'";
            dtdata1 = ConnectionCommand.fGetDataTable();
            if (dtdata1 != null && dtdata1.Rows.Count == 0)
            {
                ConnectionWithAccess.query = "insert into " + ConnectionWithAccess.tablename[1] + " (r_c, a_n,s_a,d_y,[desc]) values('3','6700','@@@', '@@@','JOB WORK')";
                ConnectionCommand.fUpdateInsertDeleteData();
            }
            ConnectionWithAccess.query = "select [desc] from " + ConnectionWithAccess.tablename[1] + " where a_n = '719999'";
            dtdata1 = ConnectionCommand.fGetDataTable();
            if (dtdata1 != null && dtdata1.Rows.Count == 0)
            {
                ConnectionWithAccess.query = "insert into " + ConnectionWithAccess.tablename[1] + " (r_c, a_n,s_a,d_y,[desc]) values('3','719999','@@@', '@@@','GROSS PROFIT')";
                ConnectionCommand.fUpdateInsertDeleteData();
            }
            ConnectionWithAccess.query = "select a_n from " + ConnectionWithAccess.tablename[23] + " where a_n = '2010'";
            dtdata1 = ConnectionCommand.fGetDataTable();
            if (dtdata1 != null && dtdata1.Rows.Count > 0)
            {
                ConnectionWithAccess.query = "update " + ConnectionWithAccess.tablename[23] + " set a_n = '2011' where d_c = 3 and tran_d_c <> 0 and a_n = '2010'";
                ConnectionCommand.fUpdateInsertDeleteData();
            }
            ConnectionWithAccess.query = "select a_n from " + ConnectionWithAccess.tablename[25] + " where d_n = 999999";
            dtdata1 = ConnectionCommand.fGetDataTable();
            if (dtdata1 != null && dtdata1.Rows.Count == 0)
            {
                ConnectionWithAccess.query = "insert into " + ConnectionWithAccess.tablename[25] + " (d_n, d_c,s_a,b_t) values (999999,5,'@@@', '1') ";
                ConnectionCommand.fUpdateInsertDeleteData();
            }
        }

        private void repair_bank_data_for_ap2()
        {
            ConnectionWithAccess.query = "update " + ConnectionWithAccess.tablename[23] + " set a_n = '2011' where d_c = 3 and tran_d_c <> 0";
            ConnectionCommand.fUpdateInsertDeleteData();
            ConnectionWithAccess.query = "update " + ConnectionWithAccess.tablename[23] + " set a_n = '201109' where d_c = 9 and tran_d_c <> 0";
            ConnectionCommand.fUpdateInsertDeleteData();
            ConnectionWithAccess.query = "update " + ConnectionWithAccess.tablename[23] + " set a_n = '201112' where d_c = 12 and tran_d_c <> 0";
            ConnectionCommand.fUpdateInsertDeleteData();
            ConnectionWithAccess.query = "update " + ConnectionWithAccess.tablename[23] + " set a_n = '201121' where d_c = 21 and tran_d_c <> 0";
            ConnectionCommand.fUpdateInsertDeleteData();
            ConnectionWithAccess.query = "update " + ConnectionWithAccess.tablename[23] + " set a_n = '201131' where d_c = 31 and tran_d_c <> 0";
            ConnectionCommand.fUpdateInsertDeleteData();
        }

        private void update_gp_per_of_ap2()
        {
            if (cb_get_fix_gp_of_ap2.Checked)
            {
                temp_word = "65,158.0004,61.9501,30,35.9999,-20,42.7305,20.21,60.501,147.1653,62.9988,56.83982,26.4953,34.9938,47.7325,2.75,36.0056,47.7,109,150,70";
                var cellArray = temp_word.Split(new[] { ',' });
                for (int i = 0; i < cellArray.Length; i++)
                {
                    ConnectionWithAccess.query = "update " + ConnectionWithAccess.tablename[50] + " set gp = " + cellArray[i] + " where prd = '" + Convert.ToChar(i + 65) + "'";
                    ConnectionCommand.fUpdateInsertDeleteData();
                }
            }
        }

        private void update_s_a_column_data()
        {
            ConnectionWithAccess.query = "update " + ConnectionWithAccess.tablename[1] + " set s_a='@@@' where s_a is null or s_a ='' or s_a =' '";
            ConnectionCommand.fUpdateInsertDeleteData();
            ConnectionWithAccess.query = "update " + ConnectionWithAccess.tablename[03] + " set s_a='@@@' where s_a is null or s_a ='' or s_a =' '";
            ConnectionCommand.fUpdateInsertDeleteData();
            ConnectionWithAccess.query = "update " + ConnectionWithAccess.tablename[4] + " set s_a='@@@' where s_a is null or s_a ='' or s_a =' '";
            ConnectionCommand.fUpdateInsertDeleteData();
            ConnectionWithAccess.query = "update " + ConnectionWithAccess.tablename[21] + " set s_a='@@@' where s_a is null or s_a ='' or s_a =' '";
            ConnectionCommand.fUpdateInsertDeleteData();
            ConnectionWithAccess.query = "update " + ConnectionWithAccess.tablename[22] + " set s_a='@@@' where s_a is null or s_a ='' or s_a =' '";
            ConnectionCommand.fUpdateInsertDeleteData();
            ConnectionWithAccess.query = "update " + ConnectionWithAccess.tablename[23] + " set s_a='@@@' where s_a is null or s_a ='' or s_a =' '";
            ConnectionCommand.fUpdateInsertDeleteData();
            ConnectionWithAccess.query = "update " + ConnectionWithAccess.tablename[24] + " set s_a='@@@' where s_a is null or s_a ='' or s_a =' '";
            ConnectionCommand.fUpdateInsertDeleteData();
            ConnectionWithAccess.query = "update " + ConnectionWithAccess.tablename[25] + " set s_a='@@@' where s_a is null or s_a ='' or s_a =' '";
            ConnectionCommand.fUpdateInsertDeleteData();
            ConnectionWithAccess.query = "update " + ConnectionWithAccess.tablename[25] + " set ns_a='@@@' where ns_a is null or ns_a ='' or ns_a =' '";
            ConnectionCommand.fUpdateInsertDeleteData();
            ConnectionWithAccess.query = "update " + ConnectionWithAccess.tablename[26] + " set s_a='@@@' where s_a is null or s_a ='' or s_a =' '";
            ConnectionCommand.fUpdateInsertDeleteData();
            ConnectionWithAccess.query = "update " + ConnectionWithAccess.tablename[27] + " set s_a='@@@' where s_a is null or s_a ='' or s_a =' '";
            ConnectionCommand.fUpdateInsertDeleteData();
            ConnectionWithAccess.query = "update " + ConnectionWithAccess.tablename[30] + " set s_a='@@@' where s_a is null or s_a ='' or s_a =' '";
            ConnectionCommand.fUpdateInsertDeleteData();
            ConnectionWithAccess.query = "update " + ConnectionWithAccess.tablename[51] + " set s_a='@@@' where s_a is null or s_a ='' or s_a =' '";
            ConnectionCommand.fUpdateInsertDeleteData();
            ConnectionWithAccess.query = "update " + ConnectionWithAccess.tablename[70] + " set s_a='@@@' where s_a is null or s_a ='' or s_a =' '";
            ConnectionCommand.fUpdateInsertDeleteData();
            ConnectionWithAccess.query = "update " + ConnectionWithAccess.tablename[1] + " set d_y='@@@' where d_y is null or d_y ='' or d_y =' '";
            ConnectionCommand.fUpdateInsertDeleteData();
            ConnectionWithAccess.query = "update " + ConnectionWithAccess.tablename[4] + " set d_y='@@@' where d_y is null or d_y ='' or d_y =' '";
            ConnectionCommand.fUpdateInsertDeleteData();
            ConnectionWithAccess.query = "update " + ConnectionWithAccess.tablename[21] + " set d_y='@@@' where d_y is null or d_y ='' or d_y =' '";
            ConnectionCommand.fUpdateInsertDeleteData();
            ConnectionWithAccess.query = "update " + ConnectionWithAccess.tablename[22] + " set d_y='@@@' where d_y is null or d_y ='' or d_y =' '";
            ConnectionCommand.fUpdateInsertDeleteData();
            ConnectionWithAccess.query = "update " + ConnectionWithAccess.tablename[23] + " set d_y='@@@' where d_y is null or d_y ='' or d_y =' '";
            ConnectionCommand.fUpdateInsertDeleteData();
            ConnectionWithAccess.query = "update " + ConnectionWithAccess.tablename[24] + " set d_y='@@@' where d_y is null or d_y ='' or d_y =' '";
            ConnectionCommand.fUpdateInsertDeleteData();
        }

        private void remove_records_with_zero_amounts()
        {
            ConnectionWithAccess.query = "delete from " + ConnectionWithAccess.tablename[21] + " where d_n <> 999999 and gamt = 0.00";
            ConnectionCommand.fUpdateInsertDeleteData();
            ConnectionWithAccess.query = "delete from " + ConnectionWithAccess.tablename[22] + " where d_n <> 999999 and gamt = 0.00";
            ConnectionCommand.fUpdateInsertDeleteData();
            ConnectionWithAccess.query = "delete from " + ConnectionWithAccess.tablename[23] + " where d_n <> 999999 and bamt = 0.00";
            ConnectionCommand.fUpdateInsertDeleteData();
            ConnectionWithAccess.query = "delete from " + ConnectionWithAccess.tablename[24] + " where d_n <> 999999 and camt = 0.00";
            ConnectionCommand.fUpdateInsertDeleteData();
            ConnectionWithAccess.query = "delete from " + ConnectionWithAccess.tablename[51] + " where amt = 0.00";
            ConnectionCommand.fUpdateInsertDeleteData();
        }

        private void remove_records_for_period_before_t_from_ap1()
        {
            ConnectionWithAccess.query = "update " + ConnectionWithAccess.tablename[50] + " set [start] = '01/04/2016' , [end] = '31/03/2017' where prd = '@'";
            ConnectionCommand.fUpdateInsertDeleteData();
            //ConnectionWithAccess.query = "delete from " + ConnectionWithAccess.tablename[50] + " where prd >= 'B'";
            //ConnectionCommand.fUpdateInsertDeleteData();
            ConnectionWithAccess.query = "update " + ConnectionWithAccess.tablename[50] + " set [start] = '01/04/2017' , [end] = '31/03/2018' where prd = 'A'";
            ConnectionCommand.fUpdateInsertDeleteData();
            ConnectionWithAccess.query = "update " + ConnectionWithAccess.tablename[03] + " set PRD = 'A' where prd = 'T'";
            ConnectionCommand.fUpdateInsertDeleteData();
            ConnectionWithAccess.query = "update " + ConnectionWithAccess.tablename[21] + " set PRD = 'A' where prd = 'T'";
            ConnectionCommand.fUpdateInsertDeleteData();
            ConnectionWithAccess.query = "update " + ConnectionWithAccess.tablename[22] + " set PRD = 'A' where prd = 'T'";
            ConnectionCommand.fUpdateInsertDeleteData();
            ConnectionWithAccess.query = "update " + ConnectionWithAccess.tablename[23] + " set PRD = 'A' where prd = 'T'";
            ConnectionCommand.fUpdateInsertDeleteData();
            ConnectionWithAccess.query = "update " + ConnectionWithAccess.tablename[24] + " set PRD = 'A' where prd = 'T'";
            ConnectionCommand.fUpdateInsertDeleteData();
            ConnectionWithAccess.query = "update " + ConnectionWithAccess.tablename[25] + " set PRD = 'A' where prd = 'T'";
            ConnectionCommand.fUpdateInsertDeleteData();
            ConnectionWithAccess.query = "update " + ConnectionWithAccess.tablename[30] + " set PRD = 'A' where prd = 'T'";
            ConnectionCommand.fUpdateInsertDeleteData();
            ConnectionWithAccess.query = "delete from " + ConnectionWithAccess.tablename[21] + " where d_d < #01/04/2017# and d_d <> #01/01/1901#";
            ConnectionCommand.fUpdateInsertDeleteData();
            ConnectionWithAccess.query = "delete from " + ConnectionWithAccess.tablename[22] + " where d_d < #01/04/2017# and d_d <> #01/01/1901#";
            ConnectionCommand.fUpdateInsertDeleteData();
            ConnectionWithAccess.query = "delete from " + ConnectionWithAccess.tablename[23] + " where d_d < #01/04/2017# and d_d <> #01/01/1901#";
            ConnectionCommand.fUpdateInsertDeleteData();
            ConnectionWithAccess.query = "delete from " + ConnectionWithAccess.tablename[24] + " where d_d < #01/04/2017# and d_d <> #01/01/1901#";
            ConnectionCommand.fUpdateInsertDeleteData();
            ConnectionWithAccess.query = "delete from " + ConnectionWithAccess.tablename[25] + " where d_d < #01/04/2017# and d_d <> #01/01/1901#";
            ConnectionCommand.fUpdateInsertDeleteData();
            ConnectionWithAccess.query = "delete from " + ConnectionWithAccess.tablename[30] + " where d_d < #01/04/2017# and d_d <> #01/01/1901#";
            ConnectionCommand.fUpdateInsertDeleteData();
            ConnectionWithAccess.query = "delete from " + ConnectionWithAccess.tablename[03] + " where d_d < #01/04/2017# and d_d <> #01/01/1901#";
            ConnectionCommand.fUpdateInsertDeleteData();
            //DateTime vFDate = Convert.ToDateTime("01/04/2017");
            //ConnectionWithAccess.command.CommandText = "delete from " + ConnectionWithAccess.tablename[21] + " where d_d < @FD";//#" + mdatetime + "#";
            //ConnectionWithAccess.command.Parameters.Clear();
            //ConnectionWithAccess.command.Parameters.AddWithValue("@FD", "01/04/2017");
        }

        private void remove_records_with_blank_a_n_s_a_d_y()
        {
            ConnectionWithAccess.query = "delete from " + ConnectionWithAccess.tablename[1] + " where a_n = ''";
            ConnectionCommand.fUpdateInsertDeleteData();
            ConnectionWithAccess.query = "delete from " + ConnectionWithAccess.tablename[1] + " where [desc] = ''";
            ConnectionCommand.fUpdateInsertDeleteData();
            ConnectionWithAccess.query = "delete from " + ConnectionWithAccess.tablename[05] + " where [title] = ''";
            ConnectionCommand.fUpdateInsertDeleteData();
            ConnectionWithAccess.query = "delete from " + ConnectionWithAccess.tablename[21] + " where a_n = ''";
            ConnectionCommand.fUpdateInsertDeleteData();
            ConnectionWithAccess.query = "delete from " + ConnectionWithAccess.tablename[22] + " where a_n = ''";
            ConnectionCommand.fUpdateInsertDeleteData();
            ConnectionWithAccess.query = "delete from " + ConnectionWithAccess.tablename[23] + " where a_n = ''";
            ConnectionCommand.fUpdateInsertDeleteData();
            ConnectionWithAccess.query = "delete from " + ConnectionWithAccess.tablename[24] + " where a_n = ''";
            ConnectionCommand.fUpdateInsertDeleteData();
            ConnectionWithAccess.query = "delete from " + ConnectionWithAccess.tablename[25] + " where a_n = '' and s_a = '@@@' and na_n = '' and ns_a = '@@@' and d_n <> 999999";
            ConnectionCommand.fUpdateInsertDeleteData();
            ConnectionWithAccess.query = "delete from " + ConnectionWithAccess.tablename[30] + " where a_n = ''";
            ConnectionCommand.fUpdateInsertDeleteData();
            ConnectionWithAccess.query = "delete from " + ConnectionWithAccess.tablename[51] + " where a_n = ''";
            ConnectionCommand.fUpdateInsertDeleteData();
        }

        private void replace_all_bank_nara_with_mess_in_bank()
        {
            ConnectionWithAccess.query = "update " + ConnectionWithAccess.tablename[23] + " set bank_nara = mess where bank_nara = ''";
            ConnectionCommand.fUpdateInsertDeleteData();
        }

        private void replace_all_opening_and_closing_stock_with_zero_for_null()
        {
            ConnectionWithAccess.query = "update " + ConnectionWithAccess.tablename[05] + " set opn_stk = 0 where opn_stk is null";
            ConnectionCommand.fUpdateInsertDeleteData();
            ConnectionWithAccess.query = "update " + ConnectionWithAccess.tablename[05] + " set clo_stk = 0 where clo_stk is null";
            ConnectionCommand.fUpdateInsertDeleteData();
            ConnectionWithAccess.query = "update " + ConnectionWithAccess.tablename[05] + " set unused = 0 where unused is null";
            ConnectionCommand.fUpdateInsertDeleteData();
        }

        private void add_gst_master_accounts()
        {
            ConnectionWithAccess.query = "select [desc], city, a_n, s_a from " + ConnectionWithAccess.tablename[1] + " where [desc] = 'GST PAYMENT'";
            DataTable dtData1 = ConnectionCommand.fGetDataTable();
            if (dtData1.Rows.Count == 0)
            {
                ConnectionWithAccess.query = "insert into " + ConnectionWithAccess.tablename[1] + " (r_c, a_n,s_a,d_y,[desc]) values('3','70GST', '@@@' , '@@@' , 'GST PAYMENT')";
                ConnectionCommand.fUpdateInsertDeleteData();
                ConnectionWithAccess.query = "insert into " + ConnectionWithAccess.tablename[1] + " (r_c, a_n,s_a,d_y,[desc]) values('3','70GST', 'IGS' , '@@@' , 'GST PAYMENT (IGST)')";
                ConnectionCommand.fUpdateInsertDeleteData();
                ConnectionWithAccess.query = "insert into " + ConnectionWithAccess.tablename[1] + " (r_c, a_n,s_a,d_y,[desc]) values('3','70GST', 'SGS' , '@@@' , 'GST PAYMENT (SGST)')";
                ConnectionCommand.fUpdateInsertDeleteData();
                ConnectionWithAccess.query = "insert into " + ConnectionWithAccess.tablename[1] + " (r_c, a_n,s_a,d_y,[desc]) values('3','70GST', 'CGS' , '@@@' , 'GST PAYMENT (CGST)')";
                ConnectionCommand.fUpdateInsertDeleteData();
            }
        }

        private void cb_change_item_name_CheckedChanged(object sender, EventArgs e)
        {
            if (cb_change_item_name.Checked)
                tbTitle.ReadOnly = false;
            else
                tbTitle.ReadOnly = true;
        }

        private void filedownloadcomplete(object sender, AsyncCompletedEventArgs e)
        {
            MessageBox.Show("Download Completed");
        }

        /// Download a file
        /// Documentation: https://developers.google.com/drive/v2/reference/files/get
        /// 

        /// a Valid authenticated DriveService
        /// File resource of the file to download
        /// location of where to save the file including the file name to save it as.
        /// 

        //public static Boolean downloadFile(DriveService _service, File _fileResource, string _saveTo)
        //{

        //    if (!String.IsNullOrEmpty(_fileResource.DownloadUrl))
        //    {
        //        try
        //        {
        //            var x = _service.HttpClient.GetByteArrayAsync(_fileResource.DownloadUrl);
        //            byte[] arrBytes = x.Result;
        //            System.IO.File.WriteAllBytes(_saveTo, arrBytes);
        //            return true;
        //        }
        //        catch (Exception e)
        //        {
        //            Console.WriteLine("An error occurred: " + e.Message);
        //            return false;
        //        }
        //    }
        //    else
        //    {
        //        // The file doesn't have any content stored on Drive.
        //        return false;
        //    }
        //}

        void wc_DownloadProgressChanged(object sender, DownloadProgressChangedEventArgs e)
        {
            //pb_latest_version.Value = e.ProgressPercentage;
        }

        public void update_sms_table(string strMobileNo, string strMsg, string from_position, string response)
        {
            //ConnectionWithAccess.query = "insert into " + ConnectionWithAccess.tablename[10] + " (d_d_time,senderid, mobilenumber, message, from_position,response,[user], insert_dt_tm) values('" + DateTime.Now.ToShortDateString() + "', '" + ConnectionWithAccess.com_senderid + "', '" + strMobileNo + "', '" + strMsg.Replace(","," ") + "', '" + from_position + "', '" + response + "', '" + ConnectionWithAccess.muser + "', @currDate )";
            //ConnectionCommand.fUpdateInsertDeleteData();
        }

        private void sendsms()
        {
            if (CheckForInternetConnection() == false)
            {
                MessageBox.Show("Sorry,No Internet Service Available for Sms Service");
            }
            else
            {
                ConnectionWithAccess.query = "select mobilenumber from " + ConnectionWithAccess.tablename[10] + " order by mobilenumber";
                DataTable dtData1 = ConnectionCommand.fGetDataTable();
                lbl_balance_sms_count.Text = "Available Sms : " + (total_sms_count - dtData1.Rows.Count).ToString();
                if ((total_sms_count - dtData1.Rows.Count) > 1)
                {
                    PleaseWait objPleaseWait = new PleaseWait("Please wait Sending Sms");
                    objPleaseWait.Show();
                    Application.DoEvents();
                    if (maintab.SelectedIndex == 1 && subtabDataEntry.SelectedIndex == 0 && subtabsale.SelectedIndex == 0)
                    {
                        //text_for_sms = "Thanks for Purchasing Goods worth Rs. " + sigrossamt.Text + " From M/s." + ConnectionWithAccess.company_details[1] + " ," + ConnectionWithAccess.company_details[4] + " against invoice # " + sidocno.Text + " dt. " + sidatetime.Text;
                        if (ConnectionWithAccess.company_details[38] != "")
                            text_for_sms = account_detail_from_01[4].Trim() + "-" + account_detail_from_01[8].Trim() + " Thanks for Purc.Goods of Rs." + sigrossamt.Text + " From " + ConnectionWithAccess.company_details[38] + " on " + sidatetime.Text + " Inv. - " + sidocno.Text;
                        else
                            text_for_sms = account_detail_from_01[4].Trim() + "-" + account_detail_from_01[8].Trim() + " Thanks for Purc.Goods of Rs." + sigrossamt.Text + " on " + sidatetime.Text + " Inv. - " + sidocno.Text;
                        text_for_sms = text_for_sms.Replace("  ", " ");
                        if (sisale_lr_no.Text.Trim() != "")
                            text_for_sms += "  ,lr no-" + sisale_lr_no.Text.Trim() + " /dt -" + dtp_sisale_lr_date.Value.ToShortDateString() + ",trans. " + sitransport.Text;
                        SMS.SendSMS(tb_si_mobilenumber.Text, text_for_sms, "Sale Invoice");
                        update_sms_table(tb_si_mobilenumber.Text, text_for_sms, "Sale Invoice", SMS.sms_response);
                    }
                    else if (maintab.SelectedIndex == 1 && subtabDataEntry.SelectedIndex == 1 && subtabsale.SelectedIndex == 0)
                    {
                        get_account_details_from_01(pia_n.Text, pis_a.Text);
                        text_for_sms = "Purchased Goods worth Rs. " + pigrossamt.Text + " From M/s." + account_detail_from_01[4] + " ," + account_detail_from_01[8] + ".";
                        SMS.SendSMS(tb_pi_mobilenumber.Text, text_for_sms, "Sale Invoice");
                        update_sms_table(tb_si_mobilenumber.Text, text_for_sms, "Sale Invoice", SMS.sms_response);
                    }
                    else if (maintab.SelectedIndex == 1 && subtabDataEntry.SelectedIndex == 2 && subtabbank.SelectedIndex == 0)
                    {
                        get_account_details_from_01(bra_n.Text, brs_a.Text);
                        text_for_sms = "Thanks received Payment of Rs. " + bramt.Text + " From M/s." + account_detail_from_01[4] + " ," + account_detail_from_01[8] + ".";
                        //SMS.SendSMS(tb_br_mobilenumber.Text, text_for_sms, "Sale Invoice");
                        update_sms_table(tb_pi_mobilenumber.Text, text_for_sms, "Bank Receipt", SMS.sms_response);
                    }
                    else if (maintab.SelectedIndex == 1 && subtabDataEntry.SelectedIndex == 2 && subtabbank.SelectedIndex == 1)
                    {
                        get_account_details_from_01(bpa_n.Text, bps_a.Text);
                        text_for_sms = "Alloted Payment through Bank of Rs. " + bpamt.Text + " to " + account_detail_from_01[4] + " ," + account_detail_from_01[8] + ".";
                        //SMS.SendSMS(si_mobilenumber.Text, text_for_sms, "Sale Invoice");
                        update_sms_table(tb_br_mobilenumber.Text, text_for_sms, "Bank Payment", SMS.sms_response);
                    }
                    //else if (maintab.SelectedIndex == 1 && subtabDataEntry.SelectedIndex == 2 && subtabbank.SelectedIndex == 2)
                    //{
                    //    get_account_details_from_01(bda_n.Text, bds_a.Text);
                    //    text_for_sms = "Thanks received Payment of Rs. " + bdamt.Text + " From M/s." + account_detail_from_01[4] + " ," + account_detail_from_01[8] + ".";
                    //    //SMS.SendSMS(si_mobilenumber.Text, text_for_sms, "Sale Invoice");
                    //    update_sms_table(tb_bd_mobilenumber.Text, text_for_sms, "Bank Deposit", SMS.sms_response);
                    //}
                    //else if (maintab.SelectedIndex == 1 && subtabDataEntry.SelectedIndex == 2 && subtabbank.SelectedIndex == 3)
                    //{
                    //    get_account_details_from_01(bwa_n.Text, bws_a.Text);
                    //    text_for_sms = "Alloted Payment through Bank of Rs. " + bwamt.Text + " to " + account_detail_from_01[4] + " ," + account_detail_from_01[8] + ".";
                    //    //SMS.SendSMS(si_mobilenumber.Text, text_for_sms, "Sale Invoice");
                    //    update_sms_table(tb_bw_mobilenumber.Text, text_for_sms, "Bank Withdrawal", SMS.sms_response);
                    //}
                    else if (maintab.SelectedIndex == 1 && subtabDataEntry.SelectedIndex == 3 && subtabcash.SelectedIndex == 0)
                    {
                        get_account_details_from_01(cra_n.Text, crs_a.Text);
                        text_for_sms = "Thanks received cash Rs. " + cramt.Text + " From M/s." + ConnectionWithAccess.company_details[38] + ". on " + DateTime.Today.ToShortDateString();
                        //SMS.SendSMS(si_mobilenumber.Text, text_for_sms, "Sale Invoice");
                        update_sms_table(tb_cr_mobilenumber.Text, text_for_sms, "Cash Receipt", SMS.sms_response);
                    }
                    else if (maintab.SelectedIndex == 1 && subtabDataEntry.SelectedIndex == 3 && subtabcash.SelectedIndex == 1)
                    {
                        get_account_details_from_01(cpa_n.Text, cps_a.Text);
                        text_for_sms = "Cash paid Rs. " + cpamt.Text + " to " + ConnectionWithAccess.company_details[38] + ". on " + DateTime.Today.ToShortDateString();
                        //SMS.SendSMS(si_mobilenumber.Text, text_for_sms, "Sale Invoice");
                        update_sms_table(tb_cp_mobilenumber.Text, text_for_sms, "Cash Payment", SMS.sms_response);
                    }
                    else if (maintab.SelectedIndex == 2 && subtabMasters.SelectedIndex == 0)
                    {
                        if (temp_word == "Company Bank Details")
                        {
                            text_for_sms = "Name.";
                            text_for_sms += ConnectionWithAccess.company_details[1] + "        ";
                            text_for_sms += ConnectionWithAccess.company_details[30] + "        ";
                            text_for_sms += "Branch." + ConnectionWithAccess.company_details[4] + "         ,   ";
                            text_for_sms += "IFSC CODE." + ConnectionWithAccess.company_details[29] + "      ,     ";
                            text_for_sms += "A/c." + process_bank_account_number(ConnectionWithAccess.company_details[21]);
                            text_for_sms = text_for_sms.Replace("&", "and");
                            SMS.SendSMS(tbMNo1.Text, text_for_sms, "Company Details");
                            update_sms_table(tbMNo1.Text, text_for_sms, "Company Details", SMS.sms_response);
                        }
                    }
                    else if (maintab.SelectedIndex == 3 && subtabreports.SelectedIndex == 1)
                    {
                        text_for_sms = "Reminder.:";
                        text_for_sms += "Accounting Balance as per our Accounts Rs.";
                        text_for_sms += Convert.ToDouble(LedDGV.Rows[current_row].Cells[8].Value.ToString());
                        text_for_sms += " as on ";
                        temp_word = LedDGV.Rows[current_row].Cells[3].Value.ToString();
                        if (temp_word.Contains(" "))
                            temp_word = temp_word.Substring(0, temp_word.IndexOf(" "));
                        text_for_sms += temp_word;
                        text_for_sms += " From " + ConnectionWithAccess.company_details[1];
                        text_for_sms = text_for_sms.Replace("&", "and");
                        SMS.SendSMS(account_detail_from_04[17], text_for_sms, "Account Balance", 1);
                        update_sms_table(account_detail_from_04[17], text_for_sms, "Account Balance", SMS.sms_response);

                        btn_sms_account_balance.Visible = false;
                        lbl_sms_balance_amount.Visible = false;
                        BtnLedgerWhastupBalanceAmount.Visible = false;
                        lbl_sms_balance_date.Visible = false;
                        lbl_sms_balance_mobile_number.Visible = false;
                    }
                    objPleaseWait.Close();
                    ConnectionWithAccess.query = "select mobilenumber from " + ConnectionWithAccess.tablename[10] + " order by mobilenumber";
                    dtData1 = ConnectionCommand.fGetDataTable();
                    lbl_balance_sms_count.Text = "Available Sms : " + (total_sms_count - dtData1.Rows.Count).ToString();
                }
                else
                    MessageBox.Show("Sorry, There is no Sms credit available");

                if (text_for_sms != "" && text_for_sms != null)
                    Clipboard.SetText(text_for_sms);
            }
        }

        private void sisalelistdg_CellClick(object sender, DataGridViewCellEventArgs e)
        {
            PleaseWait objPleaseWait = new PleaseWait("Please wait Collecting Data..");
            objPleaseWait.Show();
            Application.DoEvents();
            si_party_help.Visible = false;
            si_item_help.Visible = false;
            PopulateSaleDetails();
            if (cb_common_image.Checked == true)
            {
                show_images();
            }
            get_old_sale_invoice_amount();
            objPleaseWait.Close();
        }

        private void sisalelistdg_Click(object sender, EventArgs e)
        {
            //PleaseWait objPleaseWait = new PleaseWait("Please wait Collecting Data..");
            //objPleaseWait.Show();
            //Application.DoEvents();
            //si_party_help.Visible = false;
            //si_item_help.Visible = false;
            //PopulateSaleDetails();
            //if (cb_common_image.Checked == true)
            //{
            //    show_images();
            //}
            //get_old_sale_invoice_amount();
            //objPleaseWait.Close();
        }

        private void sisalelistdg_KeyDown(object sender, KeyEventArgs e)
        {
            bool bRepopulate = false;

            if (e.KeyCode == Keys.Down)
            {
                rowIndex = sisalelistdg.CurrentRow.Index + 1;
                bRepopulate = true;
            }
            else if (e.KeyCode == Keys.Up)
            {
                rowIndex = sisalelistdg.CurrentRow.Index - 1;
                bRepopulate = true;
            }
            if (bRepopulate)
            {
                PopulateSaleDetails(rowIndex);
                if (cb_common_image.Checked == true)
                {
                    show_images();
                }
                get_old_sale_invoice_amount();
            }
            //if (rowIndex != -1 && rowIndex < sisalelistdg.Rows.Count)
            //    sidocno.Text = Convert.ToString(sisalelistdg.Rows[rowIndex].Cells[1].Value);
            msalepdf = null;
        }

        private void srsalelistdg_CellClick(object sender, DataGridViewCellEventArgs e)
        {
            PleaseWait objPleaseWait = new PleaseWait("Please wait Collecting Data..");
            objPleaseWait.Show();
            Application.DoEvents();
            PopulateSale_replacement_Details();
            objPleaseWait.Close();
        }

        private void populate_screen()
        {
            if (maintab.SelectedIndex == 1 && subtabDataEntry.SelectedIndex == 0 && subtabsale.SelectedIndex == 0)
            {
                get_account_details_from_01(sia_n.Text, sis_a.Text);
                get_account_details_from_04(sia_n.Text, sis_a.Text);
                sipartycode.Text = account_detail_from_01[4];
                sicity.Text = account_detail_from_01[8];
                if (sid_y.Text != "@@@")
                {
                    if (sis_a.Text != "")
                        sipartycode.ReadOnly = true;
                    //sideliverycode.Visible = true;
                    //sideliverycity.Visible = true;
                    get_account_details_with_d_y_from_01(sia_n.Text, sis_a.Text, sid_y.Text);
                    sideliverycode.Text = account_detail_from_01[4];
                    sideliverycity.Text = account_detail_from_01[8];
                    get_account_details_from_01(sia_n.Text, sis_a.Text);
                }
                else
                {
                    sideliverycode.Text = "";
                    sideliverycity.Text = "";
                }
                party_city = account_detail_from_01[4];
                sipartyname.Text = account_detail_from_01[4];
                sipartyaddress.Text = account_detail_from_04[4] + " ," + account_detail_from_04[5] + " ," + account_detail_from_04[6] + " ," + account_detail_from_04[7];
                sicontactdetails.Text = account_detail_from_04[17] + " ," + account_detail_from_04[18] + " ," + account_detail_from_04[19] + " ," + account_detail_from_04[20];
                sipartybalance.Text = Convert.ToString(get_account_balance(sia_n.Text, sis_a.Text, Convert.ToString(sidatetime.Text)));
                if (ConnectionWithAccess.company_details[5].Trim() != account_detail_from_01[12].Trim())
                    lbl_si_message.Visible = true;
                else
                    lbl_si_message.Visible = false;
                tb_si_mobilenumber.Text = account_detail_from_04[17];
                DispEmail.Text = account_detail_from_04[24];
                party_tin_num = account_detail_from_04[29];
            }
            else if (maintab.SelectedIndex == 1 && subtabDataEntry.SelectedIndex == 0 && subtabsale.SelectedIndex == 1)
            {
                get_account_details_from_01(sra_n.Text, srs_a.Text);
                get_account_details_from_04(sra_n.Text, srs_a.Text);
                srpartycode.Text = account_detail_from_01[4];
                srcity.Text = account_detail_from_01[8];
                srpartyname.Text = account_detail_from_01[4];
                srpartyaddress.Text = account_detail_from_04[4] + " ," + account_detail_from_04[5] + " ," + account_detail_from_04[6] + " ," + account_detail_from_04[7];
                srcontactdetails.Text = account_detail_from_04[17] + " ," + account_detail_from_04[18] + " ," + account_detail_from_04[19] + " ," + account_detail_from_04[20];
                srpartybalance.Text = Convert.ToString(get_account_balance(sra_n.Text, srs_a.Text, Convert.ToString(srdatetime.Text)));
            }
            else if (maintab.SelectedIndex == 1 && subtabDataEntry.SelectedIndex == 0 && subtabsale.SelectedIndex == 2)
            {
                get_account_details_from_01(soa_n.Text, sos_a.Text);
                get_account_details_from_04(soa_n.Text, sos_a.Text);
                sopartycode.Text = account_detail_from_01[4];
                socity.Text = account_detail_from_01[8];
                sopartyname.Text = account_detail_from_01[4];
                sopartyaddress.Text = account_detail_from_04[4] + " ," + account_detail_from_04[5] + " ," + account_detail_from_04[6] + " ," + account_detail_from_04[7];
                socontactdetails.Text = account_detail_from_04[17] + " ," + account_detail_from_04[18] + " ," + account_detail_from_04[19] + " ," + account_detail_from_04[20];
                sopartybalance.Text = Convert.ToString(get_account_balance(soa_n.Text, sos_a.Text, Convert.ToString(sodatetime.Text)));
            }
            else if (maintab.SelectedIndex == 1 && subtabDataEntry.SelectedIndex == 0 && subtabsale.SelectedIndex == 3)
            {
                get_account_details_from_01(simple_a_n.Text, simple_s_a.Text);
                get_account_details_from_04(simple_a_n.Text, simple_s_a.Text);
                simple_partyname.Text = account_detail_from_01[4];
                simple_partycity.Text = account_detail_from_01[8];
                sipartyname.Text = account_detail_from_01[4];
                simple_detail_party_address.Text = account_detail_from_04[4] + " ," + account_detail_from_04[5] + " ," + account_detail_from_04[6] + " ," + account_detail_from_04[7];
                simple_detail_party_contact.Text = account_detail_from_04[17] + " ," + account_detail_from_04[18] + " ," + account_detail_from_04[19] + " ," + account_detail_from_04[20];
                sipartybalance.Text = Convert.ToString(get_account_balance(sia_n.Text, sis_a.Text, Convert.ToString(sidatetime.Text)));
                //if (ConnectionWithAccess.company_details[5].Trim() != account_detail_from_01[12].Trim())
                //    lbl_si_message.Visible = true;
                //else
                //    lbl_si_message.Visible = false;
                //tb_si_mobilenumber.Text = account_detail_from_04[17];
                //DispEmail.Text = account_detail_from_04[24];
                //party_tin_num = account_detail_from_04[29];
            }

            else if (maintab.SelectedIndex == 1 && subtabDataEntry.SelectedIndex == 1 && subtabpurchase.SelectedIndex == 0)
            {
                fill_transport(pia_n.Text, picity.Text, pitransport);
                get_account_details_from_01(pia_n.Text, pis_a.Text);
                get_account_details_from_04(pia_n.Text, pis_a.Text);
                pipartycode.Text = account_detail_from_01[4];
                picity.Text = account_detail_from_01[8];
                if (ConnectionWithAccess.company_details[5].Trim() != account_detail_from_01[12].Trim())
                    lbl_pi_message.Visible = true;
                else
                    lbl_pi_message.Visible = false;
                tb_pi_mobilenumber.Text = account_detail_from_04[17];
                DispEmail.Text = account_detail_from_04[24];
                pisupplieraddress.Text = account_detail_from_04[17] + " ," + account_detail_from_04[18] + " ," + account_detail_from_04[19] + " ," + account_detail_from_04[20];
                pisuppliername.Text = account_detail_from_01[4] + " ," + account_detail_from_04[5] + " ," + account_detail_from_04[6] + " ," + account_detail_from_04[7];
                pitransport.Text = account_detail_from_04[30];
                pitaxcode.Text = account_detail_from_04[32];
                pipartybalance.Text = Convert.ToString(get_account_balance(pia_n.Text, pis_a.Text, Convert.ToString(pidatetime.Text)));
            }
            else if (maintab.SelectedIndex == 1 && subtabDataEntry.SelectedIndex == 2 && subtabbank.SelectedIndex == 0)
            {
                get_account_details_from_01(bra_n.Text, brs_a.Text);
                get_account_details_from_04(bra_n.Text, brs_a.Text);
                tb_br_mobilenumber.Text = account_detail_from_04[17];
                brpartycontact.Text = account_detail_from_04[17] + " ," + account_detail_from_04[18] + " ," + account_detail_from_04[19] + " ," + account_detail_from_04[20];
                brpartyaddress.Text = account_detail_from_04[4] + " ," + account_detail_from_04[5] + " ," + account_detail_from_04[6] + " ," + account_detail_from_04[7];
            }
            else if (maintab.SelectedIndex == 1 && subtabDataEntry.SelectedIndex == 4)
            {
                get_account_details_from_01(ja_n.Text, js_a.Text);
                get_account_details_from_04(ja_n.Text, js_a.Text);
                jjpartycode1.Text = account_detail_from_01[4];
                lbl_payee_name.Text = account_detail_from_01[4];
                lbl_payee_con_details.Text = account_detail_from_04[17] + " ," + account_detail_from_04[18] + " ," + account_detail_from_04[19] + " ," + account_detail_from_04[20] + " ," + account_detail_from_04[21];
                lbl_payee_address.Text = account_detail_from_04[4] + " ," + account_detail_from_04[5] + " ," + account_detail_from_04[7];
                lbl_payee_overall_balance.Text = Convert.ToString(get_account_balance_from_51(ConnectionWithAccess.mprd, ja_n.Text, js_a.Text));
                get_account_details_from_01(jna_n.Text, jns_a.Text);
                get_account_details_from_04(jna_n.Text, jns_a.Text);
                jjpartycode2.Text = account_detail_from_01[4];
                lbl_payer_name.Text = account_detail_from_01[4];
                lbl_payer_con_details.Text = account_detail_from_04[17] + " ," + account_detail_from_04[18] + " ," + account_detail_from_04[19] + " ," + account_detail_from_04[20] + " ," + account_detail_from_04[21];
                lbl_payer_address.Text = account_detail_from_04[4] + " ," + account_detail_from_04[5] + " ," + account_detail_from_04[7];
                lbl_payer_overall_balance.Text = Convert.ToString(get_account_balance_from_51(ConnectionWithAccess.mprd, jna_n.Text, jns_a.Text));
            }
        }

        private void LedDGV_DoubleClick(object sender, EventArgs e)
        {
            if (LedDGV.ColumnCount > 0)
            {
                if (LedDGV.CurrentRow.Cells[5].Value.ToString() == "Sale")
                {
                    //temp_prd = LedDGV.CurrentRow.Cells[10].Value.ToString();
                    //ConnectionWithAccess.mprd = LedDGV.CurrentRow.Cells[10].Value.ToString();
                    //fill_sidbc();
                    //sia_n.Text = LedDGV.CurrentRow.Cells[11].Value.ToString();
                    //go_to_selected_period(ConnectionWithAccess.mprd);
                    //fill_si_sale_list();
                    //temp_d_c = Convert.ToInt32(LedDGV.CurrentRow.Cells[9].Value.ToString());
                    //temp_a_n = LedDGV.CurrentRow.Cells[11].Value.ToString();
                    //temp_s_a = LedDGV.CurrentRow.Cells[12].Value.ToString();
                    //sidocno.Text = LedDGV.CurrentRow.Cells[4].Value.ToString();
                    //maintab.SelectedIndex = 1;
                    //maintab_Click(sender, e);
                    //subtabDataEntry.SelectedIndex = 0;
                    //subtabDataEntry_Click(sender, e);
                    //populate_screen();


                    temp_prd = LedDGV.CurrentRow.Cells[10].Value.ToString();
                    ConnectionWithAccess.mprd = LedDGV.CurrentRow.Cells[10].Value.ToString();
                    sia_n.Text = LedDGV.CurrentRow.Cells[11].Value.ToString();
                    temp_d_c = Convert.ToInt32(LedDGV.CurrentRow.Cells[9].Value.ToString());
                    temp_a_n = LedDGV.CurrentRow.Cells[11].Value.ToString();
                    temp_s_a = LedDGV.CurrentRow.Cells[12].Value.ToString();
                    temp_d_n = Convert.ToInt32(LedDGV.CurrentRow.Cells[4].Value.ToString());
                    move_tab_to_particular_location("SI", ConnectionWithAccess.mprd, temp_d_c, temp_d_n, temp_a_n, temp_s_a, temp_d_d);
                }
                else if (LedDGV.CurrentRow.Cells[5].Value.ToString() == "Purc")
                {
                    if (pidbc.Items.Count == null || pidbc.Items.Count == 0)
                        fill_pidbc();
                    pidocno.Text = ""; // first reset docno to blank and then fill docno
                    temp_prd = LedDGV.CurrentRow.Cells[10].Value.ToString();
                    ConnectionWithAccess.mprd = LedDGV.CurrentRow.Cells[10].Value.ToString();
                    go_to_selected_period(ConnectionWithAccess.mprd);
                    //pidbc.SelectedValue.ToString() = LedDGV.CurrentRow.Cells[9].Value.ToString();
                    temp_d_c = Convert.ToInt32(LedDGV.CurrentRow.Cells[9].Value.ToString());
                    temp_a_n = LedDGV.CurrentRow.Cells[11].Value.ToString();
                    temp_s_a = LedDGV.CurrentRow.Cells[12].Value.ToString();
                    pia_n.Text = LedDGV.CurrentRow.Cells[11].Value.ToString();
                    pis_a.Text = LedDGV.CurrentRow.Cells[12].Value.ToString();
                    get_account_details_from_01(temp_a_n, temp_s_a);
                    pipartycode.Text = account_detail_from_01[4];
                    picity.Text = account_detail_from_01[8];
                    pidocno.Text = LedDGV.CurrentRow.Cells[4].Value.ToString();
                    maintab.SelectedIndex = 1;
                    maintab_Click(sender, e);
                    subtabDataEntry.SelectedIndex = 1;
                    subtabDataEntry_Click(sender, e);
                    populate_screen();
                }
                else if (LedDGV.CurrentRow.Cells[5].Value.ToString() == "Bank")
                {
                    if (LedDGV.CurrentRow.Cells[6].Value != System.DBNull.Value && LedDGV.CurrentRow.Cells[6].Value.Equals("0"))
                        subtabcash.SelectedIndex = 1;
                    else
                    {
                        if (LedDGV.CurrentRow.Cells[10].Value.ToString() != ConnectionWithAccess.mprd)
                        {
                            ConnectionWithAccess.mprd = LedDGV.CurrentRow.Cells[10].Value.ToString();
                            go_to_selected_period(ConnectionWithAccess.mprd);
                        }
                        if (Convert.ToDouble(LedDGV.CurrentRow.Cells[7].Value.ToString()) > 0)
                        {
                            //fill_brdbc();
                            //maintab.SelectedIndex = 1;
                            //subtabDataEntry.SelectedIndex = 2;
                            //temp_prd = LedDGV.CurrentRow.Cells[10].Value.ToString();
                            //maintab_Click(sender, e);
                            //subtabDataEntry_Click(sender, e);
                            //subtabbank_Click(sender, e);
                            //subtabbank.SelectedIndex = 0;
                            //brdocno.Text = "";
                            //brdbc.SelectedValue = LedDGV.CurrentRow.Cells[9].Value.ToString();
                            //temp_d_c = Convert.ToInt32(LedDGV.CurrentRow.Cells[9].Value.ToString());
                            //temp_a_n = LedDGV.CurrentRow.Cells[11].Value.ToString();
                            //temp_s_a = LedDGV.CurrentRow.Cells[12].Value.ToString();
                            //brdatetime.Value = Convert.ToDateTime(LedDGV.CurrentRow.Cells[3].Value.ToString());
                            //brdocno.Text = LedDGV.CurrentRow.Cells[4].Value.ToString();


                            temp_d_n = Convert.ToInt32(LedDGV.CurrentRow.Cells[4].Value.ToString());
                            ConnectionWithAccess.mprd = LedDGV.CurrentRow.Cells[10].Value.ToString();
                            temp_d_c = Convert.ToInt32(LedDGV.CurrentRow.Cells[9].Value.ToString());
                            temp_a_n = LedDGV.CurrentRow.Cells[11].Value.ToString();
                            temp_s_a = LedDGV.CurrentRow.Cells[12].Value.ToString();
                            temp_d_d = Convert.ToDateTime(LedDGV.CurrentRow.Cells[3].Value.ToString());
                            move_tab_to_particular_location("BR", ConnectionWithAccess.mprd, temp_d_c, temp_d_n, temp_a_n, temp_s_a, temp_d_d);
                        }
                        else
                        {
                            //maintab.SelectedIndex = 1;
                            //subtabDataEntry.SelectedIndex = 2;
                            //temp_prd = LedDGV.CurrentRow.Cells[10].Value.ToString();
                            //subtabbank.SelectedIndex = 1;
                            //if (bpdbc.SelectedValue != null)
                            //{
                            //    if (bpdbc.SelectedValue.ToString() != "")
                            //    {
                            //        temp_d_c = Convert.ToInt32(LedDGV.CurrentRow.Cells[9].Value.ToString());
                            //        temp_a_n = LedDGV.CurrentRow.Cells[11].Value.ToString();
                            //        temp_s_a = LedDGV.CurrentRow.Cells[12].Value.ToString();
                            //        bpdatetime.Value = Convert.ToDateTime(LedDGV.CurrentRow.Cells[3].Value.ToString());
                            //        subtabbank_Click(sender, e);
                            //        bpdocno.Text = LedDGV.CurrentRow.Cells[4].Value.ToString();
                            //        maintab_Click(sender, e);
                            //        subtabDataEntry_Click(sender, e);
                            //    }
                            //}
                            temp_d_n = Convert.ToInt32(LedDGV.CurrentRow.Cells[4].Value.ToString());
                            ConnectionWithAccess.mprd = LedDGV.CurrentRow.Cells[10].Value.ToString();
                            temp_d_c = Convert.ToInt32(LedDGV.CurrentRow.Cells[9].Value.ToString());
                            temp_a_n = LedDGV.CurrentRow.Cells[11].Value.ToString();
                            temp_s_a = LedDGV.CurrentRow.Cells[12].Value.ToString();
                            temp_d_d = Convert.ToDateTime(LedDGV.CurrentRow.Cells[3].Value.ToString());
                            move_tab_to_particular_location("BP", ConnectionWithAccess.mprd, temp_d_c, temp_d_n, temp_a_n, temp_s_a, temp_d_d);
                        }
                    }
                }
                else if (LedDGV.CurrentRow.Cells[5].Value.ToString() == "Cash")
                {
                    maintab.SelectedIndex = 1;
                    subtabDataEntry.SelectedIndex = 3;
                    temp_prd = LedDGV.CurrentRow.Cells[10].Value.ToString();
                    ConnectionWithAccess.mprd = LedDGV.CurrentRow.Cells[10].Value.ToString();
                    go_to_selected_period(ConnectionWithAccess.mprd);
                    if (Convert.ToDouble(LedDGV.CurrentRow.Cells[7].Value.ToString()) > 0)
                    {
                        subtabcash.SelectedIndex = 0;
                        //crdbc.SelectedValue.ToString() = "";
                        crdocno.Text = "";
                        //crdbc.SelectedValue.ToString() = LedDGV.CurrentRow.Cells[9].Value.ToString();
                        temp_d_c = Convert.ToInt32(LedDGV.CurrentRow.Cells[9].Value.ToString());
                        temp_a_n = LedDGV.CurrentRow.Cells[11].Value.ToString();
                        temp_s_a = LedDGV.CurrentRow.Cells[12].Value.ToString();
                        crdatetime.Value = Convert.ToDateTime(LedDGV.CurrentRow.Cells[3].Value.ToString());
                        crdocno.Text = LedDGV.CurrentRow.Cells[4].Value.ToString();
                        maintab_Click(sender, e);
                        subtabDataEntry_Click(sender, e);
                        subtabcash_Click(sender, e);
                    }
                    else
                    {
                        subtabcash.SelectedIndex = 1;
                        temp_word = LedDGV.CurrentRow.Cells[3].Value.ToString();
                        temp_word = temp_word.Substring(0, temp_word.IndexOf(" "));
                        cpdatetime.Value = Convert.ToDateTime(temp_word);
                        //cpdbc.SelectedValue.ToString() = null;
                        cpdocno.Text = "";
                        cpdbc.Items.Add(LedDGV.CurrentRow.Cells[9].Value.ToString());
                        cpdbc.SelectedIndex = 0;
                        temp_d_c = Convert.ToInt32(LedDGV.CurrentRow.Cells[9].Value.ToString());
                        temp_a_n = LedDGV.CurrentRow.Cells[11].Value.ToString();
                        temp_s_a = LedDGV.CurrentRow.Cells[12].Value.ToString();
                        cpdocno.Text = LedDGV.CurrentRow.Cells[4].Value.ToString();
                        maintab_Click(sender, e);
                        subtabDataEntry_Click(sender, e);
                        subtabcash_Click(sender, e);
                    }
                }
                else if (LedDGV.CurrentRow.Cells[5].Value.ToString() == "Jour")
                {
                    //maintab.SelectedIndex = 1;
                    //subtabDataEntry.SelectedIndex = 4;
                    //temp_prd = LedDGV.CurrentRow.Cells[10].Value.ToString();
                    //ConnectionWithAccess.mprd = LedDGV.CurrentRow.Cells[10].Value.ToString();
                    //go_to_selected_period(ConnectionWithAccess.mprd);
                    //jjdbc.Text = "";
                    //jjdocno.Text = "";
                    //jjdbc.Text = LedDGV.CurrentRow.Cells[9].Value.ToString();
                    //temp_d_c = Convert.ToInt32(LedDGV.CurrentRow.Cells[9].Value.ToString());
                    //temp_a_n = LedDGV.CurrentRow.Cells[11].Value.ToString();
                    //temp_s_a = LedDGV.CurrentRow.Cells[12].Value.ToString();
                    //jjdocno.Text = LedDGV.CurrentRow.Cells[4].Value.ToString();
                    //maintab_Click(sender, e);
                    //subtabDataEntry_Click(sender, e);
                    //subtabcash_Click(sender, e);


                    temp_d_n = Convert.ToInt32(LedDGV.CurrentRow.Cells[4].Value.ToString());
                    ConnectionWithAccess.mprd = LedDGV.CurrentRow.Cells[10].Value.ToString();
                    temp_d_c = Convert.ToInt32(LedDGV.CurrentRow.Cells[9].Value.ToString());
                    temp_a_n = LedDGV.CurrentRow.Cells[11].Value.ToString();
                    temp_s_a = LedDGV.CurrentRow.Cells[12].Value.ToString();
                    temp_d_d = Convert.ToDateTime(LedDGV.CurrentRow.Cells[3].Value.ToString());
                    move_tab_to_particular_location("JR", ConnectionWithAccess.mprd, temp_d_c, temp_d_n, temp_a_n, temp_s_a, temp_d_d);
                }
            }
        }

        private void move_tab_to_particular_location(string tab_func, string mprd, int md_c, int md_n, string ma_n, string ms_a, DateTime d_d)
        {
            if (tab_func == "SI")
            {
                fill_sidbc();
                go_to_selected_period(mprd);
                fill_si_sale_list();
                sidocno.Text = md_n.ToString();
                maintab.SelectedIndex = 1;
                subtabDataEntry.SelectedIndex = 0;
                populate_screen();
            }
            else if (tab_func == "BR")
            {
                subtabbank.SelectedIndex = 0;
                fill_brdbc();
                go_to_selected_period(mprd);
                brdbc.SelectedValue = temp_d_c;
                fill_bank_trans_list();
                brdocno.Text = "";
                brdatetime.Value = d_d;
                brdocno.Text = md_n.ToString();
                maintab.SelectedIndex = 1;
                subtabDataEntry.SelectedIndex = 2;
                subtabbank.SelectedIndex = 0;
            }
            else if (tab_func == "BP")
            {
                subtabbank.SelectedIndex = 1;
                fill_bpdbc();
                go_to_selected_period(mprd);
                bpdbc.SelectedValue = temp_d_c;
                fill_bank_trans_list();
                bpdocno.Text = "";
                bpdatetime.Value = d_d;
                bpdocno.Text = md_n.ToString();
                maintab.SelectedIndex = 1;
                subtabDataEntry.SelectedIndex = 2;
                subtabbank.SelectedIndex = 1;
            }
            else if (tab_func == "JR")
            {
                go_to_selected_period(mprd);
                fill_jjdbc();
                jjdbc.SelectedValue = temp_d_c;
                jjdbc.SelectedIndex = 0;
                //jjdbc.Text = temp_d_c.ToString();
                fill_jr_tran_list();
                jjdocno.Text = "";
                //bpdatetime.Value = d_d;
                jjdocno.Text = md_n.ToString();
                maintab.SelectedIndex = 1;
                subtabDataEntry.SelectedIndex = 4;
            }
        }

        private void oldcashreceiptentry()
        {
            if (crdbc.SelectedValue.ToString() != "")
            {
                ConnectionWithAccess.query = "select f24.d_d, f24.d_n, f1.[desc] as [Desc], f1.city, f24.camt, f24.mess, f24.a_n, f24.s_a from " + ConnectionWithAccess.tablename[24] + " f24  inner join " + ConnectionWithAccess.tablename[1] + " f1 on f24.a_n = f1.a_n and f24.s_a = f1.s_a where prd = '" + ConnectionWithAccess.mprd + "' and d_c = " + crdbc.SelectedValue.ToString() + " and d_n = " + crdocno.Text + " and f24.d_d = @D_D_Date";
                search_on_particular_date_in_select_query("@d_d_date", crdatetime.Value);
                DataTable dtData1 = ConnectionCommand.fGetDataTable();
                if (dtData1 != null && dtData1.Rows.Count > 0)
                {
                    if (dtData1.Rows[0][0] != null)
                    {
                        crdatetime.MinDate = Convert.ToDateTime(ConnectionWithAccess.com_start_date);
                        crdatetime.MaxDate = Convert.ToDateTime(ConnectionWithAccess.com_end_date);
                        crdatetime.Value = Convert.ToDateTime(dtData1.Rows[0][0].ToString());
                        crpartycode.Text = dtData1.Rows[0][2].ToString();
                        crpartycity.Text = dtData1.Rows[0][3].ToString();
                        cramt.Text = dtData1.Rows[0][4].ToString();
                        old_cash_receipt_amount = Convert.ToDouble(dtData1.Rows[0][4].ToString());
                        crcomm.Text = dtData1.Rows[0][5].ToString();
                        cra_n.Text = dtData1.Rows[0][6].ToString();
                        crs_a.Text = dtData1.Rows[0][7].ToString();
                        cr_master_acc_name.Text = common_account_head(cra_n.Text);
                        get_account_details_from_01(cra_n.Text, crs_a.Text);
                        get_account_details_from_04(cra_n.Text, crs_a.Text);
                        crpartyname.Text = account_detail_from_01[4] + " ," + account_detail_from_01[8];
                        crpartyaddress.Text = account_detail_from_04[4] + " ," + account_detail_from_04[5] + " ," + account_detail_from_04[6];
                        crpartycontact.Text = account_detail_from_04[17] + " ," + account_detail_from_04[18] + " ," + account_detail_from_04[19] + " ," + account_detail_from_04[20];
                        crpartybalance.Text = Convert.ToString(get_account_balance(cra_n.Text, crs_a.Text, Convert.ToString(crdatetime.Value)));
                        tb_cr_mobilenumber.Text = account_detail_from_04[17];
                        cramt.ReadOnly = false;
                    }
                }
                else
                {
                    tb_cr_mobilenumber.Text = "";
                    cramt.ReadOnly = true;
                    cra_n.Clear();
                    crs_a.Clear();
                    old_cash_receipt_amount = 0;
                    crpartyname.Text = null;
                    crpartyaddress.Text = null;
                    crpartycontact.Text = null;
                    crpartybalance.Text = null;
                    cramt.Text = "0.00";
                    crcomm.Text = null;
                    crcurcashbal.Text = null;
                    crpartycode.Text = null;
                    crpartycity.Text = null;
                    cr_master_acc_name.Text = "";
                }
                crcurcashbal.Text = Convert.ToString(get_cash_balance(ConnectionWithAccess.cash_a_n, "@@@", crdatetime.Value.ToString()));
            }
        }

        private void oldbankreceiptentry()
        {
            //ConnectionWithAccess.query = "select f23.d_d, f23.d_n, f1.[desc] as [Desc], f1.city, f23.bamt, f23.mess, f23.a_n, f23.s_a from " + ConnectionWithAccess.tablename[23] + " f23  inner join " + ConnectionWithAccess.tablename[1] + " f1 on f1.a_n = f23.a_n and f1.s_a = f23.s_a where f23.prd = '" + ConnectionWithAccess.mprd + "' and f23.d_c = " + brdbc.SelectedValue + " and f23.d_d = #" + brdatetime.Text + "# and f23.d_n = " + brdocno.Text + " and r_p = '2'";
            ConnectionWithAccess.query = "select f23.d_d, f23.d_n, f1.[desc] as [Desc], f1.city, f23.bamt, f23.mess, f23.a_n, f23.s_a from " + ConnectionWithAccess.tablename[23] + " f23  inner join " + ConnectionWithAccess.tablename[1] + " f1 on f23.a_n = f1.a_n and f23.s_a = f1.s_a where f23.prd = '" + ConnectionWithAccess.mprd + "' and f23.d_c = " + brdbc.SelectedValue.ToString() + " and f23.d_n = " + brdocno.Text + " and r_p = '2' and f1.d_y = '@@@' ";
            DataTable dtData1 = ConnectionCommand.fGetDataTable();
            if (dtData1 != null && dtData1.Rows.Count > 0)
            {
                if (dtData1.Rows[0][0] != null)
                {
                    brdatetime.MinDate = Convert.ToDateTime(ConnectionWithAccess.com_start_date);
                    brdatetime.MaxDate = Convert.ToDateTime(ConnectionWithAccess.com_end_date);
                    brdatetime.Value = Convert.ToDateTime(dtData1.Rows[0][0].ToString());
                    brpartycode.Text = dtData1.Rows[0][2].ToString();
                    brpartycity.Text = dtData1.Rows[0][3].ToString();
                    bramt.Text = dtData1.Rows[0][4].ToString();
                    old_bank_receipt_amount = Convert.ToDouble(dtData1.Rows[0][4].ToString());
                    brcomm.Text = dtData1.Rows[0][5].ToString();
                    bra_n.Text = dtData1.Rows[0][6].ToString();
                    brs_a.Text = dtData1.Rows[0][7].ToString();
                    br_master_acc_name.Text = common_account_head(bra_n.Text);
                    bramt.ReadOnly = false;
                }
            }
            else
            {
                tb_br_mobilenumber.Text = "";
                bramt.ReadOnly = true;
                bra_n.Clear();
                brs_a.Clear();
                old_cash_receipt_amount = 0;
                brpartyname.Text = null;
                brpartyaddress.Text = null;
                brpartycontact.Text = null;
                brpartyoverallbalance.Text = "0.00";
                bramt.Text = "0.00";
                brcomm.Text = null;
                brpartycode.Text = null;
                br_master_acc_name.Text = "";
            }
        }

        private void search_on_particular_date_in_select_query(string paramname, DateTime mdatetime)
        {
            List<ConnectionWithAccess.QueryParams> objParams = new List<ConnectionWithAccess.QueryParams>();
            ConnectionWithAccess.QueryParams ParamFrom = new ConnectionWithAccess.QueryParams();
            ParamFrom.paramName = paramname;
            ParamFrom.paramValue = mdatetime;
            objParams.Add(ParamFrom);
            ConnectionWithAccess.QueryParamList = objParams;
        }

        private void cb_emerg_full_period_CheckedChanged(object sender, EventArgs e)
        {
            //if (cb_emerg_full_period.Checked == true)
            //{
            //    cb_emerg_stop.Checked = true;
            //    cb_emerg_lock_period.Checked = true;
            //}
        }

        private void BalShDGV_DoubleClick(object sender, EventArgs e)
        {
            if (maintab.SelectedIndex == 3 && subtabreports.SelectedIndex == 2)
            {
                maintab.SelectedIndex = 3;
                maintab_Click(sender, e);
                subtabreports.SelectedIndex = 1;
                tbA_N.Text = BalShDGV.CurrentRow.Cells[1].Value.ToString();
                tbS_A.Text = BalShDGV.CurrentRow.Cells[2].Value.ToString();
                if (BalShDGV.CurrentRow.Cells[3].Value.ToString() != "")
                {
                    tb_ledger_account_name.Text = BalShDGV.CurrentRow.Cells[3].Value.ToString();
                    tb_ledger_account_city.Text = BalShDGV.CurrentRow.Cells[4].Value.ToString();
                }
                else
                {
                    tb_ledger_account_name.Text = BalShDGV.CurrentRow.Cells[6].Value.ToString();
                    tb_ledger_account_city.Text = BalShDGV.CurrentRow.Cells[7].Value.ToString();
                }
            }
        }

        private void UserListDG_CellClick(object sender, DataGridViewCellEventArgs e)
        {
            ConnectionWithAccess.muser = Convert.ToString(UserListDG.CurrentRow.Cells[0].Value);
            ConnectionWithAccess.mpassword = Convert.ToString(UserListDG.CurrentRow.Cells[1].Value);
            tbUserName.Text = Convert.ToString(UserListDG.CurrentRow.Cells[0].Value);
            tbPassword.Text = Convert.ToString(UserListDG.CurrentRow.Cells[1].Value);
            ConnectionWithAccess.mUserFeatures = Convert.ToString(UserListDG.CurrentRow.Cells[2].Value);
            //if (ConnectionWithAccess.muser != "admin" && ConnectionWithAccess.mpassword != "admin)
            //readusersettingsfromfiletoMemory(ConnectionWithAccess.muser, ConnectionWithAccess.mpassword);
            changestatusaspermemory();
        }

        private bool fValidateGSTNumberFormat(string strGSTNumber)
        {
            System.Text.RegularExpressions.Regex rGST = new System.Text.RegularExpressions.Regex("^[0-9]{2}[A-Z]{5}[0-9]{4}[A-Z]{1}[0-9]{1}[Z]{1}[A-Z,0-9]{1}$");
            if (rGST.IsMatch(strGSTNumber.Trim()))
                return true;
            else
                return false;

        }

        private void GenerateChart()
        {
            ConnectionWithAccess.query = "select prd, amt from " + ConnectionWithAccess.tablename[51] + " where a_n = '2010' and s_a = '@@@'";
            DataTable dtChartData = ConnectionCommand.fGetDataTable();
            if (dtChartData != null && dtChartData.Rows.Count > 0)
            {
                ctProfitLoss.Visible = true;
                //ctProfitLoss.Series.Add("test");
                ctProfitLoss.Series["Amount"].IsValueShownAsLabel = true;
                ctProfitLoss.Series["Amount"].XValueMember = "prd";
                ctProfitLoss.Series["Amount"].YValueMembers = "amt";
                ctProfitLoss.ChartAreas["ChartArea1"].AxisX.Interval = 1;
                ctProfitLoss.DataSource = dtChartData;
                ctProfitLoss.DataBind();
            }
            else
                ctProfitLoss.Visible = false;
        }

        private void filter_oms_purchase()
        {
            if (mix_reports_dgv.DataSource != null && mix_reports_dgv.Rows.Count > 0)
            {
                temp_word = ConnectionWithAccess.company_details[5].Trim().ToLower();
                DataTable dtReport = (DataTable)mix_reports_dgv.DataSource;
                if (dtReport != null && mix_reports_dgv.Rows.Count > 0)
                {
                    for (int i = dtReport.Rows.Count - 1; i >= 0; i--)
                    {
                        DataRow dr = dtReport.Rows[i];
                        if (dr["state"].ToString().ToLower() == temp_word)
                            dr.Delete();
                    }
                    //DataColumn dtCol = new DataColumn("SortOrder");
                    //dtReport.Columns.Add(dtCol);

                    //DataRow drTotalRow = dtReport.NewRow();

                    //string strPaymentTotal = dtReport.Compute("Sum(gamt)", "").ToString();
                    //drTotalRow[4] = "Total";
                    //drTotalRow[5] = strPaymentTotal;
                    //drTotalRow[9] = "1";

                    //dtReport.Rows.Add(drTotalRow);

                    //dtReport.DefaultView.Sort = "SortOrder ASC, " + strSortColumnOrder;

                    mix_reports_dgv.DataSource = null;
                    mix_reports_dgv.DataSource = dtReport;
                    //mix_reports_dgv.Columns["SortOrder"].Visible = false;
                }
            }
        }

        private void ledger_item_help_CellClick(object sender, DataGridViewCellEventArgs e)
        {
            lbl_ledger_master_account_name.Visible = false;
            btn_gen_ledg.Visible = true;
            ledger_type.Text = ledger_item_help.CurrentRow.Cells[0].Value.ToString();
            ledger_item_code.Text = ledger_item_help.CurrentRow.Cells[1].Value.ToString();
            tb_ledger_account_name.Text = ledger_item_help.CurrentRow.Cells[2].Value.ToString();
            ledger_item_help.Visible = false;
            btn_gen_ledg.Visible = true;
            move_cursor_to_button_position("btn_gen_ledg");
            btn_gen_ledg.Focus();
        }

        private void gdvreport_CellDoubleClick(object sender, DataGridViewCellEventArgs e)
        {
            if (gdvreport.ColumnCount > 0)
            {
                if (cbRepType.SelectedItem.Equals("Sale"))
                {
                    //sidbc.SelectedValue.ToString() = "";
                    //sidbc.SelectedValue.ToString() = gdvreport.CurrentRow.Cells[6].Value.ToString();
                    temp_d_c = Convert.ToInt32(gdvreport.CurrentRow.Cells[6].Value.ToString());
                    temp_a_n = gdvreport.CurrentRow.Cells[7].Value.ToString();
                    temp_s_a = gdvreport.CurrentRow.Cells[8].Value.ToString();
                    sidocno.Text = gdvreport.CurrentRow.Cells[1].Value.ToString();
                    maintab.SelectedIndex = 1;
                    maintab_Click(sender, e);
                    subtabDataEntry.SelectedIndex = 0;
                    subtabDataEntry_Click(sender, e);
                    populate_screen();
                }
                else if (cbRepType.SelectedItem.Equals("Purchase"))
                {
                    if (pidbc.Items.Count == 0)
                        fill_pidbc();
                    temp_d_c = Convert.ToInt32(gdvreport.CurrentRow.Cells[6].Value.ToString());
                    temp_a_n = gdvreport.CurrentRow.Cells[7].Value.ToString();
                    temp_s_a = gdvreport.CurrentRow.Cells[8].Value.ToString();
                    pia_n.Text = gdvreport.CurrentRow.Cells[7].Value.ToString();
                    pis_a.Text = gdvreport.CurrentRow.Cells[8].Value.ToString();
                    pidocno.Text = gdvreport.CurrentRow.Cells[1].Value.ToString();
                    maintab.SelectedIndex = 1;
                    maintab_Click(sender, e);
                    subtabDataEntry.SelectedIndex = 1;
                    subtabDataEntry_Click(sender, e);
                    populate_screen();
                }
            }
        }

        private void go_to_particular_purchase_invoice(string mprd, string md_c, string ma_n, string ms_a, int mdocno)
        {
            if (pidbc.Items.Count == null || pidbc.Items.Count == 0)
                fill_pidbc();
            temp_d_c = Convert.ToInt32(gdvreport.CurrentRow.Cells[6].Value.ToString());
            temp_a_n = gdvreport.CurrentRow.Cells[7].Value.ToString();
            temp_s_a = gdvreport.CurrentRow.Cells[8].Value.ToString();
            pia_n.Text = gdvreport.CurrentRow.Cells[7].Value.ToString();
            pis_a.Text = gdvreport.CurrentRow.Cells[8].Value.ToString();
            pidocno.Text = gdvreport.CurrentRow.Cells[1].Value.ToString();
            maintab.SelectedIndex = 1;
            //maintab_Click(sender, e);
            subtabDataEntry.SelectedIndex = 1;
            //subtabDataEntry_Click(sender, e);
            populate_screen();
        }

        private void EnableDisableDateControls(bool bEnabled, DateTimePicker dtFrom, DateTimePicker dtTo)
        {
            dtFrom.Enabled = bEnabled;
            dtTo.Enabled = bEnabled;
        }

        private void SetDateOnSelectedDateRange(ComboBox cmDateRange, DateTimePicker dtFrom, DateTimePicker dtTo)
        {
            if (last_date < Convert.ToDateTime(ConnectionWithAccess.medate))
                last_date = Convert.ToDateTime(ConnectionWithAccess.medate);
            DateTime dtPrdStartYear = Convert.ToDateTime(ConnectionWithAccess.msdate);
            DateTime dtPrdEndYear = Convert.ToDateTime(ConnectionWithAccess.medate);

            var today = DateTime.Today;
            int iYear = dtPrdStartYear.Year;

            switch (cmDateRange.Text)
            {
                case "Today":
                    dtFrom.Value = DateTime.Today;
                    dtTo.Value = DateTime.Today;
                    EnableDisableDateControls(false, dtFrom, dtTo);
                    break;
                case "Yesterday":
                    dtFrom.Value = DateTime.Today.AddDays(-1);
                    dtTo.Value = DateTime.Today.AddDays(-1);
                    EnableDisableDateControls(false, dtFrom, dtTo);
                    break;
                case "This Week":
                    dtFrom.Value = DateTime.Today.AddDays(-1 * (int)(DateTime.Today.DayOfWeek));
                    dtTo.Value = DateTime.Today;
                    EnableDisableDateControls(false, dtFrom, dtTo);
                    break;
                case "Last 7 Days":
                    dtFrom.Value = DateTime.Today.AddDays(-7);
                    dtTo.Value = DateTime.Today;
                    EnableDisableDateControls(false, dtFrom, dtTo);
                    break;
                case "Last 30 Days":
                    dtFrom.Value = DateTime.Today.AddDays(-30);
                    dtTo.Value = DateTime.Today;
                    EnableDisableDateControls(false, dtFrom, dtTo);
                    break;
                case "This Month":
                    dtFrom.Value = new DateTime(DateTime.Today.Year, DateTime.Today.Month, 1);
                    dtTo.Value = DateTime.Today;
                    EnableDisableDateControls(false, dtFrom, dtTo);
                    break;
                case "Last Month":
                    var month = new DateTime(today.Year, today.Month, 1);
                    var first = month.AddMonths(-1);
                    var last = month.AddDays(-1);

                    dtFrom.Value = first;
                    dtTo.Value = last;
                    EnableDisableDateControls(false, dtFrom, dtTo);
                    break;
                case "Custom Range":
                    if (DateTime.Today.Date >= dtPrdStartYear.Date && DateTime.Today.Date <= dtPrdEndYear.Date)
                    {
                        if ((subtabreports.SelectedIndex == 3 || subtabreports.SelectedIndex == 3) && DateTime.Today.Year == 2017) // its used for gst report start from july 2017
                            dtFrom.Value = Convert.ToDateTime("01/07/2017");
                        else
                        {
                            get_period_details_from_50(ConnectionWithAccess.mprd);
                            dtFrom.MaxDate = Convert.ToDateTime(ConnectionWithAccess.medate);
                            if (maintab.SelectedIndex == 3 && subtabreports.SelectedIndex == 1)
                                dtFrom.MinDate = Convert.ToDateTime(ConnectionWithAccess.com_start_date);
                            else
                                dtFrom.MinDate = Convert.ToDateTime(ConnectionWithAccess.msdate);
                            dtFrom.Value = dtPrdStartYear.Date;
                        }
                        dtTo.MaxDate = Convert.ToDateTime(ConnectionWithAccess.medate);
                        if (maintab.SelectedIndex == 3 && subtabreports.SelectedIndex == 1)
                            dtTo.MinDate = Convert.ToDateTime(dtFrom.MinDate);
                        else
                            dtTo.MinDate = Convert.ToDateTime(ConnectionWithAccess.msdate);
                        //dtFrom.Value = DateTime.Today;
                        if (last_date > DateTime.Today)
                            last_date = DateTime.Today;
                        dtTo.Value = last_date;
                    }
                    else
                    {
                        if (DateTime.Today.Date < dtPrdStartYear.Date)
                        {
                            dtFrom.Value = new DateTime(dtPrdStartYear.Year, 4, 1);
                            dtTo.Value = new DateTime(dtPrdStartYear.Year, 4, DateTime.DaysInMonth(dtPrdStartYear.Year, 4));
                        }
                        else
                        {
                            if (maintab.SelectedIndex == 3 && subtabreports.SelectedIndex == 1)
                            {
                                dtFrom.MaxDate = Convert.ToDateTime(ConnectionWithAccess.com_end_date);
                                dtTo.MaxDate = Convert.ToDateTime(ConnectionWithAccess.com_end_date);
                                dtFrom.Value = dtPrdStartYear.Date;
                                dtTo.Value = Convert.ToDateTime(ConnectionWithAccess.com_end_date);
                            }
                            else
                            {
                                dtFrom.Value = dtPrdStartYear.Date;
                                dtTo.Value = dtPrdEndYear.Date;
                            }
                        }
                    }
                    EnableDisableDateControls(true, dtFrom, dtTo);

                    break;
                case "January":
                    dtFrom.Value = new DateTime(dtPrdEndYear.Year, 1, 1);
                    DateTime dtToDate1 = new DateTime(dtPrdEndYear.Year, 1, DateTime.DaysInMonth(today.Year, 1));
                    if (dtToDate1.Date >= today.Date)
                        dtTo.Value = today.Date;
                    else
                        dtTo.Value = dtToDate1;
                    EnableDisableDateControls(false, dtFrom, dtTo);
                    break;
                case "February":
                    dtFrom.Value = new DateTime(dtPrdEndYear.Year, 2, 1);
                    DateTime dtToDate2 = new DateTime(dtPrdEndYear.Year, 2, DateTime.DaysInMonth(today.Year, 2));
                    if (dtToDate2.Date >= today.Date)
                        dtTo.Value = today.Date;
                    else
                        dtTo.Value = dtToDate2;
                    EnableDisableDateControls(false, dtFrom, dtTo);
                    break;
                case "March":
                    dtFrom.Value = new DateTime(dtPrdEndYear.Year, 3, 1);
                    DateTime dtToDate3 = new DateTime(dtPrdEndYear.Year, 3, DateTime.DaysInMonth(today.Year, 3));
                    if (dtToDate3.Date >= today.Date)
                        dtTo.Value = today.Date;
                    else
                        dtTo.Value = dtToDate3;
                    EnableDisableDateControls(false, dtFrom, dtTo);
                    break;
                case "April":
                    dtFrom.Value = new DateTime(iYear, 4, 1);
                    DateTime dtToDate4 = new DateTime(iYear, 4, DateTime.DaysInMonth(today.Year, 4));
                    if (dtToDate4.Date >= today.Date)
                        dtTo.Value = today.Date;
                    else
                        dtTo.Value = dtToDate4;
                    EnableDisableDateControls(false, dtFrom, dtTo);
                    break;
                case "May":
                    dtFrom.Value = new DateTime(iYear, 5, 1);
                    DateTime dtToDate5 = new DateTime(iYear, 5, DateTime.DaysInMonth(today.Year, 5));
                    if (dtToDate5.Date >= today.Date)
                        dtTo.Value = today.Date;
                    else
                        dtTo.Value = dtToDate5;
                    EnableDisableDateControls(false, dtFrom, dtTo);
                    break;
                case "June":
                    dtFrom.Value = new DateTime(iYear, 6, 1);
                    DateTime dtToDate6 = new DateTime(iYear, 6, DateTime.DaysInMonth(today.Year, 6));
                    if (dtToDate6.Date >= today.Date)
                        dtTo.Value = today.Date;
                    else
                        dtTo.Value = dtToDate6;
                    EnableDisableDateControls(false, dtFrom, dtTo);
                    break;
                case "July":
                    dtFrom.Value = new DateTime(iYear, 7, 1);
                    DateTime dtToDate7 = new DateTime(iYear, 7, DateTime.DaysInMonth(today.Year, 7));
                    if (dtToDate7.Date >= today.Date)
                        dtTo.Value = today.Date;
                    else
                        dtTo.Value = dtToDate7;
                    EnableDisableDateControls(false, dtFrom, dtTo);
                    break;
                case "August":
                    dtFrom.Value = new DateTime(iYear, 8, 1);
                    DateTime dtToDate8 = new DateTime(iYear, 8, DateTime.DaysInMonth(today.Year, 8));
                    if (dtToDate8.Date >= today.Date)
                        dtTo.Value = today.Date;
                    else
                        dtTo.Value = dtToDate8;
                    EnableDisableDateControls(false, dtFrom, dtTo);
                    break;
                case "September":
                    dtFrom.Value = new DateTime(iYear, 9, 1);
                    DateTime dtToDate9 = new DateTime(iYear, 9, DateTime.DaysInMonth(today.Year, 9));
                    if (dtToDate9.Date >= today.Date)
                        dtTo.Value = today.Date;
                    else
                        dtTo.Value = dtToDate9;
                    EnableDisableDateControls(false, dtFrom, dtTo);
                    break;
                case "October":
                    dtFrom.Value = new DateTime(iYear, 10, 1);
                    DateTime dtToDate10 = new DateTime(iYear, 10, DateTime.DaysInMonth(today.Year, 10));
                    if (dtToDate10.Date >= today.Date)
                        dtTo.Value = today.Date;
                    else
                        dtTo.Value = dtToDate10;
                    EnableDisableDateControls(false, dtFrom, dtTo);
                    break;
                case "November":
                    dtFrom.Value = new DateTime(iYear, 11, 1);
                    DateTime dtToDate11 = new DateTime(iYear, 11, DateTime.DaysInMonth(today.Year, 11));
                    if (dtToDate11.Date >= today.Date)
                        dtTo.Value = today.Date;
                    else
                        dtTo.Value = dtToDate11;
                    EnableDisableDateControls(false, dtFrom, dtTo);
                    break;
                case "December":
                    dtFrom.Value = new DateTime(iYear, 12, 1);
                    DateTime dtToDate12 = new DateTime(iYear, 12, DateTime.DaysInMonth(today.Year, 12));
                    if (dtToDate12.Date >= today.Date)
                        dtTo.Value = today.Date;
                    else
                        dtTo.Value = dtToDate12;
                    EnableDisableDateControls(false, dtFrom, dtTo);
                    break;
                case "Full Period":
                    dtFrom.MinDate = Convert.ToDateTime(ConnectionWithAccess.com_start_date);
                    dtFrom.Value = Convert.ToDateTime(ConnectionWithAccess.com_start_date);
                    if (Convert.ToDateTime(ConnectionWithAccess.medate) < Convert.ToDateTime(ConnectionWithAccess.com_end_date))
                    {
                        dtTo.MaxDate = Convert.ToDateTime(ConnectionWithAccess.com_end_date);
                        dtTo.Value = Convert.ToDateTime(ConnectionWithAccess.com_end_date);
                        //dtTo.MaxDate = Convert.ToDateTime(ConnectionWithAccess.medate);
                        //dtTo.Value = Convert.ToDateTime(ConnectionWithAccess.medate);
                    }
                    else
                    {
                        dtTo.MaxDate = Convert.ToDateTime(ConnectionWithAccess.com_end_date);
                        dtTo.Value = Convert.ToDateTime(ConnectionWithAccess.com_end_date);
                    }
                    EnableDisableDateControls(false, dtFrom, dtTo);
                    break;
            }
        }

        private void fSetDateRangeOnPeriodChange()
        {
            if (subtabreports.SelectedIndex == 1)
            {
                fPopulatecmbDateRange(cmbDateRangeLedger);
            }
            else if (subtabreports.SelectedIndex == 3)
            {
                fPopulatecmbDateRange(cmbDateRangeGST);
            }
            else if (subtabreports.SelectedIndex == 7)
            {
                fPopulatecmbDateRange(cmbDateRangeOut);
            }
        }

        string[] strDateRangeItems = { "Today", "Yesterday", "This Week", "Last 7 Days", "Last 30 Days", "This Month", "Last Month", "Custom Range" };
        string[] strDateRangeItemsPrevPeriod = { "Custom Range",
                                             "April", "May", "June", "July", "August", "September", "October", "November", "December", "January", "February", "March"};

        private void fPopulatecmbDateRange(ComboBox cmbDateRange)
        {
            cmbDateRange.Items.Clear();

            int iCurrentMonth = DateTime.Today.Month;
            int iMonthCouter = 0;
            int icurrentyear = DateTime.Today.Year;

            if (DateTime.Today.Date >= Convert.ToDateTime(ConnectionWithAccess.msdate).Date && DateTime.Today.Date <= Convert.ToDateTime(ConnectionWithAccess.medate).Date)
            {
                cmbDateRange.Items.AddRange(strDateRangeItems);

                if (iCurrentMonth < 4)
                    iMonthCouter = 12;
                else
                    iMonthCouter = iCurrentMonth;
                if ((subtabreports.SelectedIndex == 3 || subtabreports.SelectedIndex == 3) && icurrentyear == 2017) // its used for gst report start from july 2017
                {
                    for (int i = 7; i <= iMonthCouter; i++)
                    {
                        cmbDateRange.Items.Add(CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(i));
                    }
                }
                else
                {
                    for (int i = 4; i <= iMonthCouter; i++)
                    {
                        cmbDateRange.Items.Add(CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(i));
                    }
                }
                if (iCurrentMonth < 4)
                {
                    for (int i = 1; i <= iCurrentMonth; i++)
                    {
                        cmbDateRange.Items.Add(CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(i));
                    }
                }
            }
            else
            {
                cmbDateRange.Items.AddRange(strDateRangeItemsPrevPeriod);
            }
            if (maintab.SelectedIndex == 0)
            {
                cmbDateRange.Items.Add("Full Period");
                cmbDateRange.Text = "Full Period";
            }
            else
            {
                if (subtabreports.SelectedIndex == 1 || subtabreports.SelectedIndex == 7)
                {
                    cmbDateRange.Items.Add("Full Period");
                    cmbDateRange.Text = "Full Period";
                }
                else
                    cmbDateRange.Text = "Custom Range";
            }

        }

        private void sr_item_help_CellClick(object sender, DataGridViewCellEventArgs e)
        {
            mtype = Convert.ToString(sr_item_help.CurrentRow.Cells[0].Value);
            mitem_code = Convert.ToString(sr_item_help.CurrentRow.Cells[1].Value);
            ConnectionWithAccess.query = "select distinct [type], item_code, [title],price,igst_per,hsn_code from " + ConnectionWithAccess.tablename[03] + " where a_n = '" + sra_n.Text + "' and s_a = '" + srs_a.Text + "' and [type] = '" + mtype + "' and item_code = '" + mitem_code + "'";
            DataTable dtData1 = ConnectionCommand.fGetDataTable();
            if (dtData1 != null && dtData1.Rows.Count > 0)
            {
                if (dtData1.Rows[0][0] != null)
                {
                    sritemlist.CurrentRow.Cells[0].Value = dtData1.Rows[0][0].ToString();
                    sritemlist.CurrentRow.Cells[1].Value = dtData1.Rows[0][1].ToString();
                    sritemlist.CurrentRow.Cells[2].Value = dtData1.Rows[0][2].ToString();
                    sritemlist.CurrentRow.Cells[6].Value = dtData1.Rows[0][3].ToString();
                    if (dtData1.Rows[0][4].ToString() != "")
                        sritemlist.CurrentRow.Cells[7].Value = dtData1.Rows[0][4].ToString();
                    if (dtData1.Rows[0][5].ToString() != "")
                        sritemlist.CurrentRow.Cells[8].Value = dtData1.Rows[0][5].ToString();
                }
            }
            get_item_details_from_05_using_type_item_code(mtype, mitem_code);
            sritemlist.CurrentRow.Cells[0].Value = item_details_from_05[0];
            sritemlist.CurrentRow.Cells[1].Value = item_details_from_05[1];
            sritemlist.CurrentRow.Cells[2].Value = item_details_from_05[2];
            sritemlist.CurrentRow.Cells[3].Value = Convert.ToSingle(item_details_from_05[3]);
            sritemlist.CurrentRow.Cells[4].Value = Convert.ToSingle(item_details_from_05[4]);
            sritemlist.CurrentRow.Cells[5].Value = Convert.ToSingle(item_details_from_05[3]) * Convert.ToSingle(item_details_from_05[4]);
            mtitle = Convert.ToString(sritemlist.CurrentRow.Cells[2].Value);
            mcase = 1;
            mbox = Convert.ToDouble(item_details_from_05[3]);
            mqty = Convert.ToDouble(item_details_from_05[4]);
            mprice = Convert.ToDouble(item_details_from_05[5]);
            //sritemlist.CurrentRow.Cells[3].Value = 1;
            //sritemlist.CurrentRow.Cells[4].Value = 1;
            //sritemlist.CurrentRow.Cells[5].Value = mbox * mcase * mqty;
            if (sritemlist.CurrentRow.Cells[6].Value == null)
                sritemlist.CurrentRow.Cells[6].Value = mprice;
            else
                if (sritemlist.CurrentRow.Cells[6].Value == System.DBNull.Value)
                sritemlist.CurrentRow.Cells[6].Value = mprice.ToString();
            mamount = mcase * mbox * mqty * mprice;
            sritemlist.CurrentRow.Cells[7].Value = Convert.ToString(mamount);
            sritemlist.CurrentRow.Cells[8].Value = item_details_from_05[8];
            sritemlist.CurrentRow.Cells[9].Value = item_details_from_05[9];
            sritemlist.CurrentRow.Cells[10].Value = item_details_from_05[10];
            sr_item_help.Visible = false;
            calculateSalereplaceItemTotal();
            show_images();
        }

        #region Area



        private void save_area()
        {
            string strAreaCode = string.Empty;
            if (txtNewArea.Visible)
            {
                strAreaCode = txtNewArea.Text.Trim();

                ConnectionWithAccess.query = "select * from " + ConnectionWithAccess.tablename[2] + " f2 where f2.Area_Code = '" + strAreaCode + "' ";
                DataTable dtData = ConnectionCommand.fGetDataTable();
                if (dtData != null && dtData.Rows.Count > 0)
                {
                    MessageBox.Show("Area Code already exist, please enter unique Area Code");
                    return;
                }
            }
            else
                strAreaCode = cmbArea.Text.Trim();
            ConnectionWithAccess.query = "delete from " + ConnectionWithAccess.tablename[2] + " f2 where f2.Area_Code = '" + strAreaCode + "' ";
            ConnectionCommand.fUpdateInsertDeleteData();

            DataTable dtNewTable = ((DataTable)dgvArea.DataSource).Clone();
            dtNewTable = ((DataTable)dgvArea.DataSource);
            //dgvArea.Refresh();


            foreach (DataGridViewRow row in dgvArea.Rows)
            {
                DataGridViewCheckBoxCell chk = (DataGridViewCheckBoxCell)row.Cells[0];
                if (chk.Value != null)
                {
                    if (chk.Value.ToString().Trim() != "0")
                    {
                        if (chk.Value.ToString().Trim() == "1")
                        {
                            ConnectionWithAccess.query = "insert into " + ConnectionWithAccess.tablename[2] + " (Area_Code, City) values ('" + strAreaCode + "', '" + row.Cells[1].Value.ToString().Trim() + "' )";// f2.Area_Code = '" + strAreaCode + "' ";
                            ConnectionCommand.fUpdateInsertDeleteData();
                        }
                    }
                }
            }



            //for (row_counter = 0; row_counter < dgvArea.Rows.Count; row_counter++)
            //{
            //     DataGridViewCheckBoxCell chk = dgvArea.Rows[row_counter].Cells[0];
            //    if (chk.Selected == true)
            //    if (dgvArea.Rows[row_counter].Cells[0] == checked)
            //    //if ((row.Cells[0].Selected != null && row.Cells[0].Selected) || (row.Cells[0].Value != DBNull.Value && Convert.ToBoolean(row.Cells[0].Value)))
            //    {
            //        //ConnectionWithAccess.query = "insert into " + ConnectionWithAccess.tablename[2] + " (Area_Code, City) values ('" + strAreaCode + "', '" + row.Cells[1].Value.ToString().Trim() + "' )";// f2.Area_Code = '" + strAreaCode + "' ";
            //        ConnectionWithAccess.query = "insert into " + ConnectionWithAccess.tablename[2] + " (Area_Code, City) values ('" + strAreaCode + "', '" +dgvArea.Rows[row_counter].Cells[1].Value.ToString().Trim() + "' )";// f2.Area_Code = '" + strAreaCode + "' ";
            //        ConnectionCommand.fUpdateInsertDeleteData();
            //    }
            //}

            //foreach (DataGridViewRow row in dgvArea.Rows)
            //{
            //    //temp_word = row.Cells[1].Value.ToString();
            //    if ((row.Cells[0].Selected != null && row.Cells[0].Selected) || (row.Cells[0].Value != DBNull.Value && Convert.ToBoolean(row.Cells[0].Value)))
            //    {
            //        ConnectionWithAccess.query = "insert into " + ConnectionWithAccess.tablename[2] + " (Area_Code, City) values ('" + strAreaCode + "', '" + row.Cells[1].Value.ToString().Trim() + "' )";// f2.Area_Code = '" + strAreaCode + "' ";
            //        ConnectionCommand.fUpdateInsertDeleteData();
            //    }


            //}
            fFillAreaList(cmbArea);
            cmbArea.Text = strAreaCode;
            if (txtNewArea.Visible)
            {
                txtNewArea.Visible = false;
            }
            fFillAreaGrid();
            txtNewArea.Visible = false;
        }



        private void fFillAreaGrid()
        {
            dgvArea.DataSource = null;
            if (cmbArea.SelectedIndex != 0)
                ConnectionWithAccess.query = "select distinct (switch(f2.Area_Code = '" + cmbArea.Text.Trim() + "', 1, f2.Area_Code <> '" + cmbArea.Text.Trim() + "', 0, f2.Area_Code is null, 0) )   as AreaSelect, f2.Area_Code as Area,  f1.City from " + ConnectionWithAccess.tablename[1] + " f1 " +
                    "left outer join " + ConnectionWithAccess.tablename[2] + " f2 on f2.City = f1.City " +
                    "where f1.s_a <> '@@@' and f1.City <> '' order by (switch(f2.Area_Code = '" + cmbArea.Text.Trim() + "', 1, f2.Area_Code <> '" + cmbArea.Text.Trim() + "', 0, f2.Area_Code is null, 0) ) desc, f1.City ";
            else
                ConnectionWithAccess.query = "select distinct 0 as AreaSelect, f2.Area_Code as Area,  f1.City from " + ConnectionWithAccess.tablename[1] + " f1 " +
                   "left outer join " + ConnectionWithAccess.tablename[2] + " f2 on f2.City = f1.City " +
                   "where f1.s_a <> '@@@' and f1.City <> ''  order by f1.City ";
            DataTable dtCity = ConnectionCommand.fGetDataTable();
            if (dtCity != null)
            {
                dgvArea.AutoGenerateColumns = false;
                dgvArea.DataSource = dtCity;
            }
        }

        private void fFillAreaList(ComboBox m_cmbArea)
        {
            ConnectionWithAccess.query = "select distinct Area_Code from " + ConnectionWithAccess.tablename[2];
            DataTable dtCity = ConnectionCommand.fGetDataTable();
            if (dtCity != null)
            {
                DataRow drNewRow = dtCity.NewRow();
                drNewRow[0] = "";
                dtCity.Rows.InsertAt(drNewRow, 0);

                m_cmbArea.DataSource = dtCity;
                m_cmbArea.ValueMember = "Area_Code";
            }
        }
        #endregion Area

        protected void UserControl_ButtonClick(object sender, EventArgs e)
        {
            gdvreport.Visible = false;
            dgv_tax_report.Visible = false;
        }

        private void valid_gstr_number()
        {
            //           var regex = /^\d{2}\w{4}[a-zA-Z0-9]{1}\d{3}\w{1}[a-zA-Z0-9]{3}$/i;

            //if (regex.test('GSTNumber')) { console.log('valid'); }

        }

        private void cmbDateRangeMIX_SelectedIndexChanged(object sender, EventArgs e)
        {
            SetDateOnSelectedDateRange(cmbDateRangeMIX, mix_dt_from, mix_dt_to);
        }

        private void bp_dgv_gst_tax_brief_EditingControlShowing(object sender, DataGridViewEditingControlShowingEventArgs e)
        {
            e.Control.TextChanged += new EventHandler(textBox_TextChanged);
            cntObject = e.Control;
            cntObject.TextChanged += textBox_TextChanged;
        }

        private DataTable fGetOutstaningBalanceData_new(string strrla_n, string strrls_a)
        {
            DataTable dtTable = new DataTable();
            {
                ConnectionWithAccess.query = query_contains_for_ledger_account_union(strrla_n, strrls_a, (OutTo.Value).ToString());
                DataTable dtNewTable2 = ConnectionCommand.fGetDataTable();
                //dgvOutstanding.Visible = true;
                //contains_for_Outstanding_Report(strrla_n, strrls_a, (OutTo.Value).ToString());
                if (dtNewTable2.Rows.Count > 0)
                {
                    double iOutstandingBalance = 0;
                    get_account_details_from_01(strrla_n, strrls_a);
                    if (subtabreports.SelectedIndex == 0)
                    {
                        if (cmbDateRangeOut.Text != "Full Period")
                        {
                            if (Convert.ToDateTime(OutFrom.Text) > Convert.ToDateTime(ConnectionWithAccess.com_start_date))
                                delete_old_date_record(dgvOutstanding, 3, OutFrom.Text, strrla_n);
                        }
                    }
                    else if (subtabreports.SelectedIndex == 7)
                    {
                        if (cmbDateRangeOut.Text != "Full Period")
                        {
                            if (Convert.ToDateTime(OutFrom.Text) > Convert.ToDateTime(ConnectionWithAccess.com_start_date))
                                delete_old_date_record(dgvOutstanding, 3, OutFrom.Text, strrla_n);
                        }
                    }
                    DataTable dtNewTable = ((DataTable)dgvOutstanding.DataSource).Clone();

                    dtNewTable = ((DataTable)dgvOutstanding.DataSource);

                    if (dtNewTable.Rows.Count == 1)
                    {
                        double.TryParse(dtNewTable.Rows[0]["DEBIT"].ToString(), out iOutstandingBalance);
                        temp_word = Convert.ToDateTime(dtNewTable.Rows[0]["DATE"].ToString()).ToShortDateString();
                        temp_word1 = ConnectionWithAccess.ma_n + "," + ConnectionWithAccess.ms_a + "," + temp_word + "," + dtNewTable.Rows[0]["DOCUMENTS"].ToString() + "," + dtNewTable.Rows[0]["DEBIT"].ToString();
                        temporary_list_2.Add(temp_word1);
                    }
                    else if (dtNewTable.Rows.Count > 1)
                    {
                        DataView view = new DataView(dtNewTable);
                        DataColumnCollection columns = dtNewTable.Columns;
                        if (columns.Contains("Date"))
                        {
                            view.Sort = "[Date] asc";
                        }

                        DataTable dtNewTable1 = view.ToTable();

                        DataTable sortedTable = update_datatable_balances(dtNewTable1, 6, 7, 8);

                        string strTotalCol1 = getTotal_Datatable(sortedTable, 6);
                        string strTotalCol2 = getTotal_Datatable(sortedTable, 7);

                        //if (!string.IsNullOrEmpty(strTotalCol1) && !string.IsNullOrEmpty(strTotalCol2))
                        //{
                        //    DataRow drTotalRow = sortedTable.NewRow();
                        //    //drTotalRow[6] = strTotalCol1;
                        //    //drTotalRow[7] = strTotalCol2;
                        //    sortedTable.Rows.Add(drTotalRow);
                        //}

                        iOutstandingBalance = 0;
                        string strAccName = string.Empty;

                        if (sortedTable != null && sortedTable.Rows.Count > 1)
                        {
                            //strAccName = sortedTable.Rows[0]["ACC_NAME"].ToString();
                            double.TryParse(sortedTable.Rows[sortedTable.Rows.Count - 1]["balance"].ToString(), out iOutstandingBalance);
                            if (!chkBill.Checked && !cb_outstanding_bills.Checked)
                            {
                                DataTable dtSummary = new DataTable();
                                DataColumn dcName = new DataColumn("Name");
                                DataColumn dcCity = new DataColumn("City");
                                DataColumn dcBalance = new DataColumn("Balance");

                                dtSummary.Columns.Add(dcName);
                                dtSummary.Columns.Add(dcCity);
                                dtSummary.Columns.Add(dcBalance);

                                DataRow dtNewRow = dtSummary.NewRow();
                                dtNewRow["Name"] = account_detail_from_01[4];
                                dtNewRow["City"] = account_detail_from_01[8];
                                dtNewRow["Balance"] = iOutstandingBalance;

                                dtSummary.Rows.Add(dtNewRow);
                                dtTable = dtSummary;
                                temp_word = ConnectionWithAccess.ma_n + "," + ConnectionWithAccess.ms_a + "," + account_detail_from_01[4] + "," + account_detail_from_01[8] + "," + iOutstandingBalance;
                                temporary_list_2.Add(temp_word);
                            }
                            else
                            {
                                isRecord = 0;
                                for (row_counter = 0; row_counter < sortedTable.Rows.Count - 1; row_counter++)
                                {
                                    if (Convert.ToDouble(sortedTable.Rows[row_counter]["DEBIT"].ToString()) != 0.00)
                                    {
                                        isRecord = 1;
                                        row_counter = sortedTable.Rows.Count;
                                    }
                                }
                                if (isRecord == 1)
                                {
                                    //foreach (DataRow dr in sortedTable.Rows)
                                    //{
                                    //    temp_word = dr["date"].ToString();
                                    //    if (dr["date"].ToString() == "")
                                    //        dr[6] = "0.00";
                                    //}
                                    DataTable dtBills1 = sortedTable.Select("DEBIT > 0").CopyToDataTable();
                                    DataView view1 = new DataView(dtBills1);
                                    DataColumnCollection columns1 = dtBills1.Columns;
                                    if (columns1.Contains("Date"))
                                    {
                                        view1.Sort = "[Date] asc";
                                    }
                                    DataTable dtBills = view1.ToTable();
                                    //DataTable dtBills = sortedTable.Select("ACC_TYPE = 'Sale'").CopyToDataTable();
                                    if (dtBills != null && dtBills.Rows.Count > 0)
                                    {
                                        double iCurrSum = 0;
                                        DataTable dtBillList = dtBills.Clone();
                                        if (dtBills.Rows.Count > 2)
                                        {
                                            bool bLoop = true;
                                            int ibottomRow = dtBills.Rows.Count - 1;
                                            double iDebitSum = 0;
                                            List<int> iRowNum = new List<int>();
                                            while (bLoop)
                                            {
                                                if (iOutstandingBalance > iDebitSum && ibottomRow >= 0)
                                                    iCurrSum = Convert.ToDouble(dtBills.Rows[ibottomRow]["DEBIT"].ToString());
                                                if (iDebitSum < iOutstandingBalance)
                                                {
                                                    if (iCurrSum < (iOutstandingBalance - iDebitSum))
                                                    {
                                                        if (iDebitSum == 0 && iCurrSum > iOutstandingBalance)
                                                            temp_word2 = Math.Round(iOutstandingBalance, 2).ToString();
                                                        else
                                                            temp_word2 = Math.Round(iCurrSum, 2).ToString();
                                                    }
                                                    else
                                                        temp_word2 = Math.Round((iOutstandingBalance - iDebitSum), 2).ToString();
                                                    iDebitSum += iCurrSum;
                                                    iRowNum.Add(ibottomRow);
                                                    temp_word = Convert.ToDateTime(dtBills.Rows[ibottomRow]["DATE"].ToString()).ToShortDateString();
                                                    //temp_word1 = ConnectionWithAccess.ma_n + "," + ConnectionWithAccess.ms_a + "," + temp_word + "," + dtBills.Rows[ibottomRow]["DOCUMENTS"].ToString() + "," + dtBills.Rows[ibottomRow]["DEBIT"].ToString();
                                                    temp_word1 = ConnectionWithAccess.ma_n + "," + ConnectionWithAccess.ms_a + "," + temp_word + "," + dtBills.Rows[ibottomRow]["DOCUMENTS"].ToString() + "," + temp_word2;
                                                    temporary_list_2.Add(temp_word1);
                                                    ibottomRow = ibottomRow - 1;
                                                }
                                                else
                                                    bLoop = false;
                                            }
                                            for (int i = iRowNum.Count; i > 0; i--)
                                            {
                                                dtBillList.ImportRow(dtBills.Rows[iRowNum[i - 1]]);
                                            }
                                            dtTable = dtBillList;
                                        }
                                        else if (dtBills.Rows.Count == 2)
                                        {
                                            bool bLoop = true;
                                            int ibottomRow = dtBills.Rows.Count - 1;
                                            double iDebitSum = 0;
                                            List<int> iRowNum = new List<int>();
                                            while (bLoop)
                                            {
                                                if (iOutstandingBalance > iDebitSum && ibottomRow >= 0)
                                                    iCurrSum = Convert.ToDouble(dtBills.Rows[ibottomRow]["DEBIT"].ToString());
                                                if (iDebitSum < iOutstandingBalance)
                                                {
                                                    iDebitSum += iCurrSum;
                                                    iRowNum.Add(ibottomRow);
                                                    if (iDebitSum > iOutstandingBalance)
                                                        temp_double = iCurrSum - (iDebitSum - iOutstandingBalance);
                                                    else
                                                        temp_double = Convert.ToDouble(dtBills.Rows[ibottomRow]["DEBIT"].ToString());
                                                    temp_word = Convert.ToDateTime(dtBills.Rows[ibottomRow]["DATE"].ToString()).ToShortDateString();
                                                    temp_word1 = ConnectionWithAccess.ma_n + "," + ConnectionWithAccess.ms_a + "," + temp_word + "," + dtBills.Rows[ibottomRow]["DOCUMENTS"].ToString() + "," + temp_double.ToString();
                                                    temporary_list_2.Add(temp_word1);
                                                    ibottomRow = ibottomRow - 1;
                                                }
                                                else
                                                    bLoop = false;
                                            }
                                            for (int i = iRowNum.Count; i > 0; i--)
                                            {
                                                dtBillList.ImportRow(dtBills.Rows[iRowNum[i - 1]]);
                                            }
                                            dtTable = dtBillList;
                                        }
                                        else if (dtBills.Rows.Count == 1)
                                        {
                                            temp_word = Convert.ToDateTime(dtBills.Rows[0]["DATE"].ToString()).ToShortDateString();
                                            temp_word1 = ConnectionWithAccess.ma_n + "," + ConnectionWithAccess.ms_a + "," + temp_word + "," + dtBills.Rows[0]["DOCUMENTS"].ToString() + "," + iOutstandingBalance.ToString();
                                            temporary_list_2.Add(temp_word1);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            return dtTable;
        }

        private DataTable fGetOutstaningBalanceData(string strrla_n, string strrls_a, string end_date)
        {
            DataTable dtTable = new DataTable();
            {
                dgvOutstanding.Visible = true;
                contains_for_Outstanding_Report(strrla_n, strrls_a, end_date);
                if (dgvOutstanding.Columns.Count > 1)
                {
                    if (dgvOutstanding.Rows.Count > 0)
                    {
                        double iOutstandingBalance = 0;
                        get_account_details_from_01(strrla_n, strrls_a);
                        if (subtabreports.SelectedIndex == 0)
                        {
                            if (cbRepType.Text != "Outstanding Debitors")
                            {
                                if (Convert.ToDateTime(RepFrom.Text) > Convert.ToDateTime(ConnectionWithAccess.com_start_date))
                                    delete_old_date_record(dgvOutstanding, 3, RepFrom.Text, strrla_n);
                            }
                        }
                        else
                        {
                            if (cmbDateRangeOut.Text != "Full Period")
                            {
                                if (Convert.ToDateTime(RepFrom.Text) > Convert.ToDateTime(ConnectionWithAccess.com_start_date))
                                    delete_old_date_record(dgvOutstanding, 3, RepFrom.Text, strrla_n);
                            }
                        }
                        DataTable dtNewTable = ((DataTable)dgvOutstanding.DataSource).Clone();

                        dtNewTable = ((DataTable)dgvOutstanding.DataSource);

                        if (dtNewTable.Rows.Count == 1)
                        {
                            temp_word = "";
                            double.TryParse(dtNewTable.Rows[0]["DEBIT"].ToString(), out iOutstandingBalance);
                            temp_word = Convert.ToDateTime(dtNewTable.Rows[0]["DATE"].ToString()).ToShortDateString();
                            temp_word1 = ConnectionWithAccess.ma_n + "," + ConnectionWithAccess.ms_a + "," + temp_word + "," + dtNewTable.Rows[0]["DOCUMENTS"].ToString() + "," + dtNewTable.Rows[0]["balance"].ToString();
                            temporary_list_2.Add(temp_word1);
                        }
                        else if (dtNewTable.Rows.Count > 1)
                        {
                            DataView view = new DataView(dtNewTable);
                            DataColumnCollection columns = dtNewTable.Columns;
                            if (columns.Contains("Date"))
                            {
                                view.Sort = "[Date] asc";
                            }

                            DataTable dtNewTable1 = view.ToTable();

                            DataTable sortedTable = update_datatable_balances(dtNewTable1, 6, 7, 8);

                            string strTotalCol1 = getTotal_Datatable(sortedTable, 6);
                            string strTotalCol2 = getTotal_Datatable(sortedTable, 7);

                            //if (!string.IsNullOrEmpty(strTotalCol1) && !string.IsNullOrEmpty(strTotalCol2))
                            //{
                            //    DataRow drTotalRow = sortedTable.NewRow();
                            //    //drTotalRow[6] = strTotalCol1;
                            //    //drTotalRow[7] = strTotalCol2;
                            //    sortedTable.Rows.Add(drTotalRow);
                            //}

                            iOutstandingBalance = 0;
                            string strAccName = string.Empty;

                            if (sortedTable != null && sortedTable.Rows.Count > 1)
                            {
                                //strAccName = sortedTable.Rows[0]["ACC_NAME"].ToString();
                                double.TryParse(sortedTable.Rows[sortedTable.Rows.Count - 1]["balance"].ToString(), out iOutstandingBalance);
                                if (iOutstandingBalance > 0)
                                {
                                    if (!chkBill.Checked && !cb_outstanding_bills.Checked)
                                    {
                                        DataTable dtSummary = new DataTable();
                                        DataColumn dcName = new DataColumn("Name");
                                        DataColumn dcCity = new DataColumn("City");
                                        DataColumn dcBalance = new DataColumn("Balance");

                                        dtSummary.Columns.Add(dcName);
                                        dtSummary.Columns.Add(dcCity);
                                        dtSummary.Columns.Add(dcBalance);

                                        DataRow dtNewRow = dtSummary.NewRow();
                                        dtNewRow["Name"] = account_detail_from_01[4];
                                        dtNewRow["City"] = account_detail_from_01[8];
                                        dtNewRow["Balance"] = iOutstandingBalance;
                                        temp_word = "";
                                        dtSummary.Rows.Add(dtNewRow);
                                        dtTable = dtSummary;
                                        temp_word = ConnectionWithAccess.ma_n + "," + ConnectionWithAccess.ms_a + "," + account_detail_from_01[4] + "," + account_detail_from_01[8] + "," + iOutstandingBalance;
                                        temporary_list_2.Add(temp_word);
                                    }
                                    else
                                    {
                                        isRecord = 0;
                                        for (row_counter = 0; row_counter < sortedTable.Rows.Count - 1; row_counter++)
                                        {
                                            if (Convert.ToDouble(sortedTable.Rows[row_counter]["DEBIT"].ToString()) != 0.00)
                                            {
                                                isRecord = 1;
                                                row_counter = sortedTable.Rows.Count;
                                            }
                                        }
                                        if (isRecord == 1)
                                        {
                                            //foreach (DataRow dr in sortedTable.Rows)
                                            //{
                                            //    temp_word = dr["date"].ToString();
                                            //    if (dr["date"].ToString() == "")
                                            //        dr[6] = "0.00";
                                            //}
                                            DataTable dtBills1 = sortedTable.Select("DEBIT > 0").CopyToDataTable();
                                            DataView view1 = new DataView(dtBills1);
                                            DataColumnCollection columns1 = dtBills1.Columns;
                                            if (columns1.Contains("Date"))
                                            {
                                                view1.Sort = "[Date] asc";
                                            }
                                            DataTable dtBills = view1.ToTable();
                                            //DataTable dtBills = sortedTable.Select("ACC_TYPE = 'Sale'").CopyToDataTable();
                                            if (dtBills != null && dtBills.Rows.Count > 0)
                                            {
                                                double iCurrSum = 0;
                                                DataTable dtBillList = dtBills.Clone();
                                                if (dtBills.Rows.Count > 2)
                                                {
                                                    bool bLoop = true;
                                                    int ibottomRow = dtBills.Rows.Count - 1;
                                                    double iDebitSum = 0;
                                                    List<int> iRowNum = new List<int>();
                                                    while (bLoop)
                                                    {
                                                        if (iOutstandingBalance > iDebitSum && ibottomRow >= 0)
                                                            iCurrSum = Convert.ToDouble(dtBills.Rows[ibottomRow]["DEBIT"].ToString());
                                                        if (iDebitSum < iOutstandingBalance)
                                                        {
                                                            if (iCurrSum < (iOutstandingBalance - iDebitSum))
                                                            {
                                                                if (iDebitSum == 0 && iCurrSum > iOutstandingBalance)
                                                                    temp_word2 = Math.Round(iOutstandingBalance, 2).ToString();
                                                                else
                                                                    temp_word2 = Math.Round(iCurrSum, 2).ToString();
                                                            }
                                                            else
                                                                temp_word2 = Math.Round((iOutstandingBalance - iDebitSum), 2).ToString();
                                                            iDebitSum += iCurrSum;
                                                            if (ibottomRow > 0)
                                                            {
                                                                iRowNum.Add(ibottomRow);
                                                                temp_word = Convert.ToDateTime(dtBills.Rows[ibottomRow]["DATE"].ToString()).ToShortDateString();
                                                                //temp_word1 = ConnectionWithAccess.ma_n + "," + ConnectionWithAccess.ms_a + "," + temp_word + "," + dtBills.Rows[ibottomRow]["DOCUMENTS"].ToString() + "," + dtBills.Rows[ibottomRow]["DEBIT"].ToString();
                                                                temp_word1 = ConnectionWithAccess.ma_n + "," + ConnectionWithAccess.ms_a + "," + temp_word + "," + dtBills.Rows[ibottomRow]["DOCUMENTS"].ToString() + "," + temp_word2;
                                                                temporary_list_2.Add(temp_word1);
                                                            }
                                                            ibottomRow = ibottomRow - 1;
                                                        }
                                                        else
                                                            bLoop = false;
                                                    }
                                                    for (int i = iRowNum.Count; i > 0; i--)
                                                    {
                                                        dtBillList.ImportRow(dtBills.Rows[iRowNum[i - 1]]);
                                                    }
                                                    dtTable = dtBillList;
                                                }
                                                else if (dtBills.Rows.Count == 2)
                                                {
                                                    bool bLoop = true;
                                                    int ibottomRow = dtBills.Rows.Count - 1;
                                                    double iDebitSum = 0;
                                                    List<int> iRowNum = new List<int>();
                                                    while (bLoop)
                                                    {
                                                        if (iOutstandingBalance > iDebitSum && ibottomRow >= 0)
                                                            iCurrSum = Convert.ToDouble(dtBills.Rows[ibottomRow]["DEBIT"].ToString());
                                                        if (iDebitSum < iOutstandingBalance)
                                                        {
                                                            iDebitSum += iCurrSum;
                                                            iRowNum.Add(ibottomRow);
                                                            if (iDebitSum > iOutstandingBalance)
                                                                temp_double = iCurrSum - (iDebitSum - iOutstandingBalance);
                                                            else
                                                                temp_double = Convert.ToDouble(dtBills.Rows[ibottomRow]["DEBIT"].ToString());
                                                            temp_word = Convert.ToDateTime(dtBills.Rows[ibottomRow]["DATE"].ToString()).ToShortDateString();
                                                            temp_word1 = ConnectionWithAccess.ma_n + "," + ConnectionWithAccess.ms_a + "," + temp_word + "," + dtBills.Rows[ibottomRow]["DOCUMENTS"].ToString() + "," + temp_double.ToString();
                                                            temporary_list_2.Add(temp_word1);
                                                            ibottomRow = ibottomRow - 1;
                                                        }
                                                        else
                                                            bLoop = false;
                                                    }
                                                    for (int i = iRowNum.Count; i > 0; i--)
                                                    {
                                                        dtBillList.ImportRow(dtBills.Rows[iRowNum[i - 1]]);
                                                    }
                                                    dtTable = dtBillList;
                                                }
                                                else if (dtBills.Rows.Count == 1)
                                                {
                                                    temp_word = Convert.ToDateTime(dtBills.Rows[0]["DATE"].ToString()).ToShortDateString();
                                                    temp_word1 = ConnectionWithAccess.ma_n + "," + ConnectionWithAccess.ms_a + "," + temp_word + "," + dtBills.Rows[0]["DOCUMENTS"].ToString() + "," + iOutstandingBalance.ToString();
                                                    temporary_list_2.Add(temp_word1);
                                                }
                                            }
                                        }
                                    }
                                }
                                else
                                {
                                    if (iOutstandingBalance != 0)
                                    {
                                        temp_word = ConnectionWithAccess.ma_n + "," + ConnectionWithAccess.ms_a + "," + account_detail_from_01[4] + "," + account_detail_from_01[8] + "," + iOutstandingBalance;
                                        temporary_list_2.Add(temp_word);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            return dtTable;
        }

        private void generate_outstanding_list_only(DataTable dtDataOutstanding)
        {
            total_double = 0;
            if (cbRepType.Text == "Outstanding Debitors")
            {
                header_text_message = "Debitor's Outstainding Report [" + RepFrom.Value.ToShortDateString() + "-" + RepTo.Value.ToShortDateString() + "]" + " as on " + DateTime.Today.Date.ToShortDateString();
                pdf_filename = ConnectionWithAccess.data_drive + "acc\\" + ConnectionWithAccess.mNIK + "\\reports\\" + "Debitors_Outstanding_List" + "_" + cbrep_ana_d_c.SelectedValue.ToString();
            }
            else if (cbRepType.Text == "Outstanding Creditors")
            {
                header_text_message = "Creditor's Outstainding Report [" + RepFrom.Value.ToShortDateString() + "-" + RepTo.Value.ToShortDateString() + "]" + " as on " + DateTime.Today.Date.ToShortDateString();
                pdf_filename = ConnectionWithAccess.data_drive + "acc\\" + ConnectionWithAccess.mNIK + "\\reports\\" + "creditors_Outstanding_List" + "_" + cbrep_ana_d_c.SelectedValue.ToString();
            }
            else if (cbRepType.Text == "Debitors Advances")
            {
                header_text_message = "Debitor's Advance Report [" + RepFrom.Value.ToShortDateString() + "-" + RepTo.Value.ToShortDateString() + "]" + " as on " + DateTime.Today.Date.ToShortDateString();
                pdf_filename = ConnectionWithAccess.data_drive + "acc\\" + ConnectionWithAccess.mNIK + "\\reports\\" + "Debitors_Advance_List" + "_" + cbrep_ana_d_c.SelectedValue.ToString();
            }
            else if (cbRepType.Text == "Creditors Deposits")
            {
                header_text_message = "Creditor's Deposits Report [" + RepFrom.Value.ToShortDateString() + "-" + RepTo.Value.ToShortDateString() + "]" + " as on " + DateTime.Today.Date.ToShortDateString();
                pdf_filename = ConnectionWithAccess.data_drive + "acc\\" + ConnectionWithAccess.mNIK + "\\reports\\" + "Creditors_Deposit_List" + "_" + cbrep_ana_d_c.SelectedValue.ToString();
            }
            else if (cbRepType.Text == "Old Outstanding Debitors")
            {
                get_temp_start_end_period(ConnectionWithAccess.get_old_prd_name(ConnectionWithAccess.mprd));
                header_text_message = "Old Debitor's Outstainding Report [" + temp_start_period + "-" + temp_end_period + "]" + " as on " + DateTime.Today.Date.ToShortDateString();
                pdf_filename = ConnectionWithAccess.data_drive + "acc\\" + ConnectionWithAccess.mNIK + "\\reports\\" + "Old_Debitors_Outstanding_List" + "_" + ConnectionWithAccess.ma_n;
            }
            else if (cbRepType.Text == "Old Outstanding Creditors")
            {
                get_temp_start_end_period(ConnectionWithAccess.get_old_prd_name(ConnectionWithAccess.mprd));
                header_text_message = "Old Creditor's Outstainding Report [" + temp_start_period + "-" + temp_end_period + "]" + " as on " + DateTime.Today.Date.ToShortDateString();
                pdf_filename = ConnectionWithAccess.data_drive + "acc\\" + ConnectionWithAccess.mNIK + "\\reports\\" + "Old_Creditors_Outstanding_List" + "_" + ConnectionWithAccess.ma_n;
            }
            if (chb_add_datetime_in_output.Checked)
                pdf_filename += "_" + DateTime.Now.Day + "_" + DateTime.Now.Month + "_" + DateTime.Now.Year + "_" + DateTime.Now.TimeOfDay.Hours + "_" + DateTime.Now.TimeOfDay.Minutes;
            pdf_filename += ".pdf";
            doc1 = new Document(PageSize.A4, 5, 5, 5, 5);
            //pdf_filename = ConnectionWithAccess.remove_filename_error(pdf_filename);
            ConnectionWithAccess.create_file_folder(pdf_filename);
            FileStream FS1 = File.Create(pdf_filename);
            writer = PdfWriter.GetInstance(doc1, FS1);
            doc1.Open();
            current_pdf_page_number = 1;
            add_header_footer = true;
            pdf_top_heading = "          Sr.no                    Name    City                                                                                                  Amount ";
            Paragraph para = new Paragraph("");
            para.Font.Size = 25;
            for (array_counter1 = 0; array_counter1 < dtDataOutstanding.Rows.Count; array_counter1++)
            {
                temp_word = (array_counter1 + 1).ToString();
                print_pdf_line(cour_9, temp_word, para_IndentationLeft_position(0, temp_word, "cour_9"), 0);
                //var cellArray = temporary_list_1[array_counter1].Split(new[] { ',' });
                //get_account_details_from_01(dtDataOutstanding.Rows[array_counter1][1].ToString(), dtDataOutstanding.Rows[array_counter1][2].ToString());
                //temp_word = account_detail_from_01[4] + "," + account_detail_from_01[8];
                temp_word = dtDataOutstanding.Rows[array_counter1]["Desc"].ToString() + "," + dtDataOutstanding.Rows[array_counter1]["City"].ToString();
                print_pdf_line(cour_9, temp_word, 90, -16);
                temp_word = dtDataOutstanding.Rows[array_counter1][3].ToString();
                total_double += Convert.ToDouble(temp_word);
                temp_word = string.Format("{0:0.00}", Convert.ToDouble(temp_word));
                print_pdf_line(cour_9, temp_word, para_IndentationLeft_position(400, temp_word, "cour_11"), -18);
            }
            temp_word = "------------------";
            print_pdf_line(cour_9, temp_word, 420, 0);
            print_pdf_line(cour_9, "Total", 350, -7);
            temp_word = string.Format("{0:0.00}", total_double);
            print_pdf_line(cour_9_bold, temp_word, para_IndentationLeft_position(398, temp_word, "cour_9"), -16);
            temp_word = "==========";
            print_pdf_line(cour_9, temp_word, 420, -7);
            doc1.Close();
        }

        private void generate_outstanding_list_with_invoices_old()
        {
            total_double = 0;
            pdf_filename = ConnectionWithAccess.data_drive + "acc\\" + ConnectionWithAccess.mNIK + "\\reports\\" + "Outstanding_List" + "_" + rodbc.Text;
            if (chb_add_datetime_in_output.Checked)
                pdf_filename += "_" + DateTime.Now.Day + "_" + DateTime.Now.Month + "_" + DateTime.Now.Year + "_" + DateTime.Now.TimeOfDay.Hours + "_" + DateTime.Now.TimeOfDay.Minutes;
            pdf_filename += ".pdf";
            doc1 = new Document(PageSize.A4, 5, 5, 5, 5);
            ConnectionWithAccess.create_file_folder(pdf_filename);
            FileStream FS1 = File.Create(pdf_filename);
            writer = PdfWriter.GetInstance(doc1, FS1);
            doc1.Open();
            current_pdf_page_number = 1;
            add_header_footer = true;
            header_text_message = "Debitor's Outstainding Report [" + mix_dt_from.Value.ToShortDateString() + "-" + mix_dt_to.Value.ToShortDateString() + "]" + " as on " + DateTime.Today.Date.ToShortDateString();
            Paragraph para = new Paragraph("");
            para.Font.Size = 25;
            for (array_counter1 = 0; array_counter1 < temporary_list_1.Count(); array_counter1++)
            {
                temp_word = (array_counter1 + 1).ToString();
                print_pdf_line(cour_9, temp_word, para_IndentationLeft_position(-20, temp_word, "cour_9"), 0);
                var cellArray = temporary_list_1[array_counter1].Split(new[] { ',' });
                get_account_details_from_01(cellArray[1], cellArray[2]);
                temp_word = account_detail_from_01[4] + "," + account_detail_from_01[8];
                print_pdf_line(cour_9, temp_word, 70, -16);
                temp_word = cellArray[3].ToString();
                total_double += Convert.ToDouble(temp_word);
                temp_word = string.Format("{0:0.00}", Convert.ToDouble(temp_word));
                print_pdf_line(cour_9, temp_word, para_IndentationLeft_position(400, temp_word, "cour_9"), -16);
                for (array_counter2 = 0; array_counter2 < temporary_list_2.Count(); array_counter2++)
                {
                    var cellArray2 = temporary_list_2[array_counter2].Split(new[] { ',' });
                    if (cellArray[1].Trim() == cellArray2[0].Trim() && cellArray[2].Trim() == cellArray2[1].Trim())
                    {
                        temp_int = 0;
                        print_pdf_line(cour_9, cellArray2[3].ToString(), 100, 0);
                        print_pdf_line(cour_9, cellArray2[2].ToString(), 130, -16);
                        temp_datetime = Convert.ToDateTime(cellArray2[2]);
                        if (DateTime.Today.Date > temp_datetime)
                            temp_int = (DateTime.Today.Date - temp_datetime.Date).Days;
                        temp_word = "[" + temp_int.ToString() + "]";
                        print_pdf_line(cour_9_bold, temp_word, 185, -16);
                        temp_word = cellArray2[4];
                        temp_word = string.Format("{0:0.00}", Convert.ToDouble(temp_word));
                        if (temp_int <= 30)
                            print_pdf_line(cour_9, temp_word, para_IndentationLeft_position(200, temp_word, "cour_9"), -16);
                        else if (temp_int > 30 && temp_int <= 60)
                            print_pdf_line(cour_9, temp_word, para_IndentationLeft_position(240, temp_word, "cour_9"), -16);
                        else if (temp_int > 60 && temp_int <= 120)
                            print_pdf_line(cour_9, temp_word, para_IndentationLeft_position(280, temp_word, "cour_9"), -16);
                        else if (temp_int > 120)
                            print_pdf_line(cour_9, temp_word, para_IndentationLeft_position(320, temp_word, "cour_9"), -16);
                    }
                }

            }
            temp_word = "------------------";
            print_pdf_line(cour_9, temp_word, 420, 0);
            print_pdf_line(cour_9, "Total", 350, -7);
            temp_word = string.Format("{0:0.00}", total_double);
            print_pdf_line(cour_9_bold, temp_word, para_IndentationLeft_position(398, temp_word, "cour_9"), -16);
            temp_word = "==========";
            print_pdf_line(cour_9, temp_word, 420, -7);
            doc1.Close();
        }

        private void generate_outstanding_list_with_invoices(DataTable dtdataOutstanding)
        {
            total_double = 0;
            if (cbRepType.Text == "Outstanding Debitors")
            {
                header_text_message = "Debitor's Outstainding Report with Invoices [" + RepFrom.Value.ToShortDateString() + "-" + RepTo.Value.ToShortDateString() + "]" + " as on " + DateTime.Today.Date.ToShortDateString();
                pdf_filename = ConnectionWithAccess.data_drive + "acc\\" + ConnectionWithAccess.mNIK + "\\reports\\" + "Debitors_Outstanding_List_with_invoices" + "_" + cbrep_ana_d_c.SelectedValue.ToString();
            }
            else if (cbRepType.Text == "Outstanding Creditors")
            {
                header_text_message = "Creditor's Outstainding Report with Invoices [" + RepFrom.Value.ToShortDateString() + "-" + RepTo.Value.ToShortDateString() + "]" + " as on " + DateTime.Today.Date.ToShortDateString();
                pdf_filename = ConnectionWithAccess.data_drive + "acc\\" + ConnectionWithAccess.mNIK + "\\reports\\" + "creditors_Outstanding_List_List_with_invoices" + "_" + cbrep_ana_d_c.SelectedValue.ToString();
            }
            if (chb_add_datetime_in_output.Checked)
                pdf_filename += "_" + DateTime.Now.Day + "_" + DateTime.Now.Month + "_" + DateTime.Now.Year + "_" + DateTime.Now.TimeOfDay.Hours + "_" + DateTime.Now.TimeOfDay.Minutes;
            pdf_filename += ".pdf";
            doc1 = new Document(PageSize.A4, 5, 5, 5, 5);
            //pdf_filename = ConnectionWithAccess.remove_filename_error(pdf_filename);
            ConnectionWithAccess.create_file_folder(pdf_filename);
            FileStream FS1 = File.Create(pdf_filename);
            writer = PdfWriter.GetInstance(doc1, FS1);
            doc1.Open();
            current_pdf_page_number = 1;
            add_header_footer = true;
            header_text_message = report_filetype + " " + " From : " + RepFrom.Text + " to " + RepTo.Text;
            pdf_top_heading = "Sr.No        Doc.          Name                                                                                                                                   Balance";
            Paragraph para = new Paragraph();
            temp_word = " ";
            print_pdf_line(cour_9, temp_word, 55, -16);
            for (array_counter1 = 0; array_counter1 < dtdataOutstanding.Rows.Count; array_counter1++)
            {
                temp_word = (array_counter1 + 1).ToString();
                print_pdf_line(cour_9, temp_word, para_IndentationLeft_position(-35, temp_word, "cour_9"), 0);
                ConnectionWithAccess.ma_n = dtdataOutstanding.Rows[array_counter1]["a_n"].ToString();
                ConnectionWithAccess.ms_a = dtdataOutstanding.Rows[array_counter1]["s_a"].ToString();
                get_account_details_from_04(ConnectionWithAccess.ma_n, ConnectionWithAccess.ms_a);
                temp_word = dtdataOutstanding.Rows[array_counter1]["Desc"].ToString() + "," + dtdataOutstanding.Rows[array_counter1]["City"].ToString() + ", Mobile # [" + account_detail_from_04[17] + "]";
                print_pdf_line(cour_9, temp_word, 55, -16);
                temp_word = dtdataOutstanding.Rows[array_counter1][3].ToString();
                total_double += Convert.ToDouble(temp_word);
                temp_word = string.Format("{0:0.00}", Convert.ToDouble(temp_word));
                print_pdf_line(cour_9, temp_word, para_IndentationLeft_position(440, temp_word, "cour_9"), -16);
                lineno++;
                for (array_counter2 = 0; array_counter2 < temporary_list_2.Count(); array_counter2++)
                {
                    var cellArray2 = temporary_list_2[array_counter2].Split(new[] { ',' });
                    if (dtdataOutstanding.Rows[array_counter1][1].ToString().Trim() == cellArray2[0].Trim() && dtdataOutstanding.Rows[array_counter1][2].ToString().Trim() == cellArray2[1].Trim())
                    {
                        temp_int = 0;
                        print_pdf_line(cour_9, cellArray2[3].ToString(), 100, 0);
                        print_pdf_line(cour_9, cellArray2[2].ToString(), 130, -16);
                        temp_datetime = Convert.ToDateTime(cellArray2[2]);
                        if (DateTime.Today.Date > temp_datetime)
                            temp_int = (DateTime.Today.Date - temp_datetime.Date).Days;
                        temp_word = "[" + temp_int.ToString() + "]";
                        print_pdf_line(cour_9_bold, temp_word, 185, -16);
                        temp_word = cellArray2[4];
                        temp_word = string.Format("{0:0.00}", Convert.ToDouble(temp_word));
                        if (temp_int <= 30)
                            print_pdf_line(cour_9, temp_word, para_IndentationLeft_position(200, temp_word, "cour_9"), -16);
                        else if (temp_int > 30 && temp_int <= 60)
                            print_pdf_line(cour_9, temp_word, para_IndentationLeft_position(240, temp_word, "cour_9"), -16);
                        else if (temp_int > 60 && temp_int <= 120)
                            print_pdf_line(cour_9, temp_word, para_IndentationLeft_position(280, temp_word, "cour_9"), -16);
                        else if (temp_int > 120)
                            print_pdf_line(cour_9, temp_word, para_IndentationLeft_position(320, temp_word, "cour_9"), -16);
                        //lineno++;
                        //if (lineno >= 50)
                        //{
                        //    add_header_footer = true;
                        //    lineno = 0;
                        //}
                    }
                }
            }
            temp_word = "------------------";
            print_pdf_line(cour_9, temp_word, 460, 0);
            print_pdf_line(cour_9, "Total", 390, -7);
            temp_word = string.Format("{0:0.00}", total_double);
            print_pdf_line(cour_9_bold, temp_word, para_IndentationLeft_position(438, temp_word, "cour_9"), -16);
            temp_word = "==========";
            print_pdf_line(cour_9, temp_word, 460, -7);
            doc1.Close();
        }

        private void extract_outstanding_details_of_accounts(String end_date)
        {
            DataTable dtOutstandingReprot = fGetOutstaningBalanceData(ConnectionWithAccess.ma_n, ConnectionWithAccess.ms_a, end_date);
            if (dtOutstandingReprot != null && dtOutstandingReprot.Rows.Count > 0)
            {
                dgvOutstanding.DataSource = null;
                dgvOutstanding.DataSource = dtOutstandingReprot;
                if (chkBill.Checked || cb_outstanding_bills.Checked)
                    ConnectionCommand.hide_columns_of_datagridview(dgvOutstanding, "0,1,2");
            }
        }

        private DataTable get_list_of_debitors_outstanding_accounts(string mprd)
        {
            DataTable dtData1 = null;
            if (AFAnalysis.tbselacc.Text == "0 Selected" && AFAnalysis.tbreportcity.Text == "0 Selected" && AFAnalysis.tbreprotArea.Text == "0 Selected" && AFAnalysis.tbreportitems.Text == "0 Selected" && AFAnalysis.tbreporttax.Text == "0 Selected")
            {
                ConnectionWithAccess.query = "select f51.prd, f51.a_n, f51.s_a, f51.amt, f1.D_Y,f1.[DESC],f1.[ALIASS], f1.PROP, f1.PAN, f1.CITY, f1.COUNTRY, f1.PIN, f1.DIST, f1.STATE, f1.BUDGET, f1.DIS, f1.CRE_DAYS, f1.MRK, f1.SUB_GROUP, f1.BST, f1.BST_DT, f1.CST, f1.CST_DT, f1.REQ_LBT, f1.LBT_RATE, f1.MARK, f1.[USER], f1.[CURRENCY], f1.aadhar_card, f1.gst_number from " + ConnectionWithAccess.tablename[51] + " f51 " +
                " inner join " + ConnectionWithAccess.tablename[1] + " f1 on f1.a_n = f51.a_n " +
                " where f51.prd = '" + mprd + "' and  f51.a_n = '" + ConnectionWithAccess.ma_n + "' and  f51.s_a <> '@@@' and  f51.d_d = #01/01/1901# and  f51.amt > 0 and f1.s_a = f51.s_a and f1.d_y = '@@@' order by f51.a_n, f51.s_a";
                //ConnectionWithAccess.query = "select prd,a_n,s_a,amt from " + ConnectionWithAccess.tablename[51] + " where prd = '" + mprd+ "' and a_n = '" + ConnectionWithAccess.ma_n + "' and s_a <> '@@@' and d_d = #01/01/1901# and amt <> 0 order by a_n,s_a";
            }
            else
            {
                if (AFAnalysis.tbselacc.Text != "0 Selected")
                    ConnectionWithAccess.query = "select f51.prd, f51.a_n, f51.s_a, f51.amt, f1.D_Y,f1.[DESC],f1.[ALIASS], f1.PROP, f1.PAN, f1.CITY, f1.COUNTRY, f1.PIN, f1.DIST, f1.STATE, f1.BUDGET, f1.DIS, f1.CRE_DAYS, f1.MRK, f1.SUB_GROUP, f1.BST, f1.BST_DT, f1.CST, f1.CST_DT, f1.REQ_LBT, f1.LBT_RATE, f1.MARK, f1.[USER], f1.[CURRENCY], f1.aadhar_card, f1.gst_number  from " + ConnectionWithAccess.tablename[1] + " f1, " + ConnectionWithAccess.tablename[51] + " f51 where f51.a_n = '" + ConnectionWithAccess.ma_n + "' and f51.a_n = f1.a_n and f51.s_a = f1.s_a and f51.prd = '" + mprd + "' and f1.[desc] in (" + AFAnalysis.selectedPartyList + ") and f1.city in (" + AFAnalysis.selectedPartyCityList + ") and f51.d_d = #01/01/1901# and d_y = '@@@'and f51.amt <> 0";
                else if (AFAnalysis.tbreportcity.Text != "0 Selected")
                    ConnectionWithAccess.query = "select f51.prd, f51.a_n, f51.s_a, f51.amt, f1.D_Y,f1.[DESC],f1.[ALIASS], f1.PROP, f1.PAN, f1.CITY, f1.COUNTRY, f1.PIN, f1.DIST, f1.STATE, f1.BUDGET, f1.DIS, f1.CRE_DAYS, f1.MRK, f1.SUB_GROUP, f1.BST, f1.BST_DT, f1.CST, f1.CST_DT, f1.REQ_LBT, f1.LBT_RATE, f1.MARK, f1.[USER], f1.[CURRENCY], f1.aadhar_card, f1.gst_number  from " + ConnectionWithAccess.tablename[1] + " f1, " + ConnectionWithAccess.tablename[51] + " f51 where f51.a_n = '" + ConnectionWithAccess.ma_n + "' and f51.a_n = f1.a_n and f51.s_a = f1.s_a and f51.prd = '" + mprd + "' and f1.city in (" + AFAnalysis.selectedCityList + ") and f51.d_d = #01/01/1901# and d_y = '@@@' and f51.amt <> 0";
                else if (AFAnalysis.tbreprotArea.Text != "0 Selected")
                    ConnectionWithAccess.query = "select f51.prd,f51.a_n,f51.s_a,f51.amt, f1.D_Y,f1.[DESC],f1.[ALIASS], f1.PROP, f1.PAN, f1.CITY, f1.COUNTRY, f1.PIN, f1.DIST, f1.STATE, f1.BUDGET, f1.DIS, f1.CRE_DAYS, f1.MRK, f1.SUB_GROUP, f1.BST, f1.BST_DT, f1.CST, f1.CST_DT, f1.REQ_LBT, f1.LBT_RATE, f1.MARK, f1.[USER], f1.[CURRENCY], f1.aadhar_card, f1.gst_number  from " + ConnectionWithAccess.tablename[51] + " f51, " + ConnectionWithAccess.tablename[1] + " f1, " + ConnectionWithAccess.tablename[2] + " f2 where f51.a_n = f1.a_n and f51.s_a = f1.s_a and f2.city = f1.city and f51.prd = '" + mprd + "' and f51.a_n = '" + ConnectionWithAccess.ma_n + "' and f51.s_a <> '@@@' and f51.d_d = #01/01/1901# and f51.amt <> 0 and f2.Area_code in (" + AFAnalysis.selectedAreaList + ")  and d_y = '@@@' order by f51.a_n,f51.s_a";
                else if (AFAnalysis.tbreporttax.Text != "0 Selected")
                    ConnectionWithAccess.query = "select f51.prd, f51.a_n, f51.s_a, f51.amt, f1.D_Y,f1.[DESC],f1.[ALIASS], f1.PROP, f1.PAN, f1.CITY, f1.COUNTRY, f1.PIN, f1.DIST, f1.STATE, f1.BUDGET, f1.DIS, f1.CRE_DAYS, f1.MRK, f1.SUB_GROUP, f1.BST, f1.BST_DT, f1.CST, f1.CST_DT, f1.REQ_LBT, f1.LBT_RATE, f1.MARK, f1.[USER], f1.[CURRENCY], f1.aadhar_card, f1.gst_number  from " + ConnectionWithAccess.tablename[51] + " f51 inner join " + ConnectionWithAccess.tablename[1] + " f1 on f1.a_n = f51.a_n  where prd = '" + mprd + "' and a_n = '" + ConnectionWithAccess.ma_n + "' and s_a <> '@@@' and f21.tx_code in (" + AFAnalysis.selectedTaxList + ") and f51.d_d = #01/01/1901#  and f51.d_y = '@@@' and f51.amt <> 0 and f1.s_a = f51.s_a and f1.d_y = '@@@'";
            }
            dtData1 = ConnectionCommand.fGetDataTable();
            return dtData1;
        }

        private DataTable get_list_of_creditors_outstanding_accounts(string mprd)
        {
            DataTable dtData1 = null;
            if (AFOutstanding.tbselacc.Text == "0 Selected" && AFOutstanding.tbreportcity.Text == "0 Selected" && AFOutstanding.tbreprotArea.Text == "0 Selected" && AFOutstanding.tbreportitems.Text == "0 Selected" && AFOutstanding.tbreporttax.Text == "0 Selected")
                ConnectionWithAccess.query = "select f51.prd, f51.a_n, f51.s_a, (f51.amt * -1), f1.D_Y,f1.[DESC],f1.[ALIASS], f1.PROP, f1.PAN, f1.CITY, f1.COUNTRY, f1.PIN, f1.DIST, f1.STATE, f1.BUDGET, f1.DIS, f1.CRE_DAYS, f1.MRK, f1.SUB_GROUP, f1.BST, f1.BST_DT, f1.CST, f1.CST_DT, f1.REQ_LBT, f1.LBT_RATE, f1.MARK, f1.[USER], f1.[CURRENCY], f1.aadhar_card, f1.gst_number from " + ConnectionWithAccess.tablename[51] + " f51 inner join " + ConnectionWithAccess.tablename[1] + " f1 on f1.a_n = f51.a_n where f51.prd = '" + mprd + "' and  f51.a_n = '" + ConnectionWithAccess.ma_n + "' and  f51.s_a <> '@@@' and  f51.d_d = #01/01/1901# and  f51.amt < 0 and f1.s_a = f51.s_a and f1.d_y = '@@@' order by f51.a_n, f51.s_a";
            //ConnectionWithAccess.query = "select prd,a_n,s_a,amt from " + ConnectionWithAccess.tablename[51] + " where prd = '" + mprd + "' and a_n = '" + ConnectionWithAccess.ma_n + "' and s_a <> '@@@' and d_d = #01/01/1901# and amt <> 0 order by a_n,s_a";
            else
            {
                if (AFOutstanding.tbselacc.Text != "0 Selected")
                    ConnectionWithAccess.query = "select f51.prd, f51.a_n, f51.s_a, f51.amt, f1.D_Y,f1.[DESC],f1.[ALIASS], f1.PROP, f1.PAN, f1.CITY, f1.COUNTRY, f1.PIN, f1.DIST, f1.STATE, f1.BUDGET, f1.DIS, f1.CRE_DAYS, f1.MRK, f1.SUB_GROUP, f1.BST, f1.BST_DT, f1.CST, f1.CST_DT, f1.REQ_LBT, f1.LBT_RATE, f1.MARK, f1.[USER], f1.[CURRENCY], f1.aadhar_card, f1.gst_number  from " + ConnectionWithAccess.tablename[1] + " f1, " + ConnectionWithAccess.tablename[51] + " f51 where f51.a_n = '" + ConnectionWithAccess.ma_n + "' and f51.a_n = f1.a_n and f51.s_a = f1.s_a and f51.prd = '" + mprd + "' and f1.[desc] in (" + AFOutstanding.selectedPartyList + ") and f1.city in (" + AFOutstanding.selectedPartyCityList + ") and f51.d_d = #01/01/1901# and d_y = '@@@'and f51.amt <> 0";
                else if (AFOutstanding.tbreportcity.Text != "0 Selected")
                    ConnectionWithAccess.query = "select f51.prd, f51.a_n, f51.s_a, f51.amt, f1.D_Y,f1.[DESC],f1.[ALIASS], f1.PROP, f1.PAN, f1.CITY, f1.COUNTRY, f1.PIN, f1.DIST, f1.STATE, f1.BUDGET, f1.DIS, f1.CRE_DAYS, f1.MRK, f1.SUB_GROUP, f1.BST, f1.BST_DT, f1.CST, f1.CST_DT, f1.REQ_LBT, f1.LBT_RATE, f1.MARK, f1.[USER], f1.[CURRENCY], f1.aadhar_card, f1.gst_number  from " + ConnectionWithAccess.tablename[1] + " f1, " + ConnectionWithAccess.tablename[51] + " f51 where f51.a_n = '" + ConnectionWithAccess.ma_n + "' and f51.a_n = f1.a_n and f51.s_a = f1.s_a and f51.prd = '" + mprd + "' and f1.city in (" + AFOutstanding.selectedCityList + ") and f51.d_d = #01/01/1901# and d_y = '@@@' and f51.amt <> 0";
                else if (AFOutstanding.tbreprotArea.Text != "0 Selected")
                    ConnectionWithAccess.query = "select f51.prd,f51.a_n,f51.s_a,f51.amt, f1.D_Y,f1.[DESC],f1.[ALIASS], f1.PROP, f1.PAN, f1.CITY, f1.COUNTRY, f1.PIN, f1.DIST, f1.STATE, f1.BUDGET, f1.DIS, f1.CRE_DAYS, f1.MRK, f1.SUB_GROUP, f1.BST, f1.BST_DT, f1.CST, f1.CST_DT, f1.REQ_LBT, f1.LBT_RATE, f1.MARK, f1.[USER], f1.[CURRENCY], f1.aadhar_card, f1.gst_number  from " + ConnectionWithAccess.tablename[51] + " f51, " + ConnectionWithAccess.tablename[1] + " f1, " + ConnectionWithAccess.tablename[2] + " f2 where f51.a_n = f1.a_n and f51.s_a = f1.s_a and f2.city = f1.city and f51.prd = '" + mprd + "' and f51.a_n = '" + ConnectionWithAccess.ma_n + "' and f51.s_a <> '@@@' and f51.d_d = #01/01/1901# and f51.amt <> 0 and f2.Area_code in (" + AFOutstanding.selectedAreaList + ")  and d_y = '@@@' order by f51.a_n,f51.s_a";
                else if (AFOutstanding.tbreporttax.Text != "0 Selected")
                    ConnectionWithAccess.query = "select f51.prd, f51.a_n, f51.s_a, f51.amt, f1.D_Y,f1.[DESC],f1.[ALIASS], f1.PROP, f1.PAN, f1.CITY, f1.COUNTRY, f1.PIN, f1.DIST, f1.STATE, f1.BUDGET, f1.DIS, f1.CRE_DAYS, f1.MRK, f1.SUB_GROUP, f1.BST, f1.BST_DT, f1.CST, f1.CST_DT, f1.REQ_LBT, f1.LBT_RATE, f1.MARK, f1.[USER], f1.[CURRENCY], f1.aadhar_card, f1.gst_number  from " + ConnectionWithAccess.tablename[51] + " f51 inner join " + ConnectionWithAccess.tablename[1] + " f1 on f1.a_n = f51.a_n  where prd = '" + mprd + "' and a_n = '" + ConnectionWithAccess.ma_n + "' and s_a <> '@@@' and f21.tx_code in (" + AFOutstanding.selectedTaxList + ") and f51.d_d = #01/01/1901#  and f51.d_y = '@@@' and f51.amt <> 0 and f1.s_a = f51.s_a and f1.d_y = '@@@'";
            }
            dtData1 = ConnectionCommand.fGetDataTable();
            return dtData1;
        }

        private DataTable get_list_of_debitors_advances_accounts()
        {
            DataTable dtData1 = null;
            if (AFOutstanding.tbselacc.Text == "0 Selected" && AFOutstanding.tbreportcity.Text == "0 Selected" && AFOutstanding.tbreprotArea.Text == "0 Selected" && AFOutstanding.tbreportitems.Text == "0 Selected" && AFOutstanding.tbreporttax.Text == "0 Selected")
                ConnectionWithAccess.query = "select f51.prd, f51.a_n, f51.s_a, (f51.amt * -1), f1.D_Y,f1.[DESC],f1.[ALIASS], f1.PROP, f1.PAN, f1.CITY, f1.COUNTRY, f1.PIN, f1.DIST, f1.STATE, f1.BUDGET, f1.DIS, f1.CRE_DAYS, f1.MRK, f1.SUB_GROUP, f1.BST, f1.BST_DT, f1.CST, f1.CST_DT, f1.REQ_LBT, f1.LBT_RATE, f1.MARK, f1.[USER], f1.[CURRENCY], f1.aadhar_card, f1.gst_number from " + ConnectionWithAccess.tablename[51] + " f51 inner join " + ConnectionWithAccess.tablename[1] + " f1 on f1.a_n = f51.a_n where f51.prd = '" + ConnectionWithAccess.mprd + "' and  f51.a_n = '" + ConnectionWithAccess.ma_n + "' and  f51.s_a <> '@@@' and  f51.d_d = #01/01/1901# and  f51.amt < 0 and f1.s_a = f51.s_a and f1.d_y = '@@@' order by f51.a_n, f51.s_a";
            //ConnectionWithAccess.query = "select prd,a_n,s_a,amt from " + ConnectionWithAccess.tablename[51] + " where prd = '" + ConnectionWithAccess.mprd + "' and a_n = '" + ConnectionWithAccess.ma_n + "' and s_a <> '@@@' and d_d = #01/01/1901# and amt <> 0 order by a_n,s_a";
            else
            {
                if (AFOutstanding.tbselacc.Text != "0 Selected")
                    ConnectionWithAccess.query = "select f51.prd, f51.a_n, f51.s_a, f51.amt, f1.D_Y,f1.[DESC],f1.[ALIASS], f1.PROP, f1.PAN, f1.CITY, f1.COUNTRY, f1.PIN, f1.DIST, f1.STATE, f1.BUDGET, f1.DIS, f1.CRE_DAYS, f1.MRK, f1.SUB_GROUP, f1.BST, f1.BST_DT, f1.CST, f1.CST_DT, f1.REQ_LBT, f1.LBT_RATE, f1.MARK, f1.[USER], f1.[CURRENCY], f1.aadhar_card, f1.gst_number  from " + ConnectionWithAccess.tablename[1] + " f1, " + ConnectionWithAccess.tablename[51] + " f51 where f51.a_n = '" + ConnectionWithAccess.ma_n + "' and f51.a_n = f1.a_n and f51.s_a = f1.s_a and f51.prd = '" + ConnectionWithAccess.mprd + "' and f1.[desc] in (" + AFOutstanding.selectedPartyList + ") and f1.city in (" + AFOutstanding.selectedPartyCityList + ") and f51.d_d = #01/01/1901# and d_y = '@@@'and f51.amt <> 0";
                else if (AFOutstanding.tbreportcity.Text != "0 Selected")
                    ConnectionWithAccess.query = "select f51.prd, f51.a_n, f51.s_a, f51.amt, f1.D_Y,f1.[DESC],f1.[ALIASS], f1.PROP, f1.PAN, f1.CITY, f1.COUNTRY, f1.PIN, f1.DIST, f1.STATE, f1.BUDGET, f1.DIS, f1.CRE_DAYS, f1.MRK, f1.SUB_GROUP, f1.BST, f1.BST_DT, f1.CST, f1.CST_DT, f1.REQ_LBT, f1.LBT_RATE, f1.MARK, f1.[USER], f1.[CURRENCY], f1.aadhar_card, f1.gst_number  from " + ConnectionWithAccess.tablename[1] + " f1, " + ConnectionWithAccess.tablename[51] + " f51 where f51.a_n = '" + ConnectionWithAccess.ma_n + "' and f51.a_n = f1.a_n and f51.s_a = f1.s_a and f51.prd = '" + ConnectionWithAccess.mprd + "' and f1.city in (" + AFOutstanding.selectedCityList + ") and f51.d_d = #01/01/1901# and d_y = '@@@' and f51.amt <> 0";
                else if (AFOutstanding.tbreprotArea.Text != "0 Selected")
                    ConnectionWithAccess.query = "select f51.prd,f51.a_n,f51.s_a,f51.amt, f1.D_Y,f1.[DESC],f1.[ALIASS], f1.PROP, f1.PAN, f1.CITY, f1.COUNTRY, f1.PIN, f1.DIST, f1.STATE, f1.BUDGET, f1.DIS, f1.CRE_DAYS, f1.MRK, f1.SUB_GROUP, f1.BST, f1.BST_DT, f1.CST, f1.CST_DT, f1.REQ_LBT, f1.LBT_RATE, f1.MARK, f1.[USER], f1.[CURRENCY], f1.aadhar_card, f1.gst_number  from " + ConnectionWithAccess.tablename[51] + " f51, " + ConnectionWithAccess.tablename[1] + " f1, " + ConnectionWithAccess.tablename[2] + " f2 where f51.a_n = f1.a_n and f51.s_a = f1.s_a and f2.city = f1.city and f51.prd = '" + ConnectionWithAccess.mprd + "' and f51.a_n = '" + ConnectionWithAccess.ma_n + "' and f51.s_a <> '@@@' and f51.d_d = #01/01/1901# and f51.amt <> 0 and f2.Area_code in (" + AFOutstanding.selectedAreaList + ")  and d_y = '@@@' order by f51.a_n,f51.s_a";
                else if (AFOutstanding.tbreporttax.Text != "0 Selected")
                    ConnectionWithAccess.query = "select f51.prd, f51.a_n, f51.s_a, f51.amt, f1.D_Y,f1.[DESC],f1.[ALIASS], f1.PROP, f1.PAN, f1.CITY, f1.COUNTRY, f1.PIN, f1.DIST, f1.STATE, f1.BUDGET, f1.DIS, f1.CRE_DAYS, f1.MRK, f1.SUB_GROUP, f1.BST, f1.BST_DT, f1.CST, f1.CST_DT, f1.REQ_LBT, f1.LBT_RATE, f1.MARK, f1.[USER], f1.[CURRENCY], f1.aadhar_card, f1.gst_number  from " + ConnectionWithAccess.tablename[51] + " f51 inner join " + ConnectionWithAccess.tablename[1] + " f1 on f1.a_n = f51.a_n  where prd = '" + ConnectionWithAccess.mprd + "' and a_n = '" + ConnectionWithAccess.ma_n + "' and s_a <> '@@@' and f21.tx_code in (" + AFOutstanding.selectedTaxList + ") and f51.d_d = #01/01/1901#  and f51.d_y = '@@@' and f51.amt <> 0 and f1.s_a = f51.s_a and f1.d_y = '@@@'";
            }
            dtData1 = ConnectionCommand.fGetDataTable();
            return dtData1;
        }

        private DataTable get_list_of_creditors_deposits_accounts()
        {
            DataTable dtData1 = null;
            if (AFOutstanding.tbselacc.Text == "0 Selected" && AFOutstanding.tbreportcity.Text == "0 Selected" && AFOutstanding.tbreprotArea.Text == "0 Selected" && AFOutstanding.tbreportitems.Text == "0 Selected" && AFOutstanding.tbreporttax.Text == "0 Selected")
                ConnectionWithAccess.query = "select f51.prd, f51.a_n, f51.s_a, f51.amt, f1.D_Y,f1.[DESC],f1.[ALIASS], f1.PROP, f1.PAN, f1.CITY, f1.COUNTRY, f1.PIN, f1.DIST, f1.STATE, f1.BUDGET, f1.DIS, f1.CRE_DAYS, f1.MRK, f1.SUB_GROUP, f1.BST, f1.BST_DT, f1.CST, f1.CST_DT, f1.REQ_LBT, f1.LBT_RATE, f1.MARK, f1.[USER], f1.[CURRENCY], f1.aadhar_card, f1.gst_number from " + ConnectionWithAccess.tablename[51] + " f51 inner join " + ConnectionWithAccess.tablename[1] + " f1 on f1.a_n = f51.a_n where f51.prd = '" + ConnectionWithAccess.mprd + "' and  f51.a_n = '" + ConnectionWithAccess.ma_n + "' and  f51.s_a <> '@@@' and  f51.d_d = #01/01/1901# and  f51.amt > 0 and f1.s_a = f51.s_a and f1.d_y = '@@@' order by f51.a_n, f51.s_a";
            //ConnectionWithAccess.query = "select prd,a_n,s_a,amt from " + ConnectionWithAccess.tablename[51] + " where prd = '" + ConnectionWithAccess.mprd + "' and a_n = '" + ConnectionWithAccess.ma_n + "' and s_a <> '@@@' and d_d = #01/01/1901# and amt <> 0 order by a_n,s_a";
            else
            {
                if (AFOutstanding.tbselacc.Text != "0 Selected")
                    ConnectionWithAccess.query = "select f51.prd, f51.a_n, f51.s_a, f51.amt, f1.D_Y,f1.[DESC],f1.[ALIASS], f1.PROP, f1.PAN, f1.CITY, f1.COUNTRY, f1.PIN, f1.DIST, f1.STATE, f1.BUDGET, f1.DIS, f1.CRE_DAYS, f1.MRK, f1.SUB_GROUP, f1.BST, f1.BST_DT, f1.CST, f1.CST_DT, f1.REQ_LBT, f1.LBT_RATE, f1.MARK, f1.[USER], f1.[CURRENCY], f1.aadhar_card, f1.gst_number  from " + ConnectionWithAccess.tablename[1] + " f1, " + ConnectionWithAccess.tablename[51] + " f51 where f51.a_n = '" + ConnectionWithAccess.ma_n + "' and f51.a_n = f1.a_n and f51.s_a = f1.s_a and f51.prd = '" + ConnectionWithAccess.mprd + "' and f1.[desc] in (" + AFOutstanding.selectedPartyList + ") and f1.city in (" + AFOutstanding.selectedPartyCityList + ") and f51.d_d = #01/01/1901# and d_y = '@@@'and f51.amt > 0";
                else if (AFOutstanding.tbreportcity.Text != "0 Selected")
                    ConnectionWithAccess.query = "select f51.prd, f51.a_n, f51.s_a, f51.amt, f1.D_Y,f1.[DESC],f1.[ALIASS], f1.PROP, f1.PAN, f1.CITY, f1.COUNTRY, f1.PIN, f1.DIST, f1.STATE, f1.BUDGET, f1.DIS, f1.CRE_DAYS, f1.MRK, f1.SUB_GROUP, f1.BST, f1.BST_DT, f1.CST, f1.CST_DT, f1.REQ_LBT, f1.LBT_RATE, f1.MARK, f1.[USER], f1.[CURRENCY], f1.aadhar_card, f1.gst_number  from " + ConnectionWithAccess.tablename[1] + " f1, " + ConnectionWithAccess.tablename[51] + " f51 where f51.a_n = '" + ConnectionWithAccess.ma_n + "' and f51.a_n = f1.a_n and f51.s_a = f1.s_a and f51.prd = '" + ConnectionWithAccess.mprd + "' and f1.city in (" + AFOutstanding.selectedCityList + ") and f51.d_d = #01/01/1901# and d_y = '@@@' and f51.amt > 0";
                else if (AFOutstanding.tbreprotArea.Text != "0 Selected")
                    ConnectionWithAccess.query = "select f51.prd,f51.a_n,f51.s_a,f51.amt, f1.D_Y,f1.[DESC],f1.[ALIASS], f1.PROP, f1.PAN, f1.CITY, f1.COUNTRY, f1.PIN, f1.DIST, f1.STATE, f1.BUDGET, f1.DIS, f1.CRE_DAYS, f1.MRK, f1.SUB_GROUP, f1.BST, f1.BST_DT, f1.CST, f1.CST_DT, f1.REQ_LBT, f1.LBT_RATE, f1.MARK, f1.[USER], f1.[CURRENCY], f1.aadhar_card, f1.gst_number  from " + ConnectionWithAccess.tablename[51] + " f51, " + ConnectionWithAccess.tablename[1] + " f1, " + ConnectionWithAccess.tablename[2] + " f2 where f51.a_n = f1.a_n and f51.s_a = f1.s_a and f2.city = f1.city and f51.prd = '" + ConnectionWithAccess.mprd + "' and f51.a_n = '" + ConnectionWithAccess.ma_n + "' and f51.s_a <> '@@@' and f51.d_d = #01/01/1901# and f51.amt > 0 and f2.Area_code in (" + AFOutstanding.selectedAreaList + ")  and d_y = '@@@' order by f51.a_n,f51.s_a";
                else if (AFOutstanding.tbreporttax.Text != "0 Selected")
                    ConnectionWithAccess.query = "select f51.prd, f51.a_n, f51.s_a, f51.amt, f1.D_Y,f1.[DESC],f1.[ALIASS], f1.PROP, f1.PAN, f1.CITY, f1.COUNTRY, f1.PIN, f1.DIST, f1.STATE, f1.BUDGET, f1.DIS, f1.CRE_DAYS, f1.MRK, f1.SUB_GROUP, f1.BST, f1.BST_DT, f1.CST, f1.CST_DT, f1.REQ_LBT, f1.LBT_RATE, f1.MARK, f1.[USER], f1.[CURRENCY], f1.aadhar_card, f1.gst_number  from " + ConnectionWithAccess.tablename[51] + " f51 inner join " + ConnectionWithAccess.tablename[1] + " f1 on f1.a_n = f51.a_n  where prd = '" + ConnectionWithAccess.mprd + "' and a_n = '" + ConnectionWithAccess.ma_n + "' and s_a <> '@@@' and f21.tx_code in (" + AFOutstanding.selectedTaxList + ") and f51.d_d = #01/01/1901#  and f51.d_y = '@@@' and f51.amt > 0 and f1.s_a = f51.s_a and f1.d_y = '@@@'";
            }
            dtData1 = ConnectionCommand.fGetDataTable();
            return dtData1;
        }

        private void cmbDateRangeOut_SelectedIndexChanged(object sender, EventArgs e)
        {
            SetDateOnSelectedDateRange(cmbDateRangeOut, OutFrom, OutTo);
        }

        private void contains_for_Outstanding_Report(string ma_n, string ms_a, string end_date)
        {
            StringBuilder strQuery = new StringBuilder();

            ConnectionWithAccess.query = query_contains_for_ledger_account_union(ma_n, ms_a, end_date);// strQuery.ToString();
            ConnectionCommand.accountHelp_datatable_Seperate(dgvOutstanding, "Outstanding");
        }

        #region valuechanged

        private void bpdatetime_ValueChanged(object sender, EventArgs e)
        {
            if (maintab.SelectedIndex == 1)
            {
                bpchkdate.Value = bpdatetime.Value;
                bppassdate.Value = bpdatetime.Value;
            }
        }

        private void brdatetime_ValueChanged(object sender, EventArgs e)
        {
            brchkdate.Value = brdatetime.Value;
            brpassdate.Value = brdatetime.Value;
        }

        private void bddatetime_ValueChanged(object sender, EventArgs e)
        {
            bdamt.Focus();
        }

        private void bwdatetime_ValueChanged(object sender, EventArgs e)
        {
            bwamt.Focus();
        }

        private void RepFrom_ValueChanged(object sender, EventArgs e)
        {

        }

        private void tb_dataentry_stock_item_date_ValueChanged(object sender, EventArgs e)
        {
            ConnectionWithAccess.query = "select qty from " + ConnectionWithAccess.tablename[57] + " where type = '" + tb_dataentry_stock_item_type.Text + "' and item_code = '" + tb_dataentry_stock_item_code.Text + "' and d_d = #" + tb_dataentry_stock_item_date.Text + "#";
            DataTable dtData1 = ConnectionCommand.fGetDataTable();
            if (dtData1 != null && dtData1.Rows.Count > 0)
            {
                if (dtData1.Rows[0][0] != null)
                {
                    tb_dataentry_item_stock_quantity.Text = dtData1.Rows[0][0].ToString();
                }
                else
                    tb_dataentry_item_stock_quantity.Text = "0";
            }
            else
                tb_dataentry_item_stock_quantity.Text = "0";
        }

        private void sidatetime_ValueChanged(object sender, EventArgs e)
        {
            set_period_of_gst();
        }

        private void pidatetime_ValueChanged(object sender, EventArgs e)
        {
            if (maintab.SelectedIndex == 1 && subtabDataEntry.SelectedIndex == 1)
            {
                piitemlist.Enabled = true;
                pibasicamt.ReadOnly = false;
                set_period_of_gst();
            }
        }

        private void crdatetime_ValueChanged(object sender, EventArgs e)
        {
            if (crdbc.SelectedValue != null && crdbc.SelectedValue.ToString() != "")
            {
                temp_int = 0;
                ConnectionWithAccess.query = "select f24.d_d, f24.d_n, f1.[desc] as [Desc], f1.city, f24.camt, f24.mess, f24.a_n, f24.s_a from " + ConnectionWithAccess.tablename[24] + " f24  inner join " + ConnectionWithAccess.tablename[1] + " f1 on f24.a_n = f1.a_n and f24.s_a = f1.s_a where prd = '" + ConnectionWithAccess.mprd + "' and d_c = " + crdbc.SelectedValue.ToString() + " and f24.d_d = @D_D_Date order by d_n";
                search_on_particular_date_in_select_query("@d_d_date", crdatetime.Value);
                DataTable dtData1 = ConnectionCommand.fGetDataTable();
                if (dtData1 != null && dtData1.Rows.Count > 0)
                {
                    for (row_counter = 0; dtData1.Rows.Count > row_counter; row_counter++)
                    {
                        if (dtData1.Rows[row_counter][1] != null)
                            temp_int = Convert.ToInt32(dtData1.Rows[row_counter][1].ToString()) + 1;
                    }
                    crdocno.Text = temp_int.ToString();
                }
                else
                    crdocno.Text = "1";
            }
        }

        private void cpdatetime_ValueChanged(object sender, EventArgs e)
        {
            refresh_cash_document_number();
        }

        # endregion

        private void jj_dgv_gst_tax_brief_EditingControlShowing(object sender, DataGridViewEditingControlShowingEventArgs e)
        {
            e.Control.TextChanged += new EventHandler(textBox_TextChanged);
            cntObject = e.Control;
            cntObject.TextChanged += textBox_TextChanged;
        }

        private void generate_qr_code()
        {
            //if (textBox1.Text == "")
            //{
            //    MessageBox.Show("Please Enter Value ", "Error");
            //    textBox1.Focus();
            //}
            //else
            //{
            //    using (SaveFileDialog sv = new SaveFileDialog() { Filter = "JPEG|.jpg", ValidateNames = true })
            //    {
            //        if (sv.ShowDialog() == DialogResult.OK)
            //        {
            //            MessagingToolkit.QRCode.Codec.QRCodeEncoder encoder = new MessagingToolkit.QRCode.Codec.QRCodeEncoder();
            //            encoder.QRCodeScale = 8;
            //            string encoding = "UserName : " + textBox1.Text + "\r\n" + "CardNo : " + textBox2.Text + "\r\n" + "Address:" + textBox3.Text + "\r\n" + textBox5.Text;
            //            Bitmap bmp = encoder.Encode(encoding);
            //            pictureBox1.Image = bmp;
            //            bmp.Save(sv.FileName, ImageFormat.Jpeg);
            //        }

            //    }
            //}
        }

        bool bsoPartyChangeIgnore = false;

        private void dgvOutstanding_SelectionChanged(object sender, EventArgs e)
        {
            DataTable dtSaleList = null;
            dgvOutStandingItems.DataSource = null;
            if ((chkBill.Checked && chkBill_items.Checked) || (cb_outstanding_bills.Checked && cb_outstanding_bills_items.Checked))
            {
                if (dgvOutstanding.Rows.Count > 3)
                {
                    if (dgvOutstanding.CurrentRow.Cells["prd"].Value != null && !string.IsNullOrEmpty(dgvOutstanding.CurrentRow.Cells["prd"].Value.ToString()))
                    {
                        dtSaleList = fGetSaleDetails("S", dgvOutstanding.CurrentRow.Cells["prd"].Value.ToString(), Convert.ToInt32(dgvOutstanding.CurrentRow.Cells["d_c"].Value.ToString()), dgvOutstanding.CurrentRow.Cells["ACC_NAME"].Value.ToString(), dgvOutstanding.CurrentRow.Cells["s_a"].Value.ToString(), dgvOutstanding.CurrentRow.Cells["DOCUMENTS"].Value.ToString());
                        if (dtSaleList != null && dtSaleList.Rows.Count > 0)
                        {
                            dgvOutStandingItems.Visible = true;
                            dgvOutStandingItems.DataSource = dtSaleList;
                        }
                        else
                        {
                            dgvOutStandingItems.Visible = false;
                        }
                    }
                }
            }
        }

        private void ro_account_help_CellClick(object sender, DataGridViewCellEventArgs e)
        {
            rowIndex = ro_account_help.CurrentCell.RowIndex;
            ro_a_n.Text = ro_account_help.Rows[rowIndex].Cells[2].Value.ToString();
            ro_s_a.Text = ro_account_help.Rows[rowIndex].Cells[3].Value.ToString();
            tb_outstanding_acc_name.Text = ro_account_help.Rows[rowIndex].Cells[0].Value.ToString();
            tb_outstanding_acc_city.Text = ro_account_help.Rows[rowIndex].Cells[1].Value.ToString();
            show_images();
            ro_account_help.Visible = false;
            tb_outstanding_acc_name.Focus();
        }

        private void rodbc_SelectedIndexChanged(object sender, EventArgs e)
        {
            ConnectionWithAccess.ma_n = get_a_n_from_d_c("S", Convert.ToInt32(rodbc.Text));
            AFOutstanding.PartyListQuery = "select [desc],city,a_n,s_a from " + ConnectionWithAccess.tablename[1] + " f1 where f1.a_n = '" + ConnectionWithAccess.ma_n + "' and f1.s_a <> '@@@' order by [desc],city";
            AFOutstanding.CityListQuery = "select distinct [city] from " + ConnectionWithAccess.tablename[1] + " f1 where f1.a_n = '" + ConnectionWithAccess.ma_n + "' and f1.s_a <> '@@@' order by city";
            AFOutstanding.TaxListQuery = "select distinct f6.tx_code, f6.[desc] from " + ConnectionWithAccess.tablename[6] + " f6 where f6.d_c = " + rodbc.Text;
            AFOutstanding.AreaListQuery = "select distinct area_code from " + ConnectionWithAccess.tablename[2] + " order by area_code";
        }

        #region Bank Excel Upload

        public DataTable ExcelToDataTable(string strFilePath)
        {
            DataTable dtResult = new DataTable();
            DataColumn dcDate = new DataColumn("d_d", typeof(DateTime));
            DataColumn dcDesc = new DataColumn("Description");
            DataColumn dcDebitAmt = new DataColumn("DebitAmt");
            DataColumn dcCreditAmt = new DataColumn("CreditAmt");
            DataColumn dcValueDate = new DataColumn("ValueDate", typeof(DateTime));
            DataColumn dc_a_n = new DataColumn("a_n");
            DataColumn dc_s_a = new DataColumn("s_a");
            DataColumn dc_desc = new DataColumn("desc");
            DataColumn dc_city = new DataColumn("city");
            DataColumn dc_colour = new DataColumn("COLOUR");
            DataColumn dc_d_c = new DataColumn("d_c");
            DataColumn dc_d_n = new DataColumn("d_n");
            DataColumn dc_r_p = new DataColumn("r_p");

            dtResult.Columns.Add(dcDate);
            dtResult.Columns.Add(dcDesc);
            dtResult.Columns.Add(dcDebitAmt);
            dtResult.Columns.Add(dcCreditAmt);
            dtResult.Columns.Add(dcValueDate);
            dtResult.Columns.Add(dc_a_n);
            dtResult.Columns.Add(dc_s_a);
            dtResult.Columns.Add(dc_desc);
            dtResult.Columns.Add(dc_city);
            dtResult.Columns.Add(dc_colour);
            dtResult.Columns.Add(dc_d_c);
            dtResult.Columns.Add(dc_d_n);
            dtResult.Columns.Add(dc_r_p);

            Excel.Application xlApp = new Excel.Application();
            Excel.Workbook xlWorkbook = xlApp.Workbooks.Open(strFilePath);
            Excel._Worksheet xlWorksheet = xlWorkbook.Sheets[1];
            Excel.Range xlRange = xlWorksheet.UsedRange;

            int rowCount = xlRange.Rows.Count;
            int colCount = xlRange.Columns.Count;
            if (rowCount > 10)
            {
                bank_name = xlRange.Cells[1, 1].value;
                bank_account_number = xlRange.Cells[7, 1].value;
                bank_account_number = bank_account_number.ToString().Replace("Account Number :", "").Trim();
                temp_word = xlRange.Cells[10, 1].value;
                if (temp_word.Contains("IFSC Code"))
                    temp_word = xlRange.Cells[11, 1].value;
                temp_word1 = temp_word.Substring(31, 8);
                first_date = Convert.ToDateTime(temp_word1);
                //temp_word = xlRange.Cells[10, 1].value;
                temp_word1 = temp_word.Substring(43, 8);
                last_date = Convert.ToDateTime(temp_word1);
            }
            if (bank_name == "Bank Of Baroda")
            {
                ConnectionWithAccess.md_c = 0;
                ConnectionWithAccess.md_c = get_bank_d_c_from_account_number(bank_account_number);
                cb_BU_from_dc.SelectedValue = ConnectionWithAccess.md_c;
                if (ConnectionWithAccess.md_c > 0)
                {
                    if (first_date >= Convert.ToDateTime(ConnectionWithAccess.msdate) && last_date <= Convert.ToDateTime(ConnectionWithAccess.medate))
                    {
                        gb_bank_details.Visible = true;
                        //cb_BU_from_dc.SelectedIndex = rowIndex;
                        for (int i = 1; i <= rowCount; i++)
                        {
                            //temp_word = xlRange.Cells[i, 1].Value;
                            if (xlRange.Cells[i, 2].Value != null && !string.IsNullOrEmpty(xlRange.Cells[i, 2].Value.ToString()) && xlRange.Cells[i, 1].Value != null && xlRange.Cells[i, 1].Value.ToString() != "SrNo")
                            {//Add row to datatable
                                DataRow drNewRow = dtResult.NewRow();
                                drNewRow["d_d"] = Convert.ToDateTime(xlRange.Cells[i, 2].Value.ToString());
                                drNewRow["Description"] = xlRange.Cells[i, 3].Value.ToString();
                                if (xlRange.Cells[i, 6].Value.ToString().Trim().Equals("-"))
                                    drNewRow["DebitAmt"] = "0";
                                else
                                    drNewRow["DebitAmt"] = xlRange.Cells[i, 6].Value.ToString();
                                if (xlRange.Cells[i, 7].Value.ToString().Trim().Equals("-"))
                                    drNewRow["CreditAmt"] = "0";
                                else
                                    drNewRow["CreditAmt"] = xlRange.Cells[i, 7].Value.ToString();
                                drNewRow["ValueDate"] = Convert.ToDateTime(xlRange.Cells[i, 9].Value.ToString());
                                last_date = Convert.ToDateTime(xlRange.Cells[i, 9].Value.ToString());

                                dtResult.Rows.Add(drNewRow);
                            }
                            else
                                temp_word = xlRange.Cells[i, 1].Value;
                        }
                    }
                    else
                        MessageBox.Show("Sorry Statement Period & Selected Period does not Match");
                }
                else
                    MessageBox.Show("Sorry Statement does not Match with Bank Account Number");
            }
            else
                MessageBox.Show("Sorry Bank Excel Statement is of Different Process");
            lbl_bank_excel_period.Text = "From " + first_date.ToShortDateString() + " to " + last_date.ToShortDateString();
            cb_bank_show.SelectedIndex = 0;
            return dtResult;
        }

        DataTable dtAllData = null;

        private void fDeleteRowsFromDatable(DateTime row_datetime, double row_amt, string r_p)
        {
            DataRow[] drRowsToRemove = dtAllData.Select("ValueDate = '" + row_datetime + "' and bamt = " + row_amt + " and r_p = '" + r_p + "' ");
            foreach (DataRow drow in drRowsToRemove)
            {
                drow.Delete();//Mark a row for deletion.
            }
            dtAllData.AcceptChanges();
        }

        private void fDeleteRowsFromDatable_Dynamic(ref DataTable dtTable, string strConditions)
        {
            DataRow[] drRowsToRemove = dtTable.Select(strConditions);
            foreach (DataRow drow in drRowsToRemove)
            {
                drow.Delete();//Mark a row for deletion.
            }
            dtTable.AcceptChanges();
        }

        private DataTable fGetExcelData_with_Account_names_colour()
        {
            //btnBankExcelImport.Enabled = false;
            DataTable dtBank = null;
            pnlBankExcel.Visible = false;
            string strBankExcelFileName = string.Empty;
            OpenFileDialog openFileDialog = new OpenFileDialog();
            PleaseWait objPleaseWait = new PleaseWait("Please wait Collecting Data..");
            objPleaseWait.Show();
            Application.DoEvents();
            //openFileDialog.InitialDirectory = Environment.GetFolderPath(Environment.SpecialFolder.Personal);
            openFileDialog.Filter = "Text Files (*.xls)|*.xls|All Files (*.*)|*.*";
            if (openFileDialog.ShowDialog(this) == DialogResult.OK)
            {
                strBankExcelFileName = openFileDialog.FileName;
            }

            if (!string.IsNullOrEmpty(strBankExcelFileName))
            {
                dtBank = ExcelToDataTable(strBankExcelFileName);
                if (ConnectionWithAccess.md_c != 0)
                {
                    StringBuilder strQuery = new StringBuilder();
                    //strQuery.Append(" select f23.d_n, f23.d_d, f23.pass_date as [ValueDate], f1.[desc], f1.city, f23.bamt, f23.mess, f23.a_n, f23.s_a, switch(f23.bamt < 0, abs(bamt),true, 0 ) as DebitAmt, switch(f23.bamt >= 0, bamt,true, 0 )  as CreditAmt, r_p, 'Red' as colour, f23.d_c from " + ConnectionWithAccess.tablename[23] + " f23  inner join " + ConnectionWithAccess.tablename[1] + " f1 on f23.a_n = f1.a_n and f23.s_a = f1.s_a where f23.d_c = " + cb_BU_from_dc.SelectedValue.ToString() + " and r_p in ('1', '2', '3', '4') and f1.d_y = '@@@' and f23.d_d >= @From and f23.d_d <= @To order by f23.d_d UNION ALL");
                    //strQuery.Append(" select f23.d_n, f23.d_d, f23.pass_date as [ValueDate], f1.[desc], f1.city, f23.bamt, f23.mess, f23.a_n, f23.s_a, switch(f23.bamt < 0, abs(bamt),true, 0 ) as DebitAmt, switch(f23.bamt >= 0, bamt,true, 0 )  as CreditAmt, r_p, 'Red' as colour, f23.d_c from " + ConnectionWithAccess.tablename[23] + " f23  inner join " + ConnectionWithAccess.tablename[1] + " f1 on f23.a_n = f1.a_n and f23.s_a = f1.s_a where f23.TRAN_D_C = " + cb_BU_from_dc.SelectedValue.ToString() + " and r_p in ('1', '2', '3', '4') and f1.d_y = '@@@' and f23.d_d >= @From and f23.d_d <= @To order by f23.d_d ");
                    strQuery.Append(" select f23.d_n, f23.d_d, f23.pass_date as [ValueDate], f1.[desc], f1.city, f23.bamt, f23.mess, f23.a_n, f23.s_a, switch(f23.bamt < 0, abs(bamt),true, 0 ) as DebitAmt, switch(f23.bamt >= 0, bamt,true, 0 )  as CreditAmt, r_p, 'Red' as colour, f23.d_c from " + ConnectionWithAccess.tablename[23] + " f23  inner join " + ConnectionWithAccess.tablename[1] + " f1 on f23.a_n = f1.a_n and f23.s_a = f1.s_a where (f23.d_c = " + cb_BU_from_dc.SelectedValue.ToString() + " or  f23.TRAN_D_C = " + cb_BU_from_dc.SelectedValue.ToString() + ") and r_p in ('1', '2', '3', '4') and f1.d_y = '@@@' and f23.d_d >= @From and f23.d_d <= @To order by f23.d_d ");
                    ConnectionWithAccess.query = strQuery.ToString();

                    //ConnectionWithAccess.query = "select f23.d_n, f23.d_d, f23.pass_date as [ValueDate], f1.[desc], f1.city, f23.bamt, f23.mess, f23.a_n, f23.s_a, switch(f23.bamt < 0, abs(bamt),true, 0 ) as DebitAmt, switch(f23.bamt >= 0, bamt,true, 0 )  as CreditAmt, r_p, 'Red' as colour, f23.d_c from " + ConnectionWithAccess.tablename[23] + " f23  inner join " + ConnectionWithAccess.tablename[1] + " f1 on f23.a_n = f1.a_n and f23.s_a = f1.s_a where f23.d_c = " + cb_BU_from_dc.SelectedValue.ToString() + " and r_p in ('1', '2', '3', '4') and f1.d_y = '@@@' and f23.d_d >= @From and f23.d_d <= @To order by f23.d_d";
                    parameters_for_date_range(first_date.ToShortDateString(), last_date.ToShortDateString());
                    dtAllData = ConnectionCommand.fGetDataTable();
                    //dtBank = ExcelToDataTable(strBankExcelFileName);
                    if (dtBank != null && dtBank.Rows.Count > 0)
                    {
                        for (row_counter = 0; row_counter < dtBank.Rows.Count; row_counter++)
                        {
                            //if (row_counter == 62)
                            //    temp_word = "Sanjay";
                            //if (dtBank.Rows[row_counter]["CreditAmt"].ToString() == "75000.0")
                            //    temp_word = "sanjay";
                            //temp_word = Convert.ToDateTime(dtBank.Rows[row_counter]["ValueDate"].ToString());
                            temp_datetime = Convert.ToDateTime(dtBank.Rows[row_counter]["ValueDate"].ToString());
                            if (Convert.ToDouble(dtBank.Rows[row_counter]["DebitAmt"].ToString()) != 0)
                            {
                                //float.TryParse(dtBank.Rows[row_counter]["DebitAmt"].ToString(), out temp_double);
                                //temp_double = temp_double * -1;


                                temp_double = Convert.ToDouble(dtBank.Rows[row_counter]["DebitAmt"].ToString()) * -1;

                                //decimal decimalValue = Math.Round((decimal)temp_double, 1);
                                //temp_double =  (float)(Math.Round((double)temp_double, 2);
                                //Delete Row from datatable for which record found in Excel
                                fDeleteRowsFromDatable(temp_datetime, temp_double, "4");  // kunal float

                                //strQuery = new StringBuilder();
                                //strQuery.Append(" select f23.d_c, f23.d_n, f23.d_d, f1.[desc] as [Desc], f1.city, f23.bamt, f23.mess, f23.a_n, f23.s_a, f23.r_p from " + ConnectionWithAccess.tablename[23] + " f23  inner join " + ConnectionWithAccess.tablename[1] + " f1 on f23.a_n = f1.a_n and f23.s_a = f1.s_a where f23.d_c = " + cb_BU_from_dc.SelectedValue.ToString() + " and f23.r_p = '4' and f23.d_y = '@@@' and F23.PASS_DATE = @D_D_Date and f23.bamt = " + temp_double + " UNION ALL");
                                //strQuery.Append(" select f23.d_c, f23.d_n, f23.d_d, f1.[desc] as [Desc], f1.city, f23.bamt, f23.mess, f23.a_n, f23.s_a, f23.r_p from " + ConnectionWithAccess.tablename[23] + " f23  inner join " + ConnectionWithAccess.tablename[1] + " f1 on f23.a_n = f1.a_n and f23.s_a = f1.s_a where f23.TRAN_D_C = " + cb_BU_from_dc.SelectedValue.ToString() + " and f23.r_p = '4' and f23.d_y = '@@@' and F23.PASS_DATE = @D_D_Date and f23.bamt = " + temp_double + " ");
                                //ConnectionWithAccess.query = strQuery.ToString();

                                ConnectionWithAccess.query = "select f23.d_c, f23.d_n, f23.d_d, f1.[desc] as [Desc], f1.city, f23.bamt, f23.mess, f23.a_n, f23.s_a, f23.r_p from " + ConnectionWithAccess.tablename[23] + " f23  inner join " + ConnectionWithAccess.tablename[1] + " f1 on f23.a_n = f1.a_n and f23.s_a = f1.s_a where f23.d_c = " + cb_BU_from_dc.SelectedValue.ToString() + " and r_p = '4' and F23.PASS_DATE = @D_D_Date and f23.bamt = " + temp_double;
                                search_on_particular_date_in_select_query("@d_d_date", temp_datetime);
                                DataTable dtData1 = ConnectionCommand.fGetDataTable();
                                if (dtData1 != null && dtData1.Rows.Count > 0)
                                {
                                    if (dtData1.Rows.Count > 1)
                                        dtBank.Rows[row_counter]["Colour"] = "Blue";
                                    else
                                    {
                                        if (dtData1.Rows[0][0] != null)
                                        {
                                            update_bank_naration_in_access(Convert.ToInt32(cb_BU_from_dc.SelectedValue.ToString()), 0, "4", temp_datetime, temp_double, dtBank.Rows[row_counter]["Description"].ToString());
                                            dtBank.Rows[row_counter]["desc"] = dtData1.Rows[0]["desc"].ToString();
                                            dtBank.Rows[row_counter]["city"] = dtData1.Rows[0]["city"].ToString();
                                            dtBank.Rows[row_counter]["a_n"] = dtData1.Rows[0]["a_n"].ToString();
                                            dtBank.Rows[row_counter]["s_a"] = dtData1.Rows[0]["s_a"].ToString();
                                            dtBank.Rows[row_counter]["d_c"] = dtData1.Rows[0]["d_c"].ToString();
                                            dtBank.Rows[row_counter]["d_n"] = dtData1.Rows[0]["d_n"].ToString();
                                            dtBank.Rows[row_counter]["r_p"] = dtData1.Rows[0]["r_p"].ToString();
                                            //dgvBankExcelUpload.Rows[row_counter].Cells[e.ColumnIndex].Style.ForeColor = Color.Red;
                                            dtBank.Rows[row_counter]["Colour"] = "Green";
                                        }
                                    }
                                }
                                else
                                {
                                    //Delete Row from datatable for which record found in Excel
                                    fDeleteRowsFromDatable(temp_datetime, temp_double, "3");

                                    ConnectionWithAccess.query = "select f23.d_c, f23.d_n, f23.d_d, f1.[desc] as [Desc], f1.city, f23.bamt, f23.mess, f23.a_n, f23.s_a, f23.r_p from " + ConnectionWithAccess.tablename[23] + " f23  inner join " + ConnectionWithAccess.tablename[1] + " f1 on f23.a_n = f1.a_n and f23.s_a = f1.s_a where f23.prd = '" + ConnectionWithAccess.mprd + "' and f23.d_c = " + cb_BU_from_dc.SelectedValue.ToString() + " and r_p = '3' and F23.PASS_DATE = @D_D_Date and f23.bamt = " + temp_double;
                                    search_on_particular_date_in_select_query("@d_d_date", temp_datetime);
                                    dtData1 = ConnectionCommand.fGetDataTable();
                                    if (dtData1 != null && dtData1.Rows.Count > 0)
                                    {
                                        if (dtData1.Rows.Count > 1)
                                            dtBank.Rows[row_counter]["Colour"] = "Blue";
                                        else
                                        {
                                            if (dtData1.Rows[0][0] != null)
                                            {
                                                update_bank_naration_in_access(Convert.ToInt32(cb_BU_from_dc.SelectedValue.ToString()), 0, "3", temp_datetime, temp_double, dtBank.Rows[row_counter]["Description"].ToString());
                                                dtBank.Rows[row_counter]["desc"] = dtData1.Rows[0]["desc"].ToString();
                                                dtBank.Rows[row_counter]["city"] = dtData1.Rows[0]["city"].ToString();
                                                dtBank.Rows[row_counter]["a_n"] = dtData1.Rows[0]["a_n"].ToString();
                                                dtBank.Rows[row_counter]["s_a"] = dtData1.Rows[0]["s_a"].ToString();
                                                dtBank.Rows[row_counter]["d_c"] = dtData1.Rows[0]["d_c"].ToString();
                                                dtBank.Rows[row_counter]["d_n"] = dtData1.Rows[0]["d_n"].ToString();
                                                dtBank.Rows[row_counter]["r_p"] = dtData1.Rows[0]["r_p"].ToString();
                                                dtBank.Rows[row_counter]["Colour"] = "Green";
                                            }
                                        }
                                    }
                                }
                            }
                            else if (Convert.ToDouble(dtBank.Rows[row_counter]["CreditAmt"].ToString()) != 0)
                            {
                                temp_double = Convert.ToDouble(dtBank.Rows[row_counter]["CreditAmt"].ToString());

                                if (temp_double == 177000)
                                    temp_word = "sanjay";
                                //Delete Row from datatable for which record found in Excel
                                fDeleteRowsFromDatable(temp_datetime, temp_double, "2");

                                ConnectionWithAccess.query = "select f23.d_c, f23.d_n, f23.d_d, f1.[desc] as [Desc], f1.city, f23.bamt, f23.mess, f23.a_n, f23.s_a, f23.r_p from " + ConnectionWithAccess.tablename[23] + " f23  inner join " + ConnectionWithAccess.tablename[1] + " f1 on f23.a_n = f1.a_n and f23.s_a = f1.s_a where f23.d_c = " + cb_BU_from_dc.SelectedValue.ToString() + " and f23.r_p = '2' and f23.d_y = '@@@' and F23.PASS_DATE = @D_D_Date and f23.bamt = " + temp_double;
                                search_on_particular_date_in_select_query("@d_d_date", temp_datetime);
                                DataTable dtData1 = ConnectionCommand.fGetDataTable();
                                if (dtData1 != null && dtData1.Rows.Count > 0)
                                {
                                    if (dtData1.Rows.Count > 1)
                                        dtBank.Rows[row_counter]["Colour"] = "Blue";
                                    else
                                    {
                                        if (dtData1.Rows[0][0] != null)
                                        {
                                            update_bank_naration_in_access(Convert.ToInt32(cb_BU_from_dc.SelectedValue.ToString()), 0, "2", temp_datetime, temp_double, dtBank.Rows[row_counter]["Description"].ToString());
                                            dtBank.Rows[row_counter]["desc"] = dtData1.Rows[0]["desc"].ToString();
                                            dtBank.Rows[row_counter]["city"] = dtData1.Rows[0]["city"].ToString();
                                            dtBank.Rows[row_counter]["a_n"] = dtData1.Rows[0]["a_n"].ToString();
                                            dtBank.Rows[row_counter]["s_a"] = dtData1.Rows[0]["s_a"].ToString();
                                            dtBank.Rows[row_counter]["d_c"] = dtData1.Rows[0]["d_c"].ToString();
                                            dtBank.Rows[row_counter]["d_n"] = dtData1.Rows[0]["d_n"].ToString();
                                            dtBank.Rows[row_counter]["r_p"] = dtData1.Rows[0]["r_p"].ToString();
                                            dtBank.Rows[row_counter]["Colour"] = "Green";
                                        }
                                    }
                                }
                                else
                                {
                                    //Delete Row from datatable for which record found in Excel
                                    fDeleteRowsFromDatable(temp_datetime, temp_double, "1");

                                    ConnectionWithAccess.query = "select f23.d_c, f23.d_n, f23.d_d, f1.[desc] as [Desc], f1.city, f23.bamt, f23.mess, f23.a_n, f23.s_a, f23.r_p from " + ConnectionWithAccess.tablename[23] + " f23  inner join " + ConnectionWithAccess.tablename[1] + " f1 on f23.a_n = f1.a_n and f23.s_a = f1.s_a where f23.d_c = " + cb_BU_from_dc.SelectedValue.ToString() + " and r_p = '1' and f1.d_y = '@@@' and F23.PASS_DATE = @D_D_Date and f23.bamt = " + temp_double;
                                    search_on_particular_date_in_select_query("@d_d_date", temp_datetime);
                                    dtData1 = ConnectionCommand.fGetDataTable();
                                    if (dtData1 != null && dtData1.Rows.Count > 0)
                                    {
                                        if (dtData1.Rows.Count > 1)
                                            dtBank.Rows[row_counter]["Colour"] = "Blue";
                                        else
                                        {
                                            if (dtData1.Rows[0][0] != null)
                                            {
                                                update_bank_naration_in_access(Convert.ToInt32(cb_BU_from_dc.SelectedValue.ToString()), 0, "1", temp_datetime, temp_double, dtBank.Rows[row_counter]["Description"].ToString());
                                                dtBank.Rows[row_counter]["desc"] = dtData1.Rows[0]["desc"].ToString();
                                                dtBank.Rows[row_counter]["city"] = dtData1.Rows[0]["city"].ToString();
                                                dtBank.Rows[row_counter]["a_n"] = dtData1.Rows[0]["a_n"].ToString();
                                                dtBank.Rows[row_counter]["s_a"] = dtData1.Rows[0]["s_a"].ToString();
                                                dtBank.Rows[row_counter]["d_c"] = dtData1.Rows[0]["d_c"].ToString();
                                                dtBank.Rows[row_counter]["d_n"] = dtData1.Rows[0]["d_n"].ToString();
                                                dtBank.Rows[row_counter]["r_p"] = dtData1.Rows[0]["r_p"].ToString();
                                                dtBank.Rows[row_counter]["Colour"] = "Green";
                                            }
                                        }
                                    }
                                    else
                                    {
                                        temp_double = temp_double * -1;
                                        //Delete Row from datatable for which record found in Excel
                                        fDeleteRowsFromDatable(temp_datetime, temp_double, "4");

                                        ConnectionWithAccess.query = "select f23.d_c, f23.d_n, f23.d_d, f1.[desc] as [Desc], f1.city, f23.bamt, f23.mess, f23.a_n, f23.s_a, f23.r_p from " + ConnectionWithAccess.tablename[23] + " f23  inner join " + ConnectionWithAccess.tablename[1] + " f1 on f23.a_n = f1.a_n and f23.s_a = f1.s_a where f23.tran_d_c = " + cb_BU_from_dc.SelectedValue.ToString() + " and r_p = '4' and f1.d_y = '@@@' and F23.PASS_DATE = @D_D_Date and f23.bamt = " + temp_double;
                                        search_on_particular_date_in_select_query("@d_d_date", temp_datetime);
                                        dtData1 = ConnectionCommand.fGetDataTable();
                                        if (dtData1 != null && dtData1.Rows.Count > 0)
                                        {
                                            if (dtData1.Rows.Count > 1)
                                                dtBank.Rows[row_counter]["Colour"] = "Blue";
                                            else
                                            {
                                                if (dtData1.Rows[0][0] != null)
                                                {
                                                    update_bank_naration_in_access(0, Convert.ToInt32(cb_BU_from_dc.SelectedValue.ToString()), "4", temp_datetime, temp_double, dtBank.Rows[row_counter]["Description"].ToString());
                                                    dtBank.Rows[row_counter]["desc"] = dtData1.Rows[0]["desc"].ToString();
                                                    dtBank.Rows[row_counter]["city"] = dtData1.Rows[0]["city"].ToString();
                                                    dtBank.Rows[row_counter]["a_n"] = dtData1.Rows[0]["a_n"].ToString();
                                                    dtBank.Rows[row_counter]["s_a"] = dtData1.Rows[0]["s_a"].ToString();
                                                    dtBank.Rows[row_counter]["d_c"] = dtData1.Rows[0]["d_c"].ToString();
                                                    dtBank.Rows[row_counter]["d_n"] = dtData1.Rows[0]["d_n"].ToString();
                                                    dtBank.Rows[row_counter]["r_p"] = dtData1.Rows[0]["r_p"].ToString();
                                                    dtBank.Rows[row_counter]["Colour"] = "Green";
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            objPleaseWait.Close();
            return dtBank;
        }

        private void update_bank_naration_in_access(int md_c, int tran_d_c, string mr_p, DateTime mpass_date, double temp_float, string mbank_naration)
        {
            //ConnectionWithAccess.query = "select f23.d_c, f23.d_n, f23.d_d, f1.[desc] as [Desc], f1.city, f23.bamt, f23.mess, f23.a_n, f23.s_a, f23.r_p from " + ConnectionWithAccess.tablename[23] + " f23  inner join " + ConnectionWithAccess.tablename[1] + " f1 on f23.a_n = f1.a_n and f23.s_a = f1.s_a where f23.tran_d_c = " + cb_BU_from_dc.SelectedValue.ToString() + " and r_p = '4' and f1.d_y = '@@@' and F23.PASS_DATE = @D_D_Date and f23.bamt = " + temp_float;
            //ConnectionWithAccess.query = "delete from " + ConnectionWithAccess.tablename[24] + " where d_n  " + (crdocno.Text.Trim() == string.Empty ? "is null" : "= " + crdocno.Text.Trim()) + " and prd = '" + ConnectionWithAccess.mprd + "' and d_c = " + crdbc.SelectedValue.ToString() + " and r_p = '2' and d_d = @d_d_date";
            if (tran_d_c == 0)
                ConnectionWithAccess.query = "update " + ConnectionWithAccess.tablename[23] + " set bank_nara = '" + mbank_naration + "' WHERE d_c = " + md_c + " and  r_p = '" + mr_p + "' and PASS_DATE = @d_d_date AND bamt = " + temp_float;
            else
                ConnectionWithAccess.query = "update " + ConnectionWithAccess.tablename[23] + " set bank_nara = '" + mbank_naration + "' WHERE TRAN_D_C = " + tran_d_c + " and  r_p = '" + mr_p + "' and PASS_DATE = @d_d_date AND bamt = " + temp_float;
            search_on_particular_date_in_select_query("@d_d_date", mpass_date);
            ConnectionCommand.fUpdateInsertDeleteData();
            tran_d_c = 0;
        }

        private void dgvBankExcelAccName_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                bea_n.Text = dgvBankExcelAccName.CurrentRow.Cells[2].Value.ToString();
                bes_a.Text = Convert.ToString(dgvBankExcelAccName.CurrentRow.Cells[3].Value);
                txtBankAccountName.Text = Convert.ToString(dgvBankExcelAccName.CurrentRow.Cells[0].Value);
                dgvBankExcelAccName.Visible = false;
            }
        }

        private void fUploadBankDetails()
        {
            try
            {
                string str_naration = dgvBankExcelUpload.CurrentRow.Cells[3].Value.ToString();
                if (!str_naration.ToUpper().Contains("CASH"))
                {
                    double debitAmount = Convert.ToDouble(dgvBankExcelUpload.CurrentRow.Cells["DebitAmt"].Value.ToString());
                    double creditAmount = Convert.ToDouble(dgvBankExcelUpload.CurrentRow.Cells["CreditAmt"].Value.ToString());
                    //string strd_n = string.Empty;// dgRow.Cells[2].Value.ToString();
                    string strd_n = dgvBankExcelUpload.CurrentRow.Cells[13].Value.ToString();
                    string strd_d = dgvBankExcelUpload.CurrentRow.Cells[1].Value.ToString();
                    string strPassDate = dgvBankExcelUpload.CurrentRow.Cells["ValueDate"].Value.ToString();
                    if (debitAmount > 0)
                    {
                        ConnectionWithAccess.query = "delete from " + ConnectionWithAccess.tablename[23] + " where d_n  " + (strd_n.Trim() == string.Empty ? "is null" : "= " + strd_n.Trim()) + " and prd = '" + ConnectionWithAccess.mprd + "' and d_c = " + Convert.ToInt32(cb_BU_from_dc.SelectedValue.ToString()) + " and r_p = '4' and pass_date = @PassDate ";
                        search_on_particular_date_in_select_query("@PassDate", Convert.ToDateTime(strPassDate));
                        ConnectionCommand.fUpdateInsertDeleteData();
                    }
                    else if (creditAmount > 0)
                    {
                        ConnectionWithAccess.query = "delete from " + ConnectionWithAccess.tablename[23] + " where d_n  " + (strd_n.Trim() == string.Empty ? "is null" : "= " + strd_n.Trim()) + " and prd = '" + ConnectionWithAccess.mprd + "' and d_c = " + Convert.ToInt32(cb_BU_from_dc.SelectedValue.ToString()) + " and r_p = '2' and pass_date = @PassDate ";
                        search_on_particular_date_in_select_query("@PassDate", Convert.ToDateTime(strPassDate));
                        ConnectionCommand.fUpdateInsertDeleteData();
                    }


                    string strPeriod = ConnectionWithAccess.mprd;
                    string strd_c = cb_BU_from_dc.SelectedValue.ToString();
                    string strTran_d_c;
                    //if (cb_BU_from_dc.SelectedValue.ToString() != cb_BU_to_dc.SelectedValue.ToString())
                    //    strTran_d_c = cb_BU_to_dc.SelectedValue.ToString();
                    //else
                    strTran_d_c = "0";
                    string strr_p = "1"; //dgRow.Cells[2].Value.ToString();
                    string strb_t = "3"; // dgRow.Cells[2].Value.ToString();

                    string stra_n = bea_n.Text;
                    string strs_a = bes_a.Text;
                    string strd_y = bed_y.Text;
                    double bamt = 0;


                    strd_d = strPassDate.Substring(0, strPassDate.IndexOf(" "));
                    strPassDate = strPassDate.Substring(0, strPassDate.IndexOf(" "));

                    if (debitAmount > 0)
                    {
                        bamt = -debitAmount;
                        strr_p = "4";
                    }
                    else if (creditAmount > 0)
                    {
                        bamt = creditAmount;
                        strr_p = "2";
                    }
                    ConnectionWithAccess.query = "select max(D_N) + 1 from " + ConnectionWithAccess.tablename[23] + " where prd = '" + ConnectionWithAccess.mprd + "' and d_c = " + cb_BU_from_dc.SelectedValue.ToString() + " and d_d = @d_d_date";
                    search_on_particular_date_in_select_query("@d_d_date", Convert.ToDateTime(strPassDate));
                    DataTable dtD_N = ConnectionCommand.fGetDataTable();
                    if (dtD_N != null && dtD_N.Rows.Count > 0)
                    {
                        strd_n = dtD_N.Rows[0][0].ToString();
                        if (strd_n.Trim() == "")
                            strd_n = "1";
                    }
                    ConnectionWithAccess.query = "select * from " + ConnectionWithAccess.tablename[23] + " where d_c = " + cb_BU_from_dc.SelectedValue.ToString() + " and bamt = " + bamt.ToString() + " and pass_date = @PassDate ";
                    List<ConnectionWithAccess.QueryParams> objParams = new List<ConnectionWithAccess.QueryParams>();
                    ConnectionWithAccess.QueryParams ParamFrom = new ConnectionWithAccess.QueryParams();
                    ParamFrom.paramName = "@PassDate";
                    ParamFrom.paramValue = Convert.ToDateTime(strPassDate);
                    objParams.Add(ParamFrom);
                    ConnectionWithAccess.QueryParamList = objParams;
                    DataTable dtBankData = ConnectionCommand.fGetDataTable();
                    if (dtBankData == null || (dtBankData != null && dtBankData.Rows.Count == 0))
                    {
                        //Insert only if data was not entered earlier
                        ConnectionWithAccess.query = "insert into " + ConnectionWithAccess.tablename[23] + " (prd, [d_c], [Tran_d_c],  [r_p], b_t, d_n, d_d, a_n,s_a,d_y,bamt, pass_date) " +
                            " values('" + strPeriod + "', '" + strd_c + "','" + strTran_d_c + "', '" + strr_p + "',  '" + strb_t + "', '" + strd_n + "', @d_d_date, '" + stra_n + "', '" + strs_a + "', '" + strd_y + "', " + bamt.ToString() + ", @PassDate )";
                        List<ConnectionWithAccess.QueryParams> objParams1 = new List<ConnectionWithAccess.QueryParams>();
                        ConnectionWithAccess.QueryParams ParamFrom1 = new ConnectionWithAccess.QueryParams();
                        ParamFrom1.paramName = "@PassDate";
                        ParamFrom1.paramValue = Convert.ToDateTime(strPassDate);
                        objParams1.Add(ParamFrom1);
                        ConnectionWithAccess.QueryParams ParamFrom2 = new ConnectionWithAccess.QueryParams();
                        ParamFrom2.paramName = "@d_d_date";
                        ParamFrom2.paramValue = Convert.ToDateTime(strPassDate);
                        objParams1.Add(ParamFrom2);
                        ConnectionWithAccess.QueryParamList = objParams1;

                        ConnectionCommand.fUpdateInsertDeleteData();
                        get_account_details_from_01(stra_n, strs_a);
                        dgvBankExcelUpload.CurrentRow.Cells["a_n"].Value = stra_n;
                        dgvBankExcelUpload.CurrentRow.Cells["s_a"].Value = strs_a;
                        dgvBankExcelUpload.CurrentRow.Cells["BANK_DESC"].Value = account_detail_from_01[4];
                        dgvBankExcelUpload.CurrentRow.Cells["BANK_CITY"].Value = account_detail_from_01[8];
                        dgvBankExcelUpload.CurrentRow.Cells["bank_excel_d_c"].Value = Convert.ToInt32(strd_c);
                        dgvBankExcelUpload.CurrentRow.Cells["bank_excel_d_n"].Value = strd_n;
                        dgvBankExcelUpload.CurrentRow.Cells["bank_excel_r_p"].Value = strr_p;
                        dgvBankExcelUpload.CurrentRow.DefaultCellStyle.BackColor = Color.Green;
                        // dgvBankExcelUpload.CurrentRow.Cells[0].che
                    }
                    else
                    {
                        dgvBankExcelUpload.CurrentRow.DefaultCellStyle.BackColor = Color.Blue;
                        //MessageBox.Show("Bank Record already exist!");
                    }
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        private void btn_cash_entry_Click(object sender, EventArgs e)
        {
            try
            {
                string str_naration = dgvBankExcelUpload.CurrentRow.Cells[3].Value.ToString();
                if (str_naration.ToUpper().Contains("CASH") || str_naration.ToUpper().Contains("SELF"))
                {
                    string strPeriod = ConnectionWithAccess.mprd;
                    string strd_c = cb_BU_from_dc.SelectedValue.ToString();
                    string strTran_d_c = "0";
                    //if (cb_BU_from_dc.SelectedValue.ToString() != cb_BU_to_dc.SelectedValue.ToString())
                    //    strTran_d_c = cb_BU_to_dc.SelectedValue.ToString();
                    string strr_p = "4"; //dgRow.Cells[2].Value.ToString();
                    string strb_t = "3"; // dgRow.Cells[2].Value.ToString();
                    string strd_n = string.Empty;// dgRow.Cells[2].Value.ToString();
                    string strd_d = dgvBankExcelUpload.CurrentRow.Cells[1].Value.ToString();
                    string stra_n = "7999";
                    string strs_a = "DEP";
                    string strd_y = "@@@";
                    double bamt = 0;
                    double debitAmount = Convert.ToDouble(dgvBankExcelUpload.CurrentRow.Cells["DebitAmt"].Value.ToString());
                    double creditAmount = Convert.ToDouble(dgvBankExcelUpload.CurrentRow.Cells["CreditAmt"].Value.ToString());
                    string strPassDate = dgvBankExcelUpload.CurrentRow.Cells["ValueDate"].Value.ToString();

                    strd_d = strPassDate.Substring(0, strPassDate.IndexOf(" "));
                    strPassDate = strPassDate.Substring(0, strPassDate.IndexOf(" "));

                    if (debitAmount > 0)
                    {
                        bamt = -debitAmount;
                    }
                    else if (creditAmount > 0)
                    {
                        bamt = creditAmount;
                    }
                    ConnectionWithAccess.query = "select max(D_N) + 1 from " + ConnectionWithAccess.tablename[23] + " where prd = '" + ConnectionWithAccess.mprd + "' and d_c = " + cb_BU_from_dc.SelectedValue.ToString() + " and d_d = @d_d_date";
                    search_on_particular_date_in_select_query("@d_d_date", Convert.ToDateTime(strPassDate));
                    DataTable dtD_N = ConnectionCommand.fGetDataTable();
                    if (dtD_N != null && dtD_N.Rows.Count > 0)
                    {
                        strd_n = dtD_N.Rows[0][0].ToString();
                        if (strd_n.Trim() == "")
                            strd_n = "1";
                    }
                    ConnectionWithAccess.query = "select * from " + ConnectionWithAccess.tablename[23] + " where d_c = " + cb_BU_from_dc.SelectedValue.ToString() + " and bamt = " + bamt.ToString() + " and pass_date = @PassDate and a_n = '7999' and s_a = 'DEP'";
                    List<ConnectionWithAccess.QueryParams> objParams = new List<ConnectionWithAccess.QueryParams>();
                    ConnectionWithAccess.QueryParams ParamFrom = new ConnectionWithAccess.QueryParams();
                    ParamFrom.paramName = "@PassDate";
                    ParamFrom.paramValue = Convert.ToDateTime(strPassDate);
                    objParams.Add(ParamFrom);
                    ConnectionWithAccess.QueryParamList = objParams;
                    DataTable dtBankData = ConnectionCommand.fGetDataTable();
                    if (dtBankData == null || (dtBankData != null && dtBankData.Rows.Count == 0))
                    {
                        //Insert only if data was not entered earlier
                        if (debitAmount > 0)
                        {
                            stra_n = "7999";
                            strs_a = "WIT";
                            strr_p = "3";
                            strb_t = "3";
                            strTran_d_c = "0";
                        }
                        else if (creditAmount > 0)
                        {
                            stra_n = "7999";
                            strs_a = "DEP";
                            strr_p = "1";
                            strb_t = "3";
                            strTran_d_c = "0";
                        }

                        ConnectionWithAccess.query = "insert into " + ConnectionWithAccess.tablename[23] + " (prd, [d_c], [Tran_d_c],  [r_p], b_t, d_n, d_d, a_n,s_a,d_y,bamt, pass_date) " +
                        " values('" + strPeriod + "', '" + strd_c + "','" + strTran_d_c + "', '" + strr_p + "',  '" + strb_t + "', '" + strd_n + "', @d_d_date, '" + stra_n + "', '" + strs_a + "', '" + strd_y + "', " + bamt.ToString() + ", @PassDate )";
                        List<ConnectionWithAccess.QueryParams> objParams1 = new List<ConnectionWithAccess.QueryParams>();
                        ConnectionWithAccess.QueryParams ParamFrom1 = new ConnectionWithAccess.QueryParams();
                        ParamFrom1.paramName = "@PassDate";
                        ParamFrom1.paramValue = Convert.ToDateTime(strPassDate);
                        objParams1.Add(ParamFrom1);
                        ConnectionWithAccess.QueryParams ParamFrom2 = new ConnectionWithAccess.QueryParams();
                        ParamFrom2.paramName = "@d_d_date";
                        ParamFrom2.paramValue = Convert.ToDateTime(strPassDate);
                        objParams1.Add(ParamFrom2);
                        ConnectionWithAccess.QueryParamList = objParams1;

                        ConnectionCommand.fUpdateInsertDeleteData();
                        add_amount_in_51(ConnectionWithAccess.mprd, ConnectionWithAccess.bank_a_n, "@@@", bamt);
                        add_amount_in_51(ConnectionWithAccess.mprd, ConnectionWithAccess.cash_a_n, "@@@", bamt * -1);
                        bdcurbankbal.Text = Convert.ToString(get_bank_balance(ConnectionWithAccess.bank_a_n, "@@@", DateTime.Today.ToShortDateString()));
                        bdcurcashbal.Text = Convert.ToString(get_cash_balance(ConnectionWithAccess.cash_a_n, "@@@", DateTime.Today.ToShortDateString()));

                        get_account_details_from_01(stra_n, strs_a);
                        dgvBankExcelUpload.CurrentRow.Cells["a_n"].Value = stra_n;
                        dgvBankExcelUpload.CurrentRow.Cells["s_a"].Value = strs_a;
                        dgvBankExcelUpload.CurrentRow.Cells["BANK_DESC"].Value = account_detail_from_01[4];
                        dgvBankExcelUpload.CurrentRow.Cells["BANK_CITY"].Value = account_detail_from_01[8];
                        dgvBankExcelUpload.CurrentRow.Cells["bank_excel_d_c"].Value = Convert.ToInt32(strd_c);
                        dgvBankExcelUpload.CurrentRow.Cells["bank_excel_d_n"].Value = strd_n;
                        dgvBankExcelUpload.CurrentRow.Cells["bank_excel_r_p"].Value = strr_p;
                        dgvBankExcelUpload.CurrentRow.DefaultCellStyle.BackColor = Color.Green;

                    }
                    else
                    {
                        dgvBankExcelUpload.CurrentRow.DefaultCellStyle.BackColor = Color.Blue;
                        //MessageBox.Show("Bank Record already exist!");
                    }
                }
                else
                    MessageBox.Show("Sorry, Its Not Cash Entry");
            }
            catch (Exception ex)
            {
                //throw ex;
            }
        }

        private void tc_dataentry_additional_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (tc_dataentry_additional.SelectedIndex == 0)
                refresh_item_stock_list();
            //btnBankExcelImport.Enabled = false;
        }

        private void cb_bank_show_SelectedIndexChanged(object sender, EventArgs e)
        {
            //DataTable dtBankData = (DataTable)dgvBankExcelUpload.DataSource;

            if (cb_bank_show.Text == "EXTRA UN-NEEDED")
            {
                if (dtAllData != null)
                    dgvBankExcelUpload.DataSource = dtAllData;
            }
            else
            {
                if (dtBankDataAll != null)
                {
                    if (cb_bank_show.Text == "ALL")
                    {
                        dtBankDataAll.DefaultView.RowFilter = "";
                    }
                    else if (cb_bank_show.Text == "ONLY FOUND")
                    {//Green
                        dtBankDataAll.DefaultView.RowFilter = "Colour = 'Green'";
                    }
                    else if (cb_bank_show.Text == "ONLY NOT-FOUND")
                    {
                        dtBankDataAll.DefaultView.RowFilter = "Colour is NULL";
                    }

                    dgvBankExcelUpload.DataSource = dtBankDataAll;
                }
            }
        }

        private void dgvBankExcelUpload_RowPrePaint(object sender, DataGridViewRowPrePaintEventArgs e)
        {
            if (dgvBankExcelUpload.Rows[e.RowIndex].Cells["Colour"].Value != null)
            {
                switch (dgvBankExcelUpload.Rows[e.RowIndex].Cells["Colour"].Value.ToString())
                {
                    case "Green":
                        dgvBankExcelUpload.Rows[e.RowIndex].DefaultCellStyle.BackColor = Color.Green;
                        break;
                    case "Blue":
                        dgvBankExcelUpload.Rows[e.RowIndex].DefaultCellStyle.BackColor = Color.Blue;
                        break;
                    case "Red":
                        dgvBankExcelUpload.Rows[e.RowIndex].DefaultCellStyle.BackColor = Color.Red;
                        break;
                    default:
                        break;
                }
            }
        }

        private void vDeletebank_entry()
        {
            ConnectionWithAccess.query = "Delete from " + ConnectionWithAccess.tablename[23] + " where d_c = " + ConnectionWithAccess.md_c + " and d_n = " + ConnectionWithAccess.md_n + " and d_d = @d_d_date and r_p = '" + ConnectionWithAccess.mr_p + "'";
            search_on_particular_date_in_select_query("@d_d_date", ConnectionWithAccess.mDateTime);
            ConnectionCommand.fUpdateInsertDeleteData();
            string strConditions = string.Empty;
            strConditions = " d_c = " + ConnectionWithAccess.md_c + " and d_n = " + ConnectionWithAccess.md_n + " and d_d = '" + ConnectionWithAccess.mDateTime + "' and r_p = '" + ConnectionWithAccess.mr_p + "'";
            fDeleteRowsFromDatable_Dynamic(ref dtAllData, strConditions);
            if (cb_bank_show.Text == "EXTRA UN-NEEDED")
            {
                if (dtAllData != null)
                    dgvBankExcelUpload.DataSource = dtAllData;
                //MessageBox.Show("Extra Bank Entry Deleted Successfully");
            }
        }

        private void dgvBankExcelUpload_CellClick(object sender, DataGridViewCellEventArgs e)
        {
            if (cb_bank_show.SelectedIndex == 3)
            {
                if (dgvBankExcelUpload.CurrentRow.Cells[12].Value != System.DBNull.Value)
                {
                    temp_word = dgvBankExcelUpload.CurrentRow.Cells[1].Value.ToString();
                    ConnectionWithAccess.md_c = Convert.ToInt32(dgvBankExcelUpload.CurrentRow.Cells[12].Value.ToString());
                    ConnectionWithAccess.md_n = dgvBankExcelUpload.CurrentRow.Cells[13].Value.ToString();
                    ConnectionWithAccess.mr_p = dgvBankExcelUpload.CurrentRow.Cells[1].Value.ToString();
                    ConnectionWithAccess.mDateTime = Convert.ToDateTime(dgvBankExcelUpload.CurrentRow.Cells[2].Value.ToString());
                }
            }
        }

        private void cb_BU_from_dc_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (cb_BU_from_dc.Items.Count > 0 && cb_BU_from_dc.SelectedValue != null)
            {
                //tb_BU_from_bank.Text = get_account_name_from_d_c("B", Convert.ToInt32(cb_BU_from_dc.SelectedValue.ToString()));
                bank_from_a_n.Text = get_a_n_from_d_c("B", Convert.ToInt32(cb_BU_from_dc.SelectedValue.ToString()));
                bank_from_s_a.Text = "@@@";
                //btnBankExcelImport.Enabled = true;
            }
        }

        private void cb_BU_to_dc_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (cb_BU_to_dc.Items.Count > 0)
            {
                //tb_BU_to_bank.Text = get_account_name_from_d_c("B", Convert.ToInt32(cb_BU_to_dc.SelectedValue.ToString()));
                bank_to_a_n.Text = get_a_n_from_d_c("B", Convert.ToInt32(cb_BU_to_dc.SelectedValue.ToString()));
                bank_to_s_a.Text = "@@@";
            }
        }

        private void generate_bank_excel_report()
        {
            excel_filename = "Bank Excel Report ";
            if (cb_bank_show.Text == "ALL")
                excel_filename += "All Entries";
            else if (cb_bank_show.Text == "ONLY NOT-FOUND")
                excel_filename += " Missing Bank Entries";
            else if (cb_bank_show.Text == "ONLY FOUND")
                excel_filename += " Found Bank Entries";
            else if (cb_bank_show.Text == "EXTRA UN-NEEDED")
                excel_filename += " EXTRA UN-NEEDED Bank Entries";
            pdf_filename = ConnectionWithAccess.report_file_location + excel_filename;
            if (chb_add_datetime_in_output.Checked)
                pdf_filename += "_" + DateTime.Now.Day + "_" + DateTime.Now.Month + "_" + DateTime.Now.Year + "_" + DateTime.Now.TimeOfDay.Hours + "_" + DateTime.Now.TimeOfDay.Minutes;
            pdf_filename += ".pdf";
            //pdf_filename = ConnectionWithAccess.remove_filename_error(pdf_filename);
            ConnectionWithAccess.create_file_folder(pdf_filename);
            doc1 = new Document(PageSize.A4, 5, 5, 5, 5);
            FileStream FS1 = File.Create(pdf_filename);
            writer = PdfWriter.GetInstance(doc1, FS1);
            doc1.Open();
            current_pdf_page_number = 1;
            add_header_footer = true;
            header_text_message = report_filetype + " " + " From : " + RepFrom.Text + " to " + RepTo.Text;
            pdf_top_heading = "Date            Doc.          Name                                                                                Debit                      Credit                  Balance";
            Paragraph para = new Paragraph();
            int lineno = 0;
            debitamount = 0;
            creditamount = 0;
            temp_word = "Name of Bank : " + bank_name;
            print_pdf_line(cour_9, temp_word, 38, 0);
            temp_word = "Account Number : " + bank_account_number;
            print_pdf_line(cour_9, temp_word, 38, 0);
            temp_word = "From : " + first_date.ToShortDateString() + " to " + last_date.ToShortDateString();
            print_pdf_line(cour_9, temp_word, 38, 0);
            print_pdf_line(cour_9, "", 38, 0);
            for (row_pointer = 0; row_pointer < dgvBankExcelUpload.RowCount - 1; row_pointer++)
            {
                if (dgvBankExcelUpload.Rows[row_pointer].Cells[2].Value != System.DBNull.Value && dgvBankExcelUpload.Rows[row_pointer].Cells[2].Value != null)
                {
                    temp_word = dgvBankExcelUpload.Rows[row_pointer].Cells[2].Value.ToString();
                    if (temp_word.Contains(" "))
                        temp_word = temp_word.Substring(0, temp_word.IndexOf(" "));
                    print_pdf_line(cour_9, temp_word, 38, -9);
                }
                if (dgvBankExcelUpload.Rows[row_pointer].Cells[3].Value != System.DBNull.Value && dgvBankExcelUpload.Rows[row_pointer].Cells[3].Value != null)
                {
                    temp_word = dgvBankExcelUpload.Rows[row_pointer].Cells[3].Value.ToString();
                    print_pdf_line(cour_9, temp_word, 100, -15);
                }
                //if (dgvBankExcelUpload.Rows[row_pointer].Cells[4].Value != System.DBNull.Value && dgvBankExcelUpload.Rows[row_pointer].Cells[2].Value != null)
                //    print_pdf_line(cour_9, dgvBankExcelUpload.Rows[row_pointer].Cells[2].Value.ToString(), 130, -15);

                if (dgvBankExcelUpload.Rows[row_pointer].Cells[4].Value != System.DBNull.Value && dgvBankExcelUpload.Rows[row_pointer].Cells[4].Value.ToString() != "")
                {
                    if (Convert.ToDouble(dgvBankExcelUpload.Rows[row_pointer].Cells[4].Value) != 0.00)
                    {
                        temp_word = add_comma_to_number(dgvBankExcelUpload.Rows[row_pointer].Cells[4].Value.ToString());
                        print_pdf_line(cour_9_bold, temp_word, para_IndentationLeft_position(320, temp_word, "cour_9_bold"), -15);
                        debitamount += Convert.ToDouble(dgvBankExcelUpload.Rows[row_pointer].Cells[4].Value.ToString());
                    }
                }
                if (dgvBankExcelUpload.Rows[row_pointer].Cells[5].Value != System.DBNull.Value && dgvBankExcelUpload.Rows[row_pointer].Cells[5].Value.ToString() != "")
                {
                    if (Convert.ToDouble(dgvBankExcelUpload.Rows[row_pointer].Cells[5].Value) != 0.00)
                    {
                        temp_word = add_comma_to_number(dgvBankExcelUpload.Rows[row_pointer].Cells[5].Value.ToString());
                        print_pdf_line(cour_9_bold, temp_word, para_IndentationLeft_position(400, temp_word, "cour_9_bold"), -15);
                        creditamount += Convert.ToDouble(dgvBankExcelUpload.Rows[row_pointer].Cells[5].Value.ToString());
                    }
                }
                //if (dgvBankExcelUpload.Rows[row_pointer].Cells[6].Value != System.DBNull.Value && dgvBankExcelUpload.Rows[row_pointer].Cells[6].Value != null)
                //{
                //    temp_word = add_comma_to_number(dgvBankExcelUpload.Rows[row_pointer].Cells[6].Value.ToString());
                //    print_pdf_line(cour_9_bold, temp_word, para_IndentationLeft_position(480, temp_word, "cour_9_bold"), -15);
                //}
                lineno++;
            }
            print_pdf_line(cour_9, "----------------             ----------------", 345, -7);
            temp_word = add_comma_to_number(debitamount.ToString());
            print_pdf_line(cour_9_bold, temp_word, para_IndentationLeft_position(320, temp_word, "cour_9_bold"), -5);
            temp_word = add_comma_to_number(creditamount.ToString());
            print_pdf_line(cour_9_bold, temp_word, para_IndentationLeft_position(400, temp_word, "cour_9_bold"), -15);
            print_pdf_line(cour_9, "==========          ==========", 345, -7);
            doc1.Close();
        }

        #endregion Bank Excel Upload

        private void sodbc_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (sodbc.SelectedValue.ToString() != "")
            {
                ConnectionWithAccess.query = "SELECT max(d_n) +1 from " + ConnectionWithAccess.tablename[7] + " where prd = '" + ConnectionWithAccess.mprd + "' and d_n <> 999999 and d_c = " + Convert.ToInt32(sodbc.SelectedValue.ToString());
                ConnectionCommand.ExportToText(sodbc, sodocno);
                ConnectionWithAccess.md_n = sodocno.Text;
                soa_n.Text = get_a_n_from_d_c("O", Convert.ToInt32(sodbc.SelectedValue.ToString()));
                fillsosalelist();
            }
        }

        private void sosalelistdg_CellClick(object sender, DataGridViewCellEventArgs e)
        {
            PleaseWait objPleaseWait = new PleaseWait("Please wait Collecting Data..");
            objPleaseWait.Show();
            Application.DoEvents();
            PopulateSaleDetails();
            objPleaseWait.Close();
        }

        private void delete_full_data_for_period(string selected_prd)
        {
            ConnectionWithAccess.query = "TRUNCATE TABLE " + ConnectionWithAccess.tablename[03] + " where prd = '" + selected_prd + "'";
            ConnectionCommand.fUpdateInsertDeleteData();
            ConnectionWithAccess.query = "delete from " + ConnectionWithAccess.tablename[21] + " where prd = '" + selected_prd + "'";
            ConnectionCommand.fUpdateInsertDeleteData();
            ConnectionWithAccess.query = "delete from " + ConnectionWithAccess.tablename[22] + " where prd = '" + selected_prd + "'";
            ConnectionCommand.fUpdateInsertDeleteData();
            ConnectionWithAccess.query = "delete from " + ConnectionWithAccess.tablename[23] + " where prd = '" + selected_prd + "'";
            ConnectionCommand.fUpdateInsertDeleteData();
            ConnectionWithAccess.query = "delete from " + ConnectionWithAccess.tablename[24] + " where prd = '" + selected_prd + "'";
            ConnectionCommand.fUpdateInsertDeleteData();
            ConnectionWithAccess.query = "delete from " + ConnectionWithAccess.tablename[25] + " where prd = '" + selected_prd + "'";
            ConnectionCommand.fUpdateInsertDeleteData();
            ConnectionWithAccess.query = "delete from " + ConnectionWithAccess.tablename[30] + " where prd = '" + selected_prd + "'";
            ConnectionCommand.fUpdateInsertDeleteData();
            ConnectionWithAccess.query = "delete from " + ConnectionWithAccess.tablename[50] + " where prd = '" + selected_prd + "'";
            ConnectionCommand.fUpdateInsertDeleteData();
            ConnectionWithAccess.query = "delete from " + ConnectionWithAccess.tablename[51] + " where prd = '" + selected_prd + "'";
            ConnectionCommand.fUpdateInsertDeleteData();
        }

        private void siitemlist_TabIndexChanged(object sender, EventArgs e)
        {
            if (siitemlist.CurrentCell != null)
            {
                ConnectionWithAccess.data_entry_working = "Sale Item";
                if (Control.ModifierKeys == Keys.Down)
                {
                    mRowIndex = siitemlist.SelectedCells[0].RowIndex;
                    mtype = Convert.ToString(siitemlist.Rows[mRowIndex].Cells[0].Value);
                    mitem_code = Convert.ToString(siitemlist.Rows[mRowIndex].Cells[1].Value);
                    mtitle = Convert.ToString(siitemlist.Rows[mRowIndex].Cells[2].Value);
                }
                else
                {
                    columnIndex = siitemlist.CurrentCell.ColumnIndex;
                    if (columnIndex == 3)
                    {
                        mtype = Convert.ToString(siitemlist.Rows[siitemlistrowindex].Cells[0].Value);
                        mitem_code = Convert.ToString(siitemlist.Rows[siitemlistrowindex].Cells[1].Value);
                        mtitle = Convert.ToString(siitemlist.Rows[mRowIndex].Cells[2].Value);
                        ConnectionWithAccess.query = "select packing, box from " + ConnectionWithAccess.tablename[05] + " where [type] = '" + mtype + "' and item_code = '" + mitem_code + "'";
                        DataTable dtData1 = ConnectionCommand.fGetDataTable();
                        if (dtData1 != null && dtData1.Rows.Count > 0)
                        {
                            if (dtData1.Rows[0][0] != null)
                            {
                                mbox = Convert.ToDouble(dtData1.Rows[0][0].ToString());
                                mqty = Convert.ToDouble(dtData1.Rows[0][1].ToString());
                            }
                        }
                        temp_word = Convert.ToString(siitemlist.Rows[siitemlistrowindex].Cells[3].Value);
                        if (temp_word != "")
                        {
                            mcase = Convert.ToDouble(siitemlist.Rows[siitemlistrowindex].Cells[3].Value);
                            siitemlist.Rows[siitemlistrowindex].Cells[4].Value = mbox * mcase;
                            temp_word = Convert.ToString(siitemlist.Rows[siitemlistrowindex].Cells[4].Value);
                            if (temp_word != "")
                                siitemlist.Rows[siitemlistrowindex].Cells[5].Value = (Convert.ToDouble(siitemlist.Rows[siitemlistrowindex].Cells[4].Value)) * mqty;
                            temp_word = Convert.ToString(siitemlist.Rows[siitemlistrowindex].Cells[5].Value);
                        }
                        //if (ConnectionWithAccess.mUserFeatures.Substring(44, 1) != "Y")
                        if (!chb_allow_stock_check_bypass.Checked && item_details_from_05.Count > 6)
                        {

                            double.TryParse(item_details_from_05[6].ToString(), out temp_double);
                            if (temp_double == 0.0)
                                MessageBox.Show("Sorry, There is no Stock to Sell");
                            else if (mqty > temp_double)
                            {
                                MessageBox.Show("Sorry, Available Stock for sell Quantity is " + temp_double.ToString());
                                if (temp_double > 0)
                                    mqty = temp_double;
                                else
                                    mqty = 0;
                                siitemlist.Rows[siitemlistrowindex].Cells[4].Value = Convert.ToDouble(mqty / Convert.ToDouble(item_details_from_05[4]));
                                siitemlist.Rows[siitemlistrowindex].Cells[5].Value = mqty;
                                mamount = mcase * mbox * mqty * mprice;
                                siitemlist.Rows[siitemlistrowindex].Cells[7].Value = Convert.ToString(mamount);
                            }
                        }
                        calculateSaleItemTotal();
                        show_images();
                    }
                    if (columnIndex == 4)
                    {
                        mtype = Convert.ToString(siitemlist.Rows[siitemlistrowindex].Cells[0].Value);
                        mitem_code = Convert.ToString(siitemlist.Rows[siitemlistrowindex].Cells[1].Value);
                        get_item_details_from_05_using_type_item_code(mtype, mitem_code);
                        temp_word = Convert.ToString(siitemlist.Rows[siitemlistrowindex].Cells[4].Value);
                        if (temp_word != "")
                            siitemlist.Rows[siitemlistrowindex].Cells[5].Value = (Convert.ToDouble(siitemlist.Rows[siitemlistrowindex].Cells[4].Value)) * Convert.ToDouble(item_details_from_05[4].ToString());
                        else
                            siitemlist.Rows[siitemlistrowindex].Cells[5].Value = "0";
                        mqty = Convert.ToDouble(siitemlist.Rows[siitemlistrowindex].Cells[5].Value);
                        if (!chb_allow_stock_check_bypass.Checked)
                        {
                            double.TryParse(item_details_from_05[7].ToString(), out temp_double);
                            if (temp_double == 0.0)
                                MessageBox.Show("Sorry, There is no Stock to Sell");
                            else if (mqty > temp_double)
                            {
                                MessageBox.Show("Sorry, Available Stock for sell Quantity is " + temp_double.ToString());
                                if (temp_double > 0)
                                    mqty = temp_double;
                                else
                                    mqty = 0;
                                siitemlist.Rows[siitemlistrowindex].Cells[4].Value = Convert.ToDouble(mqty / Convert.ToDouble(item_details_from_05[4]));
                                siitemlist.Rows[siitemlistrowindex].Cells[5].Value = mqty;
                                mamount = mcase * mbox * mqty * mprice;
                                siitemlist.Rows[siitemlistrowindex].Cells[7].Value = Convert.ToString(mamount);
                            }
                        }
                        calculateSaleItemTotal();
                        show_images();
                    }
                    if (columnIndex == 5 || columnIndex == 6)
                    {
                        try
                        {
                            mtype = Convert.ToString(siitemlist.Rows[siitemlistrowindex].Cells[0].Value);
                            mitem_code = Convert.ToString(siitemlist.Rows[siitemlistrowindex].Cells[1].Value);
                            mqty = Convert.ToDouble(siitemlist.Rows[siitemlistrowindex].Cells[5].Value);
                            if (!chb_allow_stock_check_bypass.Checked)
                            {
                                double.TryParse(item_details_from_05[7].ToString(), out temp_double);
                                if (temp_double == 0.0)
                                    MessageBox.Show("Sorry, There is no Stock to Sell");
                                else if (mqty > temp_double)
                                {
                                    MessageBox.Show("Sorry, Available Stock for sell Quantity is " + temp_double.ToString());
                                    if (temp_double > 0)
                                        mqty = temp_double;
                                    else
                                        mqty = 0;
                                    siitemlist.Rows[siitemlistrowindex].Cells[4].Value = Convert.ToDouble(mqty / Convert.ToDouble(item_details_from_05[4]));
                                    siitemlist.Rows[siitemlistrowindex].Cells[5].Value = mqty;
                                    mamount = mcase * mbox * mqty * mprice;
                                    siitemlist.Rows[siitemlistrowindex].Cells[7].Value = Convert.ToString(mamount);
                                }
                            }
                        }
                        catch (Exception ex)
                        {
                        }
                        calculateSaleItemTotal();
                        show_images();
                    }
                }
            }
        }

        private void img_zoom_Scroll(object sender, EventArgs e)
        {
            if (pb_invoice_imgPanel.Visible)
                pb_invoice_imgPanel.Zoom = cp_master_acc_name.Value * 0.02f;
            else if (pb_transport_copy.Visible)
                pb_transport_copy.Zoom = cp_master_acc_name.Value * 0.02f;
            else if (pb_product.Visible)
                pb_product.Zoom = cp_master_acc_name.Value * 0.02f;
            else if (pb_personal_photo.Visible)
                pb_personal_photo.Zoom = cp_master_acc_name.Value * 0.02f;
            else if (pb_visiting_card.Visible)
                pb_visiting_card.Zoom = cp_master_acc_name.Value * 0.02f;
        }

        private void simple_party_help_DoubleClick(object sender, EventArgs e)
        {
            rowIndex = simple_party_help.CurrentCell.RowIndex;
            simple_partyname.Text = Convert.ToString(simple_party_help.Rows[rowIndex].Cells[0].Value);
            simple_partycity.Text = Convert.ToString(simple_party_help.Rows[rowIndex].Cells[1].Value);
            simple_s_a.Text = simple_party_help.Rows[rowIndex].Cells[3].Value.ToString();
            simple_party_help.Visible = false;
            simple_itemsalelist.Visible = true;
        }

        private void simple_item_help_DoubleClick(object sender, EventArgs e)
        {
            rowIndex = simple_itemsalelist.CurrentCell.RowIndex;
            mtype = Convert.ToString(simple_item_help.Rows[rowIndex].Cells[0].Value);
            mitem_code = Convert.ToString(simple_item_help.Rows[rowIndex].Cells[1].Value);
            get_item_details_from_05_using_type_item_code(mtype, mitem_code);
            ConnectionWithAccess.query = "select [type], item_code, [title],price,igst_per,hsn_code from " + ConnectionWithAccess.tablename[03] + " where a_n = '" + simple_a_n.Text + "' and s_a = '" + simple_s_a.Text + "' and [type] = '" + mtype + "' and item_code = '" + mitem_code + "'";
            DataTable dtData1 = ConnectionCommand.fGetDataTable();
            if (dtData1 != null && dtData1.Rows.Count > 0)
            {
                if (dtData1.Rows[0][0] != null)
                {
                    simple_itemsalelist.Rows[rowIndex].Cells[0].Value = dtData1.Rows[0][0].ToString();
                    simple_itemsalelist.Rows[rowIndex].Cells[1].Value = dtData1.Rows[0][1].ToString();
                    simple_itemsalelist.Rows[rowIndex].Cells[6].Value = dtData1.Rows[0][3].ToString();
                    //if (dtData1.Rows[0][4].ToString() != "")
                    //    simple_salelist.Rows[rowIndex].Cells[7].Value = dtData1.Rows[0][4].ToString();
                    //if (dtData1.Rows[0][5].ToString() != "")
                    //    simple_salelist.Rows[rowIndex].Cells[8].Value = dtData1.Rows[0][5].ToString();
                }
            }
            else
            {
                simple_itemsalelist.Rows[rowIndex].Cells[0].Value = item_details_from_05[0];
                simple_itemsalelist.Rows[rowIndex].Cells[1].Value = item_details_from_05[1];
                simple_itemsalelist.Rows[rowIndex].Cells[6].Value = item_details_from_05[5];
            }
            simple_itemsalelist.Rows[rowIndex].Cells[2].Value = item_details_from_05[2];
            mtitle = Convert.ToString(simple_itemsalelist.Rows[rowIndex].Cells[2].Value);
            mcase = 1;
            mbox = Convert.ToDouble(item_details_from_05[3]);
            mqty = Convert.ToDouble(item_details_from_05[4]);
            mprice = Convert.ToDouble(item_details_from_05[5]);
            simple_itemsalelist.Rows[rowIndex].Cells[3].Value = mcase;
            simple_itemsalelist.Rows[rowIndex].Cells[4].Value = mbox * mcase;
            simple_itemsalelist.Rows[rowIndex].Cells[5].Value = mbox * mcase * mqty;
            if (simple_itemsalelist.Rows[rowIndex].Cells[6].Value == null)
                simple_itemsalelist.Rows[rowIndex].Cells[6].Value = mprice;
            else
                if (simple_itemsalelist.Rows[rowIndex].Cells[6].Value == System.DBNull.Value)
                simple_itemsalelist.Rows[rowIndex].Cells[6].Value = mprice.ToString();
            mamount = mcase * mbox * mqty * mprice;
            simple_itemsalelist.Rows[rowIndex].Cells[7].Value = Convert.ToString(mamount);
            //simple_salelist.Rows[rowIndex].Cells[8].Value = item_details_from_05[7];
            //simple_salelist.Rows[rowIndex].Cells[9].Value = item_details_from_05[8];
            //simple_salelist.Rows[rowIndex].Cells[10].Value = item_details_from_05[9];
            simple_item_help.Visible = false;
            calculate_simple_SaleItemTotal();
        }

        private void simple_itemsalelist_EditingControlShowing(object sender, DataGridViewEditingControlShowingEventArgs e)
        {
            cntObject = e.Control;
            cntObject.TextChanged += textBox_TextChanged;
            //issiTxtChangedAssigned = true;
        }

        private void simple_salelist_CellClick(object sender, DataGridViewCellEventArgs e)
        {
            PleaseWait objPleaseWait = new PleaseWait("Please wait Collecting Data..");
            objPleaseWait.Show();
            Application.DoEvents();
            PopulateSaleDetails();
            objPleaseWait.Close();
        }

        private void so_item_help_CellClick(object sender, DataGridViewCellEventArgs e)
        {
            PleaseWait objPleaseWait = new PleaseWait("Please wait Collecting Data");
            objPleaseWait.Show();
            Application.DoEvents();
            try
            {
                if (maintab.SelectedIndex == 1 && subtabDataEntry.SelectedIndex == 0 && subtabsale.SelectedIndex == 0)
                {
                    rowIndex = so_party_help.CurrentCell.RowIndex;
                    bsoPartyChangeIgnore = true;
                    sopartycode.Text = Convert.ToString(so_party_help.Rows[rowIndex].Cells[0].Value);
                    socity.Text = Convert.ToString(so_party_help.Rows[rowIndex].Cells[1].Value);
                    soa_n.Text = Convert.ToString(so_party_help.Rows[rowIndex].Cells[2].Value);
                    sos_a.Text = Convert.ToString(so_party_help.Rows[rowIndex].Cells[3].Value);
                    sod_y.Text = Convert.ToString(so_party_help.Rows[rowIndex].Cells[4].Value);
                    get_account_details_from_04(soa_n.Text, sos_a.Text);
                    fill_transport(soa_n.Text, socity.Text, sotransport);
                    sotransport.Text = account_detail_from_04[30];
                    check_if_have_delivery_account(soa_n.Text, sos_a.Text);
                    soitemlist.Enabled = true;
                    soitemlist.Visible = true;
                }
                populate_screen();
                get_tax_desc_from_dc("O", sodbc.SelectedValue.ToString(), Convert.ToInt32(sotaxcode.Text));
                show_images();
                so_party_help.Visible = false;
            }
            catch (Exception ex)
            {

            }
            finally
            {
                bsoPartyChangeIgnore = false;
            }
            objPleaseWait.Close();
            soitemlist.Enabled = true;
            soitemlist.Visible = true;
        }

        private DataSet fSearchAll(string strSearchKey)
        {
            List<string> lstSearchAllTableQueries = new List<string>();
            DataSet dsTableStructure = ConnectionCommand.fGetTableStructure();
            DataSet dsResults = new DataSet();
            char[] strTrimEnd = { 'O', 'R', ' ' };
            string strColumnName = string.Empty;
            string strQuery = string.Empty;
            string strTableName = string.Empty;
            if (dsTableStructure != null && dsTableStructure.Tables != null && dsTableStructure.Tables.Count > 0)
            {
                for (int iTableCount = 0; iTableCount < dsTableStructure.Tables.Count; iTableCount++)
                {

                    StringBuilder strQueryBuilder = new StringBuilder();
                    strTableName = dsTableStructure.Tables[iTableCount].TableName;
                    this.Text = "Please wait fetching Results from " + strTableName + " table ";
                    strQueryBuilder.Append("select  * from " + strTableName + " where (");
                    for (int iRowCount = 0; iRowCount < dsTableStructure.Tables[iTableCount].Rows.Count; iRowCount++)
                    {
                        //OleDbType columnType = (OleDbType)dsTableStructure.Tables[iTableCount].Rows[iRowCount]["DATA_TYPE"]; 
                        strColumnName = dsTableStructure.Tables[iTableCount].Rows[iRowCount]["COLUMN_NAME"].ToString();
                        strQueryBuilder.Append(" IIf(IsNull([" + strColumnName + "]), '', CStr([" + strColumnName + "])) = '" + strSearchKey + "' OR ");
                        strColumnName = string.Empty;
                    }
                    strQuery = strQueryBuilder.ToString().TrimEnd(strTrimEnd) + " ) ";
                    lstSearchAllTableQueries.Add(strQuery);
                    ConnectionWithAccess.query = strQuery;
                    if (ConnectionWithAccess.QueryParamList != null)
                        ConnectionWithAccess.QueryParamList.Clear();
                    try
                    {
                        DataTable dtNewTable = ConnectionCommand.fGetDataTable();
                        dtNewTable.TableName = strTableName + "_Results";
                        dsResults.Tables.Add(dtNewTable);
                    }
                    catch (Exception ex)
                    {
                    }
                    strQuery = string.Empty;
                    strTableName = string.Empty;
                }
            }
            return dsResults;
        }

        private void tbgst_number_Validating(object sender, CancelEventArgs e)
        {
            if (tbgst_number.Text.Trim() != "")
            {
                if (!fValidateGSTNumberFormat(tbgst_number.Text.Trim()))
                {
                    MessageBox.Show("Invalid GST Number");
                    e.Cancel = true;
                }
            }
        }

        private void check_gst_number_available()
        {
            dgv_gst_report.DataSource = null;
            ConnectionWithAccess.query = "select distinct d_c from " + ConnectionWithAccess.tablename[21] + " where d_n = 999999";
            ConnectionCommand.retrieval(cb_rg_d_c);
            rg_a_n.Text = get_a_n_from_d_c("S", Convert.ToInt32(cb_rg_d_c.Text));
            ConnectionWithAccess.query = "select distinct f21.D_D, f21.D_N, f1.[desc] as [Desc], f1.city, f1.gst_number, f21.bamt,f21.CGST_AMT, f21.SGST_AMT,f21.IGST_AMT,f21.gamt,f21.prd,f21.d_c,f21.d_n,f21.RUND_AMT from " + ConnectionWithAccess.tablename[1] + " f1, " + ConnectionWithAccess.tablename[21] + " f21 where f1.a_n = f21.a_n and f1.s_a = f21.s_a and f21.prd = '" + ConnectionWithAccess.mprd + "' and f21.d_d >= @From and f21.d_d <= @To and f1.gst_number = '' and f21.d_c = " + cb_rg_d_c.Text + " order by f21.d_d";
            //parameters_for_date_range(ConnectionWithAccess.msdate, ConnectionWithAccess.medate);
            parameters_for_date_range("01/07/2017", ConnectionWithAccess.medate);
            ConnectionCommand.accountHelp_datatable_Seperate(dgv_gst_report, "Gst Sale List");
            temp_word = "List of Customer's with Missing Gst Numbers";
            print_pdf_line(cour_7, temp_word, 10, -3);
            for (row_pointer = 0; row_pointer < dgv_gst_report.Rows.Count - 1; row_pointer++)
            {
                temp_word = dgv_gst_report.Rows[row_pointer].Cells[0].Value.ToString();
                temp_word = temp_word.Substring(0, temp_word.IndexOf(" "));
                temp_word += "-" + dgv_gst_report.Rows[row_pointer].Cells[1].Value.ToString();
                print_pdf_line(cour_7, temp_word, 10, -3);
                temp_word = dgv_gst_report.Rows[row_pointer].Cells[2].Value.ToString().Replace(",", "") + " ," + dgv_gst_report.Rows[row_pointer].Cells[3].Value.ToString();
                temp_word += ",";
                temp_word += dgv_gst_report.Rows[row_pointer].Cells[4].Value.ToString();
                print_pdf_line(cour_7, temp_word, 90, -16);
                print_pdf_line(cour_7, "Missing Gst Number", 300, -16);
            }

            ConnectionWithAccess.query = "select distinct d_c from " + ConnectionWithAccess.tablename[22] + " where d_n = 999999";
            ConnectionCommand.retrieval(cb_rg_d_c);
            rg_a_n.Text = get_a_n_from_d_c("P", Convert.ToInt32(cb_rg_d_c.Text));
            ConnectionWithAccess.query = "select distinct f22.D_D, f22.D_N, f1.[desc] as [Desc], f1.city, f1.gst_number, f22.bamt,f22.CGST_AMT, f22.SGST_AMT,f22.IGST_AMT,f22.gamt,f22.prd,f22.d_c,f22.d_n,f22.RUND_AMT from " + ConnectionWithAccess.tablename[1] + " f1, " + ConnectionWithAccess.tablename[22] + " f22 where f1.a_n = f22.a_n and f1.s_a = f22.s_a and f22.prd = '" + ConnectionWithAccess.mprd + "' and f22.d_d >= @From and f22.d_d <= @To and f1.gst_number = '' and f22.d_c = " + cb_rg_d_c.Text + " order by f22.d_d";
            //parameters_for_date_range(ConnectionWithAccess.msdate, ConnectionWithAccess.medate);
            parameters_for_date_range("01/07/2017", ConnectionWithAccess.medate);
            ConnectionCommand.accountHelp_datatable_Seperate(dgv_gst_report, "Gst Sale List");
            temp_word = "List of Supplier's with Missing Gst Numbers";
            print_pdf_line(cour_7, temp_word, 10, -3);
            for (row_pointer = 0; row_pointer < dgv_gst_report.Rows.Count - 1; row_pointer++)
            {
                temp_word = dgv_gst_report.Rows[row_pointer].Cells[0].Value.ToString();
                temp_word = temp_word.Substring(0, temp_word.IndexOf(" "));
                temp_word += "-" + dgv_gst_report.Rows[row_pointer].Cells[1].Value.ToString();
                print_pdf_line(cour_7, temp_word, 10, -3);
                temp_word = dgv_gst_report.Rows[row_pointer].Cells[2].Value.ToString().Replace(",", "") + " ," + dgv_gst_report.Rows[row_pointer].Cells[3].Value.ToString();
                temp_word += ",";
                temp_word += dgv_gst_report.Rows[row_pointer].Cells[4].Value.ToString();
                print_pdf_line(cour_7, temp_word, 90, -16);
                print_pdf_line(cour_7, "Missing Gst Number", 300, -16);
            }

        }

        private void check_for_bank_pass_date()
        {
            dgv_gst_report.DataSource = null;
            ConnectionWithAccess.query = "select f23.PASS_DATE, f23.D_N, f1.[desc], f1.city, f23.bamt from " + ConnectionWithAccess.tablename[23] + " f23 inner join " + ConnectionWithAccess.tablename[1] + " f1 on f23.a_n = f1.a_n and f23.s_a = f1.s_a where prd = '" + ConnectionWithAccess.mprd + "' and d_n <> 999999 and (pass_date < @From or pass_date > @To) and b_t = '3'";
            //string strQuery_tmp = string.Empty;
            //strQuery_tmp += " select f23.PASS_DATE, f23.D_N, f1.[desc], f1.city, f23.bamt from " + ConnectionWithAccess.tablename[23] + " f23 inner join " + ConnectionWithAccess.tablename[1] + " f1 on f23.a_n = f1.a_n and f23.s_a = f1.s_a where prd = '" + ConnectionWithAccess.mprd + "' and d_n <> 999999 and (pass_date < @From or pass_date > @To) and b_t = '3'";
            //ConnectionWithAccess.query = strQuery_tmp;
            //dtEmerg_old_1 = ConnectionCommand.fGetDataTable();
            parameters_for_date_range(ConnectionWithAccess.msdate, ConnectionWithAccess.medate);
            ConnectionCommand.accountHelp_datatable_Seperate(dgv_gst_report, "Gst Sale List");
            temp_word = "List of Mistakes in Bank Entries";
            print_pdf_line(cour_7, temp_word, 10, -3);
            for (row_pointer = 0; row_pointer < dgv_gst_report.Rows.Count - 1; row_pointer++)
            {
                temp_word = dgv_gst_report.Rows[row_pointer].Cells["PASS_DATE"].Value.ToString();
                temp_word = temp_word.Substring(0, temp_word.IndexOf(" "));
                print_pdf_line(cour_7, temp_word, 10, -3);
                temp_word = dgv_gst_report.Rows[row_pointer].Cells["D_N"].Value.ToString();
                print_pdf_line(cour_7, temp_word, 90, -16);
                temp_word = dgv_gst_report.Rows[row_pointer].Cells["desc"].Value.ToString();
                print_pdf_line(cour_7, temp_word, 130, -16);
                temp_word = dgv_gst_report.Rows[row_pointer].Cells["city"].Value.ToString();
                print_pdf_line(cour_7, temp_word, 300, -16);
                temp_word = dgv_gst_report.Rows[row_pointer].Cells["bamt"].Value.ToString();
                print_pdf_line(cour_7, temp_word, 400, -16);
            }

            dgv_gst_report.DataSource = null;
            //ConnectionWithAccess.query = "select f23.PASS_DATE, f23.D_N, f1.[desc], f1.city, f23.bamt from " + ConnectionWithAccess.tablename[23] + " f23 inner join " + ConnectionWithAccess.tablename[1] + " f1 on f23.a_n = f1.a_n and f23.s_a = f1.s_a where prd = '" + ConnectionWithAccess.mprd + "' and (pass_date < @From or pass_date > @To) and b_t = '3' and f23.a_n like '2011%' and f23.tran_d_c = 0";
            ConnectionWithAccess.query = "select f23.PASS_DATE, f23.D_N, f1.[desc], f1.city, f23.bamt from " + ConnectionWithAccess.tablename[23] + " f23 inner join " + ConnectionWithAccess.tablename[1] + " f1 on f23.a_n = f1.a_n and f23.s_a = f1.s_a where prd = '" + ConnectionWithAccess.mprd + "' and b_t = '3' and f23.a_n like '2011%' and f23.tran_d_c = 0";
            //ConnectionWithAccess.query = "SELECT d_d,d_n,bamt from " + ConnectionWithAccess.tablename[23] + " where prd = '" + ConnectionWithAccess.mprd + "' and d_n <> 999999 and (pass_date < @From or pass_date > @To)";
            //ConnectionWithAccess.query = "select distinct f21.D_D, f21.D_N, f1.[desc] as [Desc], f1.city, f1.gst_number, f21.bamt,f21.CGST_AMT, f21.SGST_AMT,f21.IGST_AMT,f21.gamt,f21.prd,f21.d_c,f21.d_n,f21.RUND_AMT from " + ConnectionWithAccess.tablename[1] + " f1, " + ConnectionWithAccess.tablename[21] + " f21 where f1.a_n = f21.a_n and f1.s_a = f21.s_a and f21.prd = '" + ConnectionWithAccess.mprd + "' and f21.d_d >= @From and f21.d_d <= @To and f1.gst_number = '' and f21.d_c = " + cb_rg_d_c.Text + " order by f21.d_d";
            parameters_for_date_range(ConnectionWithAccess.msdate, ConnectionWithAccess.medate);
            ConnectionCommand.accountHelp_datatable_Seperate(dgv_gst_report, "Gst Sale List");
            temp_word = "List of Mistakes in Bank Entries";
            print_pdf_line(cour_7, temp_word, 10, -3);
            for (row_pointer = 0; row_pointer < dgv_gst_report.Rows.Count - 1; row_pointer++)
            {
                temp_word = dgv_gst_report.Rows[row_pointer].Cells["PASS_DATE"].Value.ToString();
                temp_word = temp_word.Substring(0, temp_word.IndexOf(" "));
                print_pdf_line(cour_7, temp_word, 10, -3);
                temp_word = dgv_gst_report.Rows[row_pointer].Cells["D_N"].Value.ToString();
                print_pdf_line(cour_7, temp_word, 90, -16);
                temp_word = dgv_gst_report.Rows[row_pointer].Cells["desc"].Value.ToString();
                print_pdf_line(cour_7, temp_word, 130, -16);
                temp_word = dgv_gst_report.Rows[row_pointer].Cells["city"].Value.ToString();
                print_pdf_line(cour_7, temp_word, 300, -16);
                temp_word = dgv_gst_report.Rows[row_pointer].Cells["bamt"].Value.ToString();
                print_pdf_line(cour_7, temp_word, 400, -16);
            }
        }

        private void check_for_valid_cash_d_d_date()
        {
            //ConnectionWithAccess.query = "SELECT d_d,d_n,bamt from " + ConnectionWithAccess.tablename[24] + " where prd = '" + ConnectionWithAccess.mprd + "' and d_n <> 999999 and (d_d < @From or d_d > @To)";
            //ConnectionWithAccess.query = "select distinct f21.D_D, f21.D_N, f1.[desc] as [Desc], f1.city, f1.gst_number, f21.bamt,f21.CGST_AMT, f21.SGST_AMT,f21.IGST_AMT,f21.gamt,f21.prd,f21.d_c,f21.d_n,f21.RUND_AMT from " + ConnectionWithAccess.tablename[1] + " f1, " + ConnectionWithAccess.tablename[21] + " f21 where f1.a_n = f21.a_n and f1.s_a = f21.s_a and f21.prd = '" + ConnectionWithAccess.mprd + "' and f21.d_d >= @From and f21.d_d <= @To and f1.gst_number = '' and f21.d_c = " + cb_rg_d_c.Text + " order by f21.d_d";
            for (row_counter = 1; row_counter < dt_Period_Master_List.Rows.Count; row_counter++)
            {
                temp_prd = dt_Period_Master_List.Rows[row_counter]["prd"].ToString();
                temp_start_period = (dt_Period_Master_List.Rows[row_counter]["start"].ToString());
                temp_end_period = (dt_Period_Master_List.Rows[row_counter]["end"].ToString());

                dgv_gst_report.DataSource = null;
                //ConnectionWithAccess.query = "select f24.d_d, f24.D_N, f1.[desc], f1.city, f24.camt from " + ConnectionWithAccess.tablename[24] + " f24 inner join " + ConnectionWithAccess.tablename[1] + " f1 on f24.a_n = f1.a_n and f24.s_a = f1.s_a where prd = '" + ConnectionWithAccess.mprd + "' and d_n <> 999999 and (d_d < @From or d_d > @To)";
                ConnectionWithAccess.query = "select f24.d_d, f24.D_N, f1.[desc], f1.city, f24.camt from " + ConnectionWithAccess.tablename[24] + " f24 inner join " + ConnectionWithAccess.tablename[1] + " f1 on f24.a_n = f1.a_n and f24.s_a = f1.s_a where prd = '" + temp_prd + "' and d_n <> 999999 and (d_d < @From or d_d > @To)";

                //parameters_for_date_range(ConnectionWithAccess.msdate, ConnectionWithAccess.medate);
                parameters_for_date_range(temp_start_period, temp_end_period);
                ConnectionCommand.accountHelp_datatable_Seperate(dgv_gst_report, "Gst Sale List");
                if (dgv_gst_report.Rows.Count > 1)
                {
                    temp_word = "List of Mistakes in Cash Entries";
                    print_pdf_line(cour_7, temp_word, 10, -3);
                }
                for (row_pointer = 0; row_pointer < dgv_gst_report.Rows.Count - 1; row_pointer++)
                {
                    temp_word = dgv_gst_report.Rows[row_pointer].Cells["d_d"].Value.ToString();
                    temp_word = temp_word.Substring(0, temp_word.IndexOf(" "));
                    print_pdf_line(cour_7, temp_word, 10, -3);
                    temp_word = dgv_gst_report.Rows[row_pointer].Cells["D_N"].Value.ToString();
                    print_pdf_line(cour_7, temp_word, 90, -16);
                    temp_word = dgv_gst_report.Rows[row_pointer].Cells["desc"].Value.ToString();
                    print_pdf_line(cour_7, temp_word, 130, -16);
                    temp_word = dgv_gst_report.Rows[row_pointer].Cells["city"].Value.ToString();
                    print_pdf_line(cour_7, temp_word, 300, -16);
                    temp_word = dgv_gst_report.Rows[row_pointer].Cells["camt"].Value.ToString();
                    print_pdf_line(cour_7, temp_word, 400, -16);
                }
            }
        }

        private void add_error_gst_details_in_report_with_tax_details(string book)
        {
            dgv_gst_report.DataSource = null;
            gst_csv_list.Clear();
            if (book == "S")
            {
                ConnectionWithAccess.query = "select distinct d_c from " + ConnectionWithAccess.tablename[21] + " where d_n = 999999";
                ConnectionCommand.retrieval(cb_rg_d_c);
                rg_a_n.Text = get_a_n_from_d_c("S", Convert.ToInt32(cb_rg_d_c.Text));
                ConnectionWithAccess.query = "select distinct f21.D_D, f21.D_N, f1.[desc] as [Desc], f1.city, f1.gst_number, f21.bamt,f21.CGST_AMT, f21.SGST_AMT,f21.IGST_AMT,f21.gamt,f21.prd,f21.d_c,f21.d_n,f21.RUND_AMT from " + ConnectionWithAccess.tablename[1] + " f1, " + ConnectionWithAccess.tablename[21] + " f21 where f1.a_n = f21.a_n and f1.s_a = f21.s_a and f21.prd = '" + ConnectionWithAccess.mprd + "' and f21.d_d >= @From and f21.d_d <= @To and f21.d_c = " + cb_rg_d_c.Text + " order by f21.d_d";
                //parameters_for_date_range(ConnectionWithAccess.msdate, ConnectionWithAccess.medate);
                parameters_for_date_range("01/07/2017", ConnectionWithAccess.medate);
                ConnectionCommand.accountHelp_datatable_Seperate(dgv_gst_report, "Gst Sale List");
                if (dgv_gst_report.Rows.Count > 1)
                {
                    temp_word = "Data Entry Sale Posting Error List";
                    print_pdf_line_at_center(cour_9_bold, temp_word, 0, "cour_9");
                    for (row_pointer = 0; row_pointer < dgv_gst_report.Rows.Count; row_pointer++)
                    {
                        if (dgv_gst_report.Rows[row_pointer].Cells["bamt"].Value != System.DBNull.Value && dgv_gst_report.Rows[row_pointer].Cells["bamt"].Value != null)
                        {
                            if (dgv_gst_report.Rows[row_pointer].Cells["IGST_AMT"].Value == System.DBNull.Value)
                            {
                                if (dgv_gst_report.Rows[row_pointer].Cells["bamt"].Value != System.DBNull.Value && dgv_gst_report.Rows[row_pointer].Cells["bamt"].Value != null)
                                    temp_float = Convert.ToSingle(dgv_gst_report.Rows[row_pointer].Cells["bamt"].Value.ToString());
                                if (dgv_gst_report.Rows[row_pointer].Cells["CGST_AMT"].Value != System.DBNull.Value && dgv_gst_report.Rows[row_pointer].Cells["CGST_AMT"].Value != null)
                                    temp_float += Convert.ToSingle(dgv_gst_report.Rows[row_pointer].Cells["CGST_AMT"].Value.ToString());
                                if (dgv_gst_report.Rows[row_pointer].Cells["SGST_AMT"].Value != System.DBNull.Value && dgv_gst_report.Rows[row_pointer].Cells["SGST_AMT"].Value != null)
                                    temp_float += Convert.ToSingle(dgv_gst_report.Rows[row_pointer].Cells["SGST_AMT"].Value.ToString());
                                if (dgv_gst_report.Rows[row_pointer].Cells["RUND_AMT"].Value != System.DBNull.Value && dgv_gst_report.Rows[row_pointer].Cells["RUND_AMT"].Value != null)
                                    temp_float += Convert.ToSingle(dgv_gst_report.Rows[row_pointer].Cells["RUND_AMT"].Value.ToString());
                                temp_float = Convert.ToSingle(Math.Round(temp_float, 0));
                                if (temp_float != Convert.ToSingle(dgv_gst_report.Rows[row_pointer].Cells["gamt"].Value.ToString()))
                                {
                                    temp_word2 = dgv_gst_report.Rows[row_pointer].Cells[0].Value.ToString();
                                    temp_word2 = temp_word2.Substring(0, temp_word2.IndexOf(" "));
                                    temp_word = "S," + temp_word2 + "-" + dgv_gst_report.Rows[row_pointer].Cells[1].Value.ToString();
                                    temp_word += ",";
                                    temp_word += dgv_gst_report.Rows[row_pointer].Cells[2].Value.ToString().Replace(",", "") + " ," + dgv_gst_report.Rows[row_pointer].Cells[3].Value.ToString();
                                    temp_word += ",";
                                    temp_word += dgv_gst_report.Rows[row_pointer].Cells[4].Value.ToString();
                                    temp_word += ",";
                                    if (dgv_gst_report.Rows[row_pointer].Cells[5].Value != null && dgv_gst_report.Rows[row_pointer].Cells[5].Value != System.DBNull.Value)
                                        temp_word += (dgv_gst_report.Rows[row_pointer].Cells[5].Value.ToString());
                                    temp_word += ",";
                                    if (dgv_gst_report.Rows[row_pointer].Cells[6].Value != null && dgv_gst_report.Rows[row_pointer].Cells[6].Value != System.DBNull.Value)
                                        temp_word += (dgv_gst_report.Rows[row_pointer].Cells[6].Value.ToString());
                                    temp_word += ",";
                                    if (dgv_gst_report.Rows[row_pointer].Cells[7].Value != null && dgv_gst_report.Rows[row_pointer].Cells[7].Value != System.DBNull.Value)
                                        temp_word += (dgv_gst_report.Rows[row_pointer].Cells[7].Value.ToString());
                                    temp_word += ",";
                                    if (dgv_gst_report.Rows[row_pointer].Cells[8].Value != null && dgv_gst_report.Rows[row_pointer].Cells[8].Value != System.DBNull.Value)
                                        temp_word += (dgv_gst_report.Rows[row_pointer].Cells[8].Value.ToString());
                                    temp_word += ",";
                                    if (dgv_gst_report.Rows[row_pointer].Cells[9].Value != null && dgv_gst_report.Rows[row_pointer].Cells[9].Value != System.DBNull.Value)
                                        temp_word += (dgv_gst_report.Rows[row_pointer].Cells[9].Value.ToString());
                                    temp_word += "," + dgv_gst_report.Rows[row_pointer].Cells[10].Value.ToString();
                                    temp_word += "," + dgv_gst_report.Rows[row_pointer].Cells[11].Value.ToString();
                                    temp_word += "," + dgv_gst_report.Rows[row_pointer].Cells[12].Value.ToString();
                                    gst_csv_list.Add(temp_word);

                                }
                            }
                            else
                            {
                                if (dgv_gst_report.Rows[row_pointer].Cells["bamt"].Value != System.DBNull.Value && dgv_gst_report.Rows[row_pointer].Cells["bamt"].Value != null)
                                    temp_float = Convert.ToSingle(dgv_gst_report.Rows[row_pointer].Cells["bamt"].Value.ToString());
                                if (dgv_gst_report.Rows[row_pointer].Cells["IGST_AMT"].Value != System.DBNull.Value && dgv_gst_report.Rows[row_pointer].Cells["CGST_AMT"].Value != null)
                                    temp_float += Convert.ToSingle(dgv_gst_report.Rows[row_pointer].Cells["IGST_AMT"].Value.ToString());
                                if (dgv_gst_report.Rows[row_pointer].Cells["RUND_AMT"].Value != System.DBNull.Value && dgv_gst_report.Rows[row_pointer].Cells["RUND_AMT"].Value != null)
                                    temp_float += Convert.ToSingle(dgv_gst_report.Rows[row_pointer].Cells["RUND_AMT"].Value.ToString());
                                temp_float = Convert.ToSingle(Math.Round(temp_float, 0));
                                if (temp_float != Convert.ToSingle(dgv_gst_report.Rows[row_pointer].Cells["gamt"].Value.ToString()))
                                {
                                    temp_word2 = dgv_gst_report.Rows[row_pointer].Cells[0].Value.ToString();
                                    temp_word2 = temp_word2.Substring(0, temp_word2.IndexOf(" "));
                                    temp_word = "S," + temp_word2 + "-" + dgv_gst_report.Rows[row_pointer].Cells[1].Value.ToString();
                                    temp_word += ",";
                                    temp_word += dgv_gst_report.Rows[row_pointer].Cells[2].Value.ToString().Replace(",", "") + " ," + dgv_gst_report.Rows[row_pointer].Cells[3].Value.ToString();
                                    temp_word += ",";
                                    temp_word += dgv_gst_report.Rows[row_pointer].Cells[4].Value.ToString();
                                    temp_word += ",";
                                    if (dgv_gst_report.Rows[row_pointer].Cells[5].Value != null && dgv_gst_report.Rows[row_pointer].Cells[5].Value != System.DBNull.Value)
                                        temp_word += (dgv_gst_report.Rows[row_pointer].Cells[5].Value.ToString());
                                    temp_word += ",";
                                    if (dgv_gst_report.Rows[row_pointer].Cells[6].Value != null && dgv_gst_report.Rows[row_pointer].Cells[6].Value != System.DBNull.Value)
                                        temp_word += (dgv_gst_report.Rows[row_pointer].Cells[6].Value.ToString());
                                    temp_word += ",";
                                    if (dgv_gst_report.Rows[row_pointer].Cells[7].Value != null && dgv_gst_report.Rows[row_pointer].Cells[7].Value != System.DBNull.Value)
                                        temp_word += (dgv_gst_report.Rows[row_pointer].Cells[7].Value.ToString());
                                    temp_word += ",";
                                    if (dgv_gst_report.Rows[row_pointer].Cells[8].Value != null && dgv_gst_report.Rows[row_pointer].Cells[8].Value != System.DBNull.Value)
                                        temp_word += (dgv_gst_report.Rows[row_pointer].Cells[8].Value.ToString());
                                    temp_word += ",";
                                    if (dgv_gst_report.Rows[row_pointer].Cells[9].Value != null && dgv_gst_report.Rows[row_pointer].Cells[9].Value != System.DBNull.Value)
                                        temp_word += (dgv_gst_report.Rows[row_pointer].Cells[9].Value.ToString());
                                    temp_word += "," + dgv_gst_report.Rows[row_pointer].Cells[10].Value.ToString();
                                    temp_word += "," + dgv_gst_report.Rows[row_pointer].Cells[11].Value.ToString();
                                    temp_word += "," + dgv_gst_report.Rows[row_pointer].Cells[12].Value.ToString();
                                    gst_csv_list.Add(temp_word);

                                }
                            }
                        }
                    }
                }
            }
            else if (book == "P")
            {
                ConnectionWithAccess.query = "select distinct d_c from " + ConnectionWithAccess.tablename[22] + " where d_n = 999999";
                ConnectionCommand.retrieval(cb_rg_d_c);
                rg_a_n.Text = get_a_n_from_d_c("P", Convert.ToInt32(cb_rg_d_c.Text));
                ConnectionWithAccess.query = "select distinct f22.D_D, f22.D_N, f1.[desc] as [Desc], f1.city, f1.gst_number, f22.bamt,f22.CGST_AMT, f22.SGST_AMT,f22.IGST_AMT,f22.gamt,f22.prd,f22.d_c,f22.RUND_AMT,f22.freight_AMT,f22.packing_AMT,f22.insurance_AMT from " + ConnectionWithAccess.tablename[1] + " f1, " + ConnectionWithAccess.tablename[22] + " f22 where f1.a_n = f22.a_n and f1.s_a = f22.s_a and f22.prd = '" + ConnectionWithAccess.mprd + "' and f22.d_d >= @From and f22.d_d <= @To and f22.d_c = " + cb_rg_d_c.Text + " order by f22.d_d";
                //parameters_for_date_range(ConnectionWithAccess.msdate, ConnectionWithAccess.medate);
                parameters_for_date_range("01/07/2017", ConnectionWithAccess.medate);
                ConnectionCommand.accountHelp_datatable_Seperate(dgv_gst_report, "Gst Sale List");
                if (dgv_gst_report.Rows.Count > 1)
                {
                    temp_word = "Data Entry Purchase Posting Error List";
                    print_pdf_line_at_center(cour_9_bold, temp_word, 0, "cour_9");
                    for (row_pointer = 0; row_pointer < dgv_gst_report.Rows.Count; row_pointer++)
                    {
                        if (dgv_gst_report.Rows[row_pointer].Cells["bamt"].Value != System.DBNull.Value && dgv_gst_report.Rows[row_pointer].Cells["bamt"].Value != null)
                        {
                            if (dgv_gst_report.Rows[row_pointer].Cells["D_N"].Value.ToString() == "60")
                                temp_word = "sanjay";
                            if (dgv_gst_report.Rows[row_pointer].Cells["bamt"].Value.ToString() == "18480")
                                temp_word = "sanjay";
                            if (dgv_gst_report.Rows[row_pointer].Cells["IGST_AMT"].Value == System.DBNull.Value)
                            {
                                if (dgv_gst_report.Rows[row_pointer].Cells["bamt"].Value != System.DBNull.Value && dgv_gst_report.Rows[row_pointer].Cells["bamt"].Value != null)
                                    temp_float = Convert.ToSingle(dgv_gst_report.Rows[row_pointer].Cells["bamt"].Value.ToString());
                                if (dgv_gst_report.Rows[row_pointer].Cells["CGST_AMT"].Value != System.DBNull.Value && dgv_gst_report.Rows[row_pointer].Cells["CGST_AMT"].Value != null)
                                    temp_float += Convert.ToSingle(dgv_gst_report.Rows[row_pointer].Cells["CGST_AMT"].Value.ToString());
                                if (dgv_gst_report.Rows[row_pointer].Cells["SGST_AMT"].Value != System.DBNull.Value && dgv_gst_report.Rows[row_pointer].Cells["SGST_AMT"].Value != null)
                                    temp_float += Convert.ToSingle(dgv_gst_report.Rows[row_pointer].Cells["SGST_AMT"].Value.ToString());
                                if (dgv_gst_report.Rows[row_pointer].Cells["freight_AMT"].Value != System.DBNull.Value && dgv_gst_report.Rows[row_pointer].Cells["freight_AMT"].Value != null)
                                    temp_float += Convert.ToSingle(dgv_gst_report.Rows[row_pointer].Cells["freight_AMT"].Value.ToString());
                                if (dgv_gst_report.Rows[row_pointer].Cells["packing_AMT"].Value != System.DBNull.Value && dgv_gst_report.Rows[row_pointer].Cells["packing_AMT"].Value != null)
                                    temp_float += Convert.ToSingle(dgv_gst_report.Rows[row_pointer].Cells["packing_AMT"].Value.ToString());
                                if (dgv_gst_report.Rows[row_pointer].Cells["insurance_AMT"].Value != System.DBNull.Value && dgv_gst_report.Rows[row_pointer].Cells["insurance_AMT"].Value != null)
                                    temp_float += Convert.ToSingle(dgv_gst_report.Rows[row_pointer].Cells["insurance_AMT"].Value.ToString());
                                if (dgv_gst_report.Rows[row_pointer].Cells["RUND_AMT"].Value != System.DBNull.Value && dgv_gst_report.Rows[row_pointer].Cells["RUND_AMT"].Value != null)
                                {
                                    temp_double = Convert.ToSingle(dgv_gst_report.Rows[row_pointer].Cells["RUND_AMT"].Value.ToString());
                                    //if (temp_double == 0.5)
                                    temp_float += Convert.ToSingle(temp_double);
                                    //else if (temp_double > 0)
                                    //    temp_float -= Convert.ToSingle(temp_double);
                                    //else
                                    //    temp_float += Convert.ToSingle(temp_double);
                                }
                                temp_float = Convert.ToSingle(Math.Round(temp_float, 0));
                                if (temp_float != Convert.ToSingle(dgv_gst_report.Rows[row_pointer].Cells["gamt"].Value.ToString()))
                                {
                                    temp_word2 = dgv_gst_report.Rows[row_pointer].Cells[0].Value.ToString();
                                    temp_word2 = temp_word2.Substring(0, temp_word2.IndexOf(" "));
                                    temp_word = "P," + temp_word2 + "-" + dgv_gst_report.Rows[row_pointer].Cells[1].Value.ToString();
                                    temp_word += ",";
                                    temp_word += dgv_gst_report.Rows[row_pointer].Cells[2].Value.ToString().Replace(",", "") + " ," + dgv_gst_report.Rows[row_pointer].Cells[3].Value.ToString();
                                    temp_word += ",";
                                    temp_word += dgv_gst_report.Rows[row_pointer].Cells[4].Value.ToString();
                                    temp_word += ",";
                                    if (dgv_gst_report.Rows[row_pointer].Cells[5].Value != null && dgv_gst_report.Rows[row_pointer].Cells[5].Value != System.DBNull.Value)
                                        temp_word += (dgv_gst_report.Rows[row_pointer].Cells[5].Value.ToString());
                                    temp_word += ",";
                                    if (dgv_gst_report.Rows[row_pointer].Cells[6].Value != null && dgv_gst_report.Rows[row_pointer].Cells[6].Value != System.DBNull.Value)
                                        temp_word += (dgv_gst_report.Rows[row_pointer].Cells[6].Value.ToString());
                                    temp_word += ",";
                                    if (dgv_gst_report.Rows[row_pointer].Cells[7].Value != null && dgv_gst_report.Rows[row_pointer].Cells[7].Value != System.DBNull.Value)
                                        temp_word += (dgv_gst_report.Rows[row_pointer].Cells[7].Value.ToString());
                                    temp_word += ",";
                                    if (dgv_gst_report.Rows[row_pointer].Cells[8].Value != null && dgv_gst_report.Rows[row_pointer].Cells[8].Value != System.DBNull.Value)
                                        temp_word += (dgv_gst_report.Rows[row_pointer].Cells[8].Value.ToString());
                                    temp_word += ",";
                                    if (dgv_gst_report.Rows[row_pointer].Cells[9].Value != null && dgv_gst_report.Rows[row_pointer].Cells[9].Value != System.DBNull.Value)
                                        temp_word += (dgv_gst_report.Rows[row_pointer].Cells[9].Value.ToString());
                                    temp_word += "," + dgv_gst_report.Rows[row_pointer].Cells[10].Value.ToString();
                                    temp_word += "," + dgv_gst_report.Rows[row_pointer].Cells[11].Value.ToString();
                                    temp_word += "," + dgv_gst_report.Rows[row_pointer].Cells[12].Value.ToString();
                                    gst_csv_list.Add(temp_word);

                                }
                            }
                            else
                            {
                                if (dgv_gst_report.Rows[row_pointer].Cells["bamt"].Value != System.DBNull.Value && dgv_gst_report.Rows[row_pointer].Cells["bamt"].Value != null)
                                    temp_float = Convert.ToSingle(dgv_gst_report.Rows[row_pointer].Cells["bamt"].Value.ToString());
                                if (dgv_gst_report.Rows[row_pointer].Cells["IGST_AMT"].Value != System.DBNull.Value && dgv_gst_report.Rows[row_pointer].Cells["CGST_AMT"].Value != null)
                                    temp_float += Convert.ToSingle(dgv_gst_report.Rows[row_pointer].Cells["IGST_AMT"].Value.ToString());
                                if (dgv_gst_report.Rows[row_pointer].Cells["freight_AMT"].Value != System.DBNull.Value && dgv_gst_report.Rows[row_pointer].Cells["freight_AMT"].Value != null)
                                    temp_float += Convert.ToSingle(dgv_gst_report.Rows[row_pointer].Cells["freight_AMT"].Value.ToString());
                                if (dgv_gst_report.Rows[row_pointer].Cells["packing_AMT"].Value != System.DBNull.Value && dgv_gst_report.Rows[row_pointer].Cells["packing_AMT"].Value != null)
                                    temp_float += Convert.ToSingle(dgv_gst_report.Rows[row_pointer].Cells["packing_AMT"].Value.ToString());
                                if (dgv_gst_report.Rows[row_pointer].Cells["insurance_AMT"].Value != System.DBNull.Value && dgv_gst_report.Rows[row_pointer].Cells["insurance_AMT"].Value != null)
                                    temp_float += Convert.ToSingle(dgv_gst_report.Rows[row_pointer].Cells["insurance_AMT"].Value.ToString());
                                if (dgv_gst_report.Rows[row_pointer].Cells["RUND_AMT"].Value != System.DBNull.Value && dgv_gst_report.Rows[row_pointer].Cells["RUND_AMT"].Value != null)
                                    temp_float += Convert.ToSingle(dgv_gst_report.Rows[row_pointer].Cells["RUND_AMT"].Value.ToString());
                                temp_float = Convert.ToSingle(Math.Round(temp_float, 0));
                                if (temp_float != Convert.ToSingle(dgv_gst_report.Rows[row_pointer].Cells["gamt"].Value.ToString()))
                                {
                                    temp_word2 = dgv_gst_report.Rows[row_pointer].Cells[0].Value.ToString();
                                    temp_word2 = temp_word2.Substring(0, temp_word2.IndexOf(" "));
                                    temp_word = "P," + temp_word2 + "-" + dgv_gst_report.Rows[row_pointer].Cells[1].Value.ToString();
                                    temp_word += ",";
                                    temp_word += dgv_gst_report.Rows[row_pointer].Cells[2].Value.ToString().Replace(",", "") + " ," + dgv_gst_report.Rows[row_pointer].Cells[3].Value.ToString();
                                    temp_word += ",";
                                    temp_word += dgv_gst_report.Rows[row_pointer].Cells[4].Value.ToString();
                                    temp_word += ",";
                                    if (dgv_gst_report.Rows[row_pointer].Cells[5].Value != null && dgv_gst_report.Rows[row_pointer].Cells[5].Value != System.DBNull.Value)
                                        temp_word += (dgv_gst_report.Rows[row_pointer].Cells[5].Value.ToString());
                                    temp_word += ",";
                                    if (dgv_gst_report.Rows[row_pointer].Cells[6].Value != null && dgv_gst_report.Rows[row_pointer].Cells[6].Value != System.DBNull.Value)
                                        temp_word += (dgv_gst_report.Rows[row_pointer].Cells[6].Value.ToString());
                                    temp_word += ",";
                                    if (dgv_gst_report.Rows[row_pointer].Cells[7].Value != null && dgv_gst_report.Rows[row_pointer].Cells[7].Value != System.DBNull.Value)
                                        temp_word += (dgv_gst_report.Rows[row_pointer].Cells[7].Value.ToString());
                                    temp_word += ",";
                                    if (dgv_gst_report.Rows[row_pointer].Cells[8].Value != null && dgv_gst_report.Rows[row_pointer].Cells[8].Value != System.DBNull.Value)
                                        temp_word += (dgv_gst_report.Rows[row_pointer].Cells[8].Value.ToString());
                                    temp_word += ",";
                                    if (dgv_gst_report.Rows[row_pointer].Cells[9].Value != null && dgv_gst_report.Rows[row_pointer].Cells[9].Value != System.DBNull.Value)
                                        temp_word += (dgv_gst_report.Rows[row_pointer].Cells[9].Value.ToString());
                                    temp_word += "," + dgv_gst_report.Rows[row_pointer].Cells[10].Value.ToString();
                                    temp_word += "," + dgv_gst_report.Rows[row_pointer].Cells[11].Value.ToString();
                                    temp_word += "," + dgv_gst_report.Rows[row_pointer].Cells[12].Value.ToString();
                                    gst_csv_list.Add(temp_word);

                                }
                            }
                        }
                    }
                }

                temp_word = "Date - Inv.                        Party's Name       City                             Gst Number                           Basic Amount       Cgst Amount        Sgst Amount        Igst Amount        Gross Amount";
                //                                                                                                 x00000000000000x00000000000000x00000000000000x00000000000000x0000000000000
                print_pdf_line(cour_7, temp_word, 10, 0);
                double bamt = 0, cgst_amt = 0, sgst_amt = 0, igst_amt = 0, gamt = 0;
                for (row_pointer = 0; row_pointer < gst_csv_list.Count(); row_pointer++)
                {
                    var cellArray = gst_csv_list[row_pointer].Split(new[] { ',' });
                    if (cellArray[0] == "S" && book == "S")
                    {
                        if (cellArray[4] != "")
                            print_pdf_line(cour_7, cellArray[1], 10, -3);
                        else
                            print_pdf_line(cour_9_bold, cellArray[1], 10, -3);
                        temp_word = cellArray[2] + " ," + cellArray[3];
                        if (temp_word.Length > 25)
                            temp_word = temp_word.Substring(0, 25);
                        print_pdf_line(cour_7, temp_word, 90, -16);
                        if (cellArray[4] != "")
                            print_pdf_line(cour_7, cellArray[4], 210, -16);
                        else
                            print_pdf_line(cour_7, "missing", 210, -16);
                        if (cellArray[5] != "")
                        {
                            temp_word = add_comma_to_number(cellArray[5]);
                            print_pdf_line(cour_7, temp_word, para_IndentationLeft_position(270, temp_word, "cour_7"), -16);
                            bamt += Convert.ToDouble(dgv_gst_report.Rows[row_pointer].Cells[5].Value);
                        }
                        if (cellArray[6] != "")
                        {
                            temp_word = add_comma_to_number(cellArray[6]);
                            print_pdf_line(cour_7, temp_word, para_IndentationLeft_position(325, temp_word, "cour_7"), -16);
                            cgst_amt += Convert.ToDouble(dgv_gst_report.Rows[row_pointer].Cells[6].Value);
                        }
                        if (cellArray[7] != "")
                        {
                            temp_word = add_comma_to_number(cellArray[7]);
                            print_pdf_line(cour_7, temp_word, para_IndentationLeft_position(380, temp_word, "cour_7"), -16);
                            sgst_amt += Convert.ToDouble(cellArray[7]);
                        }
                        if (cellArray[8] != "")
                        {
                            temp_word = add_comma_to_number(cellArray[8]);
                            print_pdf_line(cour_7, temp_word, para_IndentationLeft_position(435, temp_word, "cour_7"), -16);
                            igst_amt += Convert.ToDouble(cellArray[8]);
                        }
                        if (cellArray[9] != "")
                        {
                            temp_word = add_comma_to_number(cellArray[9]);
                            print_pdf_line(cour_7, temp_word, para_IndentationLeft_position(490, temp_word, "cour_7"), -16);
                            gamt += Convert.ToDouble(cellArray[9]);
                        }
                        if (ck_gst_report_add_brief_tax.Checked)
                        {
                            gst_tax_brief_sale_list(cellArray[0], cellArray[10], cellArray[11], cellArray[12], "", "");
                            if (gst_tax_brief_sale_list_array.Count() > 0)
                            {
                                for (row_counter = 0; row_counter < gst_tax_brief_sale_list_array.Count(); row_counter++)
                                {
                                    var cellArray1 = gst_tax_brief_sale_list_array[row_counter].Split(new[] { ',' });
                                    temp_word = cellArray1[0] + " %";
                                    print_pdf_line(cour_7, temp_word, para_IndentationLeft_position(60, temp_word, "cour_7"), -5);
                                    temp_word = cellArray1[1];
                                    print_pdf_line(cour_7, temp_word, para_IndentationLeft_position(120, temp_word, "cour_7"), -16);
                                    temp_word = cellArray1[2];
                                    print_pdf_line(cour_7, temp_word, para_IndentationLeft_position(200, temp_word, "cour_7"), -16);
                                }
                            }
                        }
                    }
                    else if (cellArray[0] == "P" && book == "P")
                    {
                        if (cellArray[4] != "")
                            print_pdf_line(cour_7, cellArray[1], 10, -3);
                        else
                            print_pdf_line(cour_9_bold, cellArray[1], 10, -3);
                        temp_word = cellArray[2] + " ," + cellArray[3];
                        if (temp_word.Length > 25)
                            temp_word = temp_word.Substring(0, 25);
                        if ((cellArray[6].ToString() == "" || cellArray[6].ToString() == "0.00") && (cellArray[7].ToString() == "" || cellArray[7].ToString() == "0.00") && (cellArray[8].ToString() == "" || cellArray[8].ToString() == "0.00"))
                            print_pdf_line(cour_9_bold, temp_word, 90, -16);
                        else
                            print_pdf_line(cour_7, temp_word, 90, -16);
                        if (cellArray[4] != "")
                            print_pdf_line(cour_7, cellArray[4], 210, -16);
                        else
                            print_pdf_line(cour_7, "missing", 210, -16);
                        if (cellArray[5] != "")
                        {
                            temp_word = add_comma_to_number(cellArray[5]);
                            print_pdf_line(cour_7, temp_word, para_IndentationLeft_position(270, temp_word, "cour_7"), -16);
                            bamt += Convert.ToDouble(cellArray[5]);
                        }
                        if (cellArray[6] != "")
                        {
                            temp_word = add_comma_to_number(cellArray[6]);
                            print_pdf_line(cour_7, temp_word, para_IndentationLeft_position(325, temp_word, "cour_7"), -16);
                            cgst_amt += Convert.ToDouble(cellArray[6]);
                        }
                        if (cellArray[7] != "")
                        {
                            temp_word = add_comma_to_number(cellArray[7]);
                            print_pdf_line(cour_7, temp_word, para_IndentationLeft_position(380, temp_word, "cour_7"), -16);
                            sgst_amt += Convert.ToDouble(cellArray[7]);
                        }
                        if (cellArray[8] != "" && cellArray[8] != "0.00")
                        {
                            temp_word = add_comma_to_number(cellArray[8]);
                            print_pdf_line(cour_7, temp_word, para_IndentationLeft_position(435, temp_word, "cour_7"), -16);
                            igst_amt += Convert.ToDouble(cellArray[8]);
                        }
                        if (cellArray[9] != "")
                        {
                            temp_word = add_comma_to_number(cellArray[9]);
                            print_pdf_line(cour_7, temp_word, para_IndentationLeft_position(490, temp_word, "cour_7"), -16);
                            gamt += Convert.ToDouble(cellArray[9]);
                        }
                        if (ck_gst_report_add_brief_tax.Checked)
                        {
                            gst_tax_brief_sale_list(cellArray[0], cellArray[10], cellArray[11], cellArray[12], cellArray[13], cellArray[14]);
                            if (gst_tax_brief_sale_list_array.Count() > 0)
                            {
                                for (row_counter = 0; row_counter < gst_tax_brief_sale_list_array.Count(); row_counter++)
                                {
                                    var cellArray1 = gst_tax_brief_sale_list_array[row_counter].Split(new[] { ',' });
                                    temp_word = cellArray1[0] + " %";
                                    print_pdf_line(cour_7, temp_word, para_IndentationLeft_position(60, temp_word, "cour_7"), -5);
                                    temp_word = cellArray1[1];
                                    print_pdf_line(cour_7, temp_word, para_IndentationLeft_position(120, temp_word, "cour_7"), -16);
                                    temp_word = cellArray1[2];
                                    print_pdf_line(cour_7, temp_word, para_IndentationLeft_position(200, temp_word, "cour_7"), -16);
                                }
                            }
                        }
                    }
                    else if (book == "B")
                    {
                        print_pdf_line(cour_7, temp_word, 10, -3);
                        temp_word = dgv_gst_report.Rows[row_pointer].Cells[2].Value.ToString() + " ," + dgv_gst_report.Rows[row_pointer].Cells[3].Value.ToString();
                        if (temp_word.Length > 25)
                            temp_word = temp_word.Substring(0, 25);
                        print_pdf_line(cour_7, temp_word, 96, -16);
                        if (dgv_gst_report.Rows[row_pointer].Cells[5].Value != null && dgv_gst_report.Rows[row_pointer].Cells[5].Value != System.DBNull.Value)
                        {
                            temp_word = add_comma_to_number(dgv_gst_report.Rows[row_pointer].Cells[5].Value.ToString());
                            print_pdf_line(cour_7, temp_word, para_IndentationLeft_position(270, temp_word, "cour_7"), -16);
                            bamt += Convert.ToDouble(dgv_gst_report.Rows[row_pointer].Cells[5].Value);
                        }
                        if (dgv_gst_report.Rows[row_pointer].Cells[6].Value != null && dgv_gst_report.Rows[row_pointer].Cells[6].Value != System.DBNull.Value)
                        {
                            temp_word = add_comma_to_number(dgv_gst_report.Rows[row_pointer].Cells[6].Value.ToString());
                            print_pdf_line(cour_7, temp_word, para_IndentationLeft_position(325, temp_word, "cour_7"), -16);
                            cgst_amt += Convert.ToDouble(dgv_gst_report.Rows[row_pointer].Cells[6].Value);
                        }
                        if (dgv_gst_report.Rows[row_pointer].Cells[7].Value != null && dgv_gst_report.Rows[row_pointer].Cells[7].Value != System.DBNull.Value)
                        {
                            temp_word = add_comma_to_number(dgv_gst_report.Rows[row_pointer].Cells[7].Value.ToString());
                            print_pdf_line(cour_7, temp_word, para_IndentationLeft_position(380, temp_word, "cour_7"), -16);
                            sgst_amt += Convert.ToDouble(dgv_gst_report.Rows[row_pointer].Cells[7].Value);
                        }
                        if (dgv_gst_report.Rows[row_pointer].Cells[8].Value != null && dgv_gst_report.Rows[row_pointer].Cells[8].Value != System.DBNull.Value)
                        {
                            temp_word = add_comma_to_number(dgv_gst_report.Rows[row_pointer].Cells[8].Value.ToString());
                            print_pdf_line(cour_7, temp_word, para_IndentationLeft_position(435, temp_word, "cour_7"), -16);
                            igst_amt += Convert.ToDouble(dgv_gst_report.Rows[row_pointer].Cells[8].Value);
                        }
                        if (dgv_gst_report.Rows[row_pointer].Cells[9].Value != null && dgv_gst_report.Rows[row_pointer].Cells[9].Value != System.DBNull.Value)
                        {
                            temp_word = add_comma_to_number(dgv_gst_report.Rows[row_pointer].Cells[9].Value.ToString());
                            print_pdf_line(cour_7, temp_word, para_IndentationLeft_position(490, temp_word, "cour_7"), -16);
                            gamt += Convert.ToDouble(dgv_gst_report.Rows[row_pointer].Cells[9].Value);
                        }
                    }
                    else if (book == "J")
                    {
                        print_pdf_line(cour_7, temp_word, 10, -3);
                        temp_word = dgv_gst_report.Rows[row_pointer].Cells[2].Value.ToString() + " ," + dgv_gst_report.Rows[row_pointer].Cells[3].Value.ToString();
                        if (temp_word.Length > 25)
                            temp_word = temp_word.Substring(0, 25);
                        print_pdf_line(cour_7, temp_word, 96, -16);
                        if (dgv_gst_report.Rows[row_pointer].Cells[5].Value != null && dgv_gst_report.Rows[row_pointer].Cells[5].Value != System.DBNull.Value)
                        {
                            temp_word = add_comma_to_number(dgv_gst_report.Rows[row_pointer].Cells[5].Value.ToString());
                            print_pdf_line(cour_7, temp_word, para_IndentationLeft_position(270, temp_word, "cour_7"), -16);
                            bamt += Convert.ToDouble(dgv_gst_report.Rows[row_pointer].Cells[5].Value);
                        }
                        if (dgv_gst_report.Rows[row_pointer].Cells[6].Value != null && dgv_gst_report.Rows[row_pointer].Cells[6].Value != System.DBNull.Value)
                        {
                            temp_word = add_comma_to_number(dgv_gst_report.Rows[row_pointer].Cells[6].Value.ToString());
                            print_pdf_line(cour_7, temp_word, para_IndentationLeft_position(435, temp_word, "cour_7"), -16);
                            igst_amt += Convert.ToDouble(dgv_gst_report.Rows[row_pointer].Cells[6].Value);
                        }
                        if (dgv_gst_report.Rows[row_pointer].Cells[7].Value != null && dgv_gst_report.Rows[row_pointer].Cells[7].Value != System.DBNull.Value)
                        {
                            temp_word = add_comma_to_number(dgv_gst_report.Rows[row_pointer].Cells[7].Value.ToString());
                            print_pdf_line(cour_7, temp_word, para_IndentationLeft_position(490, temp_word, "cour_7"), -16);
                            gamt += Convert.ToDouble(dgv_gst_report.Rows[row_pointer].Cells[7].Value);
                        }
                    }
                    if (actual_line_number_of_page > 55)
                        temp_word = "";
                }
                temp_word = "------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------";
                print_pdf_line(cour_9, temp_word, 10, -5);
                if (book == "S")
                    temp_word = "Sale's Book";
                else if (book == "P")
                    temp_word = "Purchase's Book";
                else if (book == "B")
                    temp_word = "Bank's Book";
                else if (book == "C")
                    temp_word = "Cash's Book";
                else if (book == "J")
                    temp_word = "Journal's Book";
                temp_word2 = temp_word;
                print_pdf_line(cour_9, temp_word, 10, -5);
                if (!bamt.ToString().Contains("."))
                    temp_word = bamt.ToString() + ".00";
                else
                    temp_word = bamt.ToString();
                temp_word2 += "," + temp_word;
                temp_word = add_comma_to_number(temp_word);
                print_pdf_line(cour_7, temp_word, para_IndentationLeft_position(270, temp_word, "cour_7"), -16);
                if (!cgst_amt.ToString().Contains("."))
                    temp_word = cgst_amt.ToString() + ".00";
                else
                    temp_word = cgst_amt.ToString();
                temp_word2 += "," + temp_word;
                temp_word = add_comma_to_number(temp_word);
                print_pdf_line(cour_7, temp_word, para_IndentationLeft_position(325, temp_word, "cour_7"), -16);
                if (!sgst_amt.ToString().Contains("."))
                    temp_word = sgst_amt.ToString() + ".00";
                else
                    temp_word = sgst_amt.ToString();
                temp_word2 += "," + temp_word;
                temp_word = add_comma_to_number(temp_word);
                print_pdf_line(cour_7, temp_word, para_IndentationLeft_position(380, temp_word, "cour_7"), -16);
                if (book == "S")
                {
                    gst_amount_list[0] = cgst_amt.ToString();
                    gst_amount_list[5] = sgst_amt.ToString();
                    gst_amount_list[10] = igst_amt.ToString();
                }
                else if (book == "P")
                {
                    gst_amount_list[1] = cgst_amt.ToString();
                    gst_amount_list[6] = sgst_amt.ToString();
                    gst_amount_list[11] = igst_amt.ToString();
                }
                else if (book == "B")
                {
                    gst_amount_list[2] = cgst_amt.ToString();
                    gst_amount_list[7] = sgst_amt.ToString();
                    gst_amount_list[12] = igst_amt.ToString();
                }
                else if (book == "C")
                {
                    gst_amount_list[3] = cgst_amt.ToString();
                    gst_amount_list[8] = sgst_amt.ToString();
                    gst_amount_list[13] = igst_amt.ToString();
                }
                else if (book == "J")
                {
                    gst_amount_list[4] = cgst_amt.ToString();
                    gst_amount_list[9] = sgst_amt.ToString();
                    gst_amount_list[14] = igst_amt.ToString();
                }
                if (!igst_amt.ToString().Contains("."))
                    temp_word = igst_amt.ToString() + ".00";
                else
                    temp_word = igst_amt.ToString();
                temp_word2 += "," + temp_word;
                temp_word = add_comma_to_number(temp_word);
                print_pdf_line(cour_7, temp_word, para_IndentationLeft_position(435, temp_word, "cour_7"), -16);
                if (!gamt.ToString().Contains("."))
                    temp_word = gamt.ToString() + ".00";
                else
                    temp_word = gamt.ToString();
                temp_word2 += "," + temp_word;
                temp_word = add_comma_to_number(temp_word);
                print_pdf_line(cour_7, temp_word, para_IndentationLeft_position(490, temp_word, "cour_7"), -16);
                temp_word = "------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------";
                print_pdf_line(cour_9, temp_word, 10, -5);
                temporary_list_array.Add(temp_word2);
            }
        }

        private void add_error_gst_details_in_report(string book)
        {
            dgv_gst_report.DataSource = null;
            if (book == "S")
            {
                ConnectionWithAccess.query = "select distinct d_c from " + ConnectionWithAccess.tablename[21] + " where d_n = 999999";
                ConnectionCommand.retrieval(cb_rg_d_c);
                rg_a_n.Text = get_a_n_from_d_c("S", Convert.ToInt32(cb_rg_d_c.Text));
                ConnectionWithAccess.query = "select distinct f21.D_D, f21.D_N, f1.[desc] as [Desc], f1.city, f1.gst_number, f21.bamt,f21.CGST_AMT, f21.SGST_AMT,f21.IGST_AMT, f21.gamt from " + ConnectionWithAccess.tablename[1] + " f1, " + ConnectionWithAccess.tablename[21] + " f21 where f1.a_n = f21.a_n and f1.s_a = f21.s_a and f21.prd = '" + ConnectionWithAccess.mprd + "' and f21.d_d >= @From and f21.d_d <= @To and f21.d_c = " + cb_rg_d_c.Text + " order by f21.d_n";
                parameters_for_date_range(dtp_rg_from_date.Text, dtp_rg_to_date.Text);
                ConnectionCommand.accountHelp_datatable_Seperate(dgv_gst_report, "Gst Sale List");
            }
            else if (book == "P")
            {
                ConnectionWithAccess.query = "select distinct d_c from " + ConnectionWithAccess.tablename[22] + " where d_n = 999999";
                ConnectionCommand.retrieval(cb_rg_d_c);
                rg_a_n.Text = get_a_n_from_d_c("P", Convert.ToInt32(cb_rg_d_c.Text));
                ConnectionWithAccess.query = "select distinct f22.D_D, f22.D_N, f1.[desc] as [Desc], f1.city, f1.gst_number, f22.bamt,f22.CGST_AMT, f22.SGST_AMT,f22.IGST_AMT, f22.gamt from " + ConnectionWithAccess.tablename[1] + " f1, " + ConnectionWithAccess.tablename[22] + " f22 where f1.a_n = f22.a_n and f1.s_a = f22.s_a and f22.prd = '" + ConnectionWithAccess.mprd + "' and f22.d_d >= @From and f22.d_d <= @To and f22.d_c = " + cb_rg_d_c.Text + " order by f22.d_d";
                parameters_for_date_range(dtp_rg_from_date.Text, dtp_rg_to_date.Text);
                ConnectionCommand.accountHelp_datatable_Seperate(dgv_gst_report, "Gst Purchase List");
            }
            else if (book == "B")
            {
                ConnectionWithAccess.query = "select distinct d_c from " + ConnectionWithAccess.tablename[23] + " where d_n = 999999";
                ConnectionCommand.retrieval(cb_rg_d_c);
                rg_a_n.Text = get_a_n_from_d_c("B", Convert.ToInt32(cb_rg_d_c.Text));
                //ConnectionWithAccess.query = "select f23.D_D, f23.D_N, f1.[desc] as [Desc], f1.city, f1.gst_number, f23.bamt,f23.CGST_AMT, f23.SGST_AMT,f23.IGST_AMT, f23.gamt from " + ConnectionWithAccess.tablename[1] + " f1, " + ConnectionWithAccess.tablename[23] + " f23 where f1.a_n = f23.a_n and f1.s_a = f23.s_a and f23.prd = '" + ConnectionWithAccess.mprd + "' and f23.d_d >= @From and f23.d_d <= @To and f23.igst_amt > 0 order by f23.d_d";
                ConnectionWithAccess.query = "select f23.D_D, f23.D_N, f1.[desc] as [Desc], f1.city, f1.gst_number,0,0,0 ,f23.IGST_AMT,0  from " + ConnectionWithAccess.tablename[1] + " f1, " + ConnectionWithAccess.tablename[23] + " f23 where f1.a_n = f23.a_n and f1.s_a = f23.s_a and f23.prd = '" + ConnectionWithAccess.mprd + "' and f23.d_d >= @From and f23.d_d <= @To and f23.igst_amt > 0 order by f23.d_d";
                parameters_for_date_range(dtp_rg_from_date.Text, dtp_rg_to_date.Text);
                ConnectionCommand.accountHelp_datatable_Seperate(dgv_gst_report, "Gst Bank List");
            }
            else if (book == "C")
            {
                ConnectionWithAccess.query = "select distinct d_c from " + ConnectionWithAccess.tablename[24] + " where d_n = 999999";
                ConnectionCommand.retrieval(cb_rg_d_c);
                rg_a_n.Text = get_a_n_from_d_c("C", Convert.ToInt32(cb_rg_d_c.Text));
                //ConnectionWithAccess.query = "select f23.D_D, f23.D_N, f1.[desc] as [Desc], f1.city, f1.gst_number, f23.bamt,f23.CGST_AMT, f23.SGST_AMT,f23.IGST_AMT, f23.gamt from " + ConnectionWithAccess.tablename[1] + " f1, " + ConnectionWithAccess.tablename[23] + " f23 where f1.a_n = f23.a_n and f1.s_a = f23.s_a and f23.prd = '" + ConnectionWithAccess.mprd + "' and f23.d_d >= @From and f23.d_d <= @To and f23.igst_amt > 0 order by f23.d_d";
                ConnectionWithAccess.query = "select f24.D_D, f24.D_N, f1.[desc] as [Desc], f1.city, f1.gst_number, f24.basic_amt ,f24.IGST_AMT, f24.camt from " + ConnectionWithAccess.tablename[1] + " f1, " + ConnectionWithAccess.tablename[24] + " f24 where f1.a_n = f24.a_n and f1.s_a = f24.s_a and f24.prd = '" + ConnectionWithAccess.mprd + "' and f24.d_d >= @From and f24.d_d <= @To and f24.igst_amt > 0 order by f24.d_d";
                parameters_for_date_range(dtp_rg_from_date.Text, dtp_rg_to_date.Text);
                ConnectionCommand.accountHelp_datatable_Seperate(dgv_gst_report, "Gst Cash List");
            }
            else if (book == "J")
            {
                ConnectionWithAccess.query = "select distinct d_c from " + ConnectionWithAccess.tablename[25] + " where d_n = 999999";
                ConnectionCommand.retrieval(cb_rg_d_c);
                rg_a_n.Text = get_a_n_from_d_c("J", Convert.ToInt32(cb_rg_d_c.Text));
                //ConnectionWithAccess.query = "select f25.D_D, f25.D_N, f1.[desc] as [Desc], f1.city, f1.gst_number, ((-f25.igst_amt - f25.jamt)) ,f25.IGST_AMT, (f25.jamt * -1) from " + ConnectionWithAccess.tablename[25] + " f25 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f25.A_N = f1.A_N and f25.S_A = f1.S_A where f25.prd = '" + ConnectionWithAccess.mprd + "' and f25.igst_amt > 0 order by f25.d_d";
                ConnectionWithAccess.query = "select f25.D_D, f25.D_N, f1.[desc] as [Desc], f1.city, f1.gst_number, f25.basic_amt, f25.IGST_AMT, f25.jamt from " + ConnectionWithAccess.tablename[25] + " f25 left outer join " + ConnectionWithAccess.tablename[1] + " f1 on f25.A_N = f1.A_N and f25.S_A = f1.S_A where f25.prd = '" + ConnectionWithAccess.mprd + "' and f25.d_d >= @From and f25.d_d <= @To and f25.igst_amt > 0 order by f25.d_d";
                parameters_for_date_range(dtp_rg_from_date.Text, dtp_rg_to_date.Text);
                ConnectionCommand.accountHelp_datatable_Seperate(dgv_gst_report, "Gst Journal List");
            }
            if (dgv_gst_report.Rows.Count > 1)
            {
                temp_word = "Date - Inv.                        Party's Name       City                             Gst Number                           Basic Amount       Cgst Amount        Sgst Amount        Igst Amount        Gross Amount";
                print_pdf_line(cour_7, temp_word, 10, 0);

                double bamt = 0, cgst_amt = 0, sgst_amt = 0, igst_amt = 0, gamt = 0;
                for (row_pointer = 0; row_pointer < dgv_gst_report.Rows.Count; row_pointer++)
                {
                    if ((dgv_gst_report.Rows[row_pointer].Cells[0].Value != System.DBNull.Value) && (dgv_gst_report.Rows[row_pointer].Cells[1].Value != System.DBNull.Value) && (dgv_gst_report.Rows[row_pointer].Cells[0].Value != null) && (dgv_gst_report.Rows[row_pointer].Cells[1].Value != null))
                    {
                        temp_word2 = dgv_gst_report.Rows[row_pointer].Cells[0].Value.ToString();
                        temp_word2 = temp_word2.Substring(0, temp_word2.IndexOf(" "));
                        temp_word = temp_word2 + "-" + dgv_gst_report.Rows[row_pointer].Cells[1].Value.ToString();
                        if (book == "S")
                        {
                            print_pdf_line(cour_7, temp_word, 10, -3);
                            temp_word = dgv_gst_report.Rows[row_pointer].Cells[2].Value.ToString() + " ," + dgv_gst_report.Rows[row_pointer].Cells[3].Value.ToString();
                            if (temp_word.Length > 25)
                                temp_word = temp_word.Substring(0, 25);
                            print_pdf_line(cour_7, temp_word, 90, -16);
                            temp_word = dgv_gst_report.Rows[row_pointer].Cells[4].Value.ToString();
                            print_pdf_line(cour_7, temp_word, 210, -16);
                            if (dgv_gst_report.Rows[row_pointer].Cells[5].Value != null && dgv_gst_report.Rows[row_pointer].Cells[5].Value != System.DBNull.Value)
                            {
                                temp_word = add_comma_to_number(dgv_gst_report.Rows[row_pointer].Cells[5].Value.ToString());
                                print_pdf_line(cour_7, temp_word, para_IndentationLeft_position(270, temp_word, "cour_7"), -16);
                                bamt += Convert.ToDouble(dgv_gst_report.Rows[row_pointer].Cells[5].Value);
                            }
                            if (dgv_gst_report.Rows[row_pointer].Cells[6].Value != null && dgv_gst_report.Rows[row_pointer].Cells[6].Value != System.DBNull.Value)
                            {
                                temp_word = add_comma_to_number(dgv_gst_report.Rows[row_pointer].Cells[6].Value.ToString());
                                print_pdf_line(cour_7, temp_word, para_IndentationLeft_position(325, temp_word, "cour_7"), -16);
                                cgst_amt += Convert.ToDouble(dgv_gst_report.Rows[row_pointer].Cells[6].Value);
                            }
                            if (dgv_gst_report.Rows[row_pointer].Cells[7].Value != null && dgv_gst_report.Rows[row_pointer].Cells[7].Value != System.DBNull.Value)
                            {
                                temp_word = add_comma_to_number(dgv_gst_report.Rows[row_pointer].Cells[7].Value.ToString());
                                print_pdf_line(cour_7, temp_word, para_IndentationLeft_position(380, temp_word, "cour_7"), -16);
                                sgst_amt += Convert.ToDouble(dgv_gst_report.Rows[row_pointer].Cells[7].Value);
                            }
                            if (dgv_gst_report.Rows[row_pointer].Cells[8].Value != null && dgv_gst_report.Rows[row_pointer].Cells[8].Value != System.DBNull.Value)
                            {
                                temp_word = add_comma_to_number(dgv_gst_report.Rows[row_pointer].Cells[8].Value.ToString());
                                print_pdf_line(cour_7, temp_word, para_IndentationLeft_position(435, temp_word, "cour_7"), -16);
                                igst_amt += Convert.ToDouble(dgv_gst_report.Rows[row_pointer].Cells[8].Value);
                            }
                            if (dgv_gst_report.Rows[row_pointer].Cells[9].Value != null && dgv_gst_report.Rows[row_pointer].Cells[9].Value != System.DBNull.Value)
                            {
                                temp_word = add_comma_to_number(dgv_gst_report.Rows[row_pointer].Cells[9].Value.ToString());
                                print_pdf_line(cour_7, temp_word, para_IndentationLeft_position(490, temp_word, "cour_7"), -16);
                                gamt += Convert.ToDouble(dgv_gst_report.Rows[row_pointer].Cells[9].Value);
                            }
                        }
                        else if (book == "P")
                        {
                            print_pdf_line(cour_7, temp_word, 10, -3);
                            temp_word = dgv_gst_report.Rows[row_pointer].Cells[2].Value.ToString() + " ," + dgv_gst_report.Rows[row_pointer].Cells[3].Value.ToString();
                            if (temp_word.Length > 25)
                                temp_word = temp_word.Substring(0, 25);
                            print_pdf_line(cour_7, temp_word, 96, -16);
                            temp_word = dgv_gst_report.Rows[row_pointer].Cells[4].Value.ToString();
                            print_pdf_line(cour_7, temp_word, 210, -16);
                            if (dgv_gst_report.Rows[row_pointer].Cells[5].Value != null && dgv_gst_report.Rows[row_pointer].Cells[5].Value != System.DBNull.Value)
                            {
                                temp_word = add_comma_to_number(dgv_gst_report.Rows[row_pointer].Cells[5].Value.ToString());
                                print_pdf_line(cour_7, temp_word, para_IndentationLeft_position(270, temp_word, "cour_7"), -16);
                                bamt += Convert.ToDouble(dgv_gst_report.Rows[row_pointer].Cells[5].Value);
                            }
                            if (dgv_gst_report.Rows[row_pointer].Cells[6].Value != null && dgv_gst_report.Rows[row_pointer].Cells[6].Value != System.DBNull.Value)
                            {
                                temp_word = add_comma_to_number(dgv_gst_report.Rows[row_pointer].Cells[6].Value.ToString());
                                print_pdf_line(cour_7, temp_word, para_IndentationLeft_position(325, temp_word, "cour_7"), -16);
                                cgst_amt += Convert.ToDouble(dgv_gst_report.Rows[row_pointer].Cells[6].Value);
                            }
                            if (dgv_gst_report.Rows[row_pointer].Cells[7].Value != null && dgv_gst_report.Rows[row_pointer].Cells[7].Value != System.DBNull.Value)
                            {
                                temp_word = add_comma_to_number(dgv_gst_report.Rows[row_pointer].Cells[7].Value.ToString());
                                print_pdf_line(cour_7, temp_word, para_IndentationLeft_position(380, temp_word, "cour_7"), -16);
                                sgst_amt += Convert.ToDouble(dgv_gst_report.Rows[row_pointer].Cells[7].Value);
                            }
                            if (dgv_gst_report.Rows[row_pointer].Cells[8].Value != null && dgv_gst_report.Rows[row_pointer].Cells[8].Value != System.DBNull.Value)
                            {
                                temp_word = add_comma_to_number(dgv_gst_report.Rows[row_pointer].Cells[8].Value.ToString());
                                print_pdf_line(cour_7, temp_word, para_IndentationLeft_position(435, temp_word, "cour_7"), -16);
                                igst_amt += Convert.ToDouble(dgv_gst_report.Rows[row_pointer].Cells[8].Value);
                            }
                            if (dgv_gst_report.Rows[row_pointer].Cells[9].Value != null && dgv_gst_report.Rows[row_pointer].Cells[9].Value != System.DBNull.Value)
                            {
                                temp_word = add_comma_to_number(dgv_gst_report.Rows[row_pointer].Cells[9].Value.ToString());
                                print_pdf_line(cour_7, temp_word, para_IndentationLeft_position(490, temp_word, "cour_7"), -16);
                                gamt += Convert.ToDouble(dgv_gst_report.Rows[row_pointer].Cells[9].Value);
                            }
                        }
                        else if (book == "B")
                        {
                            print_pdf_line(cour_7, temp_word, 10, -3);
                            temp_word = dgv_gst_report.Rows[row_pointer].Cells[2].Value.ToString() + " ," + dgv_gst_report.Rows[row_pointer].Cells[3].Value.ToString();
                            if (temp_word.Length > 25)
                                temp_word = temp_word.Substring(0, 25);
                            print_pdf_line(cour_7, temp_word, 96, -16);
                            //if (dgv_gst_report.Rows[row_pointer].Cells[5].Value != null && dgv_gst_report.Rows[row_pointer].Cells[5].Value != System.DBNull.Value)
                            //{
                            //    temp_word = add_comma_to_number(dgv_gst_report.Rows[row_pointer].Cells[5].Value.ToString());
                            //    print_pdf_line(cour_7, temp_word, para_IndentationLeft_position(270, temp_word, "cour_7"), -16);
                            //    bamt += Convert.ToDouble(dgv_gst_report.Rows[row_pointer].Cells[5].Value);
                            //}
                            //if (dgv_gst_report.Rows[row_pointer].Cells[6].Value != null && dgv_gst_report.Rows[row_pointer].Cells[6].Value != System.DBNull.Value)
                            //{
                            //    temp_word = add_comma_to_number(dgv_gst_report.Rows[row_pointer].Cells[6].Value.ToString());
                            //    print_pdf_line(cour_7, temp_word, para_IndentationLeft_position(325, temp_word, "cour_7"), -16);
                            //    cgst_amt += Convert.ToDouble(dgv_gst_report.Rows[row_pointer].Cells[6].Value);
                            //}
                            //if (dgv_gst_report.Rows[row_pointer].Cells[7].Value != null && dgv_gst_report.Rows[row_pointer].Cells[7].Value != System.DBNull.Value)
                            //{
                            //    temp_word = add_comma_to_number(dgv_gst_report.Rows[row_pointer].Cells[7].Value.ToString());
                            //    print_pdf_line(cour_7, temp_word, para_IndentationLeft_position(380, temp_word, "cour_7"), -16);
                            //    sgst_amt += Convert.ToDouble(dgv_gst_report.Rows[row_pointer].Cells[7].Value);
                            //}
                            if (dgv_gst_report.Rows[row_pointer].Cells[8].Value != null && dgv_gst_report.Rows[row_pointer].Cells[8].Value != System.DBNull.Value)
                            {
                                temp_word = add_comma_to_number(dgv_gst_report.Rows[row_pointer].Cells[8].Value.ToString());
                                print_pdf_line(cour_7, temp_word, para_IndentationLeft_position(435, temp_word, "cour_7"), -16);
                                igst_amt += Convert.ToDouble(dgv_gst_report.Rows[row_pointer].Cells[8].Value);
                            }
                            //if (dgv_gst_report.Rows[row_pointer].Cells[9].Value != null && dgv_gst_report.Rows[row_pointer].Cells[9].Value != System.DBNull.Value)
                            //{
                            //    temp_word = add_comma_to_number(dgv_gst_report.Rows[row_pointer].Cells[9].Value.ToString());
                            //    print_pdf_line(cour_7, temp_word, para_IndentationLeft_position(490, temp_word, "cour_7"), -16);
                            //    gamt += Convert.ToDouble(dgv_gst_report.Rows[row_pointer].Cells[9].Value);
                            //}
                        }
                        else if (book == "J")
                        {
                            print_pdf_line(cour_7, temp_word, 10, -3);
                            temp_word = dgv_gst_report.Rows[row_pointer].Cells[2].Value.ToString() + " ," + dgv_gst_report.Rows[row_pointer].Cells[3].Value.ToString();
                            if (temp_word.Length > 25)
                                temp_word = temp_word.Substring(0, 25);
                            print_pdf_line(cour_7, temp_word, 96, -16);
                            if (dgv_gst_report.Rows[row_pointer].Cells[5].Value != null && dgv_gst_report.Rows[row_pointer].Cells[5].Value != System.DBNull.Value)
                            {
                                temp_word = add_comma_to_number(dgv_gst_report.Rows[row_pointer].Cells[5].Value.ToString());
                                print_pdf_line(cour_7, temp_word, para_IndentationLeft_position(270, temp_word, "cour_7"), -16);
                                bamt += Convert.ToDouble(dgv_gst_report.Rows[row_pointer].Cells[5].Value);
                            }
                            if (dgv_gst_report.Rows[row_pointer].Cells[6].Value != null && dgv_gst_report.Rows[row_pointer].Cells[6].Value != System.DBNull.Value)
                            {
                                temp_word = add_comma_to_number(dgv_gst_report.Rows[row_pointer].Cells[6].Value.ToString());
                                print_pdf_line(cour_7, temp_word, para_IndentationLeft_position(435, temp_word, "cour_7"), -16);
                                igst_amt += Convert.ToDouble(dgv_gst_report.Rows[row_pointer].Cells[6].Value);
                            }
                            if (dgv_gst_report.Rows[row_pointer].Cells[7].Value != null && dgv_gst_report.Rows[row_pointer].Cells[7].Value != System.DBNull.Value)
                            {
                                temp_word = add_comma_to_number(dgv_gst_report.Rows[row_pointer].Cells[7].Value.ToString());
                                print_pdf_line(cour_7, temp_word, para_IndentationLeft_position(490, temp_word, "cour_7"), -16);
                                gamt += Convert.ToDouble(dgv_gst_report.Rows[row_pointer].Cells[7].Value);
                            }
                        }
                    }
                    if (actual_line_number_of_page > 55)
                        temp_word = "";
                }
                temp_word = "------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------";
                print_pdf_line(cour_9, temp_word, 10, -5);
                if (book == "S")
                    temp_word = "Sale's Book";
                else if (book == "P")
                    temp_word = "Purchase's Book";
                else if (book == "B")
                    temp_word = "Bank's Book";
                else if (book == "C")
                    temp_word = "Cash's Book";
                else if (book == "J")
                    temp_word = "Journal's Book";
                temp_word2 = temp_word;
                print_pdf_line(cour_9, temp_word, 10, -5);
                if (book == "S")
                {
                    gst_amount_list[0] = cgst_amt.ToString();
                    gst_amount_list[5] = sgst_amt.ToString();
                    gst_amount_list[10] = igst_amt.ToString();
                }
                else if (book == "P")
                {
                    gst_amount_list[1] = cgst_amt.ToString();
                    gst_amount_list[6] = sgst_amt.ToString();
                    gst_amount_list[11] = igst_amt.ToString();
                }
                else if (book == "B")
                {
                    gst_amount_list[2] = cgst_amt.ToString();
                    gst_amount_list[7] = sgst_amt.ToString();
                    gst_amount_list[12] = igst_amt.ToString();
                }
                else if (book == "C")
                {
                    gst_amount_list[3] = cgst_amt.ToString();
                    gst_amount_list[8] = sgst_amt.ToString();
                    gst_amount_list[13] = igst_amt.ToString();
                }
                else if (book == "J")
                {
                    gst_amount_list[4] = cgst_amt.ToString();
                    gst_amount_list[9] = sgst_amt.ToString();
                    gst_amount_list[14] = igst_amt.ToString();
                }
                if (!bamt.ToString().Contains("."))
                    temp_word = bamt.ToString() + ".00";
                else
                    temp_word = bamt.ToString();
                temp_word2 += "," + temp_word;
                temp_word = add_comma_to_number(temp_word);
                print_pdf_line(cour_7, temp_word, para_IndentationLeft_position(270, temp_word, "cour_7"), -16);
                if (!cgst_amt.ToString().Contains("."))
                    temp_word = cgst_amt.ToString() + ".00";
                else
                    temp_word = cgst_amt.ToString();
                temp_word2 += "," + temp_word;
                temp_word = add_comma_to_number(temp_word);
                print_pdf_line(cour_7, temp_word, para_IndentationLeft_position(325, temp_word, "cour_7"), -16);
                if (!sgst_amt.ToString().Contains("."))
                    temp_word = sgst_amt.ToString() + ".00";
                else
                    temp_word = sgst_amt.ToString();
                temp_word2 += "," + temp_word;
                temp_word = add_comma_to_number(temp_word);
                print_pdf_line(cour_7, temp_word, para_IndentationLeft_position(380, temp_word, "cour_7"), -16);
                if (!igst_amt.ToString().Contains("."))
                    temp_word = igst_amt.ToString() + ".00";
                else
                    temp_word = igst_amt.ToString();
                temp_word2 += "," + temp_word;
                temp_word = add_comma_to_number(temp_word);
                print_pdf_line(cour_7, temp_word, para_IndentationLeft_position(435, temp_word, "cour_7"), -16);
                if (!gamt.ToString().Contains("."))
                    temp_word = gamt.ToString() + ".00";
                else
                    temp_word = gamt.ToString();
                temp_word2 += "," + temp_word;
                temp_word = add_comma_to_number(temp_word);
                print_pdf_line(cour_7, temp_word, para_IndentationLeft_position(490, temp_word, "cour_7"), -16);
                temp_word = "------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------";
                print_pdf_line(cour_9, temp_word, 10, -5);
                temporary_list_array.Add(temp_word2);
            }
            else
            {
                print_pdf_line(cour_9_bold, ":  Nil", 330, -16);
            }
        }

        #region Update balance in 51 from Ledger
        #region OldMethod
        //private void Update_Ledger_Balance_a_n_like_1(string ma_n, string ms_a, string end_date, DataRow[] drUnlockedRows)
        //{
        //    ConnectionWithAccess.query = query_contains_for_ledger_account_union(ma_n, ms_a, end_date);// strQuery.ToString();
        //    DataTable dtNewTable = ConnectionCommand.fGetDataTable();
        //    if (dtNewTable != null)
        //    {
        //        DataView view = new DataView(dtNewTable);
        //        view.Sort = "[Date] asc";
        //        DataTable dtNewTable1 = view.ToTable();
        //        for (int i = dtNewTable1.Rows.Count - 1; i >= 0; i--)
        //        {
        //            DataRow dr = dtNewTable1.Rows[i];
        //            if (dr["debit"].ToString() == "0" && dr["credit"].ToString() == "0" && dr["balance"].ToString() == "0")
        //                dr.Delete();
        //        }
        //        bool bGetPrevPeriodBalance = false;
        //        DataTable sortedTable = update_datatable_balances(dtNewTable1, 6, 7, 8);
        //        DataTable dtPrdTable = null;
        //        foreach (DataRow drUnlockRow in drUnlockedRows)
        //        {
        //            string str_prd = drUnlockRow["prd"].ToString();
        //            DataRow[] drPrdRows = sortedTable.Select("prd = '" + str_prd + "' ");
        //            if (drPrdRows != null && drPrdRows.Length > 0)
        //                dtPrdTable = drPrdRows.CopyToDataTable();
        //            else
        //            {
        //                DataRow[] drPrevPrdRows = sortedTable.Select("prd < '" + str_prd + "' ");
        //                if (drPrevPrdRows != null && drPrevPrdRows.Length > 0)
        //                {
        //                    dtPrdTable = drPrevPrdRows.CopyToDataTable();
        //                    bGetPrevPeriodBalance = true;
        //                }

        //            }
        //            string strTmpa_n = string.Empty;
        //            string strTmps_a = string.Empty;

        //            string strLasta_n = string.Empty;
        //            string strLasts_a = string.Empty;
        //            string post_a_n = string.Empty;
        //            string post_s_a = string.Empty;

        //            double dAmount = 0;
        //            if (dtPrdTable != null && dtPrdTable.Rows.Count > 0)
        //            {
        //                if (bGetPrevPeriodBalance)
        //                {
        //                    dAmount = Convert.ToDouble(dtPrdTable.Rows[dtPrdTable.Rows.Count - 1]["Balance"].ToString());
        //                    delete_unlocked_prd_balance_in_51(str_prd, ma_n, ms_a);
        //                    update_balance_in_51_from_ledger(str_prd, ma_n, ms_a, dAmount);

        //                    bGetPrevPeriodBalance = false;
        //                }
        //                else
        //                {
        //                    //Get distinct a_n, s_a values
        //                    DataView dvTemp = new DataView(dtPrdTable);
        //                    DataTable dtDistinctANSA = dvTemp.ToTable(true, "a_n", "s_a");


        //                    strLasta_n = dtPrdTable.Rows[dtPrdTable.Rows.Count - 1]["a_n"].ToString();
        //                    strLasts_a = dtPrdTable.Rows[dtPrdTable.Rows.Count - 1]["s_a"].ToString();
        //                    post_a_n = dtPrdTable.Rows[dtPrdTable.Rows.Count - 1]["na_n"].ToString();
        //                    post_s_a = dtPrdTable.Rows[dtPrdTable.Rows.Count - 1]["ns_a"].ToString();

        //                    for (int idRow = 0; idRow < dtDistinctANSA.Rows.Count; idRow++)
        //                    {
        //                        strTmpa_n = dtDistinctANSA.Rows[idRow]["a_n"].ToString().Trim();
        //                        strTmps_a = dtDistinctANSA.Rows[idRow]["s_a"].ToString().Trim();
        //                        if (strTmpa_n == strLasta_n && strTmps_a == strLasts_a)
        //                        {
        //                            double dDebitAmount = Convert.ToDouble(dtPrdTable.Rows[idRow]["Debit"].ToString());
        //                            double dCreditAmount = Convert.ToDouble(dtPrdTable.Rows[idRow]["Credit"].ToString());
        //                            dAmount = dDebitAmount - dCreditAmount;

        //                            delete_unlocked_prd_balance_in_51(str_prd, strTmpa_n, strTmps_a);
        //                            //update_balance_in_51_from_ledger(str_prd, strTmpa_n, strTmps_a, dAmount);
        //                            update_balance_in_51_from_ledger(str_prd, post_a_n, post_s_a, dAmount);
        //                            dAmount = Convert.ToDouble(dtPrdTable.Rows[idRow]["Balance"].ToString());
        //                            //delete_unlocked_prd_balance_in_51(str_prd, ma_n, ms_a);
        //                            update_balance_in_51_from_ledger(str_prd, ma_n, ms_a, dAmount);
        //                        }
        //                        else
        //                        {
        //                            DataRow[] drFinalRows = dtPrdTable.Select("Trim(a_n) = '" + strTmpa_n + "' and s_a = '" + strTmps_a + "'");
        //                            if (drFinalRows != null && drFinalRows.Length > 0)
        //                            {
        //                                DataTable dtFinalTable = drFinalRows.CopyToDataTable();
        //                                if (dtFinalTable != null && dtFinalTable.Rows.Count > 0)
        //                                {
        //                                    double dDebitAmount = Convert.ToDouble(dtFinalTable.Compute("Sum(Debit)", ""));
        //                                    double dCreditAmount = Convert.ToDouble(dtFinalTable.Compute("Sum(Credit)", ""));
        //                                    dAmount = dDebitAmount - dCreditAmount;
        //                                }
        //                            }
        //                            delete_unlocked_prd_balance_in_51(str_prd, strTmpa_n, strTmps_a);
        //                            update_balance_in_51_from_ledger(str_prd, strTmpa_n, strTmps_a, dAmount);
        //                        }

        //                    }
        //                }
        //            }
        //        }
        //    }
        //}

        //private void Update_Ledger_Balance(string ma_n, string ms_a, string end_date, DataRow[] drUnlockedRows)
        //{
        //    ConnectionWithAccess.query = query_contains_for_ledger_account_union(ma_n, ms_a, end_date);// strQuery.ToString();
        //    DataTable dtNewTable = ConnectionCommand.fGetDataTable();
        //    if (dtNewTable != null)
        //    {
        //        DataView view = new DataView(dtNewTable);
        //        view.Sort = "[Date] asc";
        //        DataTable dtNewTable1 = view.ToTable();
        //        for (int i = dtNewTable1.Rows.Count - 1; i >= 0; i--)
        //        {
        //            DataRow dr = dtNewTable1.Rows[i];
        //            if (dr["debit"].ToString() == "0" && dr["credit"].ToString() == "0" && dr["balance"].ToString() == "0")
        //                dr.Delete();
        //        }

        //        DataTable sortedTable = update_datatable_balances(dtNewTable1, 6, 7, 8);
        //        DataTable dtPrdTable = null;
        //        foreach (DataRow drUnlockRow in drUnlockedRows)
        //        {
        //            string str_prd = drUnlockRow["prd"].ToString();
        //            DataRow[] drPrdRows = sortedTable.Select("prd = '" + str_prd + "' ");
        //            if (drPrdRows != null && drPrdRows.Length > 0)
        //                dtPrdTable = drPrdRows.CopyToDataTable();
        //            else
        //            {
        //                if (!(ma_n == "3001" && ms_a != "@@@") && !(ma_n == "1"))
        //                {
        //                    DataRow[] drPrevPrdRows = sortedTable.Select("prd < '" + str_prd + "' ");
        //                    if (drPrevPrdRows != null && drPrevPrdRows.Length > 0)
        //                    {
        //                        dtPrdTable = drPrevPrdRows.CopyToDataTable();
        //                    }
        //                }

        //            }
        //            double dAmount = 0;
        //            if (dtPrdTable != null && dtPrdTable.Rows.Count > 0)
        //            {
        //                //if (ma_n == "3001" && ms_a != "@@@")
        //                if ((ma_n == "3001" && ms_a != "@@@") || (ma_n == "1"))
        //                {
        //                    double dDebitAmount = Convert.ToDouble(dtPrdTable.Compute("Sum(Debit)", ""));
        //                    double dCreditAmount = Convert.ToDouble(dtPrdTable.Compute("Sum(Credit)", ""));
        //                    dAmount = dDebitAmount - dCreditAmount;
        //                }
        //                else
        //                {
        //                    DataRow drRow = dtPrdTable.Rows[dtPrdTable.Rows.Count - 1];
        //                    if (drRow != null)
        //                    {
        //                        dAmount = Convert.ToDouble(drRow["Balance"].ToString());
        //                    }
        //                }
        //            }
        //            update_balance_in_51_from_ledger(str_prd, ma_n, ms_a, dAmount);
        //        }
        //    }
        //}

        //private void delete_unlocked_prd_balance_in_51_for_1(string strFirstUnlockedRow, string ma_n)
        //{
        //    ConnectionWithAccess.query = "delete from " + ConnectionWithAccess.tablename[51] + " where prd >= '" + strFirstUnlockedRow + "' and a_n = '" + ma_n + "' ";
        //    ConnectionCommand.fUpdateInsertDeleteData();
        //}

        //private void delete_unlocked_prd_balance_in_51(string strFirstUnlockedRow, string ma_n, string ms_a)
        //{
        //    ConnectionWithAccess.query = "delete from " + ConnectionWithAccess.tablename[51] + " where prd >= '" + strFirstUnlockedRow + "' and a_n = '" + ma_n + "' and s_a = '" + ms_a + "'";
        //    ConnectionCommand.fUpdateInsertDeleteData();
        //}
        #endregion OldMethod
        DataTable dtPrdList = null;
        bool bIsPrdDataDeletd = false;


        #region NewMethods
        private void update_balance_in_51_from_ledger(string mprd, string ma_n, string ms_a, double mamount)
        {
            ConnectionWithAccess.query = "insert into " + ConnectionWithAccess.tablename[51] + " (prd, a_n,s_a, amt, d_d, [user], insert_dt_tm) values('" + mprd + "', '" + ma_n + "', '" + ms_a + "' , " + mamount + " , '01/01/1901'" + " , '" + ConnectionWithAccess.muser + "', @currDate )";
            add_user_date_time_function_compulsory_program();
            ConnectionCommand.fUpdateInsertDeleteData();
        }

        private void delete_all_entries_from_51_for_account(string stra_n, string strs_a, string strPrd)
        {//Method to delete entries from 51 for given a_n and period 
            string strQuery = string.Empty;
            if (!string.IsNullOrEmpty(strs_a))
                strQuery = "delete from " + ConnectionWithAccess.tablename[51] + " where prd = '" + strPrd + "' and a_n = '" + stra_n + "' and s_a = '" + strs_a + "' ";
            else
                strQuery = "delete from " + ConnectionWithAccess.tablename[51] + " where prd = '" + strPrd + "' and a_n = '" + stra_n + "' ";
            ConnectionWithAccess.query = strQuery;
            ConnectionCommand.fUpdateInsertDeleteData();
        }

        private void delete_all_entries_from_51_for_prd(string strPrd)
        {//Method to delete entries from 51 for given period 
            string strQuery = string.Empty;
            strQuery = "delete from " + ConnectionWithAccess.tablename[51] + " where prd = '" + strPrd + "' ";
            ConnectionWithAccess.query = strQuery;
            ConnectionCommand.fUpdateInsertDeleteData();
        }

        private DataTable get_ledger_data(string stra_n, string strs_a, string end_date)
        {//common Method to get ledger data for a_n, s_a
            DataTable sortedTable = null;
            try
            {
                ConnectionWithAccess.query = query_contains_for_ledger_account_union(stra_n, strs_a, end_date);// strQuery.ToString();
                DataTable dtNewTable = ConnectionCommand.fGetDataTable();
                if (dtNewTable != null)
                {
                    DataView view = new DataView(dtNewTable);
                    view.Sort = "[Date] asc";
                    DataTable dtNewTable1 = view.ToTable();
                    for (int i = dtNewTable1.Rows.Count - 1; i >= 0; i--)
                    {
                        DataRow dr = dtNewTable1.Rows[i];
                        if (dr["debit"].ToString() == "0" && dr["credit"].ToString() == "0" && dr["balance"].ToString() == "0")
                            dr.Delete();
                    }
                    sortedTable = update_datatable_balances(dtNewTable1, 6, 7, 8);
                }
            }
            catch (Exception ex)
            {
                throw;
            }
            return sortedTable;
        }

        private void fProcess_Ledger_a_n_like_1(DataRow[] drUnlockedRows)
        {//Process accouns starting with 1
            string ma_n, ms_a, strQuery;
            ma_n = string.Empty;
            ms_a = string.Empty;
            //ma_n = "1002";
            //ms_a = "@@@";
            if (!string.IsNullOrEmpty(ma_n) && !string.IsNullOrEmpty(ms_a))
                strQuery = "select distinct Trim(a_n) as a_n, s_a from " + ConnectionWithAccess.tablename[1] + " where a_n ='" + ma_n + "' and s_a = '" + ms_a + "' order by Trim(a_n)";
            else
                strQuery = "select distinct Trim(a_n) as a_n, s_a from " + ConnectionWithAccess.tablename[1] + " where a_n like '1%' and s_a = '@@@' order by Trim(a_n)";

            ConnectionWithAccess.query = strQuery;
            DataTable dtAccountList1 = ConnectionCommand.fGetDataTable();
            if (dtAccountList1 != null && dtAccountList1.Rows.Count > 0)
            {
                for (int iRow1 = 0; iRow1 < dtAccountList1.Rows.Count; iRow1++)
                {
                    ma_n = dtAccountList1.Rows[iRow1]["a_n"].ToString();
                    ms_a = dtAccountList1.Rows[iRow1]["s_a"].ToString();
                    this.Text = "Please wait updating balances from Ledger for a_n start with 1 for a_n = '" + ma_n + "' and s_a = '" + ms_a + "' Total Accounts : " + dtAccountList1.Rows.Count.ToString() + " , Current processing # " + (iRow1 + 1).ToString();

                    DataTable dtLegderSorted = get_ledger_data(ma_n, ms_a, DateTime.Today.ToShortDateString());
                    if (dtLegderSorted != null && dtLegderSorted.Rows.Count > 0)
                    {
                        if (cb_emerg_full_period.Checked == true)
                        {//Update 51 table for all unlocked periods
                            foreach (DataRow drUnlockRow in drUnlockedRows)
                            {
                                if (!bIsPrdDataDeletd)
                                {
                                    delete_all_entries_from_51_for_prd(drUnlockRow["prd"].ToString());
                                    bIsPrdDataDeletd = true;
                                }
                                update_data_for_single_prd_an_like_1(ma_n, ms_a, drUnlockRow["prd"].ToString(), dtLegderSorted);
                            }

                        }
                        else //update only for current selected period
                        {
                            if (!bIsPrdDataDeletd)
                            {
                                delete_all_entries_from_51_for_prd(ConnectionWithAccess.mprd);
                                bIsPrdDataDeletd = true;
                            }
                            update_data_for_single_prd_an_like_1(ma_n, ms_a, ConnectionWithAccess.mprd, dtLegderSorted);
                        }
                    }
                }

            }
        }

        private void update_data_for_single_prd_an_like_1(string ma_n, string ms_a, string str_prd, DataTable sortedTable)
        {//Update 51 for a_n start with 1
            delete_all_entries_from_51_for_account(ma_n, string.Empty, str_prd);

            DataTable dtPrdTable = null;
            bool bGetPrevPeriodBalance = false;
            DataRow[] drPrdRows = sortedTable.Select("prd = '" + str_prd + "' ");
            if (drPrdRows != null && drPrdRows.Length > 0)
                dtPrdTable = drPrdRows.CopyToDataTable();
            else
            {
                DataRow[] drPrevPrdRows = sortedTable.Select("prd < '" + str_prd + "' ");
                if (drPrevPrdRows != null && drPrevPrdRows.Length > 0)
                {
                    dtPrdTable = drPrevPrdRows.CopyToDataTable();
                    bGetPrevPeriodBalance = true;
                }

            }
            string strTmpa_n = string.Empty;
            string strTmps_a = string.Empty;

            string strLasta_n = string.Empty;
            string strLasts_a = string.Empty;
            string post_a_n = string.Empty;
            string post_s_a = string.Empty;

            double dAmount = 0;
            if (dtPrdTable != null && dtPrdTable.Rows.Count > 0)
            {
                if (bGetPrevPeriodBalance)
                {
                    dAmount = Convert.ToDouble(dtPrdTable.Rows[dtPrdTable.Rows.Count - 1]["Balance"].ToString());
                    //delete_unlocked_prd_balance_in_51(str_prd, ma_n, ms_a);
                    update_balance_in_51_from_ledger(str_prd, ma_n, ms_a, dAmount);

                    bGetPrevPeriodBalance = false;
                }
                else
                {
                    //Get distinct a_n, s_a values
                    DataView dvTemp = new DataView(dtPrdTable);
                    DataTable dtDistinctANSA = dvTemp.ToTable(true, "a_n", "s_a");


                    strLasta_n = dtPrdTable.Rows[dtPrdTable.Rows.Count - 1]["a_n"].ToString();
                    strLasts_a = dtPrdTable.Rows[dtPrdTable.Rows.Count - 1]["s_a"].ToString();
                    post_a_n = dtPrdTable.Rows[dtPrdTable.Rows.Count - 1]["na_n"].ToString();
                    post_s_a = dtPrdTable.Rows[dtPrdTable.Rows.Count - 1]["ns_a"].ToString();

                    for (int idRow = 0; idRow < dtDistinctANSA.Rows.Count; idRow++)
                    {
                        strTmpa_n = dtDistinctANSA.Rows[idRow]["a_n"].ToString().Trim();
                        strTmps_a = dtDistinctANSA.Rows[idRow]["s_a"].ToString().Trim();
                        if (strTmpa_n == strLasta_n && strTmps_a == strLasts_a)
                        {
                            double dDebitAmount = Convert.ToDouble(dtPrdTable.Rows[idRow]["Debit"].ToString());
                            double dCreditAmount = Convert.ToDouble(dtPrdTable.Rows[idRow]["Credit"].ToString());
                            dAmount = dDebitAmount - dCreditAmount;
                            delete_all_entries_from_51_for_account(post_a_n, post_s_a, str_prd);
                            update_balance_in_51_from_ledger(str_prd, post_a_n, post_s_a, dAmount);

                            dAmount = Convert.ToDouble(dtPrdTable.Rows[idRow]["Balance"].ToString());
                            delete_all_entries_from_51_for_account(ma_n, ms_a, str_prd);
                            update_balance_in_51_from_ledger(str_prd, ma_n, ms_a, dAmount);
                        }
                        else
                        {
                            DataRow[] drFinalRows = dtPrdTable.Select("Trim(a_n) = '" + strTmpa_n + "' and s_a = '" + strTmps_a + "'");
                            if (drFinalRows != null && drFinalRows.Length > 0)
                            {
                                DataTable dtFinalTable = drFinalRows.CopyToDataTable();
                                if (dtFinalTable != null && dtFinalTable.Rows.Count > 0)
                                {
                                    double dDebitAmount = Convert.ToDouble(dtFinalTable.Compute("Sum(Debit)", ""));
                                    double dCreditAmount = Convert.ToDouble(dtFinalTable.Compute("Sum(Credit)", ""));
                                    dAmount = dDebitAmount - dCreditAmount;
                                }
                            }
                            delete_all_entries_from_51_for_account(strTmpa_n, strTmps_a, str_prd);
                            update_balance_in_51_from_ledger(str_prd, strTmpa_n, strTmps_a, dAmount);
                        }

                    }
                }
            }

        }

        private void fProcess_Ledger_a_n_not_like_1(DataRow[] drUnlockedRows)
        {//Process accouns not starting with 1
            string ma_n, ms_a, strQuery;
            ma_n = string.Empty;
            ms_a = string.Empty;
            //ma_n = "3001";
            //ms_a = "LIC";
            if (!string.IsNullOrEmpty(ma_n) && !string.IsNullOrEmpty(ms_a))
                strQuery = "select distinct a_n, s_a from " + ConnectionWithAccess.tablename[1] + " where a_n ='" + ma_n + "' and s_a = '" + ms_a + "' and d_y = '@@@' ";
            else
                strQuery = "select distinct a_n, s_a from " + ConnectionWithAccess.tablename[1] + " where a_n not like '1%' and s_a <> '@@@' and d_y = '@@@' ";
            ConnectionWithAccess.query = strQuery;
            DataTable dtAccountList = ConnectionCommand.fGetDataTable();
            if (dtAccountList != null && dtAccountList.Rows.Count > 0)
            {
                for (int iRow = 0; iRow < dtAccountList.Rows.Count; iRow++)
                {
                    ma_n = dtAccountList.Rows[iRow]["a_n"].ToString();
                    ms_a = dtAccountList.Rows[iRow]["s_a"].ToString();
                    this.Text = "Please wait updating balances from Ledger for a_n = '" + ma_n + "' and s_a = '" + ms_a + "' Total Accounts : " + dtAccountList.Rows.Count.ToString() + " , Current processing # " + (iRow + 1).ToString();
                    DataTable dtLegderSorted = get_ledger_data(ma_n, ms_a, DateTime.Today.ToShortDateString());

                    if (dtLegderSorted != null && dtLegderSorted.Rows.Count > 0)
                    {
                        if (cb_emerg_full_period.Checked == true)
                        {
                            foreach (DataRow drUnlockRow in drUnlockedRows)
                            {
                                string strPrd = drUnlockRow["prd"].ToString();
                                delete_all_entries_from_51_for_prd(strPrd);
                                bIsPrdDataDeletd = true;
                                if ((ma_n == "3001" && ms_a != "@@@") || (ma_n == "1"))
                                    update_data_current_debit_credit(ma_n, ms_a, strPrd, dtLegderSorted);
                                else
                                    update_data_Last_Balance(ma_n, ms_a, strPrd, dtLegderSorted);
                            }
                        }
                        else //update only for current selected period
                        {
                            delete_all_entries_from_51_for_prd(ConnectionWithAccess.mprd);
                            bIsPrdDataDeletd = true;
                            if ((ma_n == "3001" && ms_a != "@@@") || (ma_n == "1"))
                                update_data_current_debit_credit(ma_n, ms_a, ConnectionWithAccess.mprd, dtLegderSorted);
                            else
                                update_data_Last_Balance(ma_n, ms_a, ConnectionWithAccess.mprd, dtLegderSorted);
                        }
                    }
                }
                this.Text = ConnectionWithAccess.company_details[1] + " " + version + "ver";
            }
        }

        private void update_data_Last_Balance(string ma_n, string ms_a, string str_prd, DataTable sortedTable)
        {
            delete_all_entries_from_51_for_account(ma_n, ms_a, str_prd);
            DataTable dtPrdTable = null;
            DataRow[] drPrdRows = sortedTable.Select("prd = '" + str_prd + "' ");
            if (drPrdRows != null && drPrdRows.Length > 0)
                dtPrdTable = drPrdRows.CopyToDataTable();
            else
            {
                DataRow[] drPrevPrdRows = sortedTable.Select("prd < '" + str_prd + "' ");
                if (drPrevPrdRows != null && drPrevPrdRows.Length > 0)
                {
                    dtPrdTable = drPrevPrdRows.CopyToDataTable();
                }
            }

            double dAmount = 0;
            if (dtPrdTable != null && dtPrdTable.Rows.Count > 0)
            {
                DataRow drRow = dtPrdTable.Rows[dtPrdTable.Rows.Count - 1];
                if (drRow != null)
                {
                    dAmount = Convert.ToDouble(drRow["Balance"].ToString());
                }
            }
            update_balance_in_51_from_ledger(str_prd, ma_n, ms_a, dAmount);

        }

        private void update_data_current_debit_credit(string ma_n, string ms_a, string str_prd, DataTable sortedTable)
        {
            delete_all_entries_from_51_for_account(ma_n, ms_a, str_prd);
            DataTable dtPrdTable = null;
            DataRow[] drPrdRows = sortedTable.Select("prd = '" + str_prd + "' ");
            if (drPrdRows != null && drPrdRows.Length > 0)
                dtPrdTable = drPrdRows.CopyToDataTable();

            double dAmount = 0;
            if (dtPrdTable != null && dtPrdTable.Rows.Count > 0)
            {
                double dDebitAmount = Convert.ToDouble(dtPrdTable.Compute("Sum(Debit)", ""));
                double dCreditAmount = Convert.ToDouble(dtPrdTable.Compute("Sum(Credit)", ""));
                dAmount = dDebitAmount - dCreditAmount;
            }
            update_balance_in_51_from_ledger(str_prd, ma_n, ms_a, dAmount);
        }

        #endregion NewMethods

        #endregion

        //private void fPrintSearchAllResults(DataSet dsResults)
        //{
        //    msalepdf = ConnectionWithAccess.data_drive + "acc\\" + ConnectionWithAccess.mNIK + "\\reports\\SearchAll_Results_";
        //    if (chb_add_datetime_in_output.Checked)
        //        msalepdf += "_" + DateTime.Now.Day + "_" + DateTime.Now.Month + "_" + DateTime.Now.Year + "_" + DateTime.Now.TimeOfDay.Hours + "_" + DateTime.Now.TimeOfDay.Minutes;
        //    msalepdf += ".pdf";
        //    doc1 = new Document(PageSize.A4, 10, 45, 40, 25);
        //    FileStream FS1 = File.Create(msalepdf);
        //    writer = PdfWriter.GetInstance(doc1, FS1);
        //    doc1.Open();
        //    current_pdf_page_number = 1;
        //    Paragraph para = new Paragraph("");
        //    para.Font.Size = 25;
        //    temp_word = " ";
        //    print_pdf_line(cour_11_red, temp_word, 180, 0);
        //    temp_word = "Search All Results";
        //    print_pdf_line(cour_11_red, temp_word, 180, 75);

        //    for (int iTableCount = 0; iTableCount < dsResults.Tables.Count; iTableCount++)
        //    {
        //        if (dsResults.Tables[iTableCount] != null && dsResults.Tables[iTableCount].Rows.Count > 0)
        //        {
        //            temp_word = "Table Name : " + dsResults.Tables[iTableCount].TableName;
        //            print_pdf_line(cour_11_red, temp_word, 180, 0);

        //            temp_word = " ";
        //            print_pdf_line(cour_11_red, temp_word, 180, 0);

        //            PdfPTable pdfTable = new PdfPTable(dsResults.Tables[iTableCount].Columns.Count);
        //            pdfTable.HorizontalAlignment = Element.ALIGN_LEFT;
        //            pdfTable.WidthPercentage = 100;

        //            foreach (DataColumn column in dsResults.Tables[iTableCount].Columns)
        //            {
        //                addCell(pdfTable, column.ColumnName.Trim(), 2);
        //            }

        //            string cell_value = string.Empty;

        //            foreach (DataRow row in dsResults.Tables[iTableCount].Rows)
        //            {
        //                for (int iCell = 0; iCell < dsResults.Tables[iTableCount].Columns.Count; iCell++)
        //                {
        //                    cell_value = string.Empty;
        //                    if (row.ItemArray[iCell] != null)
        //                        cell_value = row.ItemArray[iCell].ToString();
        //                    PdfPCell pdf_cell = new PdfPCell(new Phrase(cell_value, cour_11));
        //                    pdf_cell.Border = 0;

        //                    pdfTable.AddCell(pdf_cell);
        //                }
        //            }

        //            doc1.Add(pdfTable);

        //        }
        //    }
        //    doc1.Close();
        //}


        //private void dgvOutstanding_SelectionChanged(object sender, EventArgs e)
        //{
        //    ////if (chkBill.Checked)
        //    ////{
        //    //        DataTable dtSaleList = fGetSaleDetails("S", dgvOutstanding.Rows[row_pointer].Cells["prd"].Value.ToString(), Convert.ToInt32(dgvOutstanding.Rows[row_pointer].Cells[d_c].Value.ToString()), dgvOutstanding.Rows[row_pointer].Cells[a_n].Value.ToString(), dgvOutstanding.Rows[row_pointer].Cells[s_a].Value.ToString(), dgvOutstanding.Rows[row_pointer].Cells["d_n].Value.ToString());

        //    ////    DataTable dtSaleList = fGetSaleDetails("S", dgvOutstanding.Rows[row_pointer].Cells["prd"].Value.ToString(), Convert.ToInt32(dgvOutstanding.Rows[row_pointer].Cells[d_c].Value.ToString()), dgvOutstanding.Rows[row_pointer].Cells[a_n].Value.ToString(), dgvOutstanding.Rows[row_pointer].Cells[s_a].Value.ToString(), dgvOutstanding.Rows[row_pointer].Cells["d_n].Value.ToString());

        //    ////}
        //}

        private void move_cursor_to_button_position(string button_name)
        {
            if (button_name == "atbpreview")
                Cursor.Position = new Point(260, 50);
            else if (button_name == "btn_analysis_generate")
                Cursor.Position = new Point(1300, 210);
            else if (button_name == "atbcancel")
                Cursor.Position = new Point(160, 50);
            else if (button_name == "atbsave")
                Cursor.Position = new Point(85, 50);
            else if (button_name == "atbnew")
                Cursor.Position = new Point(35, 50);
            else if (button_name == "ledger_account_help")
                Cursor.Position = new Point(450, 480);
            else if (button_name == "btn_gen_ledg")
                Cursor.Position = new Point(1300, 210);
            else if (button_name == "trading_report_generate")
                Cursor.Position = new Point(1300, 210);
            else if (button_name == "btn_gst_generate_report")
                Cursor.Position = new Point(1290, 215);
            else if (button_name == "Exit_ok")
                Cursor.Position = new Point(680, 450);
            else if (button_name == "si_party_help")
                Cursor.Position = new Point(230, 330);
            else if (button_name == "si_party_help_Click")
                Cursor.Position = new Point(170, 240);
            else if (button_name == "print_pdf")
                Cursor.Position = new Point(295, 585);
            else if (button_name == "dgvBankExcelAccName")
                Cursor.Position = new Point(360, 430);
            else if (button_name == "braccountdg")
                Cursor.Position = new Point(170, 430);
            else if (button_name == "cp_datagridview")
                Cursor.Position = new Point(170, 480);
            else if (button_name == "bp_datagridview")
                Cursor.Position = new Point(170, 480);
            else if (button_name == "cr_datagridview")
                Cursor.Position = new Point(170, 480);
            else if (button_name == "dgvStdCodeHelp")
                Cursor.Position = new Point(900, 510);
            else if (button_name == "pi_party_help")
                Cursor.Position = new Point(230, 480);
            else if (button_name == "pi_item_help")
                Cursor.Position = new Point(230, 480);
            else if (button_name == "si_item_help")
                Cursor.Position = new Point(230, 480);
            else if (button_name == "master_account_help_dg")
                Cursor.Position = new Point(230, 500);
            else if (button_name == "btn_gst_generate_report")
                Cursor.Position = new Point(1300, 210);
            else if (button_name == "save_gst_report_go_to_change_period")
                Cursor.Position = new Point(780, 220);
            else if (button_name == "jjpartycode1")
                Cursor.Position = new Point(180, 370);
            else if (button_name == "jjpartycode2")
                Cursor.Position = new Point(180, 370);
            else if (button_name == "sisalelistdg")
                Cursor.Position = new Point(1100, 360);
            else if (button_name == "btn_cheque_print")
                Cursor.Position = new Point(1100, 235);
            else if (button_name == "btn_merge_item")
                Cursor.Position = new Point(1130, 240);
            else if (button_name == "btn_merge_account")
                Cursor.Position = new Point(1130, 240);
            else if (button_name == "item_merge_help")
                Cursor.Position = new Point(300, 310);
            else if (button_name == "btn_mix_generate")
                Cursor.Position = new Point(1300, 210);
        }

        #region New Emerge
        private void emerg_item_Stock()
        {
            DataTable dtItem_Closing_Stock = null, dt_item_stock_original = null;

            //string strQuery = "select f5.item_code,  " +
            //    // " f5.opn_stk as open_stock, IIF(ISNULL(purc.purc_qty), 0, " +
            //    // " purc.purc_qty) as purc_qty, IIF(ISNULL(sale.sale_qty), 0,sale.sale_qty) as sale_qty, " +
            //    " (f5.opn_stk + IIF(ISNULL(purc.purc_qty), 0, " +
            //    " purc.purc_qty) - IIF(ISNULL(sale.sale_qty), 0,sale.sale_qty) ) as CLO_STK" +
            //    " from ( " + ConnectionWithAccess.tablename[05] + " f5 " +
            //    " left join ( select f3.item_code, sum( f3.qty) as purc_qty from " + ConnectionWithAccess.tablename[03] + " f3 where F3.A_N " +
            //    " LIKE '4002%' AND f3.type = 'F' " +
            //    " group by f3.item_code) purc on purc.item_code = f5.item_code ) " +
            //    " left join " +
            //    " ( select f3.item_code, sum( f3.qty) as sale_qty from " + ConnectionWithAccess.tablename[03] + " f3 where F3.A_N LIKE " +
            //    " '2002%' AND f3.type = 'F'  " +
            //    " group by f3.item_code) sale on sale.item_code = f5.item_code " +
            //    " where f5.type = 'F' ";
            ////" and f5.item_code = 'LEDTL' ";





            string strQuery = "select f5.item_code,  " +
                               " (f5.opn_stk + IIF(ISNULL(purc.purc_qty), 0, " +
                " purc.purc_qty) - IIF(ISNULL(sale.sale_qty), 0,sale.sale_qty) ) as CLO_STK" +
                " from ( " + ConnectionWithAccess.tablename[05] + " f5 " +
                " left join ( select f3.item_code, sum( f3.qty) as purc_qty from " + ConnectionWithAccess.tablename[03] + " f3 where F3.A_N " +
                " LIKE '4002%' " +
                " group by f3.item_code) purc on purc.item_code = f5.item_code ) " +
                " left join " +
                " ( select f3.item_code, sum( f3.qty) as sale_qty from " + ConnectionWithAccess.tablename[03] + " f3 where F3.A_N LIKE " +
                " '2002%' " +
                " group by f3.item_code) sale on sale.item_code = f5.item_code ";




            ConnectionWithAccess.query = strQuery;
            dtItem_Closing_Stock = ConnectionCommand.fGetDataTable();
            this.Text = "Emerge Item Stock";
            if (dtItem_Closing_Stock != null && dtItem_Closing_Stock.Rows.Count > 0)
            {
                ConnectionCommand.fUpdateMultipleQueries(dtItem_Closing_Stock, ConnectionWithAccess.tablename[05]);
            }
            fLoad_Item_Master_List();
        }

        private string get_a_n_from_d_c_New(string book, int md_c)
        {
            temp_a_n = "";
            if (dtMasterData != null && dtMasterData.Rows.Count > 0)
            {
                DataRow[] drRows = dtMasterData.Select("book = '" + book + "' and d_c = '" + md_c + "' ");
                if (drRows != null && drRows.Length > 0)
                    temp_a_n = drRows[0]["a_n"].ToString();
            }
            return temp_a_n;
        }

        private void emerg_balance_process_New(string emerg_prd, string emerg_oprd)
        {
            DataTable dtEmerg_old_1 = null, dtEmerg_old_2 = null, dtEmerg_old_3 = null, dtEmerg_sale_1 = null, dtEmerg_sale_2 = null;
            DataTable dtEmerg_purchase = null, dtEmerg_bank_1 = null, dtEmerg_bank_2 = null, dtEmerg_cash = null, dtEmerg_journal = null;
            temp_sale_amt = 0;
            temp_sale_replace_amt = 0;
            temp_purchase_amt = 0;
            ConnectionWithAccess.closing_stock = 0;

            #region Emerge Old
            ConnectionWithAccess.query = "delete from " + ConnectionWithAccess.tablename[51] + " where prd >= '" + emerg_prd + "'";
            ConnectionCommand.fUpdateInsertDeleteData();
            if (cb_emerg_old.Checked == true)
            {
                //this.Text = "Please wait Emerging " + ConnectionWithAccess.tablename[51];
                string strQuery_tmp = string.Empty;

                strQuery_tmp += " select prd as oldprd, '" + emerg_prd + "' as prd,a_n,s_a,sum(amt) as amt,'O' as tmpCode, #01/01/1901# as d_d, '" + ConnectionWithAccess.muser + "' as [user], Now() as insert_dt_tm from " + ConnectionWithAccess.tablename[51] + " where prd = '" + emerg_oprd + "' and a_n like '1%' and s_a = '@@@' and d_d = #01/01/1901# and amt <> 0 " +
                    " group by prd, a_n, s_a";
                strQuery_tmp += " union ";
                strQuery_tmp += " select prd as oldprd, '" + emerg_prd + "' as prd,a_n,s_a,amt,'O' as tmpCode, #01/01/1901# as d_d, '" + ConnectionWithAccess.muser + "' as [user], Now() as insert_dt_tm from " + ConnectionWithAccess.tablename[51] + " where prd = '" + emerg_oprd + "' and a_n not like '1%' and a_n not like '30%' and a_n not like '7%' and d_d = #01/01/1901# and a_n not like '6000%' and a_n not like '65%' and a_n not like '7998%' and amt <> 0";
                strQuery_tmp += " union ";
                strQuery_tmp += " select prd as oldprd, '" + emerg_prd + "' as prd,a_n,s_a,amt,'O' as tmpCode, #01/01/1901# as d_d, '" + ConnectionWithAccess.muser + "' as [user], Now() as insert_dt_tm from " + ConnectionWithAccess.tablename[51] + " where prd = '" + emerg_oprd + "' and a_n like '3%' and a_n <> '3000' and a_n <> '3001' and s_a ='@@@' and d_d = #01/01/1901# and a_n not like '6000%' and a_n not like '7998%' and amt <> 0";
                ConnectionWithAccess.query = strQuery_tmp;
                dtEmerg_old_1 = ConnectionCommand.fGetDataTable();
                if (dtEmerg_old_1 != null && dtEmerg_old_1.Rows.Count > 0)
                    ConnectionWithAccess.BulkInserInTable51(dtEmerg_old_1, ConnectionWithAccess.tablename[51].ToString());
                //ConnectionWithAccess.query = "select prd as oldprd, '" + emerg_prd + "' as prd,a_n,s_a,sum(amt) as amt,'O' as tmpCode, #01/01/1901# as d_d, '" + ConnectionWithAccess.muser + "' as [user], Now() as insert_dt_tm from " + ConnectionWithAccess.tablename[51] + " where prd = '" + emerg_oprd + "' and a_n like '1%' and s_a = '@@@' and d_d = #01/01/1901# and amt <> 0 " +
                //    " group by prd, a_n, s_a order by a_n,s_a";
                //dtEmerg_old_1 = ConnectionCommand.fGetDataTable();

                //ConnectionWithAccess.query = "select prd as oldprd, '" + emerg_prd + "' as prd,a_n,s_a,amt,'O' as tmpCode, #01/01/1901# as d_d, '" + ConnectionWithAccess.muser + "' as [user], Now() as insert_dt_tm from " + ConnectionWithAccess.tablename[51] + " where prd = '" + emerg_oprd + "' and a_n not like '1%' and a_n not like '30%' and a_n not like '7%' and d_d = #01/01/1901# and a_n not like '6000%' and a_n not like '65%' and a_n not like '7998%' and amt <> 0";
                //dtEmerg_old_2 = ConnectionCommand.fGetDataTable();

                //ConnectionWithAccess.query = "select prd as oldprd, '" + emerg_prd + "' as prd,a_n,s_a,amt,'O' as tmpCode, #01/01/1901# as d_d, '" + ConnectionWithAccess.muser + "' as [user], Now() as insert_dt_tm from " + ConnectionWithAccess.tablename[51] + " where prd = '" + emerg_oprd + "' and a_n like '3%' and a_n <> '3000' and a_n <> '3001' and s_a ='@@@' and d_d = #01/01/1901# and a_n not like '6000%' and a_n not like '7998%' and amt <> 0";
                //dtEmerg_old_3 = ConnectionCommand.fGetDataTable();


                //Old Emerge 1
                if (dtEmerg_old_1 != null && dtEmerg_old_1.Rows.Count > 0)
                {
                    ConnectionWithAccess.BulkInserInTable51(dtEmerg_old_1, ConnectionWithAccess.tablename[51].ToString());
                    //for (int i = 0; i < dtEmerg_old_1.Rows.Count; i++)
                    //{
                    //    ConnectionWithAccess.BulkInserInTable51(dtEmerg_old_1, ConnectionWithAccess.tablename[51].ToString());
                    //    //for (int i = 0; i < dtEmerg_old_1.Rows.Count; i++)
                    //    //{
                    //    //    this.Text = "Please wait Emerging " + i.ToString() + " of " + dtEmerg_old_1.Rows.Count;
                    //    //    if (dtEmerg_old_1.Rows[i][5].ToString() == "O")
                    //    //    {
                    //    //        update_amount_in_51(dtEmerg_old_1.Rows[i][1].ToString(), dtEmerg_old_1.Rows[i][2].ToString(), dtEmerg_old_1.Rows[i][3].ToString(), Convert.ToDouble(dtEmerg_old_1.Rows[i][4]));
                    //    //    }
                    //    //}
                }
                //Old Emerge 2
                if (dtEmerg_old_2 != null && dtEmerg_old_2.Rows.Count > 0)
                {
                    ConnectionWithAccess.BulkInserInTable51(dtEmerg_old_2, ConnectionWithAccess.tablename[51].ToString());
                    //for (int i = 0; i < dtEmerg_old_2.Rows.Count; i++)
                    //{
                    //    ConnectionWithAccess.BulkInserInTable51(dtEmerg_old_2, ConnectionWithAccess.tablename[51].ToString());
                    //    //for (int i = 0; i < dtEmerg_old_2.Rows.Count; i++)
                    //    //{
                    //    //    this.Text = "Please wait Emerging " + i.ToString() + " of " + dtEmerg_old_2.Rows.Count;
                    //    //    if (dtEmerg_old_2.Rows[i][5].ToString() == "O")
                    //    //    {
                    //    //        update_amount_in_51(dtEmerg_old_2.Rows[i][1].ToString(), dtEmerg_old_2.Rows[i][2].ToString(), dtEmerg_old_2.Rows[i][3].ToString(), Convert.ToDouble(dtEmerg_old_2.Rows[i][4]));
                    //    //    }
                    //    //}
                    //}
                }
                //Old Emerge 3
                if (dtEmerg_old_3 != null && dtEmerg_old_3.Rows.Count > 0)
                {
                    ConnectionWithAccess.BulkInserInTable51(dtEmerg_old_3, ConnectionWithAccess.tablename[51].ToString());
                    for (int i = 0; i < dtEmerg_old_3.Rows.Count; i++)
                    {
                        ConnectionWithAccess.BulkInserInTable51(dtEmerg_old_3, ConnectionWithAccess.tablename[51].ToString());
                        //for (int i = 0; i < dtEmerg_old_3.Rows.Count; i++)
                        //{
                        //    this.Text = "Please wait Emerging " + i.ToString() + " of " + dtEmerg_old_3.Rows.Count;
                        //    if (dtEmerg_old_3.Rows[i][5].ToString() == "O")
                        //    {
                        //        update_amount_in_51(dtEmerg_old_3.Rows[i][1].ToString(), dtEmerg_old_3.Rows[i][2].ToString(), dtEmerg_old_3.Rows[i][3].ToString(), Convert.ToDouble(dtEmerg_old_3.Rows[i][4]));
                        //    }
                        //}
                    }
                }
            }
            #endregion Emerge Old

            #region Emerge Sale
            if (cb_emerg_sale.Checked == true)
            {
                //this.Text = "Please wait Emerging " + ConnectionWithAccess.tablename[21];
                StringBuilder strSaleQuery = new StringBuilder();
                strSaleQuery.Append("select prd,a_n,s_a,gamt,d_c,tamt,tx_code, 'S' as tmpCode from " + ConnectionWithAccess.tablename[21] + " where prd = '" + emerg_prd + "' and s_a <> '@@@' and gamt <> 0");
                strSaleQuery.Append(" UNION ALL");
                strSaleQuery.Append("select prd,switch(tx_code <> 7, '6000', tx_code = 7, '6000R1') as a_n,'@@@' as s_a,(gamt * -1) as gamt,d_c,tamt,tx_code, 'E' as tmpCode from " + ConnectionWithAccess.tablename[21] + " where prd = '" + emerg_prd + "' and s_a <> '@@@' and gamt <> 0");
                //ConnectionWithAccess.query = "select prd,a_n,s_a,gamt,d_c,tamt,tx_code, 'S' as tmpCode from " + ConnectionWithAccess.tablename[21] + " where prd = '" + emerg_prd + "' and s_a <> '@@@' and gamt <> 0";
                ConnectionWithAccess.query = strSaleQuery.ToString();
                dtEmerg_sale_1 = ConnectionCommand.fGetDataTable();
                if (dtEmerg_sale_1 == null || (dtEmerg_sale_1 != null && dtEmerg_sale_1.Rows.Count == 0))
                    update_amount_in_51(ConnectionWithAccess.mprd, "2002", "@@@", 0);

                //this.Text = "Please wait Emerging " + ConnectionWithAccess.tablename[30];
                StringBuilder strQuery_sale_2 = new StringBuilder();
                strQuery_sale_2.Append("select prd,a_n,s_a,(gamt * -1) as gamt,d_c,tamt,tx_code, 'R' as tmpCode from " + ConnectionWithAccess.tablename[30] + " where prd = '" + emerg_prd + "' and gamt <> 0 ");
                strQuery_sale_2.Append(" UNION ALL");
                strQuery_sale_2.Append("select prd,a_n,'@@@' as s_a,(gamt * -1) as gamt,d_c,tamt,tx_code, 'R' as tmpCode from " + ConnectionWithAccess.tablename[30] + " where prd = '" + emerg_prd + "'  and gamt <> 0");
                strQuery_sale_2.Append(" UNION ALL");
                strQuery_sale_2.Append("select prd,'7001' as a_n,'@@@' as s_a,gamt,d_c,tamt,tx_code, 'R' as tmpCode from " + ConnectionWithAccess.tablename[30] + " where prd = '" + emerg_prd + "'  and gamt <> 0");
                ConnectionWithAccess.query = strQuery_sale_2.ToString();

                dtEmerg_sale_2 = ConnectionCommand.fGetDataTable();

                //Emerge Sale 1
                if (dtEmerg_sale_1 != null && dtEmerg_sale_1.Rows.Count > 0)
                {
                    for (int i = 0; i < dtEmerg_sale_1.Rows.Count; i++)
                    {
                        this.Text = "Please wait Emerging " + i.ToString() + " of " + dtEmerg_sale_1.Rows.Count;
                        if ((dtEmerg_sale_1.Rows[i][1].ToString().Substring(0, 2) == "65" || dtEmerg_sale_1.Rows[i][1].ToString().Substring(0, 2) == "70" || dtEmerg_sale_1.Rows[i][1].ToString().Substring(0, 2) == "75") && dtEmerg_sale_1.Rows[i][1].ToString() != "7000" && dtEmerg_sale_1.Rows[i][1].ToString() != "7001")
                        {
                            if (dtEmerg_sale_1.Rows[i][2].ToString() != "@@@")
                                add_amount_in_51(dtEmerg_sale_1.Rows[i][0].ToString(), dtEmerg_sale_1.Rows[i][1].ToString(), "@@@", Convert.ToDouble(dtEmerg_sale_1.Rows[i][3]));
                            else
                                add_amount_in_51(dtEmerg_sale_1.Rows[i][0].ToString(), dtEmerg_sale_1.Rows[i][1].ToString(), dtEmerg_sale_1.Rows[i][2].ToString(), Convert.ToDouble(dtEmerg_sale_1.Rows[i][3]));
                        }
                        else if (dtEmerg_sale_1.Rows[i][1].ToString().Substring(0, 1) == "1")
                        {
                            add_amount_in_51(dtEmerg_sale_1.Rows[i][0].ToString(), dtEmerg_sale_1.Rows[i][1].ToString(), dtEmerg_sale_1.Rows[i][2].ToString(), Convert.ToDouble(dtEmerg_sale_1.Rows[i][3]));
                            add_amount_in_51(dtEmerg_sale_1.Rows[i][0].ToString(), dtEmerg_sale_1.Rows[i][1].ToString(), "@@@", Convert.ToDouble(dtEmerg_sale_1.Rows[i][3]));
                        }
                        else
                            add_amount_in_51(dtEmerg_sale_1.Rows[i][0].ToString(), dtEmerg_sale_1.Rows[i][1].ToString(), dtEmerg_sale_1.Rows[i][2].ToString(), Convert.ToDouble(dtEmerg_sale_1.Rows[i][3]));
                    }
                }

                //Emerge Sale 2
                if (dtEmerg_sale_2 != null && dtEmerg_sale_2.Rows.Count > 0)
                {
                    for (int i = 0; i < dtEmerg_sale_2.Rows.Count; i++)
                    {
                        this.Text = "Please wait Emerging " + i.ToString() + " of " + dtEmerg_sale_2.Rows.Count;
                        if ((dtEmerg_sale_2.Rows[i][1].ToString().Substring(0, 2) == "65" || dtEmerg_sale_2.Rows[i][1].ToString().Substring(0, 2) == "70" || dtEmerg_sale_2.Rows[i][1].ToString().Substring(0, 2) == "75") && dtEmerg_sale_2.Rows[i][1].ToString() != "7000" && dtEmerg_sale_2.Rows[i][1].ToString() != "7001")
                        {
                            if (dtEmerg_sale_2.Rows[i][2].ToString() != "@@@")
                                add_amount_in_51(dtEmerg_sale_2.Rows[i][0].ToString(), dtEmerg_sale_2.Rows[i][1].ToString(), "@@@", Convert.ToDouble(dtEmerg_sale_2.Rows[i][3]));
                            else
                                add_amount_in_51(dtEmerg_sale_2.Rows[i][0].ToString(), dtEmerg_sale_2.Rows[i][1].ToString(), dtEmerg_sale_2.Rows[i][2].ToString(), Convert.ToDouble(dtEmerg_sale_2.Rows[i][3]));
                        }
                        else if (dtEmerg_sale_2.Rows[i][1].ToString().Substring(0, 1) == "1")
                        {
                            add_amount_in_51(dtEmerg_sale_2.Rows[i][0].ToString(), dtEmerg_sale_2.Rows[i][1].ToString(), dtEmerg_sale_2.Rows[i][2].ToString(), Convert.ToDouble(dtEmerg_sale_2.Rows[i][3]));
                            add_amount_in_51(dtEmerg_sale_2.Rows[i][0].ToString(), dtEmerg_sale_2.Rows[i][1].ToString(), "@@@", Convert.ToDouble(dtEmerg_sale_2.Rows[i][3]));
                        }
                        else
                            add_amount_in_51(dtEmerg_sale_2.Rows[i][0].ToString(), dtEmerg_sale_2.Rows[i][1].ToString(), dtEmerg_sale_2.Rows[i][2].ToString(), Convert.ToDouble(dtEmerg_sale_2.Rows[i][3]));
                    }
                }
            }
            #endregion Emerge Sale

            #region Emerge Purchase
            if (cb_emerg_purchase.Checked == true)
            {
                //this.Text = "Please wait Emerging " + ConnectionWithAccess.tablename[22];
                StringBuilder strQuery = new StringBuilder();
                strQuery.Append(" select prd,a_n,s_a,(gamt * -1) as gamt,d_c, 'P' as tmpCode from " + ConnectionWithAccess.tablename[22] + " where prd = '" + emerg_prd + "'and s_a <> '@@@' ");
                strQuery.Append(" UNION ALL");
                strQuery.Append(" select prd,a_n,'@@@' as s_a,(gamt * -1) as gamt,d_c, 'P' as tmpCode from " + ConnectionWithAccess.tablename[22] + " where prd = '" + emerg_prd + "'and s_a <> '@@@' ");
                strQuery.Append(" UNION ALL");
                strQuery.Append(" select prd,'7000' as a_n,'@@@' as s_a, gamt,d_c, 'E' as tmpCode from " + ConnectionWithAccess.tablename[22] + " where prd = '" + emerg_prd + "'and s_a <> '@@@' ");
                ConnectionWithAccess.query = strQuery.ToString();
                dtEmerg_purchase = ConnectionCommand.fGetDataTable();

                //Emerge Purchasse
                if (dtEmerg_purchase != null && dtEmerg_purchase.Rows.Count > 0)
                {
                    for (int i = 0; i < dtEmerg_purchase.Rows.Count; i++)
                    {
                        this.Text = "Please wait Emerging " + i.ToString() + " of " + dtEmerg_purchase.Rows.Count;
                        if ((dtEmerg_purchase.Rows[i][1].ToString().Substring(0, 2) == "65" || dtEmerg_purchase.Rows[i][1].ToString().Substring(0, 2) == "70" || dtEmerg_purchase.Rows[i][1].ToString().Substring(0, 2) == "75") && dtEmerg_purchase.Rows[i][1].ToString() != "7000" && dtEmerg_purchase.Rows[i][1].ToString() != "7001")
                        {
                            if (dtEmerg_purchase.Rows[i][2].ToString() != "@@@")
                                add_amount_in_51(dtEmerg_purchase.Rows[i][0].ToString(), dtEmerg_purchase.Rows[i][1].ToString(), "@@@", Convert.ToDouble(dtEmerg_purchase.Rows[i][3]));
                            else
                                add_amount_in_51(dtEmerg_purchase.Rows[i][0].ToString(), dtEmerg_purchase.Rows[i][1].ToString(), dtEmerg_purchase.Rows[i][2].ToString(), Convert.ToDouble(dtEmerg_purchase.Rows[i][3]));
                        }
                        else if (dtEmerg_purchase.Rows[i][1].ToString().Substring(0, 1) == "1")
                        {
                            add_amount_in_51(dtEmerg_purchase.Rows[i][0].ToString(), dtEmerg_purchase.Rows[i][1].ToString(), dtEmerg_purchase.Rows[i][2].ToString(), Convert.ToDouble(dtEmerg_purchase.Rows[i][3]));
                            add_amount_in_51(dtEmerg_purchase.Rows[i][0].ToString(), dtEmerg_purchase.Rows[i][1].ToString(), "@@@", Convert.ToDouble(dtEmerg_purchase.Rows[i][3]));
                        }
                        else
                            add_amount_in_51(dtEmerg_purchase.Rows[i][0].ToString(), dtEmerg_purchase.Rows[i][1].ToString(), dtEmerg_purchase.Rows[i][2].ToString(), Convert.ToDouble(dtEmerg_purchase.Rows[i][3]));
                    }
                }
            }
            #endregion Emerge Purchase

            #region Emerge Bank
            if (cb_emerg_bank.Checked == true)
            {
                //this.Text = "Please wait Emerging " + ConnectionWithAccess.tablename[23];
                ConnectionWithAccess.query = "select prd,a_n,s_a,(bamt * -1),d_c,b_t,tran_d_c,pass_date, 'B' as tmpCode from " + ConnectionWithAccess.tablename[23] + " where prd = '" + emerg_prd + "' and b_t = '3' and tran_d_c <= 1 and pass_date >= @From and pass_date <= @To order by pass_date,d_n";
                parameters_for_date_range(ConnectionWithAccess.msdate, ConnectionWithAccess.medate);
                DataTable dtData1 = ConnectionCommand.fGetDataTable();

                if (dtData1 != null && dtData1.Rows.Count > 0)
                {
                    dtEmerg_bank_1 = dtData1.Clone();
                    for (int iRowCount = 0; iRowCount < dtData1.Rows.Count; iRowCount++)
                    {
                        if (dtData1.Rows[iRowCount][3] != null)
                        {
                            if (dtData1.Rows[iRowCount][5].ToString() == "3")  // check for only b_t = 3 (means bank cheque passed)
                            {
                                DataRow drRow = dtData1.NewRow();
                                drRow = dtData1.Rows[0];
                                dtEmerg_bank_1.Rows.Add(drRow.ItemArray);// (drRow);

                                temp_a_n = get_a_n_from_d_c_New("B", Convert.ToInt32(dtData1.Rows[iRowCount][4].ToString()));
                                DataRow drRow1 = dtData1.NewRow();
                                drRow1[0] = dtData1.Rows[iRowCount][0].ToString();
                                drRow1[1] = temp_a_n;
                                drRow1[2] = "@@@";
                                drRow1[3] = (Convert.ToDouble(dtData1.Rows[iRowCount][3].ToString()) * -1);
                                drRow1[4] = dtData1.Rows[iRowCount][4].ToString();
                                drRow1[5] = dtData1.Rows[iRowCount][5].ToString();
                                drRow1[6] = dtData1.Rows[iRowCount][6].ToString();
                                drRow1[7] = dtData1.Rows[iRowCount][7].ToString();
                                drRow1[8] = "B";
                                dtEmerg_bank_1.Rows.Add(drRow1.ItemArray);

                                if (dtData1.Rows[iRowCount][1].ToString() == "7999")
                                {
                                    if (dtData1.Rows[iRowCount][2].ToString() == "WIT")
                                    {
                                        DataRow drRow2 = dtData1.NewRow();
                                        drRow2[0] = dtData1.Rows[iRowCount][0].ToString();
                                        drRow2[1] = "2010";
                                        drRow2[2] = "@@@";
                                        drRow2[3] = (Convert.ToDouble(dtData1.Rows[iRowCount][3].ToString()) * 1);
                                        drRow2[4] = dtData1.Rows[iRowCount][4].ToString();
                                        drRow2[5] = dtData1.Rows[iRowCount][5].ToString();
                                        drRow2[6] = dtData1.Rows[iRowCount][6].ToString();
                                        drRow2[7] = dtData1.Rows[iRowCount][7].ToString();
                                        drRow2[8] = "C";
                                        dtEmerg_bank_1.Rows.Add(drRow2.ItemArray);
                                    }
                                    else if (dtData1.Rows[iRowCount][2].ToString() == "DEP")
                                    {
                                        DataRow drRow3 = dtData1.NewRow();
                                        drRow3[0] = dtData1.Rows[iRowCount][0].ToString();
                                        drRow3[1] = "2010";
                                        drRow3[2] = "@@@";
                                        drRow3[3] = (Convert.ToDouble(dtData1.Rows[iRowCount][3].ToString()) * 1);
                                        drRow3[4] = dtData1.Rows[iRowCount][4].ToString();
                                        drRow3[5] = dtData1.Rows[iRowCount][5].ToString();
                                        drRow3[6] = dtData1.Rows[iRowCount][6].ToString();
                                        drRow3[7] = dtData1.Rows[iRowCount][7].ToString();
                                        drRow3[8] = "C";
                                        dtEmerg_bank_1.Rows.Add(drRow3.ItemArray);
                                    }
                                }
                            }
                        }
                    }
                }
                ConnectionWithAccess.query = "select prd,a_n,s_a,bamt,d_c,b_t,tran_d_c,pass_date, 'B' as tmpCode from " + ConnectionWithAccess.tablename[23] + " where prd = '" + emerg_prd + "' and b_t = '3' and tran_d_c <> 0 and pass_date >= @From and pass_date <= @To order by pass_date,d_n";
                parameters_for_date_range(ConnectionWithAccess.msdate, ConnectionWithAccess.medate);
                dtData1 = ConnectionCommand.fGetDataTable();
                if (dtData1 != null && dtData1.Rows.Count > 0)
                {
                    dtEmerg_bank_2 = dtData1.Clone();
                    for (int iRowCount = 0; iRowCount < dtData1.Rows.Count; iRowCount++)
                    {
                        if (dtData1.Rows[iRowCount][3] != null)
                        {
                            if (dtData1.Rows[iRowCount][5].ToString() == "3")  // check for only b_t = 3 (means bank cheque passed)
                            {
                                DataRow drRowBank = dtData1.NewRow();
                                drRowBank = dtData1.Rows[0];
                                dtEmerg_bank_2.Rows.Add(drRowBank.ItemArray);

                                temp_a_n = get_a_n_from_d_c_New("B", Convert.ToInt32(dtData1.Rows[iRowCount][6].ToString()));
                                DataRow drRowBank1 = dtData1.NewRow();
                                drRowBank1[0] = dtData1.Rows[iRowCount][0].ToString();
                                drRowBank1[1] = temp_a_n;
                                drRowBank1[2] = "@@@";
                                drRowBank1[3] = (Convert.ToDouble(dtData1.Rows[iRowCount][3].ToString()) * -1);
                                drRowBank1[4] = dtData1.Rows[iRowCount][4].ToString();
                                drRowBank1[5] = dtData1.Rows[iRowCount][5].ToString();
                                drRowBank1[6] = dtData1.Rows[iRowCount][6].ToString();
                                drRowBank1[7] = dtData1.Rows[iRowCount][7].ToString();
                                drRowBank1[8] = "B";
                                dtEmerg_bank_2.Rows.Add(drRowBank1.ItemArray);
                            }
                        }
                    }
                }
                //Emerge Bank 1
                if (dtEmerg_bank_1 != null && dtEmerg_bank_1.Rows.Count > 0)
                {
                    for (int i = 0; i < dtEmerg_bank_1.Rows.Count; i++)
                    {
                        this.Text = "Please wait Emerging " + i.ToString() + " of " + dtEmerg_bank_1.Rows.Count;
                        if ((dtEmerg_bank_1.Rows[i][1].ToString().Substring(0, 2) == "65" || dtEmerg_bank_1.Rows[i][1].ToString().Substring(0, 2) == "70" || dtEmerg_bank_1.Rows[i][1].ToString().Substring(0, 2) == "75") && dtEmerg_bank_1.Rows[i][1].ToString() != "7000" && dtEmerg_bank_1.Rows[i][1].ToString() != "7001")
                        {
                            if (dtEmerg_bank_1.Rows[i][2].ToString() != "@@@")
                                add_amount_in_51(dtEmerg_bank_1.Rows[i][0].ToString(), dtEmerg_bank_1.Rows[i][1].ToString(), "@@@", Convert.ToDouble(dtEmerg_bank_1.Rows[i][3]));
                            else
                                add_amount_in_51(dtEmerg_bank_1.Rows[i][0].ToString(), dtEmerg_bank_1.Rows[i][1].ToString(), dtEmerg_bank_1.Rows[i][2].ToString(), Convert.ToDouble(dtEmerg_bank_1.Rows[i][3]));
                        }
                        else if (dtEmerg_bank_1.Rows[i][1].ToString().Substring(0, 1) == "1")
                        {
                            add_amount_in_51(dtEmerg_bank_1.Rows[i][0].ToString(), dtEmerg_bank_1.Rows[i][1].ToString(), dtEmerg_bank_1.Rows[i][2].ToString(), Convert.ToDouble(dtEmerg_bank_1.Rows[i][3]));
                            add_amount_in_51(dtEmerg_bank_1.Rows[i][0].ToString(), dtEmerg_bank_1.Rows[i][1].ToString(), "@@@", Convert.ToDouble(dtEmerg_bank_1.Rows[i][3]));
                        }
                        else
                            add_amount_in_51(dtEmerg_bank_1.Rows[i][0].ToString(), dtEmerg_bank_1.Rows[i][1].ToString(), dtEmerg_bank_1.Rows[i][2].ToString(), Convert.ToDouble(dtEmerg_bank_1.Rows[i][3]));
                    }
                }
                //Emerge Bank 2
                if (dtEmerg_bank_2 != null && dtEmerg_bank_2.Rows.Count > 0)
                {
                    for (int i = 0; i < dtEmerg_bank_2.Rows.Count; i++)
                    {
                        this.Text = "Please wait Emerging " + i.ToString() + " of " + dtEmerg_bank_2.Rows.Count;
                        if ((dtEmerg_bank_2.Rows[i][1].ToString().Substring(0, 2) == "65" || dtEmerg_bank_2.Rows[i][1].ToString().Substring(0, 2) == "70" || dtEmerg_bank_2.Rows[i][1].ToString().Substring(0, 2) == "75") && dtEmerg_bank_2.Rows[i][1].ToString() != "7000" && dtEmerg_bank_2.Rows[i][1].ToString() != "7001")
                        {
                            if (dtEmerg_bank_2.Rows[i][2].ToString() != "@@@")
                                add_amount_in_51(dtEmerg_bank_2.Rows[i][0].ToString(), dtEmerg_bank_2.Rows[i][1].ToString(), "@@@", Convert.ToDouble(dtEmerg_bank_2.Rows[i][3]));
                            else
                                add_amount_in_51(dtEmerg_bank_2.Rows[i][0].ToString(), dtEmerg_bank_2.Rows[i][1].ToString(), dtEmerg_bank_2.Rows[i][2].ToString(), Convert.ToDouble(dtEmerg_bank_2.Rows[i][3]));
                        }
                        else if (dtEmerg_bank_2.Rows[i][1].ToString().Substring(0, 1) == "1")
                        {
                            add_amount_in_51(dtEmerg_bank_2.Rows[i][0].ToString(), dtEmerg_bank_2.Rows[i][1].ToString(), dtEmerg_bank_2.Rows[i][2].ToString(), Convert.ToDouble(dtEmerg_bank_2.Rows[i][3]));
                            add_amount_in_51(dtEmerg_bank_2.Rows[i][0].ToString(), dtEmerg_bank_2.Rows[i][1].ToString(), "@@@", Convert.ToDouble(dtEmerg_bank_2.Rows[i][3]));
                        }
                        else
                            add_amount_in_51(dtEmerg_bank_2.Rows[i][0].ToString(), dtEmerg_bank_2.Rows[i][1].ToString(), dtEmerg_bank_2.Rows[i][2].ToString(), Convert.ToDouble(dtEmerg_bank_2.Rows[i][3]));
                    }
                }
            }
            #endregion Emerge Bank

            #region Emerge Cash
            if (cb_emerg_cash.Checked == true)
            {
                this.Text = "Please wait Emerging " + ConnectionWithAccess.tablename[24];
                ConnectionWithAccess.query = "select prd,a_n,s_a,(camt *-1),d_c,d_d, 'C' as tmpCode from " + ConnectionWithAccess.tablename[24] + " where prd = '" + emerg_prd + "' and camt <> 0 and a_n <> '7999' order by d_d";
                DataTable dtData1 = ConnectionCommand.fGetDataTable();
                if (dtData1 != null && dtData1.Rows.Count > 0)
                {
                    dtEmerg_cash = dtData1.Clone();
                    for (int iRowCount = 0; iRowCount < dtData1.Rows.Count; iRowCount++)
                    {
                        if (dtData1.Rows[iRowCount][3] != null)
                        {
                            if (Convert.ToDouble(dtData1.Rows[iRowCount][3].ToString()) != 0)  // check for only b_t = 3 (means bank cheque passed)
                            {
                                DataRow drRow = dtData1.NewRow();
                                drRow = dtData1.Rows[0];
                                dtEmerg_cash.Rows.Add(drRow.ItemArray);

                                temp_a_n = get_a_n_from_d_c_New("C", Convert.ToInt32(dtData1.Rows[iRowCount][4].ToString()));
                                DataRow drRow1 = dtData1.NewRow();
                                drRow1[0] = dtData1.Rows[iRowCount][0].ToString();
                                drRow1[1] = temp_a_n;
                                drRow1[2] = "@@@";
                                drRow1[3] = (Convert.ToDouble(dtData1.Rows[iRowCount][3].ToString()) * -1);
                                drRow1[4] = dtData1.Rows[iRowCount][4].ToString();
                                drRow1[5] = dtData1.Rows[iRowCount][5].ToString();
                                drRow1[6] = "C";
                                dtEmerg_cash.Rows.Add(drRow1.ItemArray);
                            }
                        }
                    }
                }
                //Emerge Cash
                if (dtEmerg_cash != null && dtEmerg_cash.Rows.Count > 0)
                {
                    for (int i = 0; i < dtEmerg_cash.Rows.Count; i++)
                    {
                        this.Text = "Please wait Emerging " + i.ToString() + " of " + dtEmerg_cash.Rows.Count;
                        if ((dtEmerg_cash.Rows[i][1].ToString().Substring(0, 2) == "65" || dtEmerg_cash.Rows[i][1].ToString().Substring(0, 2) == "70" || dtEmerg_cash.Rows[i][1].ToString().Substring(0, 2) == "75") && dtEmerg_cash.Rows[i][1].ToString() != "7000" && dtEmerg_cash.Rows[i][1].ToString() != "7001")
                        {
                            if (dtEmerg_cash.Rows[i][2].ToString() != "@@@")
                                add_amount_in_51(dtEmerg_cash.Rows[i][0].ToString(), dtEmerg_cash.Rows[i][1].ToString(), "@@@", Convert.ToDouble(dtEmerg_cash.Rows[i][3]));
                            else
                                add_amount_in_51(dtEmerg_cash.Rows[i][0].ToString(), dtEmerg_cash.Rows[i][1].ToString(), dtEmerg_cash.Rows[i][2].ToString(), Convert.ToDouble(dtEmerg_cash.Rows[i][3]));
                        }
                        else if (dtEmerg_cash.Rows[i][1].ToString().Substring(0, 1) == "1")
                        {
                            add_amount_in_51(dtEmerg_cash.Rows[i][0].ToString(), dtEmerg_cash.Rows[i][1].ToString(), dtEmerg_cash.Rows[i][2].ToString(), Convert.ToDouble(dtEmerg_cash.Rows[i][3]));
                            add_amount_in_51(dtEmerg_cash.Rows[i][0].ToString(), dtEmerg_cash.Rows[i][1].ToString(), "@@@", Convert.ToDouble(dtEmerg_cash.Rows[i][3]));
                        }
                        else
                            add_amount_in_51(dtEmerg_cash.Rows[i][0].ToString(), dtEmerg_cash.Rows[i][1].ToString(), dtEmerg_cash.Rows[i][2].ToString(), Convert.ToDouble(dtEmerg_cash.Rows[i][3]));
                    }
                }
            }
            #endregion Emerge Cash

            #region Emerge Journal
            if (cb_emerg_journal.Checked == true)
            {
                this.Text = "Please wait Emerging " + ConnectionWithAccess.tablename[25];
                StringBuilder strJournalQuery = new StringBuilder();
                strJournalQuery.Append("select prd,a_n,s_a,jamt,d_c, 'J' as tmpCode from " + ConnectionWithAccess.tablename[25] + " where prd = '" + emerg_prd + "' and jamt > 0.00");
                strJournalQuery.Append(" UNION ALL");
                strJournalQuery.Append("select prd,na_n,ns_a,(jamt * -1) as jamt,d_c, 'J' as tmpCode from " + ConnectionWithAccess.tablename[25] + " where prd = '" + emerg_prd + "' and jamt > 0.00");
                ConnectionWithAccess.query = strJournalQuery.ToString();
                dtEmerg_journal = ConnectionCommand.fGetDataTable();

                //Emerge Journal
                if (dtEmerg_journal != null && dtEmerg_journal.Rows.Count > 0)
                {
                    for (int i = 0; i < dtEmerg_journal.Rows.Count; i++)
                    {
                        this.Text = "Please wait Emerging " + i.ToString() + " of " + dtEmerg_journal.Rows.Count;
                        if ((dtEmerg_journal.Rows[i][1].ToString().Substring(0, 2) == "65" || dtEmerg_journal.Rows[i][1].ToString().Substring(0, 2) == "70" || dtEmerg_journal.Rows[i][1].ToString().Substring(0, 2) == "75") && dtEmerg_journal.Rows[i][1].ToString() != "7000" && dtEmerg_journal.Rows[i][1].ToString() != "7001")
                        {
                            if (dtEmerg_journal.Rows[i][2].ToString() != "@@@")
                                add_amount_in_51(dtEmerg_journal.Rows[i][0].ToString(), dtEmerg_journal.Rows[i][1].ToString(), "@@@", Convert.ToDouble(dtEmerg_journal.Rows[i][3]));
                            else
                                add_amount_in_51(dtEmerg_journal.Rows[i][0].ToString(), dtEmerg_journal.Rows[i][1].ToString(), dtEmerg_journal.Rows[i][2].ToString(), Convert.ToDouble(dtEmerg_journal.Rows[i][3]));
                        }
                        else if (dtEmerg_journal.Rows[i][1].ToString().Substring(0, 1) == "1")
                        {
                            add_amount_in_51(dtEmerg_journal.Rows[i][0].ToString(), dtEmerg_journal.Rows[i][1].ToString(), dtEmerg_journal.Rows[i][2].ToString(), Convert.ToDouble(dtEmerg_journal.Rows[i][3]));
                            add_amount_in_51(dtEmerg_journal.Rows[i][0].ToString(), dtEmerg_journal.Rows[i][1].ToString(), "@@@", Convert.ToDouble(dtEmerg_journal.Rows[i][3]));
                        }
                        else
                            add_amount_in_51(dtEmerg_journal.Rows[i][0].ToString(), dtEmerg_journal.Rows[i][1].ToString(), dtEmerg_journal.Rows[i][2].ToString(), Convert.ToDouble(dtEmerg_journal.Rows[i][3]));
                    }
                }
            }
            #endregion Emerge Journal

            fUpdate_Amt_in_01_from_51(emerg_prd);
        }

        DataTable dt_51_existing = null, dt_all_new_emerg_rows = null, dt_Final_51 = null;

        public object ToolStripStatusPeriod { get; private set; }
        public object ToolStripStatusCompany { get; private set; }

        private void emerg_balance_process_using_DT(string emerg_prd, string emerg_oprd)
        {
            dt_Final_51 = null;
            double dSumAmount = 0;
            emerg_oprd = ConnectionWithAccess.get_old_prd_name(emerg_prd);
            dt_51_existing = null;
            DataTable dtEmerg_old_1 = null, dtEmerg_old_2 = null, dtEmerg_old_3 = null, d, dtEmerg_sale_1 = null, dtEmerg_sale_2 = null;
            DataTable dtEmerg_purchase = null, dtEmerg_bank_1 = null, dtEmerg_bank_2 = null, dtEmerg_cash = null, dtEmerg_journal = null;
            temp_sale_amt = 0;
            temp_sale_replace_amt = 0;
            temp_purchase_amt = 0;
            ConnectionWithAccess.closing_stock = 0;
            this.Text = "Please wait Emerging Period [" + emerg_prd + "]";

            string SQL = "SELECT prd, a_n,s_a, amt, d_d, [user], insert_dt_tm FROM " + ConnectionWithAccess.tablename[51] + " WHERE prd='" + emerg_oprd + "' order by a_n + s_a";
            ConnectionWithAccess.query = SQL;
            dt_51_existing = ConnectionCommand.fGetDataTable();

            dt_Final_51 = dt_51_existing.Clone();

            StringBuilder strMainQuery = new StringBuilder();


            #region Emerge Old
            if (cb_emerg_old.Checked == true)
            {
                string strQuery_tmp = string.Empty;

                strQuery_tmp += " select '" + emerg_oprd + "' as prd,a_n,s_a,sum(amt) as amt, 0 as d_c,  0 as tamt,'' as tx_code,0 as b_t, null as tran_d_c, #01/01/1901# as pass_date, 'O' as tmpCode, #01/01/1901# as d_d, '" + ConnectionWithAccess.muser + "' as [user], Now() as insert_dt_tm, '' as na_n, '' as ns_a from " + ConnectionWithAccess.tablename[51] + " where prd = '" + emerg_oprd + "' and a_n like '1%' and s_a = '@@@' and d_d = #01/01/1901# and amt <> 0 " +
                    " group by prd, a_n, s_a";
                strQuery_tmp += " union ";
                strQuery_tmp += " select '" + emerg_oprd + "' as prd,a_n,s_a,amt, 0 as d_c, 0 as tamt,'' as tx_code,0 as b_t, null as tran_d_c, #01/01/1901# as pass_date, 'O' as tmpCode, #01/01/1901# as d_d, '" + ConnectionWithAccess.muser + "' as [user], Now() as insert_dt_tm, '' as na_n, '' as ns_a from " + ConnectionWithAccess.tablename[51] + " where prd = '" + emerg_oprd + "' and a_n not like '1%' and a_n not like '30%' and a_n not like '7%' and d_d = #01/01/1901# and a_n not like '6000%' and a_n not like '65%' and a_n not like '7998%' and amt <> 0";
                strQuery_tmp += " union ";
                strQuery_tmp += " select '" + emerg_oprd + "' as prd,a_n,s_a,amt, 0 as d_c, 0 as tamt,'' as tx_code,0 as b_t, null as tran_d_c, #01/01/1901# as pass_date, 'O' as tmpCode, #01/01/1901# as d_d, '" + ConnectionWithAccess.muser + "' as [user], Now() as insert_dt_tm, '' as na_n, '' as ns_a from " + ConnectionWithAccess.tablename[51] + " where prd = '" + emerg_oprd + "' and a_n like '3%' and a_n <> '3000' and a_n <> '3001' and s_a ='@@@' and d_d = #01/01/1901# and a_n not like '6000%' and a_n not like '7998%' and amt <> 0";
                strMainQuery.Append(strQuery_tmp);
            }
            #endregion Emerge Old

            #region Emerge Sale
            if (cb_emerg_sale.Checked == true)
            {
                if (strMainQuery.Length > 0)
                {
                    strMainQuery.Append(" union all ");
                }
                strMainQuery.Append("select prd,a_n,s_a,gamt as amt,d_c,tamt,tx_code,0 as b_t, null as tran_d_c, d_d as pass_date, 'S' as tmpCode, #01/01/1901# as d_d, '" + ConnectionWithAccess.muser + "' as [user], Now() as insert_dt_tm, '' as na_n, '' as ns_a  from " + ConnectionWithAccess.tablename[21] + " where prd = '" + emerg_prd + "' and s_a <> '@@@' and gamt <> 0");
                strMainQuery.Append(" union all ");
                strMainQuery.Append("select prd,a_n,s_a,(gamt * -1) as amt,d_c,tamt,tx_code,0 as b_t, null as tran_d_c, d_d as pass_date, 'R' as tmpCode, #01/01/1901# as d_d, '" + ConnectionWithAccess.muser + "' as [user], Now() as insert_dt_tm, '' as na_n, '' as ns_a  from " + ConnectionWithAccess.tablename[30] + " where prd = '" + emerg_prd + "' and s_a <> '@@@' and d_y = '@@@' and gamt <> 0");
            }
            #endregion Emerge Sale

            #region Emerge Purchase
            if (cb_emerg_purchase.Checked == true)
            {
                if (strMainQuery.Length > 0)
                {
                    strMainQuery.Append(" union all ");
                }
                strMainQuery.Append("select prd,a_n,s_a, gamt as amt,d_c, 0 as tamt,'' as tx_code,0 as b_t, null as tran_d_c, d_d as pass_date, 'P' as tmpCode, #01/01/1901# as d_d, '" + ConnectionWithAccess.muser + "' as [user], Now() as insert_dt_tm, '' as na_n, '' as ns_a  from " + ConnectionWithAccess.tablename[22] + " where prd = '" + emerg_prd + "'and s_a <> '@@@' ");
            }
            #endregion Emerge Purchase

            #region Emerge Bank
            if (cb_emerg_bank.Checked == true)
            {
                if (strMainQuery.Length > 0)
                {
                    strMainQuery.Append(" union all ");
                }
                //strMainQuery.Append("select prd,a_n,s_a,(bamt * -1) as amt,d_c, 0 as tamt,'' as tx_code,b_t,tran_d_c,pass_date, 'B' as tmpCode, #01/01/1901# as d_d, '" + ConnectionWithAccess.muser + "' as [user], Now() as insert_dt_tm, '' as na_n, '' as ns_a from " + ConnectionWithAccess.tablename[23] + " where prd = '" + emerg_prd + "' and b_t = '3' and tran_d_c < 1 and pass_date >= @From and pass_date <= @To ");
                strMainQuery.Append("select prd,a_n,s_a,(bamt * -1) as amt,d_c, 0 as tamt,'' as tx_code,b_t,tran_d_c,pass_date, 'B' as tmpCode, #01/01/1901# as d_d, '" + ConnectionWithAccess.muser + "' as [user], Now() as insert_dt_tm, '' as na_n, '' as ns_a from " + ConnectionWithAccess.tablename[23] + " where prd = '" + emerg_prd + "' and b_t = '3' and pass_date >= @From and pass_date <= @To ");
                //strMainQuery.Append(" union all ");
                //strMainQuery.Append("select prd,a_n,s_a,bamt as amt,d_c, 0 as tamt,'' as tx_code,b_t,tran_d_c,pass_date, 'B' as tmpCode, #01/01/1901# as d_d, '" + ConnectionWithAccess.muser + "' as [user], Now() as insert_dt_tm, '' as na_n, '' as ns_a from " + ConnectionWithAccess.tablename[23] + " where prd = '" + emerg_prd + "' and b_t = '3' and tran_d_c <> 0 and pass_date >= @From and pass_date <= @To ");
            }
            else if (cb_emerg_cash.Checked == true)
            {
                if (strMainQuery.Length > 0)
                {
                    strMainQuery.Append(" union all ");
                }
                strMainQuery.Append("select prd,a_n,s_a,(bamt * 1) as amt,d_c, 0 as tamt,'' as tx_code,b_t,tran_d_c,pass_date, 'B' as tmpCode, #01/01/1901# as d_d, '" +
                ConnectionWithAccess.muser + "' as [user], Now() as insert_dt_tm, '' as na_n, '' as ns_a from " +
                ConnectionWithAccess.tablename[23] + " where prd = '" + emerg_prd + "' and a_n = '7999' and b_t = '3' and pass_date >= @From and pass_date <= @To ");
            }
            #endregion Emerge Bank

            #region Emerge Cash
            if (cb_emerg_cash.Checked == true)
            {
                if (strMainQuery.Length > 0)
                {
                    strMainQuery.Append(" union all ");
                }
                strMainQuery.Append("select prd,a_n,s_a,(camt *-1) as amt,d_c, 0 as tamt,'' as tx_code,b_t,0 as tran_d_c, d_d as pass_date, 'C' as tmpCode, d_d, '" + ConnectionWithAccess.muser + "' as [user], Now() as insert_dt_tm, '' as na_n, '' as ns_a  from " + ConnectionWithAccess.tablename[24] + " where prd = '" + emerg_prd + "' and camt <> 0 and a_n <> '7999' ");
            }
            #endregion Emerge Cash

            #region Emerge Journal
            if (cb_emerg_journal.Checked == true)
            {
                if (strMainQuery.Length > 0)
                {
                    strMainQuery.Append(" union all ");
                }
                strMainQuery.Append("select prd,a_n,s_a,jamt as amt,d_c, 0 as tamt,'' as tx_code,0 as b_t, null as tran_d_c, d_d as pass_date, 'J' as tmpCode, #01/01/1901# as d_d, '" + ConnectionWithAccess.muser + "' as [user], Now() as insert_dt_tm, na_n, ns_a  from " + ConnectionWithAccess.tablename[25] + " where prd = '" + emerg_prd + "' and jamt > 0.00");

                //strMainQuery.Append(" UNION all ");
                //strMainQuery.Append("select prd,na_n as a_n, ns_a as s_a, (jamt * -1) as amt,d_c, 0 as tamt,'' as tx_code,0 as b_t, null as tran_d_c, d_d as pass_date, 'J' as tmpCode, #01/01/1901# as d_d, '" + ConnectionWithAccess.muser + "' as [user], Now() as insert_dt_tm, a_n as na_n, s_a as ns_a  from " + ConnectionWithAccess.tablename[25] + " where prd = '" + emerg_prd + "' and jamt > 0.00");





                //strMainQuery.Append(" UNION all ");
                //strMainQuery.Append("select prd,na_n as a_n, ns_a as s_a, (jamt * -1) as amt,d_c, 0 as tamt,'' as tx_code,0 as b_t, null as tran_d_c, d_d as pass_date, 'J' as tmpCode, #01/01/1901# as d_d, '" + ConnectionWithAccess.muser + "' as [user], Now() as insert_dt_tm, a_n as na_n, s_a as ns_a  from " + ConnectionWithAccess.tablename[25] + " where prd = '" + emerg_prd + "' and jamt > 0.00 and a_n like '3001%'");
                //strMainQuery.Append(" UNION all ");
                //strMainQuery.Append("select prd,a_n,s_a,(jamt * -1) as amt,d_c, 0 as tamt,'' as tx_code,0 as b_t, null as tran_d_c, d_d as pass_date, 'J' as tmpCode, #01/01/1901# as d_d, '" + ConnectionWithAccess.muser + "' as [user], Now() as insert_dt_tm, na_n, ns_a  from " + ConnectionWithAccess.tablename[25] + " where prd = '" + emerg_prd + "' and jamt > 0.00 and a_n like '3001%'");




            }
            #endregion Emerge Journal

            //strMainQuery.Append(" order by prd,a_n,s_a,pass_date"); // temperoray done off
            strMainQuery.Append(" order by d_c, pass_date");
            parameters_for_date_range(ConnectionWithAccess.msdate, ConnectionWithAccess.medate);
            ConnectionWithAccess.query = strMainQuery.ToString();
            dt_all_new_emerg_rows = ConnectionCommand.fGetDataTable();

            dt_all_new_emerg_rows.DefaultView.Sort = "d_c,pass_date";
            dt_all_new_emerg_rows = dt_all_new_emerg_rows.DefaultView.ToTable();
            object sumObject;
            sumObject = dt_all_new_emerg_rows.Compute("Sum(amt)", string.Empty);
            temp_word = sumObject.ToString();
            temp_double = gather_SumAmount_FromDT_using_d_c(emerg_prd, 9, "amt", "B"); //Call this method for all a_n, s_a

            row_pointer2 = 0;
            for (row_counter = 0; row_counter <= dt_all_new_emerg_rows.Rows.Count - 1; row_counter++)
            {
                if (dt_all_new_emerg_rows.Rows[row_counter]["prd"].ToString() == emerg_oprd)
                {
                    temp_a_n = dt_all_new_emerg_rows.Rows[row_counter]["a_n"].ToString();
                    temp_s_a = dt_all_new_emerg_rows.Rows[row_counter]["s_a"].ToString();
                    temp_double = Convert.ToDouble(dt_all_new_emerg_rows.Rows[row_counter]["amt"].ToString());
                    Update_Insert_SumAmount_FromDT(emerg_prd, temp_a_n, temp_s_a, temp_double);
                }
                else
                {
                    double.TryParse(dt_all_new_emerg_rows.Rows[row_counter]["amt"].ToString(), out temp_double);
                    //temp_double = Convert.ToDouble(dt_all_new_emerg_rows.Rows[row_counter]["amt"].ToString());
                    //if (dt_all_new_emerg_rows.Rows[row_counter]["a_n"].ToString() == "3500")
                    //    temp_word = "Sanjay";
                    if (dt_all_new_emerg_rows.Rows[row_counter]["a_n"].ToString() != "3001")
                    {
                        if (dt_all_new_emerg_rows.Rows[row_counter]["a_n"].ToString() != "7999")
                        {
                            if (dt_all_new_emerg_rows.Rows[row_counter]["tmpCode"].ToString() == "S")
                            {
                                Update_Insert_SumAmount_FromDT(emerg_prd, dt_all_new_emerg_rows.Rows[row_counter]["a_n"].ToString(), dt_all_new_emerg_rows.Rows[row_counter]["s_a"].ToString(), temp_double);
                                Update_Insert_SumAmount_FromDT(emerg_prd, dt_all_new_emerg_rows.Rows[row_counter]["a_n"].ToString(), "@@@", temp_double);
                            }
                            else if (dt_all_new_emerg_rows.Rows[row_counter]["tmpCode"].ToString() == "P")
                            {
                                Update_Insert_SumAmount_FromDT(emerg_prd, dt_all_new_emerg_rows.Rows[row_counter]["a_n"].ToString(), dt_all_new_emerg_rows.Rows[row_counter]["s_a"].ToString(), temp_double * -1);
                                Update_Insert_SumAmount_FromDT(emerg_prd, dt_all_new_emerg_rows.Rows[row_counter]["a_n"].ToString(), "@@@", temp_double * -1);
                            }
                            else if (dt_all_new_emerg_rows.Rows[row_counter]["tmpCode"].ToString() == "B")
                            {
                                if (dt_all_new_emerg_rows.Rows[row_counter]["s_a"].ToString() != "@@@")
                                    Update_Insert_SumAmount_FromDT(emerg_prd, dt_all_new_emerg_rows.Rows[row_counter]["a_n"].ToString(), dt_all_new_emerg_rows.Rows[row_counter]["s_a"].ToString(), temp_double);
                                Update_Insert_SumAmount_FromDT(emerg_prd, dt_all_new_emerg_rows.Rows[row_counter]["a_n"].ToString(), "@@@", temp_double);
                            }
                            else if (dt_all_new_emerg_rows.Rows[row_counter]["tmpCode"].ToString() == "C")
                            {
                                temp_d_c = Convert.ToInt32(dt_all_new_emerg_rows.Rows[row_counter]["d_c"].ToString());
                                if (dt_all_new_emerg_rows.Rows[row_counter]["s_a"].ToString() != "@@@")
                                {
                                    Update_Insert_SumAmount_FromDT(emerg_prd, dt_all_new_emerg_rows.Rows[row_counter]["a_n"].ToString(), dt_all_new_emerg_rows.Rows[row_counter]["s_a"].ToString(), temp_double);
                                }
                                Update_Insert_SumAmount_FromDT(emerg_prd, dt_all_new_emerg_rows.Rows[row_counter]["a_n"].ToString(), "@@@", temp_double);
                                //temp_a_n = get_a_n_from_d_c("C", temp_d_c);
                                //Update_Insert_SumAmount_FromDT(emerg_prd, temp_a_n, "@@@", temp_double);
                            }
                            else if (dt_all_new_emerg_rows.Rows[row_counter]["tmpCode"].ToString() == "J")
                            {
                                temp_a_n = dt_all_new_emerg_rows.Rows[row_counter]["a_n"].ToString();
                                if (temp_a_n.Substring(0, 1) == "3001")
                                    temp_word = "sanjay";
                                if (dt_all_new_emerg_rows.Rows[row_counter]["s_a"].ToString() != "@@@")
                                    Update_Insert_SumAmount_FromDT(emerg_prd, dt_all_new_emerg_rows.Rows[row_counter]["a_n"].ToString(), dt_all_new_emerg_rows.Rows[row_counter]["s_a"].ToString(), temp_double);
                                Update_Insert_SumAmount_FromDT(emerg_prd, dt_all_new_emerg_rows.Rows[row_counter]["a_n"].ToString(), "@@@", temp_double);
                                temp_a_n = dt_all_new_emerg_rows.Rows[row_counter]["na_n"].ToString();
                                if (dt_all_new_emerg_rows.Rows[row_counter]["ns_a"].ToString() != "@@@")
                                    Update_Insert_SumAmount_FromDT(emerg_prd, dt_all_new_emerg_rows.Rows[row_counter]["na_n"].ToString(), dt_all_new_emerg_rows.Rows[row_counter]["ns_a"].ToString(), temp_double * -1);
                                Update_Insert_SumAmount_FromDT(emerg_prd, dt_all_new_emerg_rows.Rows[row_counter]["na_n"].ToString(), "@@@", temp_double * -1);

                            }
                            else if (dt_all_new_emerg_rows.Rows[row_counter]["tmpCode"].ToString() == "R")
                            {
                                Update_Insert_SumAmount_FromDT(emerg_prd, dt_all_new_emerg_rows.Rows[row_counter]["a_n"].ToString(), dt_all_new_emerg_rows.Rows[row_counter]["s_a"].ToString(), temp_double);
                                Update_Insert_SumAmount_FromDT(emerg_prd, dt_all_new_emerg_rows.Rows[row_counter]["a_n"].ToString(), "@@@", temp_double);
                            }
                        }
                        else
                        {
                            if (dt_all_new_emerg_rows.Rows[row_counter]["tmpCode"].ToString() == "B")
                            {
                                Update_Insert_SumAmount_FromDT(emerg_prd, "2010", "@@@", temp_double);
                                //Update_Insert_SumAmount_FromDT(emerg_prd, dt_all_new_emerg_rows.Rows[row_counter]["a_n"].ToString(), "@@@", temp_double);
                            }
                        }
                    }
                    else
                    {
                        if (dt_all_new_emerg_rows.Rows[row_counter]["tmpCode"].ToString() == "B")
                        {
                            Update_Insert_SumAmount_FromDT(emerg_prd, dt_all_new_emerg_rows.Rows[row_counter]["a_n"].ToString(), dt_all_new_emerg_rows.Rows[row_counter]["s_a"].ToString(), temp_double);
                        }
                        else if (dt_all_new_emerg_rows.Rows[row_counter]["tmpCode"].ToString() == "C")
                        {
                            Update_Insert_SumAmount_FromDT(emerg_prd, dt_all_new_emerg_rows.Rows[row_counter]["a_n"].ToString(), dt_all_new_emerg_rows.Rows[row_counter]["s_a"].ToString(), temp_double);
                        }
                        else if (dt_all_new_emerg_rows.Rows[row_counter]["tmpCode"].ToString() == "J")
                        {
                            Update_Insert_SumAmount_FromDT(emerg_prd, dt_all_new_emerg_rows.Rows[row_counter]["a_n"].ToString(), dt_all_new_emerg_rows.Rows[row_counter]["s_a"].ToString(), temp_double);
                            Update_Insert_SumAmount_FromDT(emerg_prd, dt_all_new_emerg_rows.Rows[row_counter]["na_n"].ToString(), "@@@", temp_double * -1);
                            if (dt_all_new_emerg_rows.Rows[row_counter]["ns_a"].ToString() != "@@@")
                                Update_Insert_SumAmount_FromDT(emerg_prd, dt_all_new_emerg_rows.Rows[row_counter]["na_n"].ToString(), dt_all_new_emerg_rows.Rows[row_counter]["ns_a"].ToString(), temp_double * -1);
                        }
                    }
                }
            }

            temp_double = gather_SumAmount_FromDT(emerg_prd, "2002", "", "amt", "S", "N7", ""); //Call this method for all a_n, s_a
            Update_Insert_SumAmount_FromDT(emerg_prd, "6000", "@@@", temp_double * -1); //Call this method for all a_n, s_a

            temp_double = gather_SumAmount_FromDT(emerg_prd, "2002", "", "amt", "S", "7", ""); //Call this method for all a_n, s_a
            Update_Insert_SumAmount_FromDT(emerg_prd, "6000R1", "@@@", temp_double * -1); //Call this method for all a_n, s_a

            temp_double = gather_SumAmount_FromDT(emerg_prd, "4002", "", "amt", "P", "", ""); //Call this method for all a_n, s_a
            Update_Insert_SumAmount_FromDT(emerg_prd, "7000", "@@@", temp_double); //Call this method for all a_n, s_a

            temp_double = gather_SumAmount_FromDT(emerg_prd, "2002", "", "amt", "R", "N7", "NEGA"); //Call this method for all a_n, s_a
            Update_Insert_SumAmount_FromDT(emerg_prd, "7001", "@@@", temp_double * -1); //Call this method for all a_n, s_a

            for (row_counter = 0; row_counter < dtMasterData.Rows.Count; row_counter++)
            {
                if (dtMasterData.Rows[row_counter]["book"].ToString() == "B")
                {
                    temp_d_c = Convert.ToInt32(dtMasterData.Rows[row_counter]["d_c"].ToString());
                    temp_a_n = dtMasterData.Rows[row_counter]["a_n"].ToString();
                    temp_double = 0;
                    try
                    {
                        DataRow dr = dt_all_new_emerg_rows.AsEnumerable().Where(r => ((string)r["prd"]).Equals(emerg_oprd) && ((string)r["a_n"]).Equals(temp_a_n) && ((string)r["s_a"]).Equals("@@@")).First(); // getting the row to edit , change it as you need

                        if (dr != null)
                            temp_double = Convert.ToDouble(dr["amt"].ToString());
                    }
                    catch (Exception ex)
                    { }
                    double.TryParse((dt_all_new_emerg_rows.Compute("Sum(amt) ", "d_c = '" + temp_d_c + "' and  tmpCode = 'B' and b_t = '3'")).ToString(), out dSumAmount);
                    temp_double -= dSumAmount;
                    double.TryParse((dt_all_new_emerg_rows.Compute("Sum(amt)", "tran_d_c = '" + temp_d_c + "' and tmpCode = 'B' and b_t = '3'")).ToString(), out dSumAmount);
                    temp_double += dSumAmount;
                    try
                    {
                        DataRow dr = dt_Final_51.AsEnumerable().Where(r => ((string)r["prd"]).Equals(emerg_prd) && ((string)r["a_n"]).Equals(temp_a_n) && ((string)r["s_a"]).Equals("@@@")).First(); // getting the row to edit , change it as you need
                        if (dr != null)
                            dr["amt"] = 0;
                    }
                    catch (Exception ex)
                    {
                        //udate amt in datarow for a_n, s_a passed
                        DataRow drNewRow = dt_Final_51.NewRow();
                        drNewRow[0] = emerg_prd;
                        drNewRow[1] = temp_a_n;
                        drNewRow[2] = "@@@";
                        drNewRow[3] = 0;
                        drNewRow[4] = "01/01/1901";
                        drNewRow[5] = "admin";
                        drNewRow[6] = DateTime.Now;
                        dt_Final_51.Rows.Add(drNewRow.ItemArray);
                    }
                    Update_Insert_SumAmount_FromDT(emerg_prd, temp_a_n, "@@@", temp_double);
                }
                else if (dtMasterData.Rows[row_counter]["book"].ToString() == "C")
                {
                    temp_d_c = Convert.ToInt32(dtMasterData.Rows[row_counter]["d_c"].ToString());
                    temp_a_n = dtMasterData.Rows[row_counter]["a_n"].ToString();
                    temp_double = 0;
                    try
                    {
                        DataRow dr = dt_all_new_emerg_rows.AsEnumerable().Where(r => ((string)r["prd"]).Equals(emerg_oprd) && ((string)r["a_n"]).Equals(temp_a_n) && ((string)r["s_a"]).Equals("@@@")).First(); // getting the row to edit , change it as you need

                        if (dr != null)
                            temp_double = Convert.ToDouble(dr["amt"].ToString());
                    }
                    catch (Exception ex)
                    { }

                    double.TryParse((dt_all_new_emerg_rows.Compute("Sum(amt) ", "d_c = '" + temp_d_c + "' and  tmpCode = 'C' and a_n <> '7999'")).ToString(), out dSumAmount);
                    temp_double = temp_double - dSumAmount;
                    double.TryParse((dt_all_new_emerg_rows.Compute("Sum(amt) ", "tmpCode = 'B' and b_t = '3' and a_n = '7999'")).ToString(), out dSumAmount);
                    temp_double = temp_double + dSumAmount;
                    try
                    {
                        DataRow dr = dt_Final_51.AsEnumerable().Where(r => ((string)r["prd"]).Equals(emerg_prd) && ((string)r["a_n"]).Equals(temp_a_n) && ((string)r["s_a"]).Equals("@@@")).First(); // getting the row to edit , change it as you need
                        if (dr != null)
                            dr["amt"] = 0;
                    }
                    catch (Exception ex)
                    {
                        //udate amt in datarow for a_n, s_a passed
                        DataRow drNewRow = dt_Final_51.NewRow();
                        drNewRow[0] = emerg_prd;
                        drNewRow[1] = temp_a_n;
                        drNewRow[2] = "@@@";
                        drNewRow[3] = 0;
                        drNewRow[4] = "01/01/1901";
                        drNewRow[5] = "admin";
                        drNewRow[6] = DateTime.Now;
                        dt_Final_51.Rows.Add(drNewRow.ItemArray);
                    }
                    Update_Insert_SumAmount_FromDT(emerg_prd, temp_a_n, "@@@", temp_double);
                }
            }
            ConnectionWithAccess.query = "delete from " + ConnectionWithAccess.tablename[51] + " where prd >= '" + emerg_prd + "'";
            ConnectionCommand.fUpdateInsertDeleteData();
            dt_Final_51.AcceptChanges();

            if (dt_Final_51 != null && dt_Final_51.Rows.Count > 0)
                ConnectionWithAccess.BulkInserInTable51(dt_Final_51, ConnectionWithAccess.tablename[51].ToString());

            //emerg_update_DT("4002", "JJ1", 12345);
            //emerg_insert_into_DT("S", "2002", "CS1", 111222);
            //fUpdate_Amt_in_01_from_51(emerg_prd);
        }
        private void Update_Insert_SumAmount_FromDT(string strPrd, string stra_n, string strs_a, double dSumAmount)
        {
            if (dt_Final_51.Select("prd = '" + strPrd + "' and a_n = '" + stra_n + "' and s_a = '" + strs_a + "' ").Length > 0)
                emerg_add_Amount_and_update_DT(strPrd, stra_n, strs_a, dSumAmount);
            //emerg_update_DT(strPrd, stra_n, trs_a, dSumAmount);
            else
                emerg_insert_into_DT(strPrd, stra_n, strs_a, dSumAmount);
        }

        private double gather_SumAmount_FromDT(string strPrd, string stra_n, string strs_a, string strAmtField, string strtmpCode, string strtax_code, string posi_nega)
        {
            string strFilterExpression = string.Empty;
            if (!string.IsNullOrEmpty(stra_n))
                strFilterExpression += " a_n = '" + stra_n + "' and ";
            if (!string.IsNullOrEmpty(strs_a))
                strFilterExpression += " s_a = '" + strs_a + "' and ";
            if (!string.IsNullOrEmpty(strtmpCode))
                strFilterExpression += " tmpCode = '" + strtmpCode + "' and ";
            if (!string.IsNullOrEmpty(strtax_code))
            {
                if (strtax_code == "N7")
                    strFilterExpression += " tx_code <> '" + strtax_code.Substring(1, strtax_code.Length - 1) + "' and ";
                else
                    strFilterExpression += " tx_code = '" + strtax_code + "' and ";
            }
            if (!string.IsNullOrEmpty(posi_nega))
                strFilterExpression += " amt < 0  and ";
            var removeList = new[] { "and" };
            strFilterExpression = strFilterExpression.Substring(0, strFilterExpression.Trim().Length - 3).Trim();
            double dSumAmount = 0;
            double.TryParse((dt_all_new_emerg_rows.Compute("Sum( " + strAmtField + ") ", strFilterExpression)).ToString(), out dSumAmount);
            return dSumAmount;
            //if (dt_51_existing.Select("a_n = '" + stra_n + "' and s_a = '" + strs_a + "' ").Length > 0)
            //    emerg_update_DT(stra_n, strs_a, dSumAmount);
            //else
            //    emerg_insert_into_DT(strPrd, stra_n, strs_a, dSumAmount);
        }

        private double gather_SumAmount_FromDT_using_d_c(string strPrd, int strd_c, string strAmtField, string strtmpCode)
        {
            string strFilterExpression = string.Empty;
            //if (!string.IsNullOrEmpty(strd_c))
            strFilterExpression += " d_c = " + strd_c + " and ";
            if (!string.IsNullOrEmpty(strtmpCode))
                strFilterExpression += " tmpCode = '" + strtmpCode + "' and ";
            var removeList = new[] { "and" };
            strFilterExpression = strFilterExpression.Substring(0, strFilterExpression.Trim().Length - 3).Trim();
            double dSumAmount = 0;
            double.TryParse((dt_all_new_emerg_rows.Compute("Sum( " + strAmtField + ") ", strFilterExpression)).ToString(), out dSumAmount);
            return dSumAmount;
            //if (dt_51_existing.Select("a_n = '" + stra_n + "' and s_a = '" + strs_a + "' ").Length > 0)
            //    emerg_update_DT(stra_n, strs_a, dSumAmount);
            //else
            //    emerg_insert_into_DT(strPrd, stra_n, strs_a, dSumAmount);
        }

        private void emerg_add_Amount_and_update_DT(string strPrd, string stra_n, string strs_a, double dAmt)
        {
            if (dt_Final_51 != null && dt_Final_51.Rows.Count > 0)
            {
                if (stra_n == "3508")
                    temp_word = "Sanjay";
                //udate amt in datarow for a_n, s_a passed
                //DataRow dr = dt_51_existing.AsEnumerable().Where(r => ((string)r["a_n"]).Equals(stra_n) && ((string)r["s_a"]).Equals(strs_a)).First(); // getting the row to edit , change it as you need
                try
                {
                    DataRow dr = dt_Final_51.AsEnumerable().Where(r => ((string)r["prd"]).Equals(strPrd) && ((string)r["a_n"]).Equals(stra_n) && ((string)r["s_a"]).Equals(strs_a)).First(); // getting the row to edit , change it as you need
                    if (dr != null)
                    {
                        dr["amt"] = Convert.ToDouble(dr["amt"].ToString()) + dAmt;
                        get_account_details_from_01(stra_n, strs_a);
                        temporary_list_1.Add(strPrd.ToString() + "," + stra_n.ToString() + "," + strs_a.ToString() + "," + account_detail_from_01[4] + "," + account_detail_from_01[5] + "," + dAmt.ToString() + "," + dr["amt"].ToString());
                    }
                    temp_double2 = Convert.ToDouble(dr["amt"].ToString());
                }
                catch (Exception ex)
                {
                    //udate amt in datarow for a_n, s_a passed
                    DataRow drNewRow = dt_Final_51.NewRow();
                    drNewRow[0] = strPrd;
                    drNewRow[1] = stra_n;
                    drNewRow[2] = strs_a;
                    drNewRow[3] = dAmt;
                    drNewRow[4] = "01/01/1901";
                    drNewRow[5] = "admin";
                    drNewRow[6] = DateTime.Now;
                    dt_Final_51.Rows.Add(drNewRow.ItemArray);
                }
            }
        }

        private void emerg_update_DT(string strPrd, string stra_n, string strs_a, double dAmt)
        {
            if (dt_Final_51 != null && dt_Final_51.Rows.Count > 0)
            {
                if (stra_n == "3508")
                    temp_word = "Sanjay";
                //udate amt in datarow for a_n, s_a passed
                //DataRow dr = dt_51_existing.AsEnumerable().Where(r => ((string)r["a_n"]).Equals(stra_n) && ((string)r["s_a"]).Equals(strs_a)).First(); // getting the row to edit , change it as you need
                try
                {
                    DataRow dr = dt_Final_51.AsEnumerable().Where(r => ((string)r["prd"]).Equals(strPrd) && ((string)r["a_n"]).Equals(stra_n) && ((string)r["s_a"]).Equals(strs_a)).First(); // getting the row to edit , change it as you need
                    if (dr != null)
                        dr["amt"] = dAmt;
                    temp_double2 = dAmt;
                }
                catch (Exception ex)
                {
                    //udate amt in datarow for a_n, s_a passed
                    DataRow drNewRow = dt_Final_51.NewRow();
                    drNewRow[0] = strPrd;
                    drNewRow[1] = stra_n;
                    drNewRow[2] = strs_a;
                    drNewRow[3] = dAmt;
                    drNewRow[4] = "01/01/1901";
                    drNewRow[5] = "admin";
                    drNewRow[6] = DateTime.Now;
                    dt_Final_51.Rows.Add(drNewRow.ItemArray);
                }
            }
        }

        private void emerg_insert_into_DT(string strPrd, string stra_n, string strs_a, double dAmt)
        {
            if (stra_n == "3508")
                temp_word = "Sanjay";
            if (dt_Final_51 != null)
            {//udate amt in datarow for a_n, s_a passed
                DataRow drNewRow = dt_Final_51.NewRow();
                drNewRow[0] = strPrd;
                drNewRow[1] = stra_n;
                drNewRow[2] = strs_a;
                drNewRow[3] = dAmt;
                drNewRow[4] = "01/01/1901";
                drNewRow[5] = "admin";
                drNewRow[6] = DateTime.Now;
                dt_Final_51.Rows.Add(drNewRow.ItemArray);
                get_account_details_from_01(stra_n, strs_a);
                temporary_list_1.Add(strPrd.ToString() + "," + stra_n.ToString() + "," + strs_a.ToString() + "," + account_detail_from_01[4] + "," + account_detail_from_01[5] + "," + dAmt.ToString());
            }
        }

        private void emerg_closing_stock_to_opening_stock_New(string emerg_prd, string emerg_oprd)
        {
            //this.Text = "Please wait Emerging Opening Stock";
            ConnectionWithAccess.query = "select amt from " + ConnectionWithAccess.tablename[51] + " where prd = '" + emerg_oprd + "' and a_n = '5000' and s_a = '@@@' and d_d = #01/01/1901# and amt <> 0";
            DataTable dtData1 = ConnectionCommand.fGetDataTable();
            if (dtData1 != null && dtData1.Rows.Count > 0)
            {
                for (int iRowCount = 0; iRowCount < dtData1.Rows.Count; iRowCount++)
                {
                    if (dtData1.Rows[iRowCount][0] != null)
                    {
                        if (Convert.ToDouble(dtData1.Rows[iRowCount][0].ToString()) != 0)  // check for only b_t = 3 (means bank cheque passed)
                        {
                            temp_double = Convert.ToDouble(dtData1.Rows[iRowCount][0].ToString());
                            update_amount_in_51(emerg_prd, "2001", "@@@", (temp_double * -1));
                        }
                    }
                }
            }
            temp_double = 0;
        }

        private void update_at_the_rate_of_customers_and_suppliers_New(string emerg_prd)
        {
            //this.Text = "Please wait Emerging " + ConnectionWithAccess.tablename[51];
            update_amount_in_51(emerg_prd, "2002", "@@@", 0.00);
            update_amount_in_51(emerg_prd, "2003", "@@@", 0.00);
            update_amount_in_51(emerg_prd, "2004", "@@@", 0.00);
            update_amount_in_51(emerg_prd, "4002", "@@@", 0.00);
            balance_amount = new string[0];
            list_of_balance_amount.Clear();
            double damtCO = 0, damtAR = 0, damtSO = 0, damtAP = 0;
            //this.Text = "Please wait Emerging " + ConnectionWithAccess.tablename[51];
            ConnectionWithAccess.query = "select sum(amt) as amt from " + ConnectionWithAccess.tablename[51] + " where prd = '" + emerg_prd + "' and a_n = '2002' and amt > 0";
            double.TryParse(ConnectionCommand.fGetExecuteScalar(), out damtCO);

            ConnectionWithAccess.query = "select sum(amt) as amt from " + ConnectionWithAccess.tablename[51] + " where prd = '" + emerg_prd + "' and a_n = '2002' and amt < 0";
            double.TryParse(ConnectionCommand.fGetExecuteScalar(), out damtAR);

            ConnectionWithAccess.query = "select sum(amt) as amt from " + ConnectionWithAccess.tablename[51] + " where prd = '" + emerg_prd + "' and a_n = '4002' and amt < 0";
            double.TryParse(ConnectionCommand.fGetExecuteScalar(), out damtSO);

            ConnectionWithAccess.query = "select sum(amt) as amt from " + ConnectionWithAccess.tablename[51] + " where prd = '" + emerg_prd + "' and a_n = '4002' and amt > 0";
            double.TryParse(ConnectionCommand.fGetExecuteScalar(), out damtAP);

            if (damtCO != 0.0)
                update_amount_in_51(emerg_prd, "2002", "@@@", damtCO);
            if (damtAR != 0.0)
                update_amount_in_51(emerg_prd, "2003", "@@@", damtAR);
            if (damtSO != 0.0)
                update_amount_in_51(emerg_prd, "4002", "@@@", damtSO);
            if (damtAP != 0.0)
                update_amount_in_51(emerg_prd, "2004", "@@@", damtAP);
        }

        private double get_gp_percent_from_file_fifty_New(string mprd)
        {
            get_period_details_from_50(mprd);
            return ConnectionWithAccess.gp_percent;
            //ConnectionWithAccess.gp_percent = 0;
            //temp_double = 0;
            //ConnectionWithAccess.query = "select gp from " + ConnectionWithAccess.tablename[50] + " where prd = '" + mprd + "' and gp <> 0";
            //DataTable dtData1 = ConnectionCommand.fGetDataTable();
            //if (dtData1 != null && dtData1.Rows.Count > 0)
            //{
            //    if (dtData1.Rows[0][0] != null)
            //        ConnectionWithAccess.gp_percent = Convert.ToDouble(dtData1.Rows[0][0].ToString());
            //    temp_double = ConnectionWithAccess.gp_percent;
            //}
            //if (cb_emerg_full_period.Checked)
            //    blstgp_per.Text = Convert.ToString(ConnectionWithAccess.gp_percent);
            //return temp_double;
        }

        //bool gp_percentage_change = true;
        private void calculate_gross_profit_using_gp_per_New(string emerg_prd)
        {
            if ((cb_emerg_sale.Checked == true || cb_emerg_purchase.Checked == true || cb_emerg_bank.Checked == true || cb_emerg_cash.Checked == true || cb_emerg_journal.Checked == true))
            {
                double mTAMT, mSAMT, mRSAMT, mGP_AMT, mOSAMT, mPAMT, mTRAMT, mGP, mpl_exp;
                mGP = ConnectionWithAccess.gp_percent * -1;
                //this.Text = "Please wait Emerging Gross Profit and Closing Stock";
                balance_amount = new string[0];
                list_of_balance_amount.Clear();

                double tmpAmt1 = 0, tmpAmt2 = 0;
                ConnectionWithAccess.query = "select sum(amt) as amt from " + ConnectionWithAccess.tablename[51] + " where prd = '" + emerg_prd + "' and a_n >= '61' and a_n <= '65ZZZZ' and s_a ='@@@'";
                double.TryParse(ConnectionCommand.fGetExecuteScalar(), out tmpAmt1);

                ConnectionWithAccess.query = "select sum(amt) as amt from " + ConnectionWithAccess.tablename[51] + " where prd = '" + emerg_prd + "' and a_n >= '7001' and a_n <= '70ZZZZ' and s_a ='@@@'";
                double.TryParse(ConnectionCommand.fGetExecuteScalar(), out tmpAmt2);

                mTRAMT = 0;
                mTRAMT = tmpAmt1 + tmpAmt2;

                mSAMT = Math.Round(get_account_balance_from_51_New(emerg_prd, "6000", "@@@"), 2);
                mRSAMT = Math.Round(get_account_balance_from_51_New(emerg_prd, "6000R1", "@@@"), 2);
                mGP_AMT = mSAMT * ConnectionWithAccess.gp_percent / 100;
                mOSAMT = Math.Round(get_account_balance_from_51_New(emerg_prd, "2001", "@@@"), 2);
                mPAMT = Math.Round(get_account_balance_from_51_New(emerg_prd, "7000", "@@@"), 2);
                //mTAMT = ((mSAMT + mRSAMT + mGP_AMT + mOSAMT + mPAMT + mTRAMT) * -1);
                //mTAMT = Math.Round(mTAMT, 2);
                if (mSAMT == 0 && mRSAMT == 0 && mOSAMT == 0 && mTRAMT == 0)
                    mTAMT = mPAMT;
                else
                {
                    if (cb_emerg_sale.Checked == true && cb_emerg_purchase.Checked == true && cb_emerg_bank.Checked == true && cb_emerg_cash.Checked == true && cb_emerg_journal.Checked == true)
                        mTAMT = (-mSAMT - mRSAMT - mOSAMT - mPAMT - mTRAMT) - ((mSAMT + mRSAMT) * mGP / 100 * -1);
                    else
                    {
                        //mTAMT = (-mSAMT - mRSAMT - mPAMT - mTRAMT + mOSAMT);
                        mTAMT = mOSAMT;
                    }
                }
                mTAMT = Math.Round(mTAMT, 0);
                mGP_AMT = mTAMT - mSAMT - mRSAMT - mOSAMT - mPAMT - mTRAMT;
                if (mGP_AMT < 0)
                {
                    mGP_AMT = (-mSAMT - mRSAMT - mOSAMT - mPAMT - mTRAMT);
                }
                mGP_AMT = Math.Round(mGP_AMT, 0);
                ConnectionWithAccess.gross_profit = mGP_AMT;
                ConnectionWithAccess.closing_stock = mTAMT;
                balance_amount = new string[0];
                list_of_balance_amount.Clear();

                //this.Text = "Please wait Emerging Gross Profit and Closing Stock";
                mpl_exp = 0;
                ConnectionWithAccess.query = "select sum(amt) as amt from " + ConnectionWithAccess.tablename[51] + " where prd = '" + emerg_prd + "' and a_n >= '75A' and a_n <= '75ZZZZ' and s_a ='@@@'";
                double.TryParse(ConnectionCommand.fGetExecuteScalar(), out mpl_exp);



                blstsales.Text = mSAMT.ToString();
                blstrepairs.Text = mRSAMT.ToString();
                blstgp.Text = mGP_AMT.ToString();
                blstopenstock.Text = mOSAMT.ToString();
                blstpurchase.Text = mPAMT.ToString();
                blsttradexp.Text = mTRAMT.ToString();
                blstplexpense.Text = mpl_exp.ToString();
                blstgp.Text = Convert.ToString(ConnectionWithAccess.gross_profit);
                blstplgp.Text = Convert.ToString(ConnectionWithAccess.gross_profit);
                blstclosingstock.Text = Convert.ToString(ConnectionWithAccess.closing_stock);
                ConnectionWithAccess.net_profit = Math.Round((Convert.ToDouble(blstgp.Text) - Convert.ToDouble(blstplexpense.Text)), 2);
                blstnetprofit.Text = Convert.ToString(ConnectionWithAccess.net_profit);
                //blstgp_per.Text = Convert.ToString(Convert.ToSingle((((-mSAMT - mRSAMT - mOSAMT - mPAMT - mTRAMT) - mTAMT) * 1) * 100) / (mSAMT + mRSAMT));
            }
            else
            {
                //if (cb_emerg_full_period.Checked)
                ConnectionWithAccess.closing_stock = Math.Round(get_account_balance_from_51_New(emerg_prd, "2001", "@@@"), 0);
                ConnectionWithAccess.gross_profit = 0;
            }
        }

        private void save_balance_sheet_gp_values_New(string emerg_prd)
        {
            if (cb_emerg_sale.Checked == true && cb_emerg_purchase.Checked == true && cb_emerg_bank.Checked == true && cb_emerg_cash.Checked == true && cb_emerg_journal.Checked == true)
            {
                update_amount_in_51(emerg_prd, "5000", "@@@", (Convert.ToDouble(ConnectionWithAccess.closing_stock) * -1));
                update_amount_in_51(ConnectionWithAccess.get_next_prd_name(emerg_prd), "2001", "@@@", (Convert.ToDouble(ConnectionWithAccess.closing_stock)));
                update_amount_in_51(emerg_prd, "719999", "@@@", (Convert.ToDouble(ConnectionWithAccess.gross_profit)));
                update_amount_in_51(emerg_prd, "7998", "@@@", (Convert.ToDouble(ConnectionWithAccess.net_profit)));
                ConnectionWithAccess.query = "select gp from " + ConnectionWithAccess.tablename[50] + " where prd = '" + emerg_prd + "'";
                DataTable dtData1 = ConnectionCommand.fGetDataTable();
                if (dtData1 != null && dtData1.Rows.Count > 0)
                {
                    ConnectionWithAccess.query = "update " + ConnectionWithAccess.tablename[50] + " set gp = " + (ConnectionWithAccess.gp_percent) + " where prd ='" + emerg_prd + "'";
                    ConnectionCommand.fUpdateInsertDeleteData();
                }
            }
            else if (cb_emerg_sale.Checked == true || cb_emerg_purchase.Checked == true)
            {
                update_amount_in_51(emerg_prd, "5000", "@@@", (Convert.ToDouble(ConnectionWithAccess.closing_stock) * -1));
                update_amount_in_51(ConnectionWithAccess.get_next_prd_name(emerg_prd), "2001", "@@@", (Convert.ToDouble(ConnectionWithAccess.closing_stock)));
                update_amount_in_51(emerg_prd, "719999", "@@@", (Convert.ToDouble(ConnectionWithAccess.gross_profit)));
                update_amount_in_51(emerg_prd, "7998", "@@@", (Convert.ToDouble(ConnectionWithAccess.net_profit)));
            }
            else
            {
                update_amount_in_51(emerg_prd, "5000", "@@@", (Convert.ToDouble(ConnectionWithAccess.closing_stock) * -1));
                update_amount_in_51(ConnectionWithAccess.get_next_prd_name(emerg_prd), "2001", "@@@", (Convert.ToDouble(ConnectionWithAccess.closing_stock)));
            }
        }

        private void calculate_closing_capital_balance_and_add_in_new_period_New(string emerg_prd, string emerg_oprd)
        {
            if (cb_emerg_sale.Checked == true || cb_emerg_purchase.Checked == true || cb_emerg_bank.Checked == true || cb_emerg_cash.Checked == true || cb_emerg_journal.Checked == true)
            {
                temp_double = get_account_balance_from_51_New(emerg_oprd, "3001", "@@@");
                update_amount_in_51(emerg_prd, "3000", "@@@", temp_double * -1);
                temp_double = 0;
                update_amount_in_51(emerg_prd, "3001", "@@@", 0);
                //add_contains_of_capital_account_in_gridview(emerg_prd);
                //debitamount = 0;
                //creditamount = 0;
                //for (int i = 0; i < BalShDGV.Rows.Count; i++)
                //{
                //    if (BalShDGV.Rows[i].Cells[5].Value != null)
                //    {
                //        if (BalShDGV.Rows[i].Cells[5].Value.ToString() != "")
                //        {
                //            if (Convert.ToDouble(BalShDGV.Rows[i].Cells[5].Value.ToString()) > 0)
                //                debitamount += Convert.ToDouble(BalShDGV.Rows[i].Cells[5].Value.ToString());
                //        }
                //    }
                //    if (BalShDGV.Rows[i].Cells[8].Value != null)
                //    {
                //        if (BalShDGV.Rows[i].Cells[8].Value.ToString() != "")
                //        {
                //            if (Convert.ToDouble(BalShDGV.Rows[i].Cells[8].Value.ToString()) > 0)
                //                creditamount += Convert.ToDouble(BalShDGV.Rows[i].Cells[8].Value.ToString());
                //        }
                //    }
                //}
                //temp_double = creditamount - debitamount;


                ConnectionWithAccess.query = query_contains_for_capital_account_union(emerg_prd);
                DataTable dtNewTable = ConnectionCommand.fGetDataTable();

                if (dtNewTable != null && dtNewTable.Rows.Count > 0)
                {
                    debitamount = 0;
                    creditamount = 0;

                    var debitSum = dtNewTable.Compute("Sum(amt_debit)", "amt_debit > 0");
                    var creditSum = dtNewTable.Compute("Sum(amt_credit)", "amt_credit > 0");

                    Double.TryParse(debitSum.ToString(), out debitamount);
                    Double.TryParse(creditSum.ToString(), out creditamount);

                    temp_double = creditamount - debitamount;
                }
                update_amount_in_51(emerg_prd, "3001", "@@@", temp_double);
                update_amount_in_51(ConnectionWithAccess.get_next_prd_name(emerg_prd), "3000", "@@@", temp_double * -1);
            }
            else
            {
                temp_double = get_account_balance_from_51_New(emerg_oprd, "3001", "@@@");
                update_amount_in_51(emerg_prd, "3000", "@@@", temp_double * -1);
                update_amount_in_51(emerg_prd, "3001", "@@@", temp_double);
                temp_double = get_account_balance_from_51_New(emerg_prd, "2001", "@@@");
                update_amount_in_51(emerg_prd, "5000", "@@@", temp_double * -1);
            }
        }

        private void add_contains_of_balance_sheet_in_gridview_New(string mprd, bool dont_cleargridview = false)
        {
            StringBuilder strQuery = new StringBuilder();
            ConnectionWithAccess.query = query_contains_for_balance_sheet_union(mprd); ;// strQuery.ToString();
            ConnectionCommand.accountHelp_datatable_Seperate(BalShDGV, "Balance Sheet");
            //fAdd_Balance_Report_Totals();
            add_difference_record_in_trading_pl_balance_sheet(mprd);

            BalShDGV.Columns[0].HeaderText = "Sort";
            BalShDGV.Columns[1].HeaderText = "A_n";
            BalShDGV.Columns[2].HeaderText = "S_a";
            BalShDGV.Columns[3].HeaderText = "Particular's";
            BalShDGV.Columns[4].HeaderText = "Debit_extra";
            BalShDGV.Columns[5].HeaderText = "Debit";
            BalShDGV.Columns[6].HeaderText = "Particular's";
            BalShDGV.Columns[7].HeaderText = "Credit_extra";
            BalShDGV.Columns[8].HeaderText = "Credit";
            BalShDGV.Columns[4].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;
            BalShDGV.Columns[5].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;
            BalShDGV.Columns[7].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;
            BalShDGV.Columns[8].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;
            temp_double = 0;
            temp_word = null;
        }

        private double get_account_balance_from_51_New(string prd, string a_n, string s_a)
        {
            temp_double = 0;
            isRecord = 0;
            if (a_n.Length > 1)
            {
                if (a_n.Substring(0, 1) == "%")
                {
                    list_of_balance_amount.Clear();
                    a_n = a_n.Substring(1, a_n.Length - 1);
                    if (s_a == "@@@")
                        ConnectionWithAccess.query = "select sum(amt) as amt from " + ConnectionWithAccess.tablename[51] + " where prd = '" + prd + "' and a_n like '" + a_n + "%' and s_a = '@@@'";
                    else
                        ConnectionWithAccess.query = "select sum(amt) as amt from " + ConnectionWithAccess.tablename[51] + " where prd = '" + prd + "' and a_n = '" + a_n + "' and s_a like '" + s_a + "%'";
                    double.TryParse(ConnectionCommand.fGetExecuteScalar(), out temp_double);
                }
                else
                {
                    if (s_a == "@@@")
                        ConnectionWithAccess.query = "select amt from " + ConnectionWithAccess.tablename[51] + " where prd = '" + prd + "' and a_n = '" + a_n + "' and s_a = '@@@'";
                    else
                        ConnectionWithAccess.query = "select amt from " + ConnectionWithAccess.tablename[51] + " where prd = '" + prd + "' and a_n = '" + a_n + "' and s_a = '" + s_a + "'";
                    DataTable dtData1 = ConnectionCommand.fGetDataTable();
                    if (dtData1 != null && dtData1.Rows.Count > 0)
                    {
                        if (dtData1.Rows[0][0] != null)
                        {
                            temp_double = Convert.ToDouble(dtData1.Rows[0][0].ToString());
                        }
                    }
                }
            }
            return temp_double;
        }


        #endregion New Emerge

        private int fGet_Column_alignment(string strColumn_align)
        {
            int iColumnAlignment = 0;
            switch (strColumn_align)
            {
                case "LEFT":
                    iColumnAlignment = 0;
                    break;
                case "RIGHT":
                    iColumnAlignment = 2;
                    break;
                case "CENTER":
                    iColumnAlignment = 1;
                    break;
                default:
                    iColumnAlignment = 0;
                    break;
            }
            return iColumnAlignment;
        }

        private void fGenerate_PDF_Report_From_DataTable(DataTable dtReport, List<int> lColumn_number_for_data, float[] columnWidths, List<string> column_header_text,
            List<string> column_alignment, bool isTotalRequired, int iTotal_Column_no, string strreport_filetype, string strHeader_text_message, bool bAdd_date_time_in_output,
            List<int> cell_font_change_length, bool isLastRowTotal = true, int iTotal_Display_pdf_table_column_no = 0, bool bisVerticalBorderRequired = true,
            int LastNoOfRowsHavingTopBottomBorder = 0, List<int> Total_Column_no_For_Border = null)
        {
            lineno = 1;
            report_filetype = strreport_filetype.Replace("*", "");
            //report_filetype = cbRepType.Text + " " + cbRepSubType.Text + " " + cbRepFormat.Text;
            pdf_filename = ConnectionWithAccess.report_file_location + (report_filetype).Replace(" ", "");
            if (bAdd_date_time_in_output)
                pdf_filename += "_" + DateTime.Now.Day + "_" + DateTime.Now.Month + "_" + DateTime.Now.Year + "_" + DateTime.Now.TimeOfDay.Hours + "_" + DateTime.Now.TimeOfDay.Minutes;
            pdf_filename += ".pdf";
            int page_width = 0;
            for (int total_pg_width = 0; total_pg_width < columnWidths.Count(); total_pg_width++)
            {
                page_width += Convert.ToInt32(columnWidths[total_pg_width]);
            }
            page_width = page_width * 4;
            page_width = 400 - page_width;
            doc1 = new Document(PageSize.A4, 50, page_width, 5, 5);
            //pdf_filename = ConnectionWithAccess.remove_filename_error(pdf_filename);
            ConnectionWithAccess.create_file_folder(pdf_filename);
            FileStream FS1 = File.Create(pdf_filename);
            writer = PdfWriter.GetInstance(doc1, FS1);
            doc1.Open();

            fGenerate_PDF_Table_From_DataTable(dtReport, lColumn_number_for_data, columnWidths, column_header_text,
            column_alignment, isTotalRequired, iTotal_Column_no, strreport_filetype, strHeader_text_message, bAdd_date_time_in_output,
             cell_font_change_length, isLastRowTotal, iTotal_Display_pdf_table_column_no, bisVerticalBorderRequired,
             LastNoOfRowsHavingTopBottomBorder, Total_Column_no_For_Border);

            //doc1.Add(itemTable);

            doc1.Close();

        }

        private void fGenerate_PDF_Table_From_DataTable(DataTable dtReport, List<int> lColumn_number_for_data, float[] columnWidths, List<string> column_header_text,
            List<string> column_alignment, bool isTotalRequired, int iTotal_Column_no, string strreport_filetype, string strHeader_text_message, bool bAdd_date_time_in_output,
            List<int> cell_font_change_length, bool isLastRowTotal = true, int iTotal_Display_pdf_table_column_no = 0, bool bisVerticalBorderRequired = true,
            int LastNoOfRowsHavingTopBottomBorder = 0, List<int> Total_Column_no_For_Border = null, bool isColumHeaderRequired = true)
        {
            int iRowsperPage = 54;
            current_pdf_page_number = 1;
            add_header_footer = true;
            header_text_message = report_filetype + strHeader_text_message; // " " + " From : " + RepFrom.Text + " to " + RepTo.Text;
            //pdf_top_heading = "Date            Doc.          Name                                                                                Debit                      Credit                  Balance";
            Paragraph para = new Paragraph();
            basicamount = 0; taxamount = 0; grossamount = 0;
            pdf_top_heading = "";
            print_pdf_line(cour_9, " ", 150, 0);
            PdfPTable itemTable = new PdfPTable(lColumn_number_for_data.Count);
            itemTable.HorizontalAlignment = 0;
            itemTable.WidthPercentage = 100;
            itemTable.SetWidths(columnWidths);  // then set the column's __relative__ widths
            itemTable.SpacingAfter = 200;
            itemTable.SpacingBefore = 40;
            itemTable.HeaderRows = 1;
            itemTable.DefaultCell.Border = iTextSharp.text.Rectangle.NO_BORDER;
            if (isColumHeaderRequired)
            {
                for (int iheader = 0; iheader < column_header_text.Count; iheader++)
                {
                    PdfPCell cellheader = new PdfPCell(new Phrase(column_header_text[iheader].ToString(), cour_9));
                    cellheader.HorizontalAlignment = 1;
                    if (bisVerticalBorderRequired)
                        cellheader.Border = iTextSharp.text.Rectangle.BOTTOM_BORDER | iTextSharp.text.Rectangle.TOP_BORDER | iTextSharp.text.Rectangle.LEFT_BORDER | iTextSharp.text.Rectangle.RIGHT_BORDER;
                    else
                        cellheader.Border = iTextSharp.text.Rectangle.BOTTOM_BORDER | iTextSharp.text.Rectangle.TOP_BORDER;
                    itemTable.AddCell(cellheader);
                }
            }
            int iPageNo = 1;
            //temp_word = gdvreport.Rows[row_pointer].Cells[0].Value.ToString();
            //if (temp_word.Contains(" "))
            //    temp_word = temp_word.Substring(0, temp_word.IndexOf(" "));
            //temp_word = change_date_to_tally_format(temp_word);
            if (strreport_filetype.Contains("Journal"))
                isLastRowTotal = false;
            int iTotalRowsForReport = 0;
            if (isLastRowTotal)
                iTotalRowsForReport = dtReport.Rows.Count - 1;
            else
                iTotalRowsForReport = dtReport.Rows.Count;
            for (row_pointer = 0; row_pointer < iTotalRowsForReport; row_pointer++)
            {
                for (int icolumns = 0; icolumns < lColumn_number_for_data.Count; icolumns++)
                {
                    string strText = dtReport.Rows[row_pointer][lColumn_number_for_data[icolumns]].ToString();
                    if (dtReport.Columns[lColumn_number_for_data[icolumns]].DataType.Name == "DateTime")
                    {
                        if (!string.IsNullOrEmpty(strText))
                            strText = change_date_to_tally_format(strText.Substring(0, strText.IndexOf(" ")));
                    }
                    PdfPCell body_cell;
                    if (cell_font_change_length[icolumns] != 0)
                    {
                        if (strText.Length > cell_font_change_length[icolumns] && strText.Length <= cell_font_change_length[icolumns] + 20)
                            body_cell = new PdfPCell(new Phrase(strText, cour_8));
                        else if (strText.Length > cell_font_change_length[icolumns] + 20)
                            body_cell = new PdfPCell(new Phrase(strText, cour_7));
                        else
                            body_cell = new PdfPCell(new Phrase(strText, cour_9));
                    }
                    else
                    {
                        body_cell = new PdfPCell(new Phrase(strText, cour_9));
                    }

                    body_cell.HorizontalAlignment = fGet_Column_alignment(column_alignment[icolumns]);
                    body_cell.NoWrap = true;
                    //nameCell.PaddingLeft = 10f;
                    if (bisVerticalBorderRequired)
                    {
                        if (((lineno + 1) / iPageNo) == iRowsperPage)
                            body_cell.Border = iTextSharp.text.Rectangle.RECTANGLE;
                        else
                            body_cell.Border = iTextSharp.text.Rectangle.LEFT_BORDER | iTextSharp.text.Rectangle.RIGHT_BORDER; ;
                    }
                    else if (LastNoOfRowsHavingTopBottomBorder > 0)
                    {
                        if (row_pointer == (iTotalRowsForReport - (LastNoOfRowsHavingTopBottomBorder + 1)) && Total_Column_no_For_Border.Contains(lColumn_number_for_data[icolumns]))
                        {
                            body_cell.Border = iTextSharp.text.Rectangle.BOTTOM_BORDER;
                        }
                        else if (row_pointer == (iTotalRowsForReport - 1) && Total_Column_no_For_Border.Contains(lColumn_number_for_data[icolumns]))
                        {
                            body_cell.Border = iTextSharp.text.Rectangle.TOP_BORDER | iTextSharp.text.Rectangle.BOTTOM_BORDER;
                        }
                        else
                        {
                            body_cell.Border = iTextSharp.text.Rectangle.NO_BORDER;
                        }
                    }
                    else
                    {
                        body_cell.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    }

                    itemTable.AddCell(body_cell);
                }
                if (isTotalRequired)
                {
                    grossamount = grossamount + Convert.ToDouble(dtReport.Rows[row_pointer][iTotal_Column_no].ToString());
                }
                lineno++;
                if (lineno % iRowsperPage == 0)
                {
                    doc1.Add(itemTable);
                    itemTable.DeleteBodyRows();
                    doc1.NewPage();
                    add_header_footer = true;
                    print_pdf_line(cour_9, " ", 150, 0);
                    //current_pdf_page_number++;
                    iPageNo++;
                }

            }
            grossamount = Math.Round(grossamount, 2);
            if (isTotalRequired)
            {
                for (int iTotal = 0; iTotal < column_header_text.Count; iTotal++)
                {
                    PdfPCell cellTotal;
                    if (iTotal == iTotal_Display_pdf_table_column_no - 1)
                        cellTotal = new PdfPCell(new Phrase(grossamount.ToString("#0.00"), cour_9));
                    else
                        cellTotal = new PdfPCell(new Phrase("", cour_9));
                    cellTotal.HorizontalAlignment = 2;
                    if (bisVerticalBorderRequired)
                        cellTotal.Border = iTextSharp.text.Rectangle.BOTTOM_BORDER | iTextSharp.text.Rectangle.TOP_BORDER | iTextSharp.text.Rectangle.LEFT_BORDER | iTextSharp.text.Rectangle.RIGHT_BORDER;
                    else
                        cellTotal.Border = iTextSharp.text.Rectangle.BOTTOM_BORDER | iTextSharp.text.Rectangle.TOP_BORDER;
                    itemTable.AddCell(cellTotal);
                }
            }
            //AddGrossAmountCell(itemTable, grossamount);
            doc1.Add(itemTable);

            //doc1.Close();
        }


        //        , [user], insert_dt_tm



        // + ConnectionWithAccess.muser + "', @currDate )";



        //add_user_date_time_function_compulsory_program();

        private void check_save_button()
        {
            if (backup == true)
            {
                atbsave.BackColor = Color.Red;
                atbsave.Enabled = false;
            }
            else if ((ConnectionWithAccess.prd_lock == "Y" || user_setting_only_visible == "T") && ConnectionWithAccess.muser != "admin")
            {
                atbsave.BackColor = Color.Blue;
                atbsave.Enabled = false;
            }
            else if (ConnectionWithAccess.prd_lock == "Y" && user_setting_only_visible == "N")
            {
                atbsave.BackColor = Color.Cyan;
                atbsave.Enabled = false;
            }
            else
            {
                atbsave.BackColor = Color.LightSteelBlue;
                atbsave.Enabled = true;
                if (maintab.SelectedIndex == 1 && subtabDataEntry.SelectedIndex == 0 && !chbPrivSaleE.Checked)
                {
                    atbsave.BackColor = Color.Pink;
                    atbsave.Enabled = false;
                }

            }
        }

        private void RepFrom_KeyUp(object sender, KeyEventArgs e)
        {
            report_keys_enable();
        }

        private void LedDGV_MouseDown(object sender, MouseEventArgs e)
        {
            current_row = 0;
            switch (e.Button)
            {
                case MouseButtons.Right:
                    {
                        get_account_details_from_04(rla_n.Text, rls_a.Text);
                        if (account_detail_from_04[17].Length >= 10)
                        {
                            try
                            {
                                current_row = LedDGV.CurrentCell.RowIndex;
                                //btn_sms_account_balance.Visible = true;
                                //lbl_sms_balance_amount.Visible = true;
                                //lbl_sms_balance_date.Visible = true;
                                //lbl_sms_balance_mobile_number.Visible = true;

                                BtnLedgerWhastupBalanceAmount.Visible = true;
                                LblWhatsupBalanceAmunt.Visible = true;
                                LblWhatsupBalanceDate.Visible = true;
                                LblWhatsupMobileNUmber.Visible = true;

                                temp_double = Convert.ToDouble(LedDGV.Rows[current_row].Cells[8].Value.ToString());
                                lbl_sms_balance_amount.Text = LedDGV.Rows[current_row].Cells[8].Value.ToString();
                                lbl_sms_balance_mobile_number.Text = account_detail_from_04[17];
                                temp_date = LedDGV.Rows[current_row].Cells[3].Value.ToString();
                                if (temp_date.Contains(" "))
                                    temp_date = temp_date.Substring(0, temp_date.IndexOf(" "));
                                lbl_sms_balance_date.Text = temp_date;
                                LblWhatsupBalanceDate.Text = temp_date;
                                LblWhatsupBalanceAmunt.Text = LedDGV.Rows[current_row].Cells[8].Value.ToString();
                                LblWhatsupMobileNUmber.Text = account_detail_from_04[17];
                            }
                            catch (Exception ex)
                            {
                            }
                        }
                        else
                        {
                            //btn_sms_account_balance.Visible = false;
                            //lbl_sms_balance_amount.Visible = false;
                            //BtnLedgerWhastupBalanceAmount.Visible = false;
                            //lbl_sms_balance_date.Visible = false;
                            //lbl_sms_balance_mobile_number.Visible = false;

                            BtnLedgerWhastupBalanceAmount.Visible = false;
                            LblWhatsupBalanceAmunt.Visible = false;
                            LblWhatsupBalanceDate.Visible = false;
                            LblWhatsupMobileNUmber.Visible = false;
                        }
                    }
                    break;
                case MouseButtons.Left:
                    {
                        btn_sms_account_balance.Visible = false;
                        BtnLedgerWhastupBalanceAmount.Visible = false;
                        lbl_sms_balance_amount.Visible = false;
                        BtnLedgerWhastupBalanceAmount.Visible = false;
                        lbl_sms_balance_date.Visible = false;
                        lbl_sms_balance_mobile_number.Visible = false;
                        //rightClickMenuStrip.Show(this, new Point(e.X, e.Y));//places the menu at the pointer position
                    }
                    break;
            }
        }

        private void btn_sms_account_balance_Click(object sender, EventArgs e)
        {
            sendsms();
        }

        private void tb_fix_desc_KeyUp(object sender, KeyEventArgs e)
        {
            vFilterDataTableAndFillGrid(dgv_merge_account, dt_Account_Master_List, "d_y = '@@@' and [desc] like '%" + tb_fix_desc.Text + "%'");
            if (dgv_merge_account.CurrentRow != null)
            {
                dgv_merge_account.Visible = true;
            }
            else
            {
                dgv_merge_account.Visible = false;
            }
        }

        private void fUpdateAN_SA(string strMain_A_N, string strMain_S_A, string strReplace_A_N, string strReplace_S_A)
        {
            //ConnectionWithAccess.query = "update " + ConnectionWithAccess.tablename[1] + " set [a_n] = '" + strMain_A_N + "' , [s_a] = '" + strMain_S_A +
            //    "' WHERE [a_n] = '" + strReplace_A_N + "' AND [s_a] = '" + strReplace_S_A + "'";
            //ConnectionCommand.fUpdateInsertDeleteData();

            //ConnectionWithAccess.query = "update " + ConnectionWithAccess.tablename[03] + " set [a_n] = '" + strMain_A_N + "' , [s_a] = '" + strMain_S_A +
            //    "' WHERE [a_n] = '" + strReplace_A_N + "' AND [s_a] = '" + strReplace_S_A + "'";
            //ConnectionCommand.fUpdateInsertDeleteData();
            if (strMain_S_A == "@@@" && strReplace_S_A == "@@@")
            {
                ConnectionWithAccess.query = "delete from " + ConnectionWithAccess.tablename[1] + " where [a_n] = '" + strReplace_A_N + "' AND [s_a] = '" + strReplace_S_A + "'";
                ConnectionCommand.fUpdateInsertDeleteData();

                ConnectionWithAccess.query = "delete from " + ConnectionWithAccess.tablename[4] + " where [a_n] = '" + strReplace_A_N + "' AND [s_a] = '" + strReplace_S_A + "'";
                ConnectionCommand.fUpdateInsertDeleteData();

                //ConnectionWithAccess.query = "update " + ConnectionWithAccess.tablename[4] + " set [a_n] = '" + strMain_A_N + "' , [s_a] = '" + strMain_S_A +
                //    "' WHERE [a_n] = '" + strReplace_A_N + "' AND [s_a] = '" + strReplace_S_A + "'";
                //ConnectionCommand.fUpdateInsertDeleteData();

                ConnectionWithAccess.query = "update " + ConnectionWithAccess.tablename[21] + " set [a_n] = '" + strMain_A_N + "'" +
                    " WHERE [a_n] = '" + strReplace_A_N + "'";
                ConnectionCommand.fUpdateInsertDeleteData();

                ConnectionWithAccess.query = "update " + ConnectionWithAccess.tablename[22] + " set [a_n] = '" + strMain_A_N + "'" +
                    " WHERE [a_n] = '" + strReplace_A_N + "'";
                ConnectionCommand.fUpdateInsertDeleteData();

                ConnectionWithAccess.query = "update " + ConnectionWithAccess.tablename[23] + " set [a_n] = '" + strMain_A_N + "'" +
                    " WHERE [a_n] = '" + strReplace_A_N + "'";
                ConnectionCommand.fUpdateInsertDeleteData();

                ConnectionWithAccess.query = "update " + ConnectionWithAccess.tablename[24] + " set [a_n] = '" + strMain_A_N + "'" +
                    " WHERE [a_n] = '" + strReplace_A_N + "'";
                ConnectionCommand.fUpdateInsertDeleteData();

                ConnectionWithAccess.query = "update " + ConnectionWithAccess.tablename[25] + " set [a_n] = '" + strMain_A_N + "'" +
                    " WHERE [a_n] = '" + strReplace_A_N + "'";
                ConnectionCommand.fUpdateInsertDeleteData();

                ConnectionWithAccess.query = "update " + ConnectionWithAccess.tablename[25] + " set [na_n] = '" + strMain_A_N + "'" +
                    " WHERE [na_n] = '" + strReplace_A_N + "'";
                ConnectionCommand.fUpdateInsertDeleteData();

                ConnectionWithAccess.query = "update " + ConnectionWithAccess.tablename[30] + " set [a_n] = '" + strMain_A_N + "'" +
                    " WHERE [a_n] = '" + strReplace_A_N + "'";
                ConnectionCommand.fUpdateInsertDeleteData();

                ConnectionWithAccess.query = "update " + ConnectionWithAccess.tablename[51] + " set [a_n] = '" + strMain_A_N + "'" +
                    " WHERE [a_n] = '" + strReplace_A_N + "'";
                ConnectionCommand.fUpdateInsertDeleteData();
            }
            else
            {
                ConnectionWithAccess.query = "delete from " + ConnectionWithAccess.tablename[1] + " where [a_n] = '" + strReplace_A_N + "' AND [s_a] = '" + strReplace_S_A + "'";
                ConnectionCommand.fUpdateInsertDeleteData();

                ConnectionWithAccess.query = "delete from " + ConnectionWithAccess.tablename[4] + " where [a_n] = '" + strReplace_A_N + "' AND [s_a] = '" + strReplace_S_A + "'";
                ConnectionCommand.fUpdateInsertDeleteData();

                //ConnectionWithAccess.query = "update " + ConnectionWithAccess.tablename[4] + " set [a_n] = '" + strMain_A_N + "' , [s_a] = '" + strMain_S_A +
                //    "' WHERE [a_n] = '" + strReplace_A_N + "' AND [s_a] = '" + strReplace_S_A + "'";
                //ConnectionCommand.fUpdateInsertDeleteData();

                ConnectionWithAccess.query = "update " + ConnectionWithAccess.tablename[21] + " set [a_n] = '" + strMain_A_N + "' , [s_a] = '" + strMain_S_A +
                    "' WHERE [a_n] = '" + strReplace_A_N + "' AND [s_a] = '" + strReplace_S_A + "'";
                ConnectionCommand.fUpdateInsertDeleteData();

                ConnectionWithAccess.query = "update " + ConnectionWithAccess.tablename[22] + " set [a_n] = '" + strMain_A_N + "' , [s_a] = '" + strMain_S_A +
                    "' WHERE [a_n] = '" + strReplace_A_N + "' AND [s_a] = '" + strReplace_S_A + "'";
                ConnectionCommand.fUpdateInsertDeleteData();

                ConnectionWithAccess.query = "update " + ConnectionWithAccess.tablename[23] + " set [a_n] = '" + strMain_A_N + "' , [s_a] = '" + strMain_S_A +
                    "' WHERE [a_n] = '" + strReplace_A_N + "' AND [s_a] = '" + strReplace_S_A + "'";
                ConnectionCommand.fUpdateInsertDeleteData();

                ConnectionWithAccess.query = "update " + ConnectionWithAccess.tablename[24] + " set [a_n] = '" + strMain_A_N + "' , [s_a] = '" + strMain_S_A +
                    "' WHERE [a_n] = '" + strReplace_A_N + "' AND [s_a] = '" + strReplace_S_A + "'";
                ConnectionCommand.fUpdateInsertDeleteData();

                ConnectionWithAccess.query = "update " + ConnectionWithAccess.tablename[25] + " set [a_n] = '" + strMain_A_N + "' , [s_a] = '" + strMain_S_A +
                    "' WHERE [a_n] = '" + strReplace_A_N + "' AND [s_a] = '" + strReplace_S_A + "'";
                ConnectionCommand.fUpdateInsertDeleteData();

                ConnectionWithAccess.query = "update " + ConnectionWithAccess.tablename[25] + " set [na_n] = '" + strMain_A_N + "' , [ns_a] = '" + strMain_S_A +
                    "' WHERE [na_n] = '" + strReplace_A_N + "' AND [ns_a] = '" + strReplace_S_A + "'";
                ConnectionCommand.fUpdateInsertDeleteData();

                ConnectionWithAccess.query = "update " + ConnectionWithAccess.tablename[30] + " set [a_n] = '" + strMain_A_N + "' , [s_a] = '" + strMain_S_A +
                    "' WHERE [a_n] = '" + strReplace_A_N + "' AND [s_a] = '" + strReplace_S_A + "'";
                ConnectionCommand.fUpdateInsertDeleteData();

                ConnectionWithAccess.query = "update " + ConnectionWithAccess.tablename[51] + " set [a_n] = '" + strMain_A_N + "' , [s_a] = '" + strMain_S_A +
                    "' WHERE [a_n] = '" + strReplace_A_N + "' AND [s_a] = '" + strReplace_S_A + "'";
                ConnectionCommand.fUpdateInsertDeleteData();
                fLoad_Account_Master_List();
            }
        }

        private void dgv_merge_account_CellClick(object sender, DataGridViewCellEventArgs e)
        {
            rowIndex = dgv_merge_account.CurrentCell.RowIndex;
            dgv_merge_account.Visible = false;
            if (tb_fix_desc.Enabled == true)
            {
                tb_fix_desc.Text = Convert.ToString(dgv_merge_account.Rows[rowIndex].Cells[0].Value);
                tb_fix_city.Text = Convert.ToString(dgv_merge_account.Rows[rowIndex].Cells[1].Value);
                tb_fix_a_n.Text = Convert.ToString(dgv_merge_account.Rows[rowIndex].Cells[2].Value);
                tb_fix_s_a.Text = Convert.ToString(dgv_merge_account.Rows[rowIndex].Cells[3].Value);
                lbl_fixed_account_head.Text = Convert.ToString(dgv_merge_account.Rows[rowIndex].Cells[5].Value);
                tb_fix_desc.Enabled = false;
                tb_merge_desc.Enabled = true;
                tb_merge_desc.Focus();
            }
            else
            {
                tb_merge_desc.Enabled = false;
                tb_merge_desc.Text = Convert.ToString(dgv_merge_account.Rows[rowIndex].Cells[0].Value);
                tb_merge_city.Text = Convert.ToString(dgv_merge_account.Rows[rowIndex].Cells[1].Value);
                tb_merge_a_n.Text = Convert.ToString(dgv_merge_account.Rows[rowIndex].Cells[2].Value);
                tb_merge_s_a.Text = Convert.ToString(dgv_merge_account.Rows[rowIndex].Cells[3].Value);
                lbl_merge_account_head.Text = Convert.ToString(dgv_merge_account.Rows[rowIndex].Cells[5].Value);
                move_cursor_to_button_position("btn_merge_account");
            }
        }

        private void tb_merge_desc_KeyUp(object sender, KeyEventArgs e)
        {
            //vFilterDataTableAndFillGrid(dgv_merge_account, dt_Account_Master_List, "d_y = '@@@' and [desc] like '%" + tb_merge_desc.Text + "%' and [a_n] <> '" + tb_fix_a_n.Text + "' and [s_a] <> '" + tb_fix_s_a.Text + "'");
            vFilterDataTableAndFillGrid(dgv_merge_account, dt_Account_Master_List, "d_y = '@@@' and [desc] like '%" + tb_merge_desc.Text + "%'");
            if (dgv_merge_account.CurrentRow != null)
            {
                dgv_merge_account.Visible = true;
            }
            else
            {
                dgv_merge_account.Visible = false;
            }
        }

        private void btn_merge_account_Click(object sender, EventArgs e)
        {
            fUpdateAN_SA(tb_fix_a_n.Text, tb_fix_s_a.Text, tb_merge_a_n.Text, tb_merge_s_a.Text);
            MessageBox.Show("Account Merged successfully....");
            atbnew_Click(sender, e);
        }

        private void cp_dgv_gst_tax_brief_EditingControlShowing(object sender, DataGridViewEditingControlShowingEventArgs e)
        {
            e.Control.TextChanged += new EventHandler(textBox_TextChanged);
            cntObject = e.Control;
            cntObject.TextChanged += textBox_TextChanged;
        }

        private void delete_old_batch_list()
        {
            ConnectionWithAccess.query = "delete from " + ConnectionWithAccess.tablename[21] + " where d_n  " + (sidocno.Text.Trim() == string.Empty ? "is null" : "= " + sidocno.Text.Trim()) + " and prd = '" + ConnectionWithAccess.mprd + "' and d_c = " + sidbc.SelectedValue.ToString();
            ConnectionCommand.fUpdateInsertDeleteData();
            isRecord = 0;
            ConnectionWithAccess.query = "delete from " + ConnectionWithAccess.tablename[03] + " where d_n " + (sidocno.Text.Trim() == string.Empty ? "is null" : "= " + sidocno.Text.Trim()) + " and prd = '" + ConnectionWithAccess.mprd + "' and d_c = " + sidbc.SelectedValue.ToString();
            ConnectionCommand.fUpdateInsertDeleteData();
        }

        #region Batch List Master
        private void ibl_title_KeyUp(object sender, KeyEventArgs e)
        {
            if (ibl_title.Text != "")
            {
                ibl_item_help.Visible = true;
                ibl_item_help.BringToFront();
                ConnectionWithAccess.query = "select [type], item_code, [title],packing,box,p_price,clo_stk,cat,igst_per,hsn_code from " + ConnectionWithAccess.tablename[05] + " where title like '%" + ibl_title.Text + "%'";
                ConnectionCommand.accountHelp_datatable_Seperate(ibl_item_help, "ibl_item_help");
                if (ibl_item_help.CurrentRow != null)
                {
                    ibl_item_help.Columns[0].Visible = false;
                    ibl_item_help.Columns[1].Visible = false;
                    ibl_item_help.Columns[2].Width = 300;
                }
                else
                    ibl_item_help.Visible = false;
            }
        }

        private void ibl_item_help_CellClick(object sender, DataGridViewCellEventArgs e)
        {
            if (ibl_title.Enabled == true)
            {
                rowIndex = ibl_item_help.CurrentCell.RowIndex;
                ibl_type.Text = Convert.ToString(ibl_item_help.Rows[rowIndex].Cells[0].Value);
                ibl_itemcode.Text = Convert.ToString(ibl_item_help.Rows[rowIndex].Cells[1].Value);
                ibl_title.Text = Convert.ToString(ibl_item_help.Rows[rowIndex].Cells[2].Value);
                ibl_item_help.Visible = false;
                ibl_itemlist.Enabled = true;
                ibl_itemlist.ReadOnly = false;
                ibl_title.Enabled = false;
                fBindBatchListItems();
            }
            else
            {
                rowIndex = ibl_itemlist.CurrentCell.RowIndex;
                help_row_index = ibl_item_help.CurrentCell.RowIndex;

                ibl_itemlist.Rows[rowIndex].Cells[1].Value = ibl_item_help.Rows[help_row_index].Cells[0].Value.ToString();
                ibl_itemlist.Rows[rowIndex].Cells[2].Value = ibl_item_help.Rows[help_row_index].Cells[1].Value.ToString();
                ibl_itemlist.Rows[rowIndex].Cells[3].Value = ibl_item_help.Rows[help_row_index].Cells[2].Value.ToString();
                ibl_itemlist.Rows[rowIndex].Cells[4].Value = 1;
                if (ibl_item_help.Rows[help_row_index].Cells[7].Value.ToString() == "")
                    ibl_itemlist.Rows[rowIndex].Cells[5].Value = "PCS";
                else
                    ibl_itemlist.Rows[rowIndex].Cells[5].Value = ibl_item_help.Rows[help_row_index].Cells[7].Value.ToString();
                if (ibl_item_help.Rows[help_row_index].Cells[5].Value.ToString() == "")
                    ibl_item_help.Rows[help_row_index].Cells[5].Value = 0;
                ibl_itemlist.Rows[rowIndex].Cells[6].Value = ibl_item_help.Rows[help_row_index].Cells[5].Value.ToString();
                //if (ibl_item_help.Rows[mRowIndex].Cells[3].Value != null && ibl_item_help.Rows[mRowIndex].Cells[5].Value != System.DBNull.Value && ibl_item_help.Rows[mRowIndex].Cells["qty"].Value != null && ibl_item_help.Rows[mRowIndex].Cells["qty"].Value != System.DBNull.Value)
                if (ibl_itemlist.Rows[rowIndex].Cells[6].Value.ToString() == "")
                    ibl_itemlist.Rows[rowIndex].Cells[6].Value = "0.00";
                ibl_itemlist.Rows[rowIndex].Cells[7].Value = Convert.ToSingle(ibl_itemlist.Rows[rowIndex].Cells[4].Value.ToString()) * Convert.ToSingle(ibl_itemlist.Rows[rowIndex].Cells[6].Value.ToString());
                ibl_item_help.Visible = false;
                ibl_itemlist.Rows[rowIndex].DefaultCellStyle.BackColor = Color.Lavender;

            }
            //ConnectionWithAccess.query = "select [type], item_code, [title], q_cs, [box], qty, price, amount,cat,igst_per,hsn_code,item_squ_id from " + ConnectionWithAccess.tablename[03] + " where prd= '" + ConnectionWithAccess.mprd + "' and d_c = " + sidbc.SelectedValue.ToString() + " and d_n " + (sidocno.Text.Trim() == string.Empty ? "is not null" : "= " + sidocno.Text.Trim()) + " and amount > 0 order by item_squ_id";
            ////ConnectionWithAccess.query = "select [type], item_code, [title], q_cs, [box], qty, price, amount,cat,igst_per,hsn_code from " + ConnectionWithAccess.tablename[03] + " where prd= '" + ConnectionWithAccess.mprd + "' and d_c = " + sidbc.SelectedValue.ToString() + " and d_n " + (sidocno.Text.Trim() == string.Empty ? "is not null" : "= " + sidocno.Text.Trim()) + " and amount > 0";
            //ConnectionCommand.accountHelp_datatable_Seperate(siitemlist, "siitemlist1");
        }

        private void ibl_itemlist_EditingControlShowing(object sender, DataGridViewEditingControlShowingEventArgs e)
        {
            ConnectionWithAccess.data_entry_working = "Item Batch List";
            cntObject = e.Control;
            cntObject.TextChanged += itemTextbox_TextChanged;
            //issiTxtChangedAssigned = true;
        }

        private void itemTextbox_TextChanged(object sender, EventArgs e)
        {
            try
            {
                if (subtabMasters.SelectedIndex == 8)
                {
                    if (cntObject.Text != string.Empty)
                    {
                        columnIndex = ibl_itemlist.CurrentCell.ColumnIndex;
                        rowIndex = ibl_itemlist.CurrentCell.RowIndex;
                        string tempword = cntObject.Text;
                        if (rowIndex > -1)
                        {
                            ibl_itemlistrowindex = ibl_itemlist.CurrentCell.RowIndex;
                            if (columnIndex == 2)
                            {
                                mitem_code = cntObject.Text;
                                ibl_item_help.BringToFront();
                                ibl_item_help.Visible = true;
                                vFilterDataTableAndFillGrid(ibl_item_help, dt_Item_Master_List, "item_code like '%" + mitem_code + "%'");
                                //ConnectionWithAccess.query = "select [type], item_code, [title],packing,box,price,clo_stk,cat,igst_per,hsn_code from " + ConnectionWithAccess.tablename[05] + " where item_code like '%" + mitem_code + "%' order by [title]";
                                //ConnectionCommand.accountHelp_datatable_Seperate(ibl_item_help, "ibl_item_help");
                                if (ibl_item_help.CurrentRow == null)
                                {
                                    ibl_item_help.Visible = false;
                                }
                                move_cursor_to_button_position("ibl_item_help");
                            }
                            else if (columnIndex == 3)
                            {
                                mtitle = cntObject.Text;
                                ibl_item_help.BringToFront();
                                ibl_item_help.Visible = true;
                                ibl_item_help.DataSource = null;
                                vFilterDataTableAndFillGrid(ibl_item_help, dt_Item_Master_List, " [title] like '%" + mtitle + "%' ");
                                if (ibl_item_help.CurrentRow == null)
                                {
                                    ConnectionWithAccess.query = "select [type], item_code, [title],packing,box,price,clo_stk,cat,igst_per,hsn_code from " + ConnectionWithAccess.tablename[05] + " where item_code like '%" + mtitle + "%' order by [title]";
                                    ConnectionCommand.accountHelp_datatable_Seperate(ibl_item_help, "ibl_item_help");
                                    if (ibl_item_help.CurrentRow == null)
                                    {
                                        ibl_item_help.Visible = false;
                                        ibl_itemlist.Rows[rowIndex].DefaultCellStyle.BackColor = Color.Red;
                                    }
                                }

                                else
                                    ibl_itemlist.Rows[rowIndex].DefaultCellStyle.BackColor = Color.Lavender;
                                move_cursor_to_button_position("ibl_item_help");
                            }
                            else if (columnIndex == 6)
                            {
                                ibl_itemlist.Rows[rowIndex].Cells[7].Value = Convert.ToSingle(ibl_itemlist.Rows[rowIndex].Cells[4].Value.ToString()) * Convert.ToSingle(ibl_itemlist.Rows[rowIndex].Cells[6].Value.ToString());
                            }
                        }
                    }
                }

            }
            catch (Exception ex)
            { }
        }

        private void add_item_batch_list()
        {
            ConnectionWithAccess.query = "delete from " + ConnectionWithAccess.tablename[16] + " where [type] = '" + ibl_type.Text + "' and item_code = '" + ibl_itemcode.Text + "'";
            ConnectionCommand.fUpdateInsertDeleteData();
            for (row_pointer = 0; row_pointer < ibl_itemlist.Rows.Count - 1; row_pointer++)
            {
                if (ibl_itemlist.Rows[row_pointer].Cells[4].Value.ToString() == "")
                    ibl_itemlist.Rows[row_pointer].Cells[4].Value = "PCS";
                //temp_double = Convert.ToSingle(ibl_itemlist.Rows[row_pointer].Cells["Amount"].Value.ToString());
                //if (ibl_itemlist.Rows[row_pointer].Cells[6].Value != null && temp_double > 0)
                //{
                if (Convert.ToSingle(ibl_itemlist.Rows[row_pointer].Cells[4].Value.ToString()) > 0)
                {
                    ConnectionWithAccess.query = "insert into " + ConnectionWithAccess.tablename[16] + " ([type],item_code,[title],btype,bitem_cd,qty,cat, price, amount, [user], insert_dt_tm) values('" + ibl_type.Text.Trim() + "','" + ibl_itemcode.Text + "','" + ibl_title.Text + "','" + ibl_itemlist.Rows[row_pointer].Cells[1].Value.ToString().Trim().ToUpper() + "' , '" + ibl_itemlist.Rows[row_pointer].Cells[2].Value.ToString().Trim() + "' , " + ibl_itemlist.Rows[row_pointer].Cells[4].Value.ToString().Trim() + " , '" + ibl_itemlist.Rows[row_pointer].Cells[5].Value.ToString().Trim() + "' , " + ibl_itemlist.Rows[row_pointer].Cells[6].Value.ToString().Trim() + " , " + ibl_itemlist.Rows[row_pointer].Cells[7].Value.ToString().Trim() + " , '" + ConnectionWithAccess.muser + "', @currDate )";
                    add_user_date_time_function_compulsory_program();
                    ConnectionCommand.fUpdateInsertDeleteData();
                }
                if (Convert.ToSingle(ibl_itemlist.Rows[row_pointer].Cells[6].Value.ToString()) > 0)
                {
                    ConnectionWithAccess.query = "update " + ConnectionWithAccess.tablename[05] + " set p_price = " + Convert.ToSingle(ibl_itemlist.Rows[row_pointer].Cells[6].Value.ToString().Trim()) + " , unused = 1 , [user] = '" + ConnectionWithAccess.muser + "' , insert_dt_tm = @currDate where [type] = '" + ibl_itemlist.Rows[row_pointer].Cells[1].Value.ToString().Trim().ToUpper() + "' and item_code = '" + ibl_itemlist.Rows[row_pointer].Cells[2].Value.ToString().Trim().ToUpper() + "'";
                    add_user_date_time_function_compulsory_program();
                    ConnectionCommand.fUpdateInsertDeleteData();
                }
                //}
            }
            ConnectionWithAccess.query = "update " + ConnectionWithAccess.tablename[05] + " set p_price = " + Convert.ToSingle(ibl_basicamt.Text) + " , [user] = '" + ConnectionWithAccess.muser + "' , insert_dt_tm = @currDate where [type] = '" + ibl_type.Text + "' and item_code = '" + ibl_itemcode.Text + "'";
            add_user_date_time_function_compulsory_program();
            ConnectionCommand.fUpdateInsertDeleteData();
            //ibl_type.Text = "";
            ibl_itemcode.Text = "";
            ibl_title.Text = "";
            //ibl_title.Enabled = true;
            ibl_itemlist.DataSource = null;
            ibl_itemlist.Rows.Clear();

            //ibl_itemlist.ReadOnly = true;
            fBindBatchListItems();
            fBindAvailableBatchList();
            fLoad_Item_Master_List();
        }

        private void ibl_itemlist_KeyUp(object sender, KeyEventArgs e)
        {
            if (ibl_itemlist.CurrentCell != null)
            {
                ConnectionWithAccess.data_entry_working = "Sale Item";
                mRowIndex = ibl_itemlist.CurrentCell.RowIndex;
                columnIndex = ibl_itemlist.CurrentCell.ColumnIndex;
                if (e.KeyCode != Keys.Down && e.KeyCode != Keys.Left && e.KeyCode != Keys.Right && e.KeyCode != Keys.Up)
                {
                    if (ibl_itemlist.Rows[mRowIndex].Cells[4].Value == null || ibl_itemlist.Rows[mRowIndex].Cells[4].Value == System.DBNull.Value)
                        ibl_itemlist.Rows[mRowIndex].Cells[4].Value = "0";
                    if (ibl_itemlist.Rows[mRowIndex].Cells[6].Value == null || ibl_itemlist.Rows[mRowIndex].Cells[6].Value == System.DBNull.Value)
                        ibl_itemlist.Rows[mRowIndex].Cells[6].Value = "0.00";
                    if (ibl_itemlist.Rows[mRowIndex].Cells[7].Value == null || ibl_itemlist.Rows[mRowIndex].Cells[7].Value == System.DBNull.Value)
                        ibl_itemlist.Rows[mRowIndex].Cells[7].Value = "0.00";

                    mamount = Convert.ToDouble(ibl_itemlist.Rows[mRowIndex].Cells[4].Value) * Convert.ToDouble(ibl_itemlist.Rows[mRowIndex].Cells[6].Value);
                    ibl_itemlist.Rows[mRowIndex].Cells[7].Value = Convert.ToString(mamount);
                }
            }
        }

        private void ibl_itemlist_RowValidating(object sender, DataGridViewCellCancelEventArgs e)
        {
            calculate_item_batch_list();

        }

        private void calculate_item_batch_list()
        {
            double purchase_order_amount = 0;
            ibl_basicamt.Text = "0.00";
            if (ibl_itemlist.Rows.Count >= 1)
            {
                for (row_pointer = 0; row_pointer < ibl_itemlist.Rows.Count; row_pointer++)
                {
                    if (ibl_itemlist.Rows[row_pointer].Cells[4].Value == null || ibl_itemlist.Rows[row_pointer].Cells[4].Value == System.DBNull.Value)
                        ibl_itemlist.Rows[row_pointer].Cells[4].Value = "0";
                    if (ibl_itemlist.Rows[row_pointer].Cells[5].Value == null || ibl_itemlist.Rows[row_pointer].Cells[5].Value == System.DBNull.Value)
                        ibl_itemlist.Rows[row_pointer].Cells[5].Value = "PCS";
                    if (ibl_itemlist.Rows[row_pointer].Cells[6].Value == null || ibl_itemlist.Rows[row_pointer].Cells[6].Value == System.DBNull.Value)
                        ibl_itemlist.Rows[row_pointer].Cells[6].Value = "0";
                    if (ibl_itemlist.Rows[row_pointer].Cells[7].Value == null || ibl_itemlist.Rows[row_pointer].Cells[7].Value == System.DBNull.Value)
                        ibl_itemlist.Rows[row_pointer].Cells[7].Value = "0";
                    if (ibl_itemlist.Rows[row_pointer].Cells[4].Value != System.DBNull.Value && ibl_itemlist.Rows[row_pointer].Cells[6].Value != System.DBNull.Value)
                    {
                        ibl_itemlist.Rows[row_pointer].Cells[7].Value = Convert.ToDouble(ibl_itemlist.Rows[row_pointer].Cells[4].Value) * Convert.ToDouble(ibl_itemlist.Rows[row_pointer].Cells[6].Value);
                        if (ibl_itemlist.Rows[row_pointer].Cells[7].Value != System.DBNull.Value)
                            purchase_order_amount += Convert.ToDouble(ibl_itemlist.Rows[row_pointer].Cells[7].Value);
                    }
                }
            }
            ibl_basicamt.Text = Convert.ToString(purchase_order_amount);
            ibl_grossamt.Text = (purchase_order_amount + Convert.ToDouble(ibl_freightamt.Text)).ToString();
        }

        private void ibl_itemlist_TabIndexChanged(object sender, EventArgs e)
        {

        }

        private void fBindBatchListItems()
        {
            ConnectionWithAccess.query = "select * from " + ConnectionWithAccess.tablename[16] + " where [type] = '" + ibl_type.Text.Trim() + "' and item_code = '" + ibl_itemcode.Text + "' and qty > 0";
            DataTable dtData1 = ConnectionCommand.fGetDataTable();
            if (dtData1.Rows.Count > 0)
            {
                ConnectionWithAccess.query = "select  b.[type], b.item_code,b.[title],a.qty,a.cat,a.price,a.amount, a.[user], a.insert_dt_tm from " +
                    ConnectionWithAccess.tablename[16] + " a inner join " + ConnectionWithAccess.tablename[05] +
                    " b on b.[Type] = a.BType and b.Item_Code = a.BITEM_CD " +
                    " where a.[type] = '" + ibl_type.Text + "' and a.item_code = '" + ibl_itemcode.Text + "' and a.qty > 0 order by b.[title]";
                //
                DataTable dtBatchListItems = ConnectionCommand.fGetDataTable();
                if (dtBatchListItems != null && dtBatchListItems.Rows.Count > 0)
                {
                    ibl_itemlist.AutoGenerateColumns = false;
                    ibl_itemlist.DataSource = dtBatchListItems;
                }
            }
        }

        private void fBindAvailableBatchList()
        {
            ConnectionWithAccess.query = " select distinct Type, Item_Code, Title from " + ConnectionWithAccess.tablename[16] + "  order by [title]";
            DataTable dtBatchList = ConnectionCommand.fGetDataTable();
            if (dtBatchList != null && dtBatchList.Rows.Count > 0)
            {
                ibl_available_dgv.AutoGenerateColumns = false;
                ibl_available_dgv.DataSource = dtBatchList;
                ibl_available_dgv.Visible = true;
                dgv_item_purchase_details.Visible = false;
            }
            else
                ibl_available_dgv.Visible = false;
        }

        //private void fGetSelectedBatchDetails(string strType, string strItemCode)
        //{
        //    ConnectionWithAccess.query = " select Type, Item_Code, Title from AP2_0016 ";
        //    DataTable dtBatchList = ConnectionCommand.fGetDataTable();
        //    if (dtBatchList != null && dtBatchList.Rows.Count > 0)
        //    {
        //        ibl_available_dgv.AutoGenerateColumns = false;
        //        ibl_available_dgv.DataSource = dtBatchList;
        //    }
        //}
        private void ibl_available_dgv_CellClick(object sender, DataGridViewCellEventArgs e)
        {
            int iCurrentrowIndex = ibl_available_dgv.CurrentCell.RowIndex;

            ibl_type.Text = ibl_available_dgv.Rows[iCurrentrowIndex].Cells[0].Value.ToString();
            ibl_itemcode.Text = ibl_available_dgv.Rows[iCurrentrowIndex].Cells[1].Value.ToString();
            ibl_title.Text = ibl_available_dgv.Rows[iCurrentrowIndex].Cells[2].Value.ToString();
            ibl_item_help.Visible = false;
            ibl_itemlist.Enabled = true;
            ibl_itemlist.ReadOnly = false;
            ibl_title.Enabled = false;

            fBindBatchListItems();
            calculate_item_batch_list();
            move_cursor_to_button_position("atbpreview");
            ibl_available_dgv.Visible = false;
        }
        #endregion Batch List Master

        private void podbc_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (podbc.Text != null && podbc.Text != "")
            {
                if (podbc.SelectedValue.ToString() != "")
                {
                    poa_n.Text = get_a_n_from_d_c("P", Convert.ToInt32(podbc.SelectedValue.ToString()));
                    fillpoorderlist();
                }
            }
        }

        private void po_party_help_KeyPress(object sender, KeyPressEventArgs e)
        {

        }

        private void ibl_freightamt_KeyUp(object sender, KeyEventArgs e)
        {
            calculate_item_batch_list();
        }

        private void jb_rm_partycode_KeyUp(object sender, KeyEventArgs e)
        {

        }

        private void jb_rm_party_help_CellClick(object sender, DataGridViewCellEventArgs e)
        {

        }

        private void jb_rm_item_help_CellClick(object sender, DataGridViewCellEventArgs e)
        {

        }

        private void jb_osm_itemlist_RowValidating(object sender, DataGridViewCellCancelEventArgs e)
        {

        }

        private void generate_boder_for_state_invoice()
        {
            msalepdf = ConnectionWithAccess.data_drive + "acc\\" + ConnectionWithAccess.mNIK + "\\reports\\saleinvoice_" + sidocno.Text;
            if (chb_add_datetime_in_output.Checked)
                msalepdf += "_" + DateTime.Now.Day + "_" + DateTime.Now.Month + "_" + DateTime.Now.Year + "_" + DateTime.Now.TimeOfDay.Hours + "_" + DateTime.Now.TimeOfDay.Minutes;
            msalepdf += ".pdf";
            doc1 = new Document(PageSize.A4, 40, 45, 40, 25);
            ConnectionWithAccess.create_file_folder(msalepdf);
            FileStream FS1 = File.Create(msalepdf);
            writer = PdfWriter.GetInstance(doc1, FS1);
            doc1.Open();
            current_pdf_page_number = 1;
            PdfContentByte cb = writer.DirectContent;
            cb.Rectangle(30, 660, 280, 80);
            cb.Stroke();


            doc1.Close();
            pdf_invoice.BringToFront();
            pdf_invoice.Visible = true;
            //sisalelistdg.Visible = false;
            //pbdataentry.Visible = false;
            pdf_invoice.LoadFile(msalepdf);


        }

        private void btn_verify_gst_number_Click(object sender, EventArgs e)
        {
            Clipboard.SetText(tbgst_number.Text);
            System.Diagnostics.Process.Start("https://services.gst.gov.in/services/searchtp");
        }

        private void atbcalculator_Click(object sender, EventArgs e)
        {
            System.Diagnostics.Process.Start("calc");
        }

        private void btn_whatsup_form_Click(object sender, EventArgs e)
        {
            whatsup whatsup_form = new whatsup();
            whatsup_form.Show();
            Application.DoEvents();
        }

        private void btn_invoice_form_print_Click(object sender, EventArgs e)
        {
            pdf_box pdf_box_form = new pdf_box();
            pdf_box_form.Show();
            Application.DoEvents();
        }

        private void item_merge_help_CellClick(object sender, DataGridViewCellEventArgs e)
        {
            if (tb_fixed_item_title.Enabled == true)
            {
                mRowIndex = item_merge_help.CurrentCell.RowIndex;
                lbl_fixed_item_type.Text = Convert.ToString(item_merge_help.Rows[mRowIndex].Cells[0].Value);
                lbl_fixed_item_code.Text = Convert.ToString(item_merge_help.Rows[mRowIndex].Cells[1].Value);
                tb_fixed_item_title.Text = Convert.ToString(item_merge_help.Rows[mRowIndex].Cells[2].Value);
                tb_fixed_item_title.Enabled = false;
                item_merge_help.Visible = false;
                tb_merge_item_title.Enabled = true;
                tb_merge_item_title.Focus();
            }
            else
            {
                mRowIndex = item_merge_help.CurrentCell.RowIndex;
                lbl_merge_item_type.Text = Convert.ToString(item_merge_help.Rows[mRowIndex].Cells[0].Value);
                lbl_merge_item_code.Text = Convert.ToString(item_merge_help.Rows[mRowIndex].Cells[1].Value);
                tb_merge_item_title.Text = Convert.ToString(item_merge_help.Rows[mRowIndex].Cells[2].Value);
                tb_merge_item_title.Enabled = false;
                item_merge_help.Visible = false;
                move_cursor_to_button_position("btn_merge_item");
            }
        }

        private void tb_fixed_item_title_KeyUp(object sender, KeyEventArgs e)
        {
            if (tb_fixed_item_title.Text != "")
            {
                item_merge_help.Visible = true;
                item_merge_help.BringToFront();
                vFilterDataTableAndFillGrid(item_merge_help, dt_Item_Master_List, "[title] like '%" + tb_fixed_item_title.Text + "%' ");
                move_cursor_to_button_position("item_merge_help");
                //if (item_merge_help.CurrentRow != null)
                //{
                //    tb_fixed_item_title.Enabled = false;
                //}
                //else
                //    item_merge_help.Visible = false;
            }
        }

        private void tb_merge_item_title_KeyUp(object sender, KeyEventArgs e)
        {
            if (tb_merge_item_title.Text != "")
            {
                item_merge_help.Visible = true;
                item_merge_help.BringToFront();
                vFilterDataTableAndFillGrid(item_merge_help, dt_Item_Master_List, "[title] like '%" + tb_merge_item_title.Text + "%' ");
                //if (item_merge_help.CurrentRow != null)
                //{
                //    tb_merge_item_title.Enabled = false;
                //}
                //else
                //    ibl_item_help.Visible = false;
            }
        }

        private void btn_merge_item_Click(object sender, EventArgs e)
        {
            ConnectionWithAccess.query = "update " + ConnectionWithAccess.tablename[03] + " set [type] = '" + lbl_fixed_item_type.Text + "', item_code = '" + lbl_fixed_item_code.Text + "' , [title] = '" + tb_fixed_item_title.Text + "' WHERE [type] = '" + lbl_merge_item_type.Text + "' and item_code = '" + lbl_merge_item_code.Text + "'";
            ConnectionCommand.fUpdateInsertDeleteData();

            ConnectionWithAccess.query = "update " + ConnectionWithAccess.tablename[16] + " set [type] = '" + lbl_fixed_item_type.Text + "', item_code = '" + lbl_fixed_item_code.Text + "' , [title] = '" + tb_fixed_item_title.Text + "' WHERE [type] = '" + lbl_merge_item_type.Text + "' and item_code = '" + lbl_merge_item_code.Text + "'";
            ConnectionCommand.fUpdateInsertDeleteData();
            ConnectionWithAccess.query = "update " + ConnectionWithAccess.tablename[16] + " set [btype] = '" + lbl_fixed_item_type.Text + "', bitem_cd = '" + lbl_fixed_item_code.Text + "' WHERE [btype] = '" + lbl_merge_item_type.Text + "' and bitem_cd = '" + lbl_merge_item_code.Text + "'";
            ConnectionCommand.fUpdateInsertDeleteData();

            ConnectionWithAccess.query = "update " + ConnectionWithAccess.tablename[18] + " set [type] = '" + lbl_fixed_item_type.Text + "', item_code = '" + lbl_fixed_item_code.Text + "' , [title] = '" + tb_fixed_item_title.Text + "' WHERE [type] = '" + lbl_merge_item_type.Text + "' and item_code = '" + lbl_merge_item_code.Text + "'";
            ConnectionCommand.fUpdateInsertDeleteData();

            ConnectionWithAccess.query = "update " + ConnectionWithAccess.tablename[26] + " set [type] = '" + lbl_fixed_item_type.Text + "', item_code = '" + lbl_fixed_item_code.Text + "' WHERE [type] = '" + lbl_merge_item_type.Text + "' and item_code = '" + lbl_merge_item_code.Text + "'";
            ConnectionCommand.fUpdateInsertDeleteData();

            ConnectionWithAccess.query = "update " + ConnectionWithAccess.tablename[57] + " set [type] = '" + lbl_fixed_item_type.Text + "', item_code = '" + lbl_fixed_item_code.Text + "' WHERE [type] = '" + lbl_merge_item_type.Text + "' and item_code = '" + lbl_merge_item_code.Text + "'";
            ConnectionCommand.fUpdateInsertDeleteData();

            ConnectionWithAccess.query = "update " + ConnectionWithAccess.tablename[70] + " set [type] = '" + lbl_fixed_item_type.Text + "', item_code = '" + lbl_fixed_item_code.Text + "' WHERE [type] = '" + lbl_merge_item_type.Text + "' and item_code = '" + lbl_merge_item_code.Text + "'";
            ConnectionCommand.fUpdateInsertDeleteData();

            ConnectionWithAccess.query = "delete from " + ConnectionWithAccess.tablename[05] + " WHERE [type] = '" + lbl_merge_item_type.Text + "' and item_code = '" + lbl_merge_item_code.Text + "'";
            ConnectionCommand.fUpdateInsertDeleteData();

            fLoad_Item_Master_List();
            atbnew_Click(sender, e);
        }

        private void ItemListDG_MouseDown(object sender, MouseEventArgs e)
        {
            switch (e.Button)
            {
                case MouseButtons.Right:
                    {
                        if (cb_item_in_use.SelectedIndex == 0)
                        {
                            ConnectionWithAccess.query = "update " + ConnectionWithAccess.tablename[05] + " set [unused] = '1', [user] = '" + ConnectionWithAccess.muser + "', insert_dt_tm = @currDate where [title] = '" + tbTitle.Text + "'";
                            add_user_date_time_function_compulsory_program();
                            ConnectionCommand.fUpdateInsertDeleteData();
                            cb_item_in_use.SelectedIndex = 1;
                        }
                        else
                        {
                            ConnectionWithAccess.query = "update " + ConnectionWithAccess.tablename[05] + " set [unused] = '0', [user] = '" + ConnectionWithAccess.muser + "', insert_dt_tm = @currDate where [title] = '" + tbTitle.Text + "'";
                            add_user_date_time_function_compulsory_program();
                            ConnectionCommand.fUpdateInsertDeleteData();
                            cb_item_in_use.SelectedIndex = 0;
                        }
                    }
                    break;
            }
        }

        private void btn_add_new_period_in_Starting_Click(object sender, EventArgs e)
        {
            temp_new_prd = "";
            temp_old_prd = "";
            temp_current_prd = "";
            ConnectionWithAccess.query = "select prd, start, [end] from " + ConnectionWithAccess.tablename[50] + " order by prd";
            DataTable dtData1 = ConnectionCommand.fGetDataTable();
            if (dtData1 != null && dtData1.Rows.Count > 0)
            {
                temp_int = dtData1.Rows.Count - 1;
                for (row_counter = temp_int; row_counter >= 0; row_counter--)
                {
                    temp_current_prd = dtData1.Rows[row_counter][0].ToString();
                    temp_new_prd = ConnectionWithAccess.get_next_prd_name(temp_current_prd);
                    temp_word = "3,7,8,9,12,13,15,17,18,21,22,23,24,25,26,28,30,50,51,70";
                    var cellArray = temp_word.Split(new[] { ',' });
                    for (int i = 0; i < cellArray.Count(); i++)
                    {
                        ConnectionWithAccess.query = "update " + ConnectionWithAccess.tablename[Convert.ToInt32(cellArray[i])] + " set [prd] = '" + temp_new_prd + "' WHERE [prd] = '" + temp_current_prd + "'";
                        ConnectionCommand.fUpdateInsertDeleteData();
                    }
                }
                ConnectionWithAccess.query = "select prd, start, [end] from " + ConnectionWithAccess.tablename[50] + " where [prd] = '" + temp_new_prd + "'";
                dtData1 = ConnectionCommand.fGetDataTable();
                if (dtData1 != null && dtData1.Rows.Count > 0)
                {
                    //temp_current_prd = dtData1.Rows[row_counter][0].ToString();
                    temp_old_prd = ConnectionWithAccess.get_old_prd_name(temp_current_prd);
                    DateTime from_date = Convert.ToDateTime(dtData1.Rows[0][1].ToString());
                    DateTime to_date = Convert.ToDateTime(dtData1.Rows[0][2].ToString());
                    DateTime firstOfNextMonth = new DateTime(from_date.Year, from_date.Month, 1);
                    DateTime lastOfThisMonth = firstOfNextMonth.AddDays(-365);
                    firstOfNextMonth = lastOfThisMonth;
                    lastOfThisMonth = firstOfNextMonth.AddDays(360);
                    DateTime last_date = new DateTime(lastOfThisMonth.Year, lastOfThisMonth.Month, 1).AddMonths(1);
                    last_date = last_date.AddDays(-1);
                    ConnectionWithAccess.query = "insert into " + ConnectionWithAccess.tablename[50] + " (prd, [start], [end],  [lock], [user], insert_dt_tm) values('" + temp_current_prd + "', '" + firstOfNextMonth + "','" + last_date + "', 'Y', '" + ConnectionWithAccess.muser + "', @currDate )";
                    add_user_date_time_function_compulsory_program();
                    ConnectionCommand.fUpdateInsertDeleteData();
                }
            }
        }

        private void tb_dataentry_stock_item_name_KeyUp(object sender, KeyEventArgs e)
        {
            //ConnectionWithAccess.query = "select [type], item_code, [title],packing,box,price,clo_stk,cat,igst_per,hsn_code from " + ConnectionWithAccess.tablename[05] + " where title like '%" + tb_dataentry_stock_item_name.Text + "%'";
            //ConnectionCommand.accountHelp_datatable_Seperate(item_stock_item_help, "master_item_help");
            vFilterDataTableAndFillGrid(item_stock_item_help, dt_Item_Master_List, "[title] like '%" + tb_dataentry_stock_item_name.Text + "%' ");
            if (item_stock_item_help.CurrentRow != null)
            {
                item_stock_item_help.Visible = true;
                //item_stock_item_help.Columns[0].Visible = false;
                //item_stock_item_help.Columns[1].Visible = false;
                //item_stock_item_help.Columns[2].Width = 300;
            }
            else
                item_stock_item_help.Visible = false;
        }

        private void item_stock_item_help_CellClick(object sender, DataGridViewCellEventArgs e)
        {
            rowIndex = item_stock_item_help.CurrentCell.RowIndex;
            tb_dataentry_stock_item_type.Text = Convert.ToString(item_stock_item_help.Rows[rowIndex].Cells[0].Value);
            tb_dataentry_stock_item_code.Text = Convert.ToString(item_stock_item_help.Rows[rowIndex].Cells[1].Value);
            tb_dataentry_stock_item_name.Text = Convert.ToString(item_stock_item_help.Rows[rowIndex].Cells[2].Value);
            item_stock_item_help.Visible = false;
            cb_item_in_use.Visible = true;
            ConnectionWithAccess.query = "select [type], item_code, [title], f18.clo_stk, f18.cat, f18.d_d from " + ConnectionWithAccess.tablename[18] + " f18 where f18.[type] = '" + tb_dataentry_stock_item_type.Text + "' and f18.item_code = '" + tb_dataentry_stock_item_code.Text + "'";
            ConnectionCommand.accountHelp_datatable_Seperate(dgv_stock_list, "dgv_stock_list");
            get_item_details_from_05_using_title(tb_dataentry_stock_item_name.Text);
            if (item_details_from_05.Count() > 3)
            {
                if (item_details_from_05[9] == "1")
                    cb_item_in_use.SelectedIndex = 1;
                else
                    cb_item_in_use.SelectedIndex = 0;
            }
        }

        private void save_item_current_stock()
        {
            ConnectionWithAccess.query = "delete from " + ConnectionWithAccess.tablename[18] + " where [type] = '" + tb_dataentry_stock_item_type.Text + "' and item_code = '" + tb_dataentry_stock_item_code.Text + "' and d_d = @d_d_date";
            search_on_particular_date_in_select_query("@d_d_date", tb_dataentry_stock_item_date.Value);
            ConnectionCommand.fUpdateInsertDeleteData();
            if (tb_dataentry_item_stock_quantity.Text != "0")
            {
                ConnectionWithAccess.query = "insert into " + ConnectionWithAccess.tablename[18] + " ([type],item_code,[title],d_d,CLO_STK,[user], insert_dt_tm) values('" + tb_dataentry_stock_item_type.Text + "','" + tb_dataentry_stock_item_code.Text + "','" + tb_dataentry_stock_item_name.Text + "','" + tb_dataentry_stock_item_date.Text + "'," + tb_dataentry_item_stock_quantity.Text + ", '" + ConnectionWithAccess.muser + "', @currDate )";
                add_user_date_time_function_compulsory_program();
                ConnectionCommand.fUpdateInsertDeleteData();
            }
            refresh_item_stock_list();
        }

        private void dgv_stock_list_CellClick(object sender, DataGridViewCellEventArgs e)
        {
            tb_dataentry_stock_item_type.Text = Convert.ToString(dgv_stock_list.CurrentRow.Cells[0].Value);
            tb_dataentry_stock_item_code.Text = Convert.ToString(dgv_stock_list.CurrentRow.Cells[1].Value);
            tb_dataentry_stock_item_name.Text = Convert.ToString(dgv_stock_list.CurrentRow.Cells[2].Value);
            tb_dataentry_item_stock_quantity.Text = Convert.ToString(dgv_stock_list.CurrentRow.Cells[3].Value);
            tb_dataentry_stock_item_date.Value = Convert.ToDateTime(dgv_stock_list.CurrentRow.Cells[5].Value);
            dgv_stock_list.Visible = false;
            cb_item_in_use.Visible = true;
            get_item_details_from_05_using_title(tb_dataentry_stock_item_name.Text);
            if (item_details_from_05.Count() > 3)
            {
                if (item_details_from_05[9] == "1")
                    cb_item_in_use.SelectedIndex = 1;
                else
                    cb_item_in_use.SelectedIndex = 0;
            }
        }

        private void dgv_stock_list_MouseDown(object sender, MouseEventArgs e)
        {
            switch (e.Button)
            {
                case MouseButtons.Right:
                    {
                        if (cb_item_in_use_stock.SelectedIndex == 0)
                        {
                            ConnectionWithAccess.query = "update " + ConnectionWithAccess.tablename[05] + " set [unused] = '1', [user] = '" + ConnectionWithAccess.muser + "', insert_dt_tm = @currDate where [title] = '" + tb_ledger_account_name.Text + "'";
                            add_user_date_time_function_compulsory_program();
                            ConnectionCommand.fUpdateInsertDeleteData();
                            cb_item_in_use.SelectedIndex = 1;
                        }
                        else
                        {
                            ConnectionWithAccess.query = "update " + ConnectionWithAccess.tablename[05] + " set [unused] = '0', [user] = '" + ConnectionWithAccess.muser + "', insert_dt_tm = @currDate where [title] = '" + tb_ledger_account_name.Text + "'";
                            add_user_date_time_function_compulsory_program();
                            ConnectionCommand.fUpdateInsertDeleteData();
                            cb_item_in_use.SelectedIndex = 0;
                        }
                    }
                    break;
            }
        }

        private void tbTitle_KeyUp(object sender, KeyEventArgs e)
        {
            if (!cb_change_item_name.Checked)
            {
                if (tbTitle.Text != "")
                {
                    master_item_help.Visible = true;
                    master_item_help.BringToFront();
                    ConnectionWithAccess.query = "select [type], item_code, [title],packing,box,price,clo_stk,cat,igst_per,hsn_code from " + ConnectionWithAccess.tablename[05] + " where title like '%" + tbTitle.Text + "%' order by [title]";
                    ConnectionCommand.accountHelp_datatable_Seperate(master_item_help, "master_item_help");
                    if (master_item_help.CurrentRow != null)
                    {
                        master_item_help.Columns[0].Visible = false;
                        master_item_help.Columns[1].Visible = false;
                        master_item_help.Columns[2].Width = 300;
                    }
                    else
                    {
                        master_item_help.Visible = false;
                        tbItemRate.Text = "0.00";
                        tb_purc_price.Text = "0.00";
                        tblbt.Text = "0";
                        tbMinStock.Text = "0";
                        tbCB.Text = "1";
                        tbBQ.Text = "1";
                        tbCurStock.Text = "0";
                        tb_hsn_code.Text = "0";
                        tb_item_open_stock.Text = "0";
                        tb_igst_tax_rate.Text = "0.00";
                        tb_hsn_code.Text = "";
                        tb_purc_price.Text = "0.00";
                        cb_item_in_use.SelectedIndex = 1;
                        tb_item_printed.Text = "";
                        tb_item_pitch.Text = "0.00";
                        tb_item_length.Text = "0.00";
                        tb_item_breadth.Text = "0.00";
                        tb_item_location.Text = "";
                        tb_item_moq.Text = "0";

                    }
                }
            }
        }

        private void pb_eway_bill_url_Click(object sender, EventArgs e)
        {
            file_folder = ConnectionWithAccess.data_drive + "acc\\" + ConnectionWithAccess.mNIK + "\\eway_bill\\";
            eway_json_filename = file_folder + ConnectionWithAccess.mprd + "_" + sidocno.Text + "_" + account_detail_from_01[28].Trim();
            //if (chb_add_datetime_in_output.Checked)
            //eway_json_filename += "_" + DateTime.Now.Day + "_" + DateTime.Now.Month + "_" + DateTime.Now.Year + "_" + DateTime.Now.TimeOfDay.Hours + "_" + DateTime.Now.TimeOfDay.Minutes;
            eway_json_filename += ".json";
            Clipboard.SetText(eway_json_filename);
            System.Diagnostics.Process.Start("https://ewaybillgst.gov.in/TripSheet/BulkConsolidated.aspx");
        }

        private void sigrossamt_TextChanged(object sender, EventArgs e)
        {
            if (Convert.ToDouble(sigrossamt.Text) >= 100000)
            {
                //pb_eway_bill_url.Visible = true;
                if (cb_si_trans_mode.SelectedIndex == -1)
                    cb_si_trans_mode.SelectedIndex = 0;
                lbl_si_trans_mode.Visible = true;
                lbl_si_kilometers.Visible = true;
                cb_si_trans_mode.Visible = true;
                tb_si_kilometers.Visible = true;
            }
            else
            {
                pb_eway_bill_url.Visible = false;
                lbl_si_trans_mode.Visible = false;
                lbl_si_kilometers.Visible = false;
                cb_si_trans_mode.Visible = false;
                tb_si_kilometers.Visible = false;
            }

        }

        private void accounthelpimage_Click(object sender, EventArgs e)
        {

        }

        private void tbnewPassword_KeyUp(object sender, KeyEventArgs e)
        {
            tbPassword.Enabled = false;
        }

        private void btn_update_purchase_price_in_batch_Click(object sender, EventArgs e)
        {

        }

        private void ibl_itemlist_CellClick(object sender, DataGridViewCellEventArgs e)
        {
            rowIndex = ibl_itemlist.CurrentCell.RowIndex;
            mtype = ibl_itemlist.Rows[rowIndex].Cells[1].Value.ToString();
            mitem_code = ibl_itemlist.Rows[rowIndex].Cells[2].Value.ToString();
            ConnectionWithAccess.query = "select [type], item_code, [title],price,igst_per,hsn_code,d_d,qty,d_n from " + ConnectionWithAccess.tablename[03] + " where [type] = '" + mtype + "' and item_code = '" + mitem_code + "' order by d_d desc";
            DataTable dtData1 = ConnectionCommand.fGetDataTable();
            if (dtData1 != null && dtData1.Rows.Count > 0)
            {
                if (dtData1.Rows[0][0] != null)
                {
                    dgv_item_purchase_details.AutoGenerateColumns = false;
                    dgv_item_purchase_details.DataSource = dtData1;
                    dgv_item_purchase_details.Visible = true;
                }
                else
                    dgv_item_purchase_details.Visible = false;
            }
            else
                dgv_item_purchase_details.Visible = false;
        }

        private void mix_reports_d_c_combo_box_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (subtabreports.SelectedIndex == 6)
            {
                mix_reports_dgv.Visible = false;
                //mix_reports_PDF.Visible = false;
                //ConnectionWithAccess.query = "select f18.[type], f18.item_code, f5.[title], f18.clo_stk, f18.cat, f18.d_d from " + ConnectionWithAccess.tablename[18] + " f18 inner join " + ConnectionWithAccess.tablename[5] + " f5 on f18.[type] = f5.[type] and f18.item_code = f5.item_code order by f18.d_d, f18.[title]";
                ConnectionWithAccess.query = "select f5.[type], f5.item_code, f5.[title], f5.clo_stk, f5.cat, f5.location, f5.pitch, f5.length_size, f5.breadth_size from " + ConnectionWithAccess.tablename[5] + " f5 where f5.location = '" + mix_reports_d_c_combo_box.Text + "'";
                excel_filename = "Item Box List_" + ConnectionWithAccess.mprd;
                ConnectionCommand.accountHelp_datatable_Seperate(mix_reports_dgv, "Item Box List", "[title] ASC");

                mix_reports_dgv.Visible = true;
                //mix_reports_dgv.DefaultCellStyle.Font = new System.Drawing.Font("Microsoft Sans Serif", 15);
                //mix_reports_dgv.Columns[0].HeaderText = "Sr.No";
                //mix_reports_dgv.Columns[1].HeaderText = "Item Name";
                //mix_reports_dgv.Columns[2].HeaderText = "Quantity";
                //mix_reports_dgv.Columns[3].HeaderText = "Rate";
                //mix_reports_dgv.Columns[4].HeaderText = "Amount";
                //mix_reports_dgv.Columns[5].HeaderText = "Date";
                mix_reports_dgv.Columns[0].Width = 60;
                mix_reports_dgv.Columns[1].Width = 120;
                mix_reports_dgv.Columns[2].Width = 360;
                mix_reports_dgv.Columns[3].Width = 150;
                mix_reports_dgv.Columns[4].Width = 80;
                mix_reports_dgv.Columns[5].Width = 150;
                mix_reports_dgv.Columns[6].Width = 80;
                mix_reports_dgv.Columns[7].Width = 80;
                mix_reports_dgv.Columns[8].Width = 80;
                mix_reports_dgv.Columns[3].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;
                mix_reports_dgv.Columns[6].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;
                mix_reports_dgv.Columns[7].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;
                mix_reports_dgv.Columns[8].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;
                mix_reports_dgv.Columns[3].DefaultCellStyle.Format = "N2";
                mix_reports_dgv.Columns[6].DefaultCellStyle.Format = "N2";
                mix_reports_dgv.Columns[7].DefaultCellStyle.Format = "N2";
                mix_reports_dgv.Columns[8].DefaultCellStyle.Format = "N2";
                //mix_reports_dgv.AllowUserToResizeColumns = false;
                mix_reports_dgv.Columns[0].Visible = false;
                mix_reports_dgv.Columns[1].Visible = false;
                mix_reports_dgv.Columns[5].Visible = false;
                //mix_reports_dgv.FirstDisplayedScrollingRowIndex = mix_reports_dgv.Rows.Count - 2;
                if (mix_reports_dgv.Rows.Count > 0)
                {
                    container_item_stock_list();
                }
            }
        }

        private void ledger_account_help_Enter(object sender, EventArgs e)
        {
            //rowIndex = ledger_account_help.CurrentCell.RowIndex;
            //rla_n.Text = ledger_account_help.Rows[rowIndex].Cells[2].Value.ToString();
            //rls_a.Text = ledger_account_help.Rows[rowIndex].Cells[3].Value.ToString();
            //tb_ledger_account_name.Text = ledger_account_help.Rows[rowIndex].Cells[0].Value.ToString();
            //tb_ledger_account_city.Text = ledger_account_help.Rows[rowIndex].Cells[1].Value.ToString();
            //lbl_ledger_master_account_name.Text = ledger_account_help.Rows[rowIndex].Cells[4].Value.ToString();
            //show_images();
            //ledger_account_help.Visible = false;
            //lbl_ledger_master_account_name.Visible = true;
            //btn_gen_ledg.Visible = true;
            //move_cursor_to_button_position("btn_gen_ledg");
            //btn_gen_ledg.Focus();
        }

        private void BtnExportMasterDetails_Click(object sender, EventArgs e)
        {
            //string TempFilename = ConnectionWithAccess.tablename[01];
            //ConnectionWithAccess.query = "select * from " + TempFilename;
            InsertServerRecordIntoLaptop(ConnectionWithAccess.tablename[01]);
            InsertServerRecordIntoLaptop(ConnectionWithAccess.tablename[04]);
            InsertServerRecordIntoLaptop(ConnectionWithAccess.tablename[05]);
            InsertServerRecordIntoLaptop(ConnectionWithAccess.tablename[06]);
        }

        private void InsertServerRecordIntoLaptop(string TempFilename)
        {
            string TxtFileName = ConnectionWithAccess.data_drive + "acc\\" + ConnectionWithAccess.mNIK + "\\" + TempFilename;
            if (chb_add_datetime_in_output.Checked)
                TxtFileName += "_" + DateTime.Now.Day + "_" + DateTime.Now.Month + "_" + DateTime.Now.Year + "_" + DateTime.Now.TimeOfDay.Hours + "_" + DateTime.Now.TimeOfDay.Minutes;
            TxtFileName += ".txt";
            string[] ServerTableColumnNames = null;
            string[] ServerTableColumnData = null;
            string[] ServerTableColumnValueType = null;
            //if (SelectQuery == "")
            //    return;
            ConnectionWithAccess.query = "select * from " + TempFilename;

            DataTable dtData1 = ConnectionCommand.fGetDataTable();
            if (dtData1.Rows.Count > 0)
            {
                int NoOfColumns = dtData1.Columns.Count;
                //NoOfColumns = 17;

                temp_word = "";
                string Temp_data = "";
                ServerTableColumnNames = new string[NoOfColumns];
                ServerTableColumnData = new string[NoOfColumns];
                ServerTableColumnValueType = new string[NoOfColumns];
                for (int i = 0; i < NoOfColumns; i++)
                {
                    temp_word += "[" + dtData1.Columns[i].ColumnName.ToString() + "],";
                    ServerTableColumnValueType[i] = dtData1.Columns[i].DataType + ",";
                    ServerTableColumnNames[i] = dtData1.Columns[i].ColumnName.ToString();
                }
                if (temp_word != "")
                {
                    temp_word = temp_word.Substring(0, temp_word.Length - 1);
                    StringBuilder sb = new StringBuilder();
                    for (int j = 0; j < dtData1.Rows.Count; j++)
                    {
                        Temp_data = "";
                        for (int i = 0; i < NoOfColumns; i++)
                        {
                            if (ServerTableColumnValueType[i] == "System.Int32," || ServerTableColumnValueType[i] == "System.Int64,")
                            {
                                //Temp_data += dtData1.Rows[j][ServerTableColumnNames[i]].ToString() + ",";
                                Int32.TryParse(dtData1.Rows[j][ServerTableColumnNames[i]].ToString(), out temp_int);
                                Temp_data += temp_int.ToString() + ",";
                            }
                            else if (ServerTableColumnValueType[i] == "System.DateTime,")
                            {
                                if (dtData1.Rows[j][ServerTableColumnNames[i]].ToString() == "" || dtData1.Rows[j][ServerTableColumnNames[i]] == null)
                                    Temp_data += "'1901-01-01 00:00:00',";
                                else
                                {
                                    Temp_data += "'" + Convert.ToDateTime(dtData1.Rows[j][ServerTableColumnNames[i]].ToString()) + "',";
                                    //    Temp_data += "'" + Convert.ToDateTime(dtData1.Rows[j][ServerTableColumnNames[i]].ToString()).ToString("yyyy-MM-dd") + " " + Convert.ToDateTime(dtData1.Rows[j][ServerTableColumnNames[i]].ToString()).ToString("HH:mm:ss") + "',";
                                    //    //Temp_data += "'" + Convert.ToDateTime(dtData1.Rows[j][ServerTableColumnNames[i]].ToString()).ToString("dd/mm/yyyy") + " " + Convert.ToDateTime(dtData1.Rows[j][ServerTableColumnNames[i]].ToString()).ToString("HH:mm:ss") + "',";

                                }
                            }
                            else if (ServerTableColumnValueType[i] == "System.Boolean,")
                            {
                                if (dtData1.Rows[j][ServerTableColumnNames[i]].ToString() == "True")
                                    Temp_data += "1,";
                                else
                                    Temp_data += "0,";
                            }
                            else
                            {
                                if (dtData1.Rows[j][ServerTableColumnNames[i]] != null)
                                {
                                    Temp_data += "'" + dtData1.Rows[j][ServerTableColumnNames[i]].ToString() + "',";
                                }
                                else
                                    Temp_data += "'" + dtData1.Rows[j][ServerTableColumnNames[i]].ToString() + "',";
                            }
                        }
                        Temp_data = Temp_data.Substring(0, Temp_data.Length - 1);
                        sb.AppendLine(Temp_data);
                        //ConnectionWithAccess.query = "Insert into " + TempFilename + "(" + temp_word + ") " +
                        //"values (" + Temp_data + ") ";
                        //ConnectionCommand.fUpdateInsertDeleteData(false, true);
                    }
                    TextWriter writer = new StreamWriter(TxtFileName);
                    writer.WriteLine(sb);
                    writer.Flush();
                    writer.Close();
                }
            }
        }

    }
}